{
    "tree": {
        "Java-master": {
            "src": {
                "main": {
                    "java": {
                        "com": {
                            "thealgorithms": {
                                "audiofilters": {
                                    "IIRFilter.java": {
                                        "name": "IIRFilter",
                                        "class": {
                                            "id": "64515536-c509-46a7-b0df-b96c869cb798",
                                            "functions": {
                                                "process": {
                                                    "id": "IIRFilter#process"
                                                },
                                                "setCoeffs": {
                                                    "id": "IIRFilter#setCoeffs"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/audiofilters/IIRFilter.java",
                                            "name": "IIRFilter"
                                        }
                                    }
                                },
                                "backtracking": {
                                    "AllPathsFromSourceToTarget.java": {
                                        "name": "AllPathsFromSourceToTarget",
                                        "class": {
                                            "id": "12dfa132-dca3-449c-b802-aa7ac8cc3a77",
                                            "functions": {
                                                "allPathsFromSourceToTarget": {
                                                    "id": "AllPathsFromSourceToTarget#allPathsFromSourceToTarget"
                                                },
                                                "storeAllPaths": {
                                                    "id": "AllPathsFromSourceToTarget#storeAllPaths"
                                                },
                                                "initAdjList": {
                                                    "id": "AllPathsFromSourceToTarget#initAdjList"
                                                },
                                                "addEdge": {
                                                    "id": "AllPathsFromSourceToTarget#addEdge"
                                                },
                                                "storeAllPathsUtil": {
                                                    "id": "AllPathsFromSourceToTarget#storeAllPathsUtil"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/backtracking/AllPathsFromSourceToTarget.java",
                                            "name": "AllPathsFromSourceToTarget"
                                        }
                                    },
                                    "ArrayCombination.java": {
                                        "name": "ArrayCombination",
                                        "class": {
                                            "id": "241ab451-2fe2-4112-aeab-adfd4340cfaa",
                                            "functions": {
                                                "combination": {
                                                    "id": "ArrayCombination#combination"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/backtracking/ArrayCombination.java",
                                            "name": "ArrayCombination"
                                        }
                                    },
                                    "Combination.java": {
                                        "name": "Combination",
                                        "class": {
                                            "id": "8664ce1b-8e6e-45e5-9123-cebedd715d50",
                                            "functions": {
                                                "backtracking": {
                                                    "id": "Combination#backtracking"
                                                },
                                                "combination": {
                                                    "id": "Combination#combination"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/backtracking/Combination.java",
                                            "name": "Combination"
                                        }
                                    },
                                    "FloodFill.java": {
                                        "name": "FloodFill",
                                        "class": {
                                            "id": "a08db148-547c-4160-bddf-fbd3d08708ad",
                                            "functions": {
                                                "putPixel": {
                                                    "id": "FloodFill#putPixel"
                                                },
                                                "floodFill": {
                                                    "id": "FloodFill#floodFill"
                                                },
                                                "getPixel": {
                                                    "id": "FloodFill#getPixel"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/backtracking/FloodFill.java",
                                            "name": "FloodFill"
                                        }
                                    },
                                    "KnightsTour.java": {
                                        "name": "KnightsTour",
                                        "class": {
                                            "id": "59283206-2994-42b4-abdc-85f9ad421ed7",
                                            "functions": {
                                                "printResult": {
                                                    "id": "KnightsTour#printResult"
                                                },
                                                "neighbors": {
                                                    "id": "KnightsTour#neighbors"
                                                },
                                                "solve": {
                                                    "id": "KnightsTour#solve"
                                                },
                                                "countNeighbors": {
                                                    "id": "KnightsTour#countNeighbors"
                                                },
                                                "main": {
                                                    "id": "KnightsTour#main"
                                                },
                                                "orphanDetected": {
                                                    "id": "KnightsTour#orphanDetected"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/backtracking/KnightsTour.java",
                                            "name": "KnightsTour"
                                        }
                                    },
                                    "MazeRecursion.java": {
                                        "name": "MazeRecursion",
                                        "class": {
                                            "id": "0c548770-c103-4164-bc6e-068e754565fe",
                                            "functions": {
                                                "setWay2": {
                                                    "id": "MazeRecursion#setWay2"
                                                },
                                                "mazeRecursion": {
                                                    "id": "MazeRecursion#mazeRecursion"
                                                },
                                                "setWay": {
                                                    "id": "MazeRecursion#setWay"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/backtracking/MazeRecursion.java",
                                            "name": "MazeRecursion"
                                        }
                                    },
                                    "NQueens.java": {
                                        "name": "NQueens",
                                        "class": {
                                            "id": "f2fa265d-3648-4a99-b99c-0a48ecb0a80e",
                                            "functions": {
                                                "isPlacedCorrectly": {
                                                    "id": "NQueens#isPlacedCorrectly"
                                                },
                                                "getSolution": {
                                                    "id": "NQueens#getSolution"
                                                },
                                                "main": {
                                                    "id": "NQueens#main"
                                                },
                                                "placeQueens": {
                                                    "id": "NQueens#placeQueens"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/backtracking/NQueens.java",
                                            "name": "NQueens"
                                        }
                                    },
                                    "Permutation.java": {
                                        "name": "Permutation",
                                        "class": {
                                            "id": "13e02380-478b-4b65-944e-855ce31a07b2",
                                            "functions": {
                                                "swap": {
                                                    "id": "Permutation#swap"
                                                },
                                                "backtracking": {
                                                    "id": "Permutation#backtracking"
                                                },
                                                "permutation": {
                                                    "id": "Permutation#permutation"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/backtracking/Permutation.java",
                                            "name": "Permutation"
                                        }
                                    },
                                    "PowerSum.java": {
                                        "name": "PowerSum",
                                        "class": {
                                            "id": "85347df7-8059-4e2f-9d58-6bec71ffcf54",
                                            "functions": {
                                                "powSum": {
                                                    "id": "PowerSum#powSum"
                                                },
                                                "Sum": {
                                                    "id": "PowerSum#Sum"
                                                },
                                                "power": {
                                                    "id": "PowerSum#power"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/backtracking/PowerSum.java",
                                            "name": "PowerSum"
                                        }
                                    }
                                },
                                "ciphers": {
                                    "AESEncryption.java": {
                                        "name": "AESEncryption",
                                        "class": {
                                            "id": "c847c6e4-0ffb-452e-b5cc-aedf3c158d8d",
                                            "functions": {
                                                "bytesToHex": {
                                                    "id": "AESEncryption#bytesToHex"
                                                },
                                                "getSecretEncryptionKey": {
                                                    "id": "AESEncryption#getSecretEncryptionKey"
                                                },
                                                "encryptText": {
                                                    "id": "AESEncryption#encryptText"
                                                },
                                                "main": {
                                                    "id": "AESEncryption#main"
                                                },
                                                "decryptText": {
                                                    "id": "AESEncryption#decryptText"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/AESEncryption.java",
                                            "name": "AESEncryption"
                                        }
                                    },
                                    "AffineCipher.java": {
                                        "name": "AffineCipher",
                                        "class": {
                                            "id": "17a4ce73-12c7-4830-9056-e14ca9688d60",
                                            "functions": {
                                                "decryptCipher": {
                                                    "id": "AffineCipher#decryptCipher"
                                                },
                                                "encryptMessage": {
                                                    "id": "AffineCipher#encryptMessage"
                                                },
                                                "main": {
                                                    "id": "AffineCipher#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/AffineCipher.java",
                                            "name": "AffineCipher"
                                        }
                                    },
                                    "Blowfish.java": {
                                        "name": "Blowfish",
                                        "class": {
                                            "id": "b3468707-1dc6-4b53-9884-df552be342e3",
                                            "functions": {
                                                "binToHex": {
                                                    "id": "Blowfish#binToHex"
                                                },
                                                "addBin": {
                                                    "id": "Blowfish#addBin"
                                                },
                                                "round": {
                                                    "id": "Blowfish#round"
                                                },
                                                "f": {
                                                    "id": "Blowfish#f"
                                                },
                                                "encrypt": {
                                                    "id": "Blowfish#encrypt"
                                                },
                                                "hexToBin": {
                                                    "id": "Blowfish#hexToBin"
                                                },
                                                "xor": {
                                                    "id": "Blowfish#xor"
                                                },
                                                "decrypt": {
                                                    "id": "Blowfish#decrypt"
                                                },
                                                "keyGenerate": {
                                                    "id": "Blowfish#keyGenerate"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/Blowfish.java",
                                            "name": "Blowfish"
                                        }
                                    },
                                    "Caesar.java": {
                                        "name": "Caesar",
                                        "class": {
                                            "id": "b7c6de27-241a-45cb-804d-37a4d8638c90",
                                            "functions": {
                                                "encode": {
                                                    "id": "Caesar#encode"
                                                },
                                                "isCapitalLatinLetter": {
                                                    "id": "Caesar#isCapitalLatinLetter"
                                                },
                                                "isSmallLatinLetter": {
                                                    "id": "Caesar#isSmallLatinLetter"
                                                },
                                                "bruteforce": {
                                                    "id": "Caesar#bruteforce"
                                                },
                                                "decode": {
                                                    "id": "Caesar#decode"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/Caesar.java",
                                            "name": "Caesar"
                                        }
                                    },
                                    "ColumnarTranspositionCipher.java": {
                                        "name": "ColumnarTranspositionCipher",
                                        "class": {
                                            "id": "54d8fb2e-48f1-4ed4-b675-7367e3a81862",
                                            "functions": {
                                                "switchColumns": {
                                                    "id": "ColumnarTranspositionCipher#switchColumns"
                                                },
                                                "abecedariumBuilder": {
                                                    "id": "ColumnarTranspositionCipher#abecedariumBuilder"
                                                },
                                                "encrpyter": {
                                                    "id": "ColumnarTranspositionCipher#encrpyter"
                                                },
                                                "sortTable": {
                                                    "id": "ColumnarTranspositionCipher#sortTable"
                                                },
                                                "showTable": {
                                                    "id": "ColumnarTranspositionCipher#showTable"
                                                },
                                                "getColumn": {
                                                    "id": "ColumnarTranspositionCipher#getColumn"
                                                },
                                                "findElements": {
                                                    "id": "ColumnarTranspositionCipher#findElements"
                                                },
                                                "main": {
                                                    "id": "ColumnarTranspositionCipher#main"
                                                },
                                                "decrypter": {
                                                    "id": "ColumnarTranspositionCipher#decrypter"
                                                },
                                                "tableBuilder": {
                                                    "id": "ColumnarTranspositionCipher#tableBuilder"
                                                },
                                                "numberOfRows": {
                                                    "id": "ColumnarTranspositionCipher#numberOfRows"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/ColumnarTranspositionCipher.java",
                                            "name": "ColumnarTranspositionCipher"
                                        }
                                    },
                                    "HillCipher.java": {
                                        "name": "HillCipher",
                                        "class": {
                                            "id": "1f6ced44-e86f-4e4f-9a3d-08882be3724c",
                                            "functions": {
                                                "hillCipher": {
                                                    "id": "HillCipher#hillCipher"
                                                },
                                                "encrypt": {
                                                    "id": "HillCipher#encrypt"
                                                },
                                                "validateDeterminant": {
                                                    "id": "HillCipher#validateDeterminant"
                                                },
                                                "main": {
                                                    "id": "HillCipher#main"
                                                },
                                                "decrypt": {
                                                    "id": "HillCipher#decrypt"
                                                },
                                                "determinant": {
                                                    "id": "HillCipher#determinant"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/HillCipher.java",
                                            "name": "HillCipher"
                                        }
                                    },
                                    "Polybius.java": {
                                        "name": "Polybius",
                                        "class": {
                                            "id": "3d5b343d-7dbb-489a-a21e-d51e4eafccf7",
                                            "functions": {
                                                "encrypt": {
                                                    "id": "Polybius#encrypt"
                                                },
                                                "findLocationByCharacter": {
                                                    "id": "Polybius#findLocationByCharacter"
                                                },
                                                "decrypt": {
                                                    "id": "Polybius#decrypt"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/Polybius.java",
                                            "name": "Polybius"
                                        }
                                    },
                                    "ProductCipher.java": {
                                        "name": "ProductCipher",
                                        "class": {
                                            "id": "71c82600-4d48-463c-ba9d-5df2c3a66951",
                                            "functions": {
                                                "main": {
                                                    "id": "ProductCipher#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/ProductCipher.java",
                                            "name": "ProductCipher"
                                        }
                                    },
                                    "RSA.java": {
                                        "name": "RSA",
                                        "class": {
                                            "id": "729befe0-cbe0-4a26-8ab0-cc69e1a85274",
                                            "functions": {
                                                "generateKeys": {
                                                    "id": "RSA#generateKeys"
                                                },
                                                "encrypt": {
                                                    "id": "RSA#encrypt"
                                                },
                                                "decrypt": {
                                                    "id": "RSA#decrypt"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/RSA.java",
                                            "name": "RSA"
                                        }
                                    },
                                    "SimpleSubCipher.java": {
                                        "name": "SimpleSubCipher",
                                        "class": {
                                            "id": "05310003-1842-49f6-8a1d-0bc6e34977c9",
                                            "functions": {
                                                "encode": {
                                                    "id": "SimpleSubCipher#encode"
                                                },
                                                "decode": {
                                                    "id": "SimpleSubCipher#decode"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/SimpleSubCipher.java",
                                            "name": "SimpleSubCipher"
                                        }
                                    },
                                    "SimpleSubstitutionCipher.java": {
                                        "name": "SimpleSubstitutionCipher",
                                        "class": {
                                            "id": "d3ca32f4-149c-49ab-9d6b-2bf9228fe663",
                                            "functions": {
                                                "encode": {
                                                    "id": "SimpleSubstitutionCipher#encode"
                                                },
                                                "decode": {
                                                    "id": "SimpleSubstitutionCipher#decode"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/SimpleSubstitutionCipher.java",
                                            "name": "SimpleSubstitutionCipher"
                                        }
                                    },
                                    "Vigenere.java": {
                                        "name": "Vigenere",
                                        "class": {
                                            "id": "2f530ce4-bafd-4309-a570-08377aa4c080",
                                            "functions": {
                                                "encrypt": {
                                                    "id": "Vigenere#encrypt"
                                                },
                                                "decrypt": {
                                                    "id": "Vigenere#decrypt"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/Vigenere.java",
                                            "name": "Vigenere"
                                        }
                                    },
                                    "a5": {
                                        "A5Cipher.java": {
                                            "name": "A5Cipher",
                                            "class": {
                                                "id": "5f151b1e-99e5-4e75-b148-b451952eaff9",
                                                "functions": {
                                                    "resetCounter": {
                                                        "id": "A5Cipher#resetCounter"
                                                    },
                                                    "encrypt": {
                                                        "id": "A5Cipher#encrypt"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/a5/A5Cipher.java",
                                                "name": "A5Cipher"
                                            }
                                        },
                                        "A5KeyStreamGenerator.java": {
                                            "name": "A5KeyStreamGenerator",
                                            "class": {
                                                "id": "586eb314-1be6-4e90-9aad-6c93f1bedffb",
                                                "functions": {
                                                    "reInitialize": {
                                                        "id": "A5KeyStreamGenerator#reInitialize"
                                                    },
                                                    "reInitializeRegisters": {
                                                        "id": "A5KeyStreamGenerator#reInitializeRegisters"
                                                    },
                                                    "incrementFrameCounter": {
                                                        "id": "A5KeyStreamGenerator#incrementFrameCounter"
                                                    },
                                                    "initialize": {
                                                        "id": "A5KeyStreamGenerator#initialize"
                                                    },
                                                    "getNextKeyStream": {
                                                        "id": "A5KeyStreamGenerator#getNextKeyStream"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/a5/A5KeyStreamGenerator.java",
                                                "name": "A5KeyStreamGenerator"
                                            }
                                        },
                                        "BaseLFSR.java": {
                                            "name": "BaseLFSR",
                                            "class": {
                                                "id": "f4e49131-8719-4fc8-8295-6057ec93b7d4",
                                                "functions": {
                                                    "initialize": {
                                                        "id": "BaseLFSR#initialize"
                                                    },
                                                    "clock": {
                                                        "id": "BaseLFSR#clock"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/a5/BaseLFSR.java",
                                                "name": "BaseLFSR"
                                            }
                                        },
                                        "CompositeLFSR.java": {
                                            "name": "CompositeLFSR",
                                            "class": {
                                                "id": "5cb43fd8-5549-416e-8427-3ec32c2f5013",
                                                "functions": {
                                                    "getMajorityBit": {
                                                        "id": "CompositeLFSR#getMajorityBit"
                                                    },
                                                    "clock": {
                                                        "id": "CompositeLFSR#clock"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/a5/CompositeLFSR.java",
                                                "name": "CompositeLFSR"
                                            }
                                        },
                                        "LFSR.java": {
                                            "name": "LFSR",
                                            "class": {
                                                "id": "d508ea06-53a3-4d4d-87cd-f56e2f3c9230",
                                                "functions": {
                                                    "xorTappingBits": {
                                                        "id": "LFSR#xorTappingBits"
                                                    },
                                                    "pushBit": {
                                                        "id": "LFSR#pushBit"
                                                    },
                                                    "get": {
                                                        "id": "LFSR#get"
                                                    },
                                                    "toString": {
                                                        "id": "LFSR#toString"
                                                    },
                                                    "initialize": {
                                                        "id": "LFSR#initialize"
                                                    },
                                                    "clock": {
                                                        "id": "LFSR#clock"
                                                    },
                                                    "getClockBit": {
                                                        "id": "LFSR#getClockBit"
                                                    },
                                                    "rightShift": {
                                                        "id": "LFSR#rightShift"
                                                    },
                                                    "getLastBit": {
                                                        "id": "LFSR#getLastBit"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/a5/LFSR.java",
                                                "name": "LFSR"
                                            }
                                        },
                                        "Utils.java": {
                                            "name": "Utils",
                                            "class": {
                                                "id": "8deb8df3-2145-42f9-8a0b-32d3828735e9",
                                                "functions": {
                                                    "increment": {
                                                        "id": "Utils#increment"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/ciphers/a5/Utils.java",
                                                "name": "Utils"
                                            }
                                        }
                                    }
                                },
                                "conversions": {
                                    "AnyBaseToAnyBase.java": {
                                        "name": "AnyBaseToAnyBase",
                                        "class": {
                                            "id": "04421223-4236-4a5e-932c-30e308104609",
                                            "functions": {
                                                "main": {
                                                    "id": "AnyBaseToAnyBase#main"
                                                },
                                                "base2base": {
                                                    "id": "AnyBaseToAnyBase#base2base"
                                                },
                                                "validForBase": {
                                                    "id": "AnyBaseToAnyBase#validForBase"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/AnyBaseToAnyBase.java",
                                            "name": "AnyBaseToAnyBase"
                                        }
                                    },
                                    "AnyBaseToDecimal.java": {
                                        "name": "AnyBaseToDecimal",
                                        "class": {
                                            "id": "71bf68e7-5b35-471d-b777-12c96fdeb37e",
                                            "functions": {
                                                "valOfChar": {
                                                    "id": "AnyBaseToDecimal#valOfChar"
                                                },
                                                "main": {
                                                    "id": "AnyBaseToDecimal#main"
                                                },
                                                "convertToDecimal": {
                                                    "id": "AnyBaseToDecimal#convertToDecimal"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/AnyBaseToDecimal.java",
                                            "name": "AnyBaseToDecimal"
                                        }
                                    },
                                    "AnytoAny.java": {
                                        "name": "AnytoAny",
                                        "class": {
                                            "id": "4ffeaa5a-2dc3-47e2-a811-18039cb5c653",
                                            "functions": {
                                                "main": {
                                                    "id": "AnytoAny#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/AnytoAny.java",
                                            "name": "AnytoAny"
                                        }
                                    },
                                    "BinaryToDecimal.java": {
                                        "name": "BinaryToDecimal",
                                        "class": {
                                            "id": "e02997a1-ba20-4a8f-ac8d-ba07ff3da0d6",
                                            "functions": {
                                                "binaryToDecimal": {
                                                    "id": "BinaryToDecimal#binaryToDecimal"
                                                },
                                                "main": {
                                                    "id": "BinaryToDecimal#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/BinaryToDecimal.java",
                                            "name": "BinaryToDecimal"
                                        }
                                    },
                                    "BinaryToHexadecimal.java": {
                                        "name": "BinaryToHexadecimal",
                                        "class": {
                                            "id": "ba199434-a6da-459a-a507-bf2f277c6a6e",
                                            "functions": {
                                                "binToHex": {
                                                    "id": "BinaryToHexadecimal#binToHex"
                                                },
                                                "main": {
                                                    "id": "BinaryToHexadecimal#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/BinaryToHexadecimal.java",
                                            "name": "BinaryToHexadecimal"
                                        }
                                    },
                                    "BinaryToOctal.java": {
                                        "name": "BinaryToOctal",
                                        "class": {
                                            "id": "d3419978-534d-4cda-ae45-7d1f66cda313",
                                            "functions": {
                                                "convertBinaryToOctal": {
                                                    "id": "BinaryToOctal#convertBinaryToOctal"
                                                },
                                                "main": {
                                                    "id": "BinaryToOctal#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/BinaryToOctal.java",
                                            "name": "BinaryToOctal"
                                        }
                                    },
                                    "DecimalToAnyBase.java": {
                                        "name": "DecimalToAnyBase",
                                        "class": {
                                            "id": "eeadacbf-9033-4c53-b2a5-a3d11420728c",
                                            "functions": {
                                                "convertToAnyBase": {
                                                    "id": "DecimalToAnyBase#convertToAnyBase"
                                                },
                                                "main": {
                                                    "id": "DecimalToAnyBase#main"
                                                },
                                                "reVal": {
                                                    "id": "DecimalToAnyBase#reVal"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/DecimalToAnyBase.java",
                                            "name": "DecimalToAnyBase"
                                        }
                                    },
                                    "DecimalToBinary.java": {
                                        "name": "DecimalToBinary",
                                        "class": {
                                            "id": "12ce4711-32b9-4b13-b37d-46739cf948d0",
                                            "functions": {
                                                "bitwiseConversion": {
                                                    "id": "DecimalToBinary#bitwiseConversion"
                                                },
                                                "main": {
                                                    "id": "DecimalToBinary#main"
                                                },
                                                "conventionalConversion": {
                                                    "id": "DecimalToBinary#conventionalConversion"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/DecimalToBinary.java",
                                            "name": "DecimalToBinary"
                                        }
                                    },
                                    "DecimalToHexaDecimal.java": {
                                        "name": "DecimalToHexaDecimal",
                                        "class": {
                                            "id": "3796851b-1c0b-48d8-8993-e1d03762ded6",
                                            "functions": {
                                                "decToHex": {
                                                    "id": "DecimalToHexaDecimal#decToHex"
                                                },
                                                "main": {
                                                    "id": "DecimalToHexaDecimal#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/DecimalToHexaDecimal.java",
                                            "name": "DecimalToHexaDecimal"
                                        }
                                    },
                                    "DecimalToOctal.java": {
                                        "name": "DecimalToOctal",
                                        "class": {
                                            "id": "343aaf92-0d4b-4679-bc06-d880bf307226",
                                            "functions": {
                                                "main": {
                                                    "id": "DecimalToOctal#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/DecimalToOctal.java",
                                            "name": "DecimalToOctal"
                                        }
                                    },
                                    "HexToOct.java": {
                                        "name": "HexToOct",
                                        "class": {
                                            "id": "692e21b0-9a63-49d1-bdbc-b00101fe2383",
                                            "functions": {
                                                "decimal2octal": {
                                                    "id": "HexToOct#decimal2octal"
                                                },
                                                "hex2decimal": {
                                                    "id": "HexToOct#hex2decimal"
                                                },
                                                "main": {
                                                    "id": "HexToOct#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/HexToOct.java",
                                            "name": "HexToOct"
                                        }
                                    },
                                    "HexaDecimalToBinary.java": {
                                        "name": "HexaDecimalToBinary",
                                        "class": {
                                            "id": "a17ae1ef-3656-4a6a-8ad4-6a48010904fa",
                                            "functions": {
                                                "main": {
                                                    "id": "HexaDecimalToBinary#main"
                                                },
                                                "convert": {
                                                    "id": "HexaDecimalToBinary#convert"
                                                },
                                                "completeDigits": {
                                                    "id": "HexaDecimalToBinary#completeDigits"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/HexaDecimalToBinary.java",
                                            "name": "HexaDecimalToBinary"
                                        }
                                    },
                                    "HexaDecimalToDecimal.java": {
                                        "name": "HexaDecimalToDecimal",
                                        "class": {
                                            "id": "cc44d871-7bb2-4442-9722-2e57c17046d4",
                                            "functions": {
                                                "main": {
                                                    "id": "HexaDecimalToDecimal#main"
                                                },
                                                "getHexaToDec": {
                                                    "id": "HexaDecimalToDecimal#getHexaToDec"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/HexaDecimalToDecimal.java",
                                            "name": "HexaDecimalToDecimal"
                                        }
                                    },
                                    "IntegerToRoman.java": {
                                        "name": "IntegerToRoman",
                                        "class": {
                                            "id": "79540640-65ee-42a8-aa02-0409e43f5d6f",
                                            "functions": {
                                                "integerToRoman": {
                                                    "id": "IntegerToRoman#integerToRoman"
                                                },
                                                "main": {
                                                    "id": "IntegerToRoman#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/IntegerToRoman.java",
                                            "name": "IntegerToRoman"
                                        }
                                    },
                                    "OctalToDecimal.java": {
                                        "name": "OctalToDecimal",
                                        "class": {
                                            "id": "f7e5b904-3df6-49e0-ab3c-855429462cff",
                                            "functions": {
                                                "convertOctalToDecimal": {
                                                    "id": "OctalToDecimal#convertOctalToDecimal"
                                                },
                                                "main": {
                                                    "id": "OctalToDecimal#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/OctalToDecimal.java",
                                            "name": "OctalToDecimal"
                                        }
                                    },
                                    "OctalToHexadecimal.java": {
                                        "name": "OctalToHexadecimal",
                                        "class": {
                                            "id": "20861c79-513d-40b5-9c11-0db83b549683",
                                            "functions": {
                                                "octToDec": {
                                                    "id": "OctalToHexadecimal#octToDec"
                                                },
                                                "main": {
                                                    "id": "OctalToHexadecimal#main"
                                                },
                                                "decimalToHex": {
                                                    "id": "OctalToHexadecimal#decimalToHex"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/OctalToHexadecimal.java",
                                            "name": "OctalToHexadecimal"
                                        }
                                    },
                                    "RgbHsvConversion.java": {
                                        "name": "RgbHsvConversion",
                                        "class": {
                                            "id": "20654804-73cf-45e4-b601-01bffc25cc13",
                                            "functions": {
                                                "hsvToRgb": {
                                                    "id": "RgbHsvConversion#hsvToRgb"
                                                },
                                                "rgbToHsv": {
                                                    "id": "RgbHsvConversion#rgbToHsv"
                                                },
                                                "approximatelyEqualHsv": {
                                                    "id": "RgbHsvConversion#approximatelyEqualHsv"
                                                },
                                                "convertToInt": {
                                                    "id": "RgbHsvConversion#convertToInt"
                                                },
                                                "main": {
                                                    "id": "RgbHsvConversion#main"
                                                },
                                                "getRgbBySection": {
                                                    "id": "RgbHsvConversion#getRgbBySection"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/RgbHsvConversion.java",
                                            "name": "RgbHsvConversion"
                                        }
                                    },
                                    "RomanToInteger.java": {
                                        "name": "RomanToInteger",
                                        "class": {
                                            "id": "171fcb93-a7a4-4da0-9b3c-8712a61ea87a",
                                            "functions": {
                                                "romanToInt": {
                                                    "id": "RomanToInteger#romanToInt"
                                                },
                                                "main": {
                                                    "id": "RomanToInteger#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/RomanToInteger.java",
                                            "name": "RomanToInteger"
                                        }
                                    },
                                    "TurkishToLatinConversion.java": {
                                        "name": "TurkishToLatinConversion",
                                        "class": {
                                            "id": "eacd8a94-e8ae-4bb7-bca3-d4077ffd9a70",
                                            "functions": {
                                                "convertTurkishToLatin": {
                                                    "id": "TurkishToLatinConversion#convertTurkishToLatin"
                                                },
                                                "main": {
                                                    "id": "TurkishToLatinConversion#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/conversions/TurkishToLatinConversion.java",
                                            "name": "TurkishToLatinConversion"
                                        }
                                    }
                                },
                                "datastructures": {
                                    "bags": {
                                        "Bag.java": {
                                            "name": "Bag",
                                            "class": {
                                                "id": "d060ed8c-e810-4d22-8b15-bd82ed5800dd",
                                                "functions": {
                                                    "add": {
                                                        "id": "Bag#add"
                                                    },
                                                    "contains": {
                                                        "id": "Bag#contains"
                                                    },
                                                    "iterator": {
                                                        "id": "Bag#iterator"
                                                    },
                                                    "size": {
                                                        "id": "Bag#size"
                                                    },
                                                    "isEmpty": {
                                                        "id": "Bag#isEmpty"
                                                    },
                                                    "main": {
                                                        "id": "Bag#main"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/bags/Bag.java",
                                                "name": "Bag"
                                            }
                                        }
                                    },
                                    "bloomfilter": {
                                        "BloomFilter.java": {
                                            "name": "BloomFilter",
                                            "class": {
                                                "id": "38401fe8-011d-4f4e-9f15-87fb307ef109",
                                                "functions": {
                                                    "contains": {
                                                        "id": "BloomFilter#contains"
                                                    },
                                                    "insertHash": {
                                                        "id": "BloomFilter#insertHash"
                                                    },
                                                    "insert": {
                                                        "id": "BloomFilter#insert"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/bloomfilter/BloomFilter.java",
                                                "name": "BloomFilter"
                                            }
                                        }
                                    },
                                    "buffers": {
                                        "CircularBuffer.java": {
                                            "name": "CircularBuffer",
                                            "class": {
                                                "id": "ba39d5fa-abbd-44ef-9424-2c04c06ffc6b",
                                                "functions": {
                                                    "get": {
                                                        "id": "CircularBuffer#get"
                                                    },
                                                    "isEmpty": {
                                                        "id": "CircularBuffer#isEmpty"
                                                    },
                                                    "isFull": {
                                                        "id": "CircularBuffer#isFull"
                                                    },
                                                    "put": {
                                                        "id": "CircularBuffer#put"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/buffers/CircularBuffer.java",
                                                "name": "CircularBuffer"
                                            }
                                        }
                                    },
                                    "caches": {
                                        "LFUCache.java": {
                                            "name": "LFUCache",
                                            "class": {
                                                "id": "fed12829-3228-4893-a01f-60ef95581ee5",
                                                "functions": {
                                                    "get": {
                                                        "id": "LFUCache#get"
                                                    },
                                                    "addNodeWithUpdatedFrequency": {
                                                        "id": "LFUCache#addNodeWithUpdatedFrequency"
                                                    },
                                                    "put": {
                                                        "id": "LFUCache#put"
                                                    },
                                                    "removeNode": {
                                                        "id": "LFUCache#removeNode"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/caches/LFUCache.java",
                                                "name": "LFUCache"
                                            }
                                        },
                                        "LRUCache.java": {
                                            "name": "LRUCache",
                                            "class": {
                                                "id": "4cac8906-f80e-40ff-9709-b5ab8beb18ab",
                                                "functions": {
                                                    "checkCapacity": {
                                                        "id": "LRUCache#checkCapacity"
                                                    },
                                                    "addNewEntry": {
                                                        "id": "LRUCache#addNewEntry"
                                                    },
                                                    "get": {
                                                        "id": "LRUCache#get"
                                                    },
                                                    "setCapacity": {
                                                        "id": "LRUCache#setCapacity"
                                                    },
                                                    "moveNodeToLast": {
                                                        "id": "LRUCache#moveNodeToLast"
                                                    },
                                                    "put": {
                                                        "id": "LRUCache#put"
                                                    },
                                                    "evict": {
                                                        "id": "LRUCache#evict"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/caches/LRUCache.java",
                                                "name": "LRUCache"
                                            }
                                        },
                                        "MRUCache.java": {
                                            "name": "MRUCache",
                                            "class": {
                                                "id": "4c5c3ced-d17b-40ae-81b4-b4ec86df0af0",
                                                "functions": {
                                                    "checkCapacity": {
                                                        "id": "MRUCache#checkCapacity"
                                                    },
                                                    "moveEntryToLast": {
                                                        "id": "MRUCache#moveEntryToLast"
                                                    },
                                                    "addNewEntry": {
                                                        "id": "MRUCache#addNewEntry"
                                                    },
                                                    "get": {
                                                        "id": "MRUCache#get"
                                                    },
                                                    "setCapacity": {
                                                        "id": "MRUCache#setCapacity"
                                                    },
                                                    "put": {
                                                        "id": "MRUCache#put"
                                                    },
                                                    "evict": {
                                                        "id": "MRUCache#evict"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/caches/MRUCache.java",
                                                "name": "MRUCache"
                                            }
                                        }
                                    },
                                    "disjointsets": {
                                        "DisjointSets.java": {
                                            "name": "DisjointSets",
                                            "class": {
                                                "id": "1ee43c25-f9bc-421c-9ffb-430137fc29b6",
                                                "functions": {
                                                    "FindSet": {
                                                        "id": "DisjointSets#FindSet"
                                                    },
                                                    "MakeSet": {
                                                        "id": "DisjointSets#MakeSet"
                                                    },
                                                    "UnionSet": {
                                                        "id": "DisjointSets#UnionSet"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/disjointsets/DisjointSets.java",
                                                "name": "DisjointSets"
                                            }
                                        },
                                        "Node.java": {
                                            "name": "Node",
                                            "class": {
                                                "id": "7e1585df-537e-463b-89d7-87eb9343f963",
                                                "functions": {},
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/disjointsets/Node.java",
                                                "name": "Node"
                                            }
                                        }
                                    },
                                    "dynamicarray": {
                                        "DynamicArray.java": {
                                            "name": "DynamicArray",
                                            "class": {
                                                "id": "36e76c38-fb3d-48ac-91ef-38c1baee304b",
                                                "functions": {
                                                    "add": {
                                                        "id": "DynamicArray#add"
                                                    },
                                                    "newCapacity": {
                                                        "id": "DynamicArray#newCapacity"
                                                    },
                                                    "isEmpty": {
                                                        "id": "DynamicArray#isEmpty"
                                                    },
                                                    "main": {
                                                        "id": "DynamicArray#main"
                                                    },
                                                    "put": {
                                                        "id": "DynamicArray#put"
                                                    },
                                                    "remove": {
                                                        "id": "DynamicArray#remove"
                                                    },
                                                    "getSize": {
                                                        "id": "DynamicArray#getSize"
                                                    },
                                                    "iterator": {
                                                        "id": "DynamicArray#iterator"
                                                    },
                                                    "stream": {
                                                        "id": "DynamicArray#stream"
                                                    },
                                                    "getElement": {
                                                        "id": "DynamicArray#getElement"
                                                    },
                                                    "get": {
                                                        "id": "DynamicArray#get"
                                                    },
                                                    "toString": {
                                                        "id": "DynamicArray#toString"
                                                    },
                                                    "fastRemove": {
                                                        "id": "DynamicArray#fastRemove"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/dynamicarray/DynamicArray.java",
                                                "name": "DynamicArray"
                                            }
                                        }
                                    },
                                    "graphs": {
                                        "A_Star.java": {
                                            "name": "A_Star",
                                            "class": {
                                                "id": "cd2b75b8-c6a2-4ab9-8a56-65e274755c15",
                                                "functions": {
                                                    "main": {
                                                        "id": "A_Star#main"
                                                    },
                                                    "initializeGraph": {
                                                        "id": "A_Star#initializeGraph"
                                                    },
                                                    "aStar": {
                                                        "id": "A_Star#aStar"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/A_Star.java",
                                                "name": "A_Star"
                                            }
                                        },
                                        "BellmanFord.java": {
                                            "name": "BellmanFord",
                                            "class": {
                                                "id": "a9aa0454-defe-47f7-8470-40378286df07",
                                                "functions": {
                                                    "printPath": {
                                                        "id": "BellmanFord#printPath"
                                                    },
                                                    "getEdgeArray": {
                                                        "id": "BellmanFord#getEdgeArray"
                                                    },
                                                    "go": {
                                                        "id": "BellmanFord#go"
                                                    },
                                                    "show": {
                                                        "id": "BellmanFord#show"
                                                    },
                                                    "main": {
                                                        "id": "BellmanFord#main"
                                                    },
                                                    "addEdge": {
                                                        "id": "BellmanFord#addEdge"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/BellmanFord.java",
                                                "name": "BellmanFord"
                                            }
                                        },
                                        "BipartiteGrapfDFS.java": {
                                            "name": "BipartiteGrapfDFS",
                                            "class": {
                                                "id": "2c206247-e044-4a60-85ab-0fcab086659e",
                                                "functions": {
                                                    "isBipartite": {
                                                        "id": "BipartiteGrapfDFS#isBipartite"
                                                    },
                                                    "bipartite": {
                                                        "id": "BipartiteGrapfDFS#bipartite"
                                                    },
                                                    "main": {
                                                        "id": "BipartiteGrapfDFS#main"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/BipartiteGrapfDFS.java",
                                                "name": "BipartiteGrapfDFS"
                                            }
                                        },
                                        "ConnectedComponent.java": {
                                            "name": "Graph",
                                            "class": {
                                                "id": "f4d8b712-4188-4024-a25b-89c883f2f445",
                                                "functions": {
                                                    "countGraphs": {
                                                        "id": "Graph#countGraphs"
                                                    },
                                                    "addEdge": {
                                                        "id": "Graph#addEdge"
                                                    },
                                                    "depthFirstSearch": {
                                                        "id": "Graph#depthFirstSearch"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/ConnectedComponent.java",
                                                "name": "Graph"
                                            }
                                        },
                                        "Cycles.java": {
                                            "name": "Cycle",
                                            "class": {
                                                "id": "74889345-6eeb-4da3-b546-3ca232598e1a",
                                                "functions": {
                                                    "dfs": {
                                                        "id": "Cycle#dfs"
                                                    },
                                                    "start": {
                                                        "id": "Cycle#start"
                                                    },
                                                    "printAll": {
                                                        "id": "Cycle#printAll"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/Cycles.java",
                                                "name": "Cycle"
                                            }
                                        },
                                        "DIJSKSTRAS_ALGORITHM.java": {
                                            "name": "dijkstras",
                                            "class": {
                                                "id": "50f7030f-680b-420f-9b5e-76c6a895af8d",
                                                "functions": {
                                                    "print": {
                                                        "id": "dijkstras#print"
                                                    },
                                                    "dijkstra": {
                                                        "id": "dijkstras#dijkstra"
                                                    },
                                                    "minDist": {
                                                        "id": "dijkstras#minDist"
                                                    },
                                                    "main": {
                                                        "id": "dijkstras#main"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/DIJSKSTRAS_ALGORITHM.java",
                                                "name": "dijkstras"
                                            }
                                        },
                                        "FloydWarshall.java": {
                                            "name": "FloydWarshall",
                                            "class": {
                                                "id": "ac2c2e03-79c1-4c89-a621-2c3e0cb3d753",
                                                "functions": {
                                                    "main": {
                                                        "id": "FloydWarshall#main"
                                                    },
                                                    "floydwarshall": {
                                                        "id": "FloydWarshall#floydwarshall"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/FloydWarshall.java",
                                                "name": "FloydWarshall"
                                            }
                                        },
                                        "Graphs.java": {
                                            "name": "AdjacencyListGraph",
                                            "class": {
                                                "id": "4bb48105-34c1-4571-80a3-f7b70435013c",
                                                "functions": {
                                                    "removeEdge": {
                                                        "id": "AdjacencyListGraph#removeEdge"
                                                    },
                                                    "toString": {
                                                        "id": "AdjacencyListGraph#toString"
                                                    },
                                                    "addEdge": {
                                                        "id": "AdjacencyListGraph#addEdge"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/Graphs.java",
                                                "name": "AdjacencyListGraph"
                                            }
                                        },
                                        "HamiltonianCycle.java": {
                                            "name": "HamiltonianCycle",
                                            "class": {
                                                "id": "26e18206-2130-40ca-b711-05c4950c9184",
                                                "functions": {
                                                    "findHamiltonianCycle": {
                                                        "id": "HamiltonianCycle#findHamiltonianCycle"
                                                    },
                                                    "isPresent": {
                                                        "id": "HamiltonianCycle#isPresent"
                                                    },
                                                    "isPathFound": {
                                                        "id": "HamiltonianCycle#isPathFound"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/HamiltonianCycle.java",
                                                "name": "HamiltonianCycle"
                                            }
                                        },
                                        "KahnsAlgorithm.java": {
                                            "name": "AdjacencyList",
                                            "class": {
                                                "id": "7fb5a554-a57d-4b14-95fc-e56b5617c43d",
                                                "functions": {
                                                    "printGraph": {
                                                        "id": "AdjacencyList#printGraph"
                                                    },
                                                    "getAdjacents": {
                                                        "id": "AdjacencyList#getAdjacents"
                                                    },
                                                    "getVertices": {
                                                        "id": "AdjacencyList#getVertices"
                                                    },
                                                    "addEdge": {
                                                        "id": "AdjacencyList#addEdge"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/KahnsAlgorithm.java",
                                                "name": "AdjacencyList"
                                            }
                                        },
                                        "Kosaraju.java": {
                                            "name": "Kosaraju",
                                            "class": {
                                                "id": "4593841f-ceac-4c83-a7b8-c8a82f8a5855",
                                                "functions": {
                                                    "dfs": {
                                                        "id": "Kosaraju#dfs"
                                                    },
                                                    "kosaraju": {
                                                        "id": "Kosaraju#kosaraju"
                                                    },
                                                    "sortEdgesByLowestFinishTime": {
                                                        "id": "Kosaraju#sortEdgesByLowestFinishTime"
                                                    },
                                                    "createTransposeMatrix": {
                                                        "id": "Kosaraju#createTransposeMatrix"
                                                    },
                                                    "dfs2": {
                                                        "id": "Kosaraju#dfs2"
                                                    },
                                                    "findStronglyConnectedComponents": {
                                                        "id": "Kosaraju#findStronglyConnectedComponents"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/Kosaraju.java",
                                                "name": "Kosaraju"
                                            }
                                        },
                                        "Kruskal.java": {
                                            "name": "Kruskal",
                                            "class": {
                                                "id": "0e34c5b4-1301-486a-b034-d2b4f964dd16",
                                                "functions": {
                                                    "kruskal": {
                                                        "id": "Kruskal#kruskal"
                                                    },
                                                    "main": {
                                                        "id": "Kruskal#main"
                                                    },
                                                    "addEdge": {
                                                        "id": "Kruskal#addEdge"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/Kruskal.java",
                                                "name": "Kruskal"
                                            }
                                        },
                                        "MatrixGraphs.java": {
                                            "name": "MatrixGraphs",
                                            "class": {
                                                "id": "1ad8bee0-6bda-4f17-9f28-5ddfac6076aa",
                                                "functions": {
                                                    "main": {
                                                        "id": "MatrixGraphs#main"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/MatrixGraphs.java",
                                                "name": "MatrixGraphs"
                                            }
                                        },
                                        "PrimMST.java": {
                                            "name": "PrimMST",
                                            "class": {
                                                "id": "14edb19e-f30c-4d21-ac20-845122464a46",
                                                "functions": {
                                                    "primMST": {
                                                        "id": "PrimMST#primMST"
                                                    },
                                                    "minKey": {
                                                        "id": "PrimMST#minKey"
                                                    },
                                                    "main": {
                                                        "id": "PrimMST#main"
                                                    },
                                                    "printMST": {
                                                        "id": "PrimMST#printMST"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/PrimMST.java",
                                                "name": "PrimMST"
                                            }
                                        },
                                        "TarjansAlgorithm.java": {
                                            "name": "TarjansAlgorithm",
                                            "class": {
                                                "id": "69bf2b03-7c37-41c7-a42d-f3cb426c66b3",
                                                "functions": {
                                                    "stronglyConnCompsUtil": {
                                                        "id": "TarjansAlgorithm#stronglyConnCompsUtil"
                                                    },
                                                    "stronglyConnectedComponents": {
                                                        "id": "TarjansAlgorithm#stronglyConnectedComponents"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/graphs/TarjansAlgorithm.java",
                                                "name": "TarjansAlgorithm"
                                            }
                                        }
                                    },
                                    "hashmap": {
                                        "hashing": {
                                            "GenericHashMapUsingArray.java": {
                                                "name": "GenericHashMapUsingArray",
                                                "class": {
                                                    "id": "efc1bb93-ae11-4c40-ab86-d794aded0ccd",
                                                    "functions": {
                                                        "hashFunction": {
                                                            "id": "GenericHashMapUsingArray#hashFunction"
                                                        },
                                                        "initBuckets": {
                                                            "id": "GenericHashMapUsingArray#initBuckets"
                                                        },
                                                        "size": {
                                                            "id": "GenericHashMapUsingArray#size"
                                                        },
                                                        "containsKey": {
                                                            "id": "GenericHashMapUsingArray#containsKey"
                                                        },
                                                        "get": {
                                                            "id": "GenericHashMapUsingArray#get"
                                                        },
                                                        "reHash": {
                                                            "id": "GenericHashMapUsingArray#reHash"
                                                        },
                                                        "toString": {
                                                            "id": "GenericHashMapUsingArray#toString"
                                                        },
                                                        "put": {
                                                            "id": "GenericHashMapUsingArray#put"
                                                        },
                                                        "remove": {
                                                            "id": "GenericHashMapUsingArray#remove"
                                                        }
                                                    },
                                                    "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/hashmap/hashing/GenericHashMapUsingArray.java",
                                                    "name": "GenericHashMapUsingArray"
                                                }
                                            },
                                            "GenericHashMapUsingArrayList.java": {
                                                "name": "GenericHashMapUsingArrayList",
                                                "class": {
                                                    "id": "7642ecda-5fd1-4b0f-b3f3-638c46841b4a",
                                                    "functions": {
                                                        "size": {
                                                            "id": "GenericHashMapUsingArrayList#size"
                                                        },
                                                        "containsKey": {
                                                            "id": "GenericHashMapUsingArrayList#containsKey"
                                                        },
                                                        "get": {
                                                            "id": "GenericHashMapUsingArrayList#get"
                                                        },
                                                        "reHash": {
                                                            "id": "GenericHashMapUsingArrayList#reHash"
                                                        },
                                                        "toString": {
                                                            "id": "GenericHashMapUsingArrayList#toString"
                                                        },
                                                        "put": {
                                                            "id": "GenericHashMapUsingArrayList#put"
                                                        },
                                                        "remove": {
                                                            "id": "GenericHashMapUsingArrayList#remove"
                                                        }
                                                    },
                                                    "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/hashmap/hashing/GenericHashMapUsingArrayList.java",
                                                    "name": "GenericHashMapUsingArrayList"
                                                }
                                            },
                                            "HashMap.java": {
                                                "name": "HashMap",
                                                "class": {
                                                    "id": "34e3760f-aac9-45f0-8986-2cb87f041829",
                                                    "functions": {
                                                        "hashing": {
                                                            "id": "HashMap#hashing"
                                                        },
                                                        "insertHash": {
                                                            "id": "HashMap#insertHash"
                                                        },
                                                        "displayHashtable": {
                                                            "id": "HashMap#displayHashtable"
                                                        },
                                                        "deleteHash": {
                                                            "id": "HashMap#deleteHash"
                                                        }
                                                    },
                                                    "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/hashmap/hashing/HashMap.java",
                                                    "name": "HashMap"
                                                }
                                            },
                                            "HashMapCuckooHashing.java": {
                                                "name": "HashMapCuckooHashing",
                                                "class": {
                                                    "id": "a2fb9161-cb41-47b3-80e7-79cb65d90821",
                                                    "functions": {
                                                        "hashFunction2": {
                                                            "id": "HashMapCuckooHashing#hashFunction2"
                                                        },
                                                        "findKeyInTable": {
                                                            "id": "HashMapCuckooHashing#findKeyInTable"
                                                        },
                                                        "deleteKeyFromHashTable": {
                                                            "id": "HashMapCuckooHashing#deleteKeyFromHashTable"
                                                        },
                                                        "getNumberOfKeysInTable": {
                                                            "id": "HashMapCuckooHashing#getNumberOfKeysInTable"
                                                        },
                                                        "hashFunction1": {
                                                            "id": "HashMapCuckooHashing#hashFunction1"
                                                        },
                                                        "checkTableContainsKey": {
                                                            "id": "HashMapCuckooHashing#checkTableContainsKey"
                                                        },
                                                        "isEmpty": {
                                                            "id": "HashMapCuckooHashing#isEmpty"
                                                        },
                                                        "insertKey2HashTable": {
                                                            "id": "HashMapCuckooHashing#insertKey2HashTable"
                                                        },
                                                        "reHashTableIncreasesTableSize": {
                                                            "id": "HashMapCuckooHashing#reHashTableIncreasesTableSize"
                                                        },
                                                        "isFull": {
                                                            "id": "HashMapCuckooHashing#isFull"
                                                        },
                                                        "displayHashtable": {
                                                            "id": "HashMapCuckooHashing#displayHashtable"
                                                        },
                                                        "checkLoadFactor": {
                                                            "id": "HashMapCuckooHashing#checkLoadFactor"
                                                        }
                                                    },
                                                    "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/hashmap/hashing/HashMapCuckooHashing.java",
                                                    "name": "HashMapCuckooHashing"
                                                }
                                            },
                                            "Intersection.java": {
                                                "name": "Intersection",
                                                "class": {
                                                    "id": "7caa779a-77c9-4dac-a0ac-e5d50198533e",
                                                    "functions": {
                                                        "intersection": {
                                                            "id": "Intersection#intersection"
                                                        }
                                                    },
                                                    "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/hashmap/hashing/Intersection.java",
                                                    "name": "Intersection"
                                                }
                                            },
                                            "LinearProbingHashMap.java": {
                                                "name": "LinearProbingHashMap",
                                                "class": {
                                                    "id": "be759153-d56e-481f-bee0-d31217a4e626",
                                                    "functions": {
                                                        "contains": {
                                                            "id": "LinearProbingHashMap#contains"
                                                        },
                                                        "size": {
                                                            "id": "LinearProbingHashMap#size"
                                                        },
                                                        "keys": {
                                                            "id": "LinearProbingHashMap#keys"
                                                        },
                                                        "get": {
                                                            "id": "LinearProbingHashMap#get"
                                                        },
                                                        "increment": {
                                                            "id": "LinearProbingHashMap#increment"
                                                        },
                                                        "resize": {
                                                            "id": "LinearProbingHashMap#resize"
                                                        },
                                                        "delete": {
                                                            "id": "LinearProbingHashMap#delete"
                                                        },
                                                        "put": {
                                                            "id": "LinearProbingHashMap#put"
                                                        }
                                                    },
                                                    "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/hashmap/hashing/LinearProbingHashMap.java",
                                                    "name": "LinearProbingHashMap"
                                                }
                                            },
                                            "Main.java": {
                                                "name": "Main",
                                                "class": {
                                                    "id": "627b28b7-63fe-44ad-bb05-6373e46c13e8",
                                                    "functions": {
                                                        "main": {
                                                            "id": "Main#main"
                                                        }
                                                    },
                                                    "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/hashmap/hashing/Main.java",
                                                    "name": "Main"
                                                }
                                            },
                                            "MainCuckooHashing.java": {
                                                "name": "MainCuckooHashing",
                                                "class": {
                                                    "id": "a6fe13be-bee9-4365-830b-88a8f38fafc9",
                                                    "functions": {
                                                        "main": {
                                                            "id": "MainCuckooHashing#main"
                                                        }
                                                    },
                                                    "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/hashmap/hashing/MainCuckooHashing.java",
                                                    "name": "MainCuckooHashing"
                                                }
                                            },
                                            "Map.java": {
                                                "name": "Map",
                                                "class": {
                                                    "id": "069c129a-70fc-4b79-8ab5-1716b9fcf01b",
                                                    "functions": {
                                                        "contains": {
                                                            "id": "Map#contains"
                                                        },
                                                        "size": {
                                                            "id": "Map#size"
                                                        },
                                                        "keys": {
                                                            "id": "Map#keys"
                                                        },
                                                        "get": {
                                                            "id": "Map#get"
                                                        },
                                                        "delete": {
                                                            "id": "Map#delete"
                                                        },
                                                        "put": {
                                                            "id": "Map#put"
                                                        },
                                                        "hash": {
                                                            "id": "Map#hash"
                                                        }
                                                    },
                                                    "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/hashmap/hashing/Map.java",
                                                    "name": "Map"
                                                }
                                            }
                                        }
                                    },
                                    "heaps": {
                                        "EmptyHeapException.java": {
                                            "name": "EmptyHeapException",
                                            "class": {
                                                "id": "c81d2ff1-9ce0-4eda-a068-6658949f052e",
                                                "functions": {},
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/heaps/EmptyHeapException.java",
                                                "name": "EmptyHeapException"
                                            }
                                        },
                                        "FibonacciHeap.java": {
                                            "name": "FibonacciHeap",
                                            "class": {
                                                "id": "4bd54414-cf83-4909-bcd5-f8500344fa5c",
                                                "functions": {
                                                    "toBuckets": {
                                                        "id": "FibonacciHeap#toBuckets"
                                                    },
                                                    "meld": {
                                                        "id": "FibonacciHeap#meld"
                                                    },
                                                    "cut": {
                                                        "id": "FibonacciHeap#cut"
                                                    },
                                                    "link": {
                                                        "id": "FibonacciHeap#link"
                                                    },
                                                    "insert": {
                                                        "id": "FibonacciHeap#insert"
                                                    },
                                                    "decreaseKey": {
                                                        "id": "FibonacciHeap#decreaseKey"
                                                    },
                                                    "successiveLink": {
                                                        "id": "FibonacciHeap#successiveLink"
                                                    },
                                                    "delete": {
                                                        "id": "FibonacciHeap#delete"
                                                    },
                                                    "empty": {
                                                        "id": "FibonacciHeap#empty"
                                                    },
                                                    "cascadingCuts": {
                                                        "id": "FibonacciHeap#cascadingCuts"
                                                    },
                                                    "size": {
                                                        "id": "FibonacciHeap#size"
                                                    },
                                                    "totalLinks": {
                                                        "id": "FibonacciHeap#totalLinks"
                                                    },
                                                    "updateMin": {
                                                        "id": "FibonacciHeap#updateMin"
                                                    },
                                                    "fromBuckets": {
                                                        "id": "FibonacciHeap#fromBuckets"
                                                    },
                                                    "deleteMin": {
                                                        "id": "FibonacciHeap#deleteMin"
                                                    },
                                                    "totalCuts": {
                                                        "id": "FibonacciHeap#totalCuts"
                                                    },
                                                    "findMin": {
                                                        "id": "FibonacciHeap#findMin"
                                                    },
                                                    "potential": {
                                                        "id": "FibonacciHeap#potential"
                                                    },
                                                    "countersRep": {
                                                        "id": "FibonacciHeap#countersRep"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/heaps/FibonacciHeap.java",
                                                "name": "FibonacciHeap"
                                            }
                                        },
                                        "GenericHeap.java": {
                                            "name": "GenericHeap",
                                            "class": {
                                                "id": "5c8ab1a5-d0b7-4d69-b222-80e84721d628",
                                                "functions": {
                                                    "add": {
                                                        "id": "GenericHeap#add"
                                                    },
                                                    "size": {
                                                        "id": "GenericHeap#size"
                                                    },
                                                    "isLarger": {
                                                        "id": "GenericHeap#isLarger"
                                                    },
                                                    "swap": {
                                                        "id": "GenericHeap#swap"
                                                    },
                                                    "display": {
                                                        "id": "GenericHeap#display"
                                                    },
                                                    "get": {
                                                        "id": "GenericHeap#get"
                                                    },
                                                    "isEmpty": {
                                                        "id": "GenericHeap#isEmpty"
                                                    },
                                                    "upHeapify": {
                                                        "id": "GenericHeap#upHeapify"
                                                    },
                                                    "downHeapify": {
                                                        "id": "GenericHeap#downHeapify"
                                                    },
                                                    "updatePriority": {
                                                        "id": "GenericHeap#updatePriority"
                                                    },
                                                    "remove": {
                                                        "id": "GenericHeap#remove"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/heaps/GenericHeap.java",
                                                "name": "GenericHeap"
                                            }
                                        },
                                        "Heap.java": {
                                            "name": "Heap",
                                            "class": {
                                                "id": "e2ce1198-2dbc-4248-a3e2-ecbf39ed41c8",
                                                "functions": {
                                                    "insertElement": {
                                                        "id": "Heap#insertElement"
                                                    },
                                                    "getElement": {
                                                        "id": "Heap#getElement"
                                                    },
                                                    "deleteElement": {
                                                        "id": "Heap#deleteElement"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/heaps/Heap.java",
                                                "name": "Heap"
                                            }
                                        },
                                        "HeapElement.java": {
                                            "name": "HeapElement",
                                            "class": {
                                                "id": "5e9d77be-dbb5-4b7d-9286-9848eacfc5ac",
                                                "functions": {
                                                    "getKey": {
                                                        "id": "HeapElement#getKey"
                                                    },
                                                    "getInfo": {
                                                        "id": "HeapElement#getInfo"
                                                    },
                                                    "hashCode": {
                                                        "id": "HeapElement#hashCode"
                                                    },
                                                    "equals": {
                                                        "id": "HeapElement#equals"
                                                    },
                                                    "toString": {
                                                        "id": "HeapElement#toString"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/heaps/HeapElement.java",
                                                "name": "HeapElement"
                                            }
                                        },
                                        "LeftistHeap.java": {
                                            "name": "LeftistHeap",
                                            "class": {
                                                "id": "552cd7b8-a3c7-4e84-b08d-35edd3b39f5b",
                                                "functions": {
                                                    "in_order": {
                                                        "id": "LeftistHeap#in_order"
                                                    },
                                                    "merge": {
                                                        "id": "LeftistHeap#merge"
                                                    },
                                                    "isEmpty": {
                                                        "id": "LeftistHeap#isEmpty"
                                                    },
                                                    "clear": {
                                                        "id": "LeftistHeap#clear"
                                                    },
                                                    "insert": {
                                                        "id": "LeftistHeap#insert"
                                                    },
                                                    "in_order_aux": {
                                                        "id": "LeftistHeap#in_order_aux"
                                                    },
                                                    "extract_min": {
                                                        "id": "LeftistHeap#extract_min"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/heaps/LeftistHeap.java",
                                                "name": "LeftistHeap"
                                            }
                                        },
                                        "MaxHeap.java": {
                                            "name": "MaxHeap",
                                            "class": {
                                                "id": "5da7c0a1-3ec6-445e-99f3-33b1a8cb3e00",
                                                "functions": {
                                                    "toggleUp": {
                                                        "id": "MaxHeap#toggleUp"
                                                    },
                                                    "swap": {
                                                        "id": "MaxHeap#swap"
                                                    },
                                                    "insertElement": {
                                                        "id": "MaxHeap#insertElement"
                                                    },
                                                    "getElement": {
                                                        "id": "MaxHeap#getElement"
                                                    },
                                                    "extractMax": {
                                                        "id": "MaxHeap#extractMax"
                                                    },
                                                    "getElementKey": {
                                                        "id": "MaxHeap#getElementKey"
                                                    },
                                                    "toggleDown": {
                                                        "id": "MaxHeap#toggleDown"
                                                    },
                                                    "deleteElement": {
                                                        "id": "MaxHeap#deleteElement"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/heaps/MaxHeap.java",
                                                "name": "MaxHeap"
                                            }
                                        },
                                        "MinHeap.java": {
                                            "name": "MinHeap",
                                            "class": {
                                                "id": "25c4c476-139b-4073-9aea-f3aaae33fe08",
                                                "functions": {
                                                    "toggleUp": {
                                                        "id": "MinHeap#toggleUp"
                                                    },
                                                    "swap": {
                                                        "id": "MinHeap#swap"
                                                    },
                                                    "insertElement": {
                                                        "id": "MinHeap#insertElement"
                                                    },
                                                    "getElement": {
                                                        "id": "MinHeap#getElement"
                                                    },
                                                    "extractMin": {
                                                        "id": "MinHeap#extractMin"
                                                    },
                                                    "getElementKey": {
                                                        "id": "MinHeap#getElementKey"
                                                    },
                                                    "toggleDown": {
                                                        "id": "MinHeap#toggleDown"
                                                    },
                                                    "deleteElement": {
                                                        "id": "MinHeap#deleteElement"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/heaps/MinHeap.java",
                                                "name": "MinHeap"
                                            }
                                        },
                                        "MinPriorityQueue.java": {
                                            "name": "MinPriorityQueue",
                                            "class": {
                                                "id": "45600b03-eb1c-44cb-9b3f-f9c1388fd1a2",
                                                "functions": {
                                                    "print": {
                                                        "id": "MinPriorityQueue#print"
                                                    },
                                                    "sink": {
                                                        "id": "MinPriorityQueue#sink"
                                                    },
                                                    "isEmpty": {
                                                        "id": "MinPriorityQueue#isEmpty"
                                                    },
                                                    "insert": {
                                                        "id": "MinPriorityQueue#insert"
                                                    },
                                                    "main": {
                                                        "id": "MinPriorityQueue#main"
                                                    },
                                                    "isFull": {
                                                        "id": "MinPriorityQueue#isFull"
                                                    },
                                                    "heapSort": {
                                                        "id": "MinPriorityQueue#heapSort"
                                                    },
                                                    "delete": {
                                                        "id": "MinPriorityQueue#delete"
                                                    },
                                                    "peek": {
                                                        "id": "MinPriorityQueue#peek"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/heaps/MinPriorityQueue.java",
                                                "name": "MinPriorityQueue"
                                            }
                                        }
                                    },
                                    "lists": {
                                        "CircleLinkedList.java": {
                                            "name": "CircleLinkedList",
                                            "class": {
                                                "id": "b640b2ff-7568-49f0-9e18-0d783b6c6ab1",
                                                "functions": {
                                                    "getSize": {
                                                        "id": "CircleLinkedList#getSize"
                                                    },
                                                    "toString": {
                                                        "id": "CircleLinkedList#toString"
                                                    },
                                                    "main": {
                                                        "id": "CircleLinkedList#main"
                                                    },
                                                    "append": {
                                                        "id": "CircleLinkedList#append"
                                                    },
                                                    "remove": {
                                                        "id": "CircleLinkedList#remove"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/lists/CircleLinkedList.java",
                                                "name": "CircleLinkedList"
                                            }
                                        },
                                        "CountSinglyLinkedListRecursion.java": {
                                            "name": "CountSinglyLinkedListRecursion",
                                            "class": {
                                                "id": "dddd82c1-de8a-49c3-a2a0-a4c4c5f3931c",
                                                "functions": {
                                                    "count": {
                                                        "id": "CountSinglyLinkedListRecursion#count"
                                                    },
                                                    "main": {
                                                        "id": "CountSinglyLinkedListRecursion#main"
                                                    },
                                                    "countRecursion": {
                                                        "id": "CountSinglyLinkedListRecursion#countRecursion"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/lists/CountSinglyLinkedListRecursion.java",
                                                "name": "CountSinglyLinkedListRecursion"
                                            }
                                        },
                                        "CreateAndDetectLoop.java": {
                                            "name": "CreateAndDetectLoop",
                                            "class": {
                                                "id": "97f354f3-8d8b-4d80-aa5d-480231149fc9",
                                                "functions": {
                                                    "detectLoop": {
                                                        "id": "CreateAndDetectLoop#detectLoop"
                                                    },
                                                    "createLoop": {
                                                        "id": "CreateAndDetectLoop#createLoop"
                                                    },
                                                    "main": {
                                                        "id": "CreateAndDetectLoop#main"
                                                    },
                                                    "printList": {
                                                        "id": "CreateAndDetectLoop#printList"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/lists/CreateAndDetectLoop.java",
                                                "name": "CreateAndDetectLoop"
                                            }
                                        },
                                        "CursorLinkedList.java": {
                                            "name": "CursorLinkedList",
                                            "class": {
                                                "id": "b1b14434-23fe-49ec-912b-13c5474a352f",
                                                "functions": {
                                                    "removeByIndex": {
                                                        "id": "CursorLinkedList#removeByIndex"
                                                    },
                                                    "get": {
                                                        "id": "CursorLinkedList#get"
                                                    },
                                                    "printList": {
                                                        "id": "CursorLinkedList#printList"
                                                    },
                                                    "free": {
                                                        "id": "CursorLinkedList#free"
                                                    },
                                                    "alloc": {
                                                        "id": "CursorLinkedList#alloc"
                                                    },
                                                    "indexOf": {
                                                        "id": "CursorLinkedList#indexOf"
                                                    },
                                                    "remove": {
                                                        "id": "CursorLinkedList#remove"
                                                    },
                                                    "append": {
                                                        "id": "CursorLinkedList#append"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/lists/CursorLinkedList.java",
                                                "name": "CursorLinkedList"
                                            }
                                        },
                                        "DoublyLinkedList.java": {
                                            "name": "DoublyLinkedList",
                                            "class": {
                                                "id": "e0aa2e1a-e2b4-406e-b046-f423e9cdb02b",
                                                "functions": {
                                                    "displayBackwards": {
                                                        "id": "DoublyLinkedList#displayBackwards"
                                                    },
                                                    "display": {
                                                        "id": "DoublyLinkedList#display"
                                                    },
                                                    "isEmpty": {
                                                        "id": "DoublyLinkedList#isEmpty"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/lists/DoublyLinkedList.java",
                                                "name": "DoublyLinkedList"
                                            }
                                        },
                                        "MergeSortedArrayList.java": {
                                            "name": "MergeSortedArrayList",
                                            "class": {
                                                "id": "c07ff666-e768-4107-9254-7cffadd346c4",
                                                "functions": {
                                                    "merge": {
                                                        "id": "MergeSortedArrayList#merge"
                                                    },
                                                    "main": {
                                                        "id": "MergeSortedArrayList#main"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/lists/MergeSortedArrayList.java",
                                                "name": "MergeSortedArrayList"
                                            }
                                        },
                                        "MergeSortedSinglyLinkedList.java": {
                                            "name": "MergeSortedSinglyLinkedList",
                                            "class": {
                                                "id": "eba41acc-3047-4348-9237-cfb6a709c1d3",
                                                "functions": {
                                                    "merge": {
                                                        "id": "MergeSortedSinglyLinkedList#merge"
                                                    },
                                                    "main": {
                                                        "id": "MergeSortedSinglyLinkedList#main"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/lists/MergeSortedSinglyLinkedList.java",
                                                "name": "MergeSortedSinglyLinkedList"
                                            }
                                        },
                                        "Merge_K_SortedLinkedlist.java": {
                                            "name": "Merge_K_SortedLinkedlist",
                                            "class": {
                                                "id": "fa3327fa-d44d-4f43-9c5e-e304add2acf9",
                                                "functions": {
                                                    "mergeKList": {
                                                        "id": "Merge_K_SortedLinkedlist#mergeKList"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/lists/Merge_K_SortedLinkedlist.java",
                                                "name": "Merge_K_SortedLinkedlist"
                                            }
                                        },
                                        "RandomNode.java": {
                                            "name": "RandomNode",
                                            "class": {
                                                "id": "a024b582-fb4d-49cf-b21e-7bd2e44e3447",
                                                "functions": {
                                                    "getRandom": {
                                                        "id": "RandomNode#getRandom"
                                                    },
                                                    "main": {
                                                        "id": "RandomNode#main"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/lists/RandomNode.java",
                                                "name": "RandomNode"
                                            }
                                        },
                                        "SearchSinglyLinkedListRecursion.java": {
                                            "name": "SearchSinglyLinkedListRecursion",
                                            "class": {
                                                "id": "3f7ebbd3-daf2-43df-ad82-0700f672b5cd",
                                                "functions": {
                                                    "search": {
                                                        "id": "SearchSinglyLinkedListRecursion#search"
                                                    },
                                                    "main": {
                                                        "id": "SearchSinglyLinkedListRecursion#main"
                                                    },
                                                    "searchRecursion": {
                                                        "id": "SearchSinglyLinkedListRecursion#searchRecursion"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/lists/SearchSinglyLinkedListRecursion.java",
                                                "name": "SearchSinglyLinkedListRecursion"
                                            }
                                        },
                                        "SinglyLinkedList.java": {
                                            "name": "SinglyLinkedList",
                                            "class": {
                                                "id": "224fe600-a69f-41b3-9ccd-04056bdc561a",
                                                "functions": {
                                                    "detectLoop": {
                                                        "id": "SinglyLinkedList#detectLoop"
                                                    },
                                                    "middle": {
                                                        "id": "SinglyLinkedList#middle"
                                                    },
                                                    "getNth": {
                                                        "id": "SinglyLinkedList#getNth"
                                                    },
                                                    "clear": {
                                                        "id": "SinglyLinkedList#clear"
                                                    },
                                                    "isEmpty": {
                                                        "id": "SinglyLinkedList#isEmpty"
                                                    },
                                                    "setHead": {
                                                        "id": "SinglyLinkedList#setHead"
                                                    },
                                                    "count": {
                                                        "id": "SinglyLinkedList#count"
                                                    },
                                                    "insertHead": {
                                                        "id": "SinglyLinkedList#insertHead"
                                                    },
                                                    "insert": {
                                                        "id": "SinglyLinkedList#insert"
                                                    },
                                                    "deleteNth": {
                                                        "id": "SinglyLinkedList#deleteNth"
                                                    },
                                                    "reverseList": {
                                                        "id": "SinglyLinkedList#reverseList"
                                                    },
                                                    "main": {
                                                        "id": "SinglyLinkedList#main"
                                                    },
                                                    "deleteHead": {
                                                        "id": "SinglyLinkedList#deleteHead"
                                                    },
                                                    "delete": {
                                                        "id": "SinglyLinkedList#delete"
                                                    },
                                                    "deleteDuplicates": {
                                                        "id": "SinglyLinkedList#deleteDuplicates"
                                                    },
                                                    "search": {
                                                        "id": "SinglyLinkedList#search"
                                                    },
                                                    "print": {
                                                        "id": "SinglyLinkedList#print"
                                                    },
                                                    "size": {
                                                        "id": "SinglyLinkedList#size"
                                                    },
                                                    "checkBounds": {
                                                        "id": "SinglyLinkedList#checkBounds"
                                                    },
                                                    "getHead": {
                                                        "id": "SinglyLinkedList#getHead"
                                                    },
                                                    "swapNodes": {
                                                        "id": "SinglyLinkedList#swapNodes"
                                                    },
                                                    "toString": {
                                                        "id": "SinglyLinkedList#toString"
                                                    },
                                                    "insertNth": {
                                                        "id": "SinglyLinkedList#insertNth"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/lists/SinglyLinkedList.java",
                                                "name": "SinglyLinkedList"
                                            }
                                        },
                                        "SkipList.java": {
                                            "name": "SkipList",
                                            "class": {
                                                "id": "2cfb9430-07e4-42f2-ac80-960d57d22c16",
                                                "functions": {
                                                    "add": {
                                                        "id": "SkipList#add"
                                                    },
                                                    "contains": {
                                                        "id": "SkipList#contains"
                                                    },
                                                    "size": {
                                                        "id": "SkipList#size"
                                                    },
                                                    "get": {
                                                        "id": "SkipList#get"
                                                    },
                                                    "toString": {
                                                        "id": "SkipList#toString"
                                                    },
                                                    "remove": {
                                                        "id": "SkipList#remove"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/lists/SkipList.java",
                                                "name": "SkipList"
                                            }
                                        }
                                    },
                                    "queues": {
                                        "CircularQueue.java": {
                                            "name": "CircularQueue",
                                            "class": {
                                                "id": "e1a39646-1a91-4957-9693-3696684be0e0",
                                                "functions": {
                                                    "deQueue": {
                                                        "id": "CircularQueue#deQueue"
                                                    },
                                                    "isEmpty": {
                                                        "id": "CircularQueue#isEmpty"
                                                    },
                                                    "main": {
                                                        "id": "CircularQueue#main"
                                                    },
                                                    "isFull": {
                                                        "id": "CircularQueue#isFull"
                                                    },
                                                    "deleteQueue": {
                                                        "id": "CircularQueue#deleteQueue"
                                                    },
                                                    "enQueue": {
                                                        "id": "CircularQueue#enQueue"
                                                    },
                                                    "peek": {
                                                        "id": "CircularQueue#peek"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/queues/CircularQueue.java",
                                                "name": "CircularQueue"
                                            }
                                        },
                                        "Deques.java": {
                                            "name": "Deques",
                                            "class": {
                                                "id": "6d9e852a-dac7-408e-968e-c352e9022601",
                                                "functions": {
                                                    "addLast": {
                                                        "id": "Deques#addLast"
                                                    },
                                                    "size": {
                                                        "id": "Deques#size"
                                                    },
                                                    "isEmpty": {
                                                        "id": "Deques#isEmpty"
                                                    },
                                                    "pollFirst": {
                                                        "id": "Deques#pollFirst"
                                                    },
                                                    "peekFirst": {
                                                        "id": "Deques#peekFirst"
                                                    },
                                                    "toString": {
                                                        "id": "Deques#toString"
                                                    },
                                                    "main": {
                                                        "id": "Deques#main"
                                                    },
                                                    "peekLast": {
                                                        "id": "Deques#peekLast"
                                                    },
                                                    "pollLast": {
                                                        "id": "Deques#pollLast"
                                                    },
                                                    "addFirst": {
                                                        "id": "Deques#addFirst"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/queues/Deques.java",
                                                "name": "Deques"
                                            }
                                        },
                                        "GenericArrayListQueue.java": {
                                            "name": "GenericArrayListQueue",
                                            "class": {
                                                "id": "e9c18fc2-80b4-4760-8f03-2966d765dc01",
                                                "functions": {
                                                    "add": {
                                                        "id": "GenericArrayListQueue#add"
                                                    },
                                                    "pull": {
                                                        "id": "GenericArrayListQueue#pull"
                                                    },
                                                    "hasElements": {
                                                        "id": "GenericArrayListQueue#hasElements"
                                                    },
                                                    "main": {
                                                        "id": "GenericArrayListQueue#main"
                                                    },
                                                    "peek": {
                                                        "id": "GenericArrayListQueue#peek"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/queues/GenericArrayListQueue.java",
                                                "name": "GenericArrayListQueue"
                                            }
                                        },
                                        "LinkedQueue.java": {
                                            "name": "LinkedQueue",
                                            "class": {
                                                "id": "17bedae0-d584-47f2-bf09-1623c446ddfd",
                                                "functions": {
                                                    "enqueue": {
                                                        "id": "LinkedQueue#enqueue"
                                                    },
                                                    "peekRear": {
                                                        "id": "LinkedQueue#peekRear"
                                                    },
                                                    "iterator": {
                                                        "id": "LinkedQueue#iterator"
                                                    },
                                                    "size": {
                                                        "id": "LinkedQueue#size"
                                                    },
                                                    "dequeue": {
                                                        "id": "LinkedQueue#dequeue"
                                                    },
                                                    "isEmpty": {
                                                        "id": "LinkedQueue#isEmpty"
                                                    },
                                                    "clear": {
                                                        "id": "LinkedQueue#clear"
                                                    },
                                                    "toString": {
                                                        "id": "LinkedQueue#toString"
                                                    },
                                                    "main": {
                                                        "id": "LinkedQueue#main"
                                                    },
                                                    "peekFront": {
                                                        "id": "LinkedQueue#peekFront"
                                                    },
                                                    "peek": {
                                                        "id": "LinkedQueue#peek"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/queues/LinkedQueue.java",
                                                "name": "LinkedQueue"
                                            }
                                        },
                                        "PriorityQueues.java": {
                                            "name": "PriorityQueue",
                                            "class": {
                                                "id": "1591382f-ebdc-417b-b3e0-1ab40d990485",
                                                "functions": {
                                                    "getSize": {
                                                        "id": "PriorityQueue#getSize"
                                                    },
                                                    "sink": {
                                                        "id": "PriorityQueue#sink"
                                                    },
                                                    "isEmpty": {
                                                        "id": "PriorityQueue#isEmpty"
                                                    },
                                                    "insert": {
                                                        "id": "PriorityQueue#insert"
                                                    },
                                                    "isFull": {
                                                        "id": "PriorityQueue#isFull"
                                                    },
                                                    "swim": {
                                                        "id": "PriorityQueue#swim"
                                                    },
                                                    "remove": {
                                                        "id": "PriorityQueue#remove"
                                                    },
                                                    "peek": {
                                                        "id": "PriorityQueue#peek"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/queues/PriorityQueues.java",
                                                "name": "PriorityQueue"
                                            }
                                        },
                                        "Queues.java": {
                                            "name": "Queue",
                                            "class": {
                                                "id": "acb19b17-de69-4650-82f9-6b01384030b5",
                                                "functions": {
                                                    "peekRear": {
                                                        "id": "Queue#peekRear"
                                                    },
                                                    "getSize": {
                                                        "id": "Queue#getSize"
                                                    },
                                                    "isEmpty": {
                                                        "id": "Queue#isEmpty"
                                                    },
                                                    "insert": {
                                                        "id": "Queue#insert"
                                                    },
                                                    "toString": {
                                                        "id": "Queue#toString"
                                                    },
                                                    "isFull": {
                                                        "id": "Queue#isFull"
                                                    },
                                                    "peekFront": {
                                                        "id": "Queue#peekFront"
                                                    },
                                                    "remove": {
                                                        "id": "Queue#remove"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/queues/Queues.java",
                                                "name": "Queue"
                                            }
                                        }
                                    },
                                    "stacks": {
                                        "BalancedBrackets.java": {
                                            "name": "BalancedBrackets",
                                            "class": {
                                                "id": "ce45f96f-5675-4e29-984a-b804c2e60eb3",
                                                "functions": {
                                                    "isPaired": {
                                                        "id": "BalancedBrackets#isPaired"
                                                    },
                                                    "main": {
                                                        "id": "BalancedBrackets#main"
                                                    },
                                                    "isBalanced": {
                                                        "id": "BalancedBrackets#isBalanced"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/BalancedBrackets.java",
                                                "name": "BalancedBrackets"
                                            }
                                        },
                                        "CalculateMaxOfMin.java": {
                                            "name": "CalculateMaxOfMin",
                                            "class": {
                                                "id": "5e176fcd-f1d6-4ad0-a2a3-238b00ac890f",
                                                "functions": {
                                                    "calculateMaxOfMin": {
                                                        "id": "CalculateMaxOfMin#calculateMaxOfMin"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/CalculateMaxOfMin.java",
                                                "name": "CalculateMaxOfMin"
                                            }
                                        },
                                        "DecimalToAnyUsingStack.java": {
                                            "name": "DecimalToAnyUsingStack",
                                            "class": {
                                                "id": "7d1bf9e5-db2e-4f86-a97d-491730f44b59",
                                                "functions": {
                                                    "main": {
                                                        "id": "DecimalToAnyUsingStack#main"
                                                    },
                                                    "convert": {
                                                        "id": "DecimalToAnyUsingStack#convert"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/DecimalToAnyUsingStack.java",
                                                "name": "DecimalToAnyUsingStack"
                                            }
                                        },
                                        "DuplicateBrackets.java": {
                                            "name": "DuplicateBrackets",
                                            "class": {
                                                "id": "aa27eb1c-154b-4bf8-a9cb-660a97351dcf",
                                                "functions": {
                                                    "main": {
                                                        "id": "DuplicateBrackets#main"
                                                    },
                                                    "check": {
                                                        "id": "DuplicateBrackets#check"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/DuplicateBrackets.java",
                                                "name": "DuplicateBrackets"
                                            }
                                        },
                                        "InfixToPostfix.java": {
                                            "name": "InfixToPostfix",
                                            "class": {
                                                "id": "9e0c453d-a7b8-477c-8f2b-846e80bbcb63",
                                                "functions": {
                                                    "infix2PostFix": {
                                                        "id": "InfixToPostfix#infix2PostFix"
                                                    },
                                                    "main": {
                                                        "id": "InfixToPostfix#main"
                                                    },
                                                    "precedence": {
                                                        "id": "InfixToPostfix#precedence"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/InfixToPostfix.java",
                                                "name": "InfixToPostfix"
                                            }
                                        },
                                        "LargestRectangle.java": {
                                            "name": "LargestRectangle",
                                            "class": {
                                                "id": "dee0c4f0-8c6e-44fd-97e1-ba7b5afa0b47",
                                                "functions": {
                                                    "largestRectanglehistogram": {
                                                        "id": "LargestRectangle#largestRectanglehistogram"
                                                    },
                                                    "main": {
                                                        "id": "LargestRectangle#main"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/LargestRectangle.java",
                                                "name": "LargestRectangle"
                                            }
                                        },
                                        "MaximumMinimumWindow.java": {
                                            "name": "MaximumMinimumWindow",
                                            "class": {
                                                "id": "3ebc7623-0006-4e83-87d3-4108f67a1dd8",
                                                "functions": {
                                                    "main": {
                                                        "id": "MaximumMinimumWindow#main"
                                                    },
                                                    "calculateMaxOfMin": {
                                                        "id": "MaximumMinimumWindow#calculateMaxOfMin"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/MaximumMinimumWindow.java",
                                                "name": "MaximumMinimumWindow"
                                            }
                                        },
                                        "NextGraterElement.java": {
                                            "name": "NextGraterElement",
                                            "class": {
                                                "id": "615c5d31-b77b-4396-a7ab-239b097f591d",
                                                "functions": {
                                                    "findNextGreaterElements": {
                                                        "id": "NextGraterElement#findNextGreaterElements"
                                                    },
                                                    "main": {
                                                        "id": "NextGraterElement#main"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/NextGraterElement.java",
                                                "name": "NextGraterElement"
                                            }
                                        },
                                        "NextSmallerElement.java": {
                                            "name": "NextSmallerElement",
                                            "class": {
                                                "id": "942e6d60-775b-4de0-b41c-eaad189a5d8a",
                                                "functions": {
                                                    "main": {
                                                        "id": "NextSmallerElement#main"
                                                    },
                                                    "findNextSmallerElements": {
                                                        "id": "NextSmallerElement#findNextSmallerElements"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/NextSmallerElement.java",
                                                "name": "NextSmallerElement"
                                            }
                                        },
                                        "NodeStack.java": {
                                            "name": "NodeStack",
                                            "class": {
                                                "id": "5d46ecc3-1d63-4284-a7b4-6656cd14680f",
                                                "functions": {
                                                    "getPrevious": {
                                                        "id": "NodeStack#getPrevious"
                                                    },
                                                    "setData": {
                                                        "id": "NodeStack#setData"
                                                    },
                                                    "isEmpty": {
                                                        "id": "NodeStack#isEmpty"
                                                    },
                                                    "setHead": {
                                                        "id": "NodeStack#setHead"
                                                    },
                                                    "main": {
                                                        "id": "NodeStack#main"
                                                    },
                                                    "getNext": {
                                                        "id": "NodeStack#getNext"
                                                    },
                                                    "push": {
                                                        "id": "NodeStack#push"
                                                    },
                                                    "peek": {
                                                        "id": "NodeStack#peek"
                                                    },
                                                    "pop": {
                                                        "id": "NodeStack#pop"
                                                    },
                                                    "print": {
                                                        "id": "NodeStack#print"
                                                    },
                                                    "getSize": {
                                                        "id": "NodeStack#getSize"
                                                    },
                                                    "setSize": {
                                                        "id": "NodeStack#setSize"
                                                    },
                                                    "size": {
                                                        "id": "NodeStack#size"
                                                    },
                                                    "getHead": {
                                                        "id": "NodeStack#getHead"
                                                    },
                                                    "setNext": {
                                                        "id": "NodeStack#setNext"
                                                    },
                                                    "getData": {
                                                        "id": "NodeStack#getData"
                                                    },
                                                    "setPrevious": {
                                                        "id": "NodeStack#setPrevious"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/NodeStack.java",
                                                "name": "NodeStack"
                                            }
                                        },
                                        "PostfixToInfix.java": {
                                            "name": "PostfixToInfix",
                                            "class": {
                                                "id": "8a70739a-242e-407c-9d81-2deccbec3ed7",
                                                "functions": {
                                                    "isValidPostfixExpression": {
                                                        "id": "PostfixToInfix#isValidPostfixExpression"
                                                    },
                                                    "main": {
                                                        "id": "PostfixToInfix#main"
                                                    },
                                                    "getPostfixToInfix": {
                                                        "id": "PostfixToInfix#getPostfixToInfix"
                                                    },
                                                    "isOperator": {
                                                        "id": "PostfixToInfix#isOperator"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/PostfixToInfix.java",
                                                "name": "PostfixToInfix"
                                            }
                                        },
                                        "ReverseStack.java": {
                                            "name": "ReverseStack",
                                            "class": {
                                                "id": "57483a93-df5d-4c9c-93aa-4a59f8d2b4d0",
                                                "functions": {
                                                    "insertAtBottom": {
                                                        "id": "ReverseStack#insertAtBottom"
                                                    },
                                                    "reverseStack": {
                                                        "id": "ReverseStack#reverseStack"
                                                    },
                                                    "main": {
                                                        "id": "ReverseStack#main"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/ReverseStack.java",
                                                "name": "ReverseStack"
                                            }
                                        },
                                        "StackArray.java": {
                                            "name": "StackArray",
                                            "class": {
                                                "id": "f9848d69-7cc0-417b-b3b9-fa3e37c1ff51",
                                                "functions": {
                                                    "pop": {
                                                        "id": "StackArray#pop"
                                                    },
                                                    "size": {
                                                        "id": "StackArray#size"
                                                    },
                                                    "makeEmpty": {
                                                        "id": "StackArray#makeEmpty"
                                                    },
                                                    "isEmpty": {
                                                        "id": "StackArray#isEmpty"
                                                    },
                                                    "resize": {
                                                        "id": "StackArray#resize"
                                                    },
                                                    "main": {
                                                        "id": "StackArray#main"
                                                    },
                                                    "isFull": {
                                                        "id": "StackArray#isFull"
                                                    },
                                                    "push": {
                                                        "id": "StackArray#push"
                                                    },
                                                    "peek": {
                                                        "id": "StackArray#peek"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/StackArray.java",
                                                "name": "StackArray"
                                            }
                                        },
                                        "StackArrayList.java": {
                                            "name": "StackArrayList",
                                            "class": {
                                                "id": "01e0f937-6de6-4c5e-8ae0-60a77617136a",
                                                "functions": {
                                                    "pop": {
                                                        "id": "StackArrayList#pop"
                                                    },
                                                    "size": {
                                                        "id": "StackArrayList#size"
                                                    },
                                                    "isEmpty": {
                                                        "id": "StackArrayList#isEmpty"
                                                    },
                                                    "main": {
                                                        "id": "StackArrayList#main"
                                                    },
                                                    "push": {
                                                        "id": "StackArrayList#push"
                                                    },
                                                    "peek": {
                                                        "id": "StackArrayList#peek"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/StackArrayList.java",
                                                "name": "StackArrayList"
                                            }
                                        },
                                        "StackOfLinkedList.java": {
                                            "name": "StackOfLinkedList",
                                            "class": {
                                                "id": "e2dd1aaa-b35e-4acb-930a-6ff279a0d350",
                                                "functions": {
                                                    "main": {
                                                        "id": "StackOfLinkedList#main"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/stacks/StackOfLinkedList.java",
                                                "name": "StackOfLinkedList"
                                            }
                                        }
                                    },
                                    "trees": {
                                        "AVLSimple.java": {
                                            "name": "AVLSimple",
                                            "class": {
                                                "id": "ae74c09e-d1f8-4b1d-a9ab-87c6d2894413",
                                                "functions": {
                                                    "bf": {
                                                        "id": "AVLSimple#bf"
                                                    },
                                                    "leftRotate": {
                                                        "id": "AVLSimple#leftRotate"
                                                    },
                                                    "display": {
                                                        "id": "AVLSimple#display"
                                                    },
                                                    "insert": {
                                                        "id": "AVLSimple#insert"
                                                    },
                                                    "rightRotate": {
                                                        "id": "AVLSimple#rightRotate"
                                                    },
                                                    "height": {
                                                        "id": "AVLSimple#height"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/AVLSimple.java",
                                                "name": "AVLSimple"
                                            }
                                        },
                                        "AVLTree.java": {
                                            "name": "AVLTree",
                                            "class": {
                                                "id": "1d654e99-8434-4ed2-aa32-6c4f5afe2480",
                                                "functions": {
                                                    "rotateRight": {
                                                        "id": "AVLTree#rotateRight"
                                                    },
                                                    "rotateLeftThenRight": {
                                                        "id": "AVLTree#rotateLeftThenRight"
                                                    },
                                                    "searchHelper": {
                                                        "id": "AVLTree#searchHelper"
                                                    },
                                                    "rotateLeft": {
                                                        "id": "AVLTree#rotateLeft"
                                                    },
                                                    "insert": {
                                                        "id": "AVLTree#insert"
                                                    },
                                                    "reheight": {
                                                        "id": "AVLTree#reheight"
                                                    },
                                                    "main": {
                                                        "id": "AVLTree#main"
                                                    },
                                                    "delete": {
                                                        "id": "AVLTree#delete"
                                                    },
                                                    "printBalance": {
                                                        "id": "AVLTree#printBalance"
                                                    },
                                                    "rebalance": {
                                                        "id": "AVLTree#rebalance"
                                                    },
                                                    "search": {
                                                        "id": "AVLTree#search"
                                                    },
                                                    "rotateRightThenLeft": {
                                                        "id": "AVLTree#rotateRightThenLeft"
                                                    },
                                                    "setBalance": {
                                                        "id": "AVLTree#setBalance"
                                                    },
                                                    "height": {
                                                        "id": "AVLTree#height"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/AVLTree.java",
                                                "name": "AVLTree"
                                            }
                                        },
                                        "BSTIterative.java": {
                                            "name": "BSTIterative",
                                            "class": {
                                                "id": "c201b903-f59e-433e-ae25-94137b7ba504",
                                                "functions": {
                                                    "add": {
                                                        "id": "BSTIterative#add"
                                                    },
                                                    "find": {
                                                        "id": "BSTIterative#find"
                                                    },
                                                    "main": {
                                                        "id": "BSTIterative#main"
                                                    },
                                                    "inorder": {
                                                        "id": "BSTIterative#inorder"
                                                    },
                                                    "postorder": {
                                                        "id": "BSTIterative#postorder"
                                                    },
                                                    "remove": {
                                                        "id": "BSTIterative#remove"
                                                    },
                                                    "preorder": {
                                                        "id": "BSTIterative#preorder"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/BSTIterative.java",
                                                "name": "BSTIterative"
                                            }
                                        },
                                        "BSTRecursive.java": {
                                            "name": "BSTRecursive",
                                            "class": {
                                                "id": "22c60a46-787a-42a8-8a4b-ac2116dd9fdb",
                                                "functions": {
                                                    "add": {
                                                        "id": "BSTRecursive#add"
                                                    },
                                                    "insert": {
                                                        "id": "BSTRecursive#insert"
                                                    },
                                                    "main": {
                                                        "id": "BSTRecursive#main"
                                                    },
                                                    "delete": {
                                                        "id": "BSTRecursive#delete"
                                                    },
                                                    "postorder": {
                                                        "id": "BSTRecursive#postorder"
                                                    },
                                                    "postOrder": {
                                                        "id": "BSTRecursive#postOrder"
                                                    },
                                                    "remove": {
                                                        "id": "BSTRecursive#remove"
                                                    },
                                                    "search": {
                                                        "id": "BSTRecursive#search"
                                                    },
                                                    "find": {
                                                        "id": "BSTRecursive#find"
                                                    },
                                                    "inOrder": {
                                                        "id": "BSTRecursive#inOrder"
                                                    },
                                                    "preOrder": {
                                                        "id": "BSTRecursive#preOrder"
                                                    },
                                                    "inorder": {
                                                        "id": "BSTRecursive#inorder"
                                                    },
                                                    "preorder": {
                                                        "id": "BSTRecursive#preorder"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/BSTRecursive.java",
                                                "name": "BSTRecursive"
                                            }
                                        },
                                        "BSTRecursiveGeneric.java": {
                                            "name": "BSTRecursiveGeneric",
                                            "class": {
                                                "id": "c007a654-4df1-4a7b-88ca-3ecb050296ac",
                                                "functions": {
                                                    "add": {
                                                        "id": "BSTRecursiveGeneric#add"
                                                    },
                                                    "inorderSort": {
                                                        "id": "BSTRecursiveGeneric#inorderSort"
                                                    },
                                                    "insert": {
                                                        "id": "BSTRecursiveGeneric#insert"
                                                    },
                                                    "main": {
                                                        "id": "BSTRecursiveGeneric#main"
                                                    },
                                                    "delete": {
                                                        "id": "BSTRecursiveGeneric#delete"
                                                    },
                                                    "postorder": {
                                                        "id": "BSTRecursiveGeneric#postorder"
                                                    },
                                                    "postOrder": {
                                                        "id": "BSTRecursiveGeneric#postOrder"
                                                    },
                                                    "remove": {
                                                        "id": "BSTRecursiveGeneric#remove"
                                                    },
                                                    "inOrderSort": {
                                                        "id": "BSTRecursiveGeneric#inOrderSort"
                                                    },
                                                    "search": {
                                                        "id": "BSTRecursiveGeneric#search"
                                                    },
                                                    "find": {
                                                        "id": "BSTRecursiveGeneric#find"
                                                    },
                                                    "inOrder": {
                                                        "id": "BSTRecursiveGeneric#inOrder"
                                                    },
                                                    "preOrder": {
                                                        "id": "BSTRecursiveGeneric#preOrder"
                                                    },
                                                    "inorder": {
                                                        "id": "BSTRecursiveGeneric#inorder"
                                                    },
                                                    "preorder": {
                                                        "id": "BSTRecursiveGeneric#preorder"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/BSTRecursiveGeneric.java",
                                                "name": "BSTRecursiveGeneric"
                                            }
                                        },
                                        "BinaryTree.java": {
                                            "name": "BinaryTree",
                                            "class": {
                                                "id": "28bda299-7840-4fd1-9cef-241b14c89928",
                                                "functions": {
                                                    "findSuccessor": {
                                                        "id": "BinaryTree#findSuccessor"
                                                    },
                                                    "find": {
                                                        "id": "BinaryTree#find"
                                                    },
                                                    "inOrder": {
                                                        "id": "BinaryTree#inOrder"
                                                    },
                                                    "preOrder": {
                                                        "id": "BinaryTree#preOrder"
                                                    },
                                                    "getRoot": {
                                                        "id": "BinaryTree#getRoot"
                                                    },
                                                    "put": {
                                                        "id": "BinaryTree#put"
                                                    },
                                                    "remove": {
                                                        "id": "BinaryTree#remove"
                                                    },
                                                    "postOrder": {
                                                        "id": "BinaryTree#postOrder"
                                                    },
                                                    "bfs": {
                                                        "id": "BinaryTree#bfs"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java",
                                                "name": "BinaryTree"
                                            }
                                        },
                                        "CeilInBinarySearchTree.java": {
                                            "name": "CeilInBinarySearchTree",
                                            "class": {
                                                "id": "f2fa2944-be0a-446c-b868-2a701aee3335",
                                                "functions": {
                                                    "getCeil": {
                                                        "id": "CeilInBinarySearchTree#getCeil"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/CeilInBinarySearchTree.java",
                                                "name": "CeilInBinarySearchTree"
                                            }
                                        },
                                        "CheckIfBinaryTreeBalanced.java": {
                                            "name": "CheckIfBinaryTreeBalanced",
                                            "class": {
                                                "id": "4e3847c5-3d1c-4dd3-8176-7509cbd1cae5",
                                                "functions": {
                                                    "main": {
                                                        "id": "CheckIfBinaryTreeBalanced#main"
                                                    },
                                                    "buildUnbalancedTree": {
                                                        "id": "CheckIfBinaryTreeBalanced#buildUnbalancedTree"
                                                    },
                                                    "isBalancedIterative": {
                                                        "id": "CheckIfBinaryTreeBalanced#isBalancedIterative"
                                                    },
                                                    "isBalancedRecursive": {
                                                        "id": "CheckIfBinaryTreeBalanced#isBalancedRecursive"
                                                    },
                                                    "buildBalancedTree": {
                                                        "id": "CheckIfBinaryTreeBalanced#buildBalancedTree"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/CheckIfBinaryTreeBalanced.java",
                                                "name": "CheckIfBinaryTreeBalanced"
                                            }
                                        },
                                        "CheckTreeIsSymmetric.java": {
                                            "name": "CheckTreeIsSymmetric",
                                            "class": {
                                                "id": "a71f078c-f6a2-4176-8ef0-8eec8d6052be",
                                                "functions": {
                                                    "isSymmetric": {
                                                        "id": "CheckTreeIsSymmetric#isSymmetric"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/CheckTreeIsSymmetric.java",
                                                "name": "CheckTreeIsSymmetric"
                                            }
                                        },
                                        "CreateBSTFromSortedArray.java": {
                                            "name": "CreateBSTFromSortedArray",
                                            "class": {
                                                "id": "3b66ad88-fe6f-4f75-a99c-9245f7d7c949",
                                                "functions": {
                                                    "test": {
                                                        "id": "CreateBSTFromSortedArray#test"
                                                    },
                                                    "main": {
                                                        "id": "CreateBSTFromSortedArray#main"
                                                    },
                                                    "createBst": {
                                                        "id": "CreateBSTFromSortedArray#createBst"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/CreateBSTFromSortedArray.java",
                                                "name": "CreateBSTFromSortedArray"
                                            }
                                        },
                                        "CreateBinaryTreeFromInorderPreorder.java": {
                                            "name": "CreateBinaryTreeFromInorderPreorder",
                                            "class": {
                                                "id": "9d8baea5-a364-45f3-b087-f98418494a40",
                                                "functions": {
                                                    "test": {
                                                        "id": "CreateBinaryTreeFromInorderPreorder#test"
                                                    },
                                                    "createTree": {
                                                        "id": "CreateBinaryTreeFromInorderPreorder#createTree"
                                                    },
                                                    "main": {
                                                        "id": "CreateBinaryTreeFromInorderPreorder#main"
                                                    },
                                                    "createTreeOptimized": {
                                                        "id": "CreateBinaryTreeFromInorderPreorder#createTreeOptimized"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/CreateBinaryTreeFromInorderPreorder.java",
                                                "name": "CreateBinaryTreeFromInorderPreorder"
                                            }
                                        },
                                        "FenwickTree.java": {
                                            "name": "FenwickTree",
                                            "class": {
                                                "id": "15fae178-8c6d-4223-9ee5-0f4a209aefca",
                                                "functions": {
                                                    "query": {
                                                        "id": "FenwickTree#query"
                                                    },
                                                    "update": {
                                                        "id": "FenwickTree#update"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/FenwickTree.java",
                                                "name": "FenwickTree"
                                            }
                                        },
                                        "GenericTree.java": {
                                            "name": "GenericTree",
                                            "class": {
                                                "id": "10744b9e-0f67-4825-8980-d7d5f431ff3d",
                                                "functions": {
                                                    "postordercall": {
                                                        "id": "GenericTree#postordercall"
                                                    },
                                                    "create_treeG": {
                                                        "id": "GenericTree#create_treeG"
                                                    },
                                                    "max": {
                                                        "id": "GenericTree#max"
                                                    },
                                                    "display": {
                                                        "id": "GenericTree#display"
                                                    },
                                                    "depthcaller": {
                                                        "id": "GenericTree#depthcaller"
                                                    },
                                                    "postorder": {
                                                        "id": "GenericTree#postorder"
                                                    },
                                                    "preordercall": {
                                                        "id": "GenericTree#preordercall"
                                                    },
                                                    "removeleaves": {
                                                        "id": "GenericTree#removeleaves"
                                                    },
                                                    "levelorder": {
                                                        "id": "GenericTree#levelorder"
                                                    },
                                                    "depth": {
                                                        "id": "GenericTree#depth"
                                                    },
                                                    "maxcall": {
                                                        "id": "GenericTree#maxcall"
                                                    },
                                                    "removeleavescall": {
                                                        "id": "GenericTree#removeleavescall"
                                                    },
                                                    "display_1": {
                                                        "id": "GenericTree#display_1"
                                                    },
                                                    "size2call": {
                                                        "id": "GenericTree#size2call"
                                                    },
                                                    "find": {
                                                        "id": "GenericTree#find"
                                                    },
                                                    "size2": {
                                                        "id": "GenericTree#size2"
                                                    },
                                                    "heightcall": {
                                                        "id": "GenericTree#heightcall"
                                                    },
                                                    "findcall": {
                                                        "id": "GenericTree#findcall"
                                                    },
                                                    "preorder": {
                                                        "id": "GenericTree#preorder"
                                                    },
                                                    "height": {
                                                        "id": "GenericTree#height"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/GenericTree.java",
                                                "name": "GenericTree"
                                            }
                                        },
                                        "InorderTraversal.java": {
                                            "name": "InorderTraversal",
                                            "class": {
                                                "id": "6ad43e95-4a58-4cb9-a15b-7062afd6f18a",
                                                "functions": {
                                                    "recursiveInorder": {
                                                        "id": "InorderTraversal#recursiveInorder"
                                                    },
                                                    "iterativeInorder": {
                                                        "id": "InorderTraversal#iterativeInorder"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/InorderTraversal.java",
                                                "name": "InorderTraversal"
                                            }
                                        },
                                        "LCA.java": {
                                            "name": "LCA",
                                            "class": {
                                                "id": "72e8736a-bf0f-46be-a493-2af88c9becda",
                                                "functions": {
                                                    "dfs": {
                                                        "id": "LCA#dfs"
                                                    },
                                                    "main": {
                                                        "id": "LCA#main"
                                                    },
                                                    "getLCA": {
                                                        "id": "LCA#getLCA"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/LCA.java",
                                                "name": "LCA"
                                            }
                                        },
                                        "LazySegmentTree.java": {
                                            "name": "LazySegmentTree",
                                            "class": {
                                                "id": "63726a7e-0479-4654-bc4f-f93a3b63eb79",
                                                "functions": {
                                                    "buildTree": {
                                                        "id": "LazySegmentTree#buildTree"
                                                    },
                                                    "updateRange": {
                                                        "id": "LazySegmentTree#updateRange"
                                                    },
                                                    "getRange": {
                                                        "id": "LazySegmentTree#getRange"
                                                    },
                                                    "getRoot": {
                                                        "id": "LazySegmentTree#getRoot"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/LazySegmentTree.java",
                                                "name": "LazySegmentTree"
                                            }
                                        },
                                        "LevelOrderTraversal.java": {
                                            "name": "LevelOrderTraversal",
                                            "class": {
                                                "id": "f17db89f-2ab2-4479-a48c-5aa1cec8982e",
                                                "functions": {
                                                    "traverse": {
                                                        "id": "LevelOrderTraversal#traverse"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/LevelOrderTraversal.java",
                                                "name": "LevelOrderTraversal"
                                            }
                                        },
                                        "LevelOrderTraversalHelper.java": {
                                            "name": "LevelOrderTraversalHelper",
                                            "class": {
                                                "id": "1e079bec-b21b-47a0-ab1b-e33e1028533f",
                                                "functions": {
                                                    "printLevelOrder": {
                                                        "id": "LevelOrderTraversalHelper#printLevelOrder"
                                                    },
                                                    "printGivenLevel": {
                                                        "id": "LevelOrderTraversalHelper#printGivenLevel"
                                                    },
                                                    "height": {
                                                        "id": "LevelOrderTraversalHelper#height"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/LevelOrderTraversalHelper.java",
                                                "name": "LevelOrderTraversalHelper"
                                            }
                                        },
                                        "PostOrderTraversal.java": {
                                            "name": "PostOrderTraversal",
                                            "class": {
                                                "id": "0b1491f3-6df5-4324-95a1-7bd25d1f64a9",
                                                "functions": {
                                                    "recursivePostOrder": {
                                                        "id": "PostOrderTraversal#recursivePostOrder"
                                                    },
                                                    "iterativePostOrder": {
                                                        "id": "PostOrderTraversal#iterativePostOrder"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/PostOrderTraversal.java",
                                                "name": "PostOrderTraversal"
                                            }
                                        },
                                        "PreOrderTraversal.java": {
                                            "name": "PreOrderTraversal",
                                            "class": {
                                                "id": "09e4a29b-0dc6-48a6-a987-59d71fc9f4a4",
                                                "functions": {
                                                    "iterativePreOrder": {
                                                        "id": "PreOrderTraversal#iterativePreOrder"
                                                    },
                                                    "recursivePreOrder": {
                                                        "id": "PreOrderTraversal#recursivePreOrder"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/PreOrderTraversal.java",
                                                "name": "PreOrderTraversal"
                                            }
                                        },
                                        "PrintTopViewofTree.java": {
                                            "name": "TreeNode",
                                            "class": {
                                                "id": "66a1870d-1e9b-40e0-8dad-ae4cbc704a3e",
                                                "functions": {},
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/PrintTopViewofTree.java",
                                                "name": "TreeNode"
                                            }
                                        },
                                        "RedBlackBST.java": {
                                            "name": "RedBlackBST",
                                            "class": {
                                                "id": "0466fb27-2d50-49f1-ae24-1116cfb88368",
                                                "functions": {
                                                    "rotateRight": {
                                                        "id": "RedBlackBST#rotateRight"
                                                    },
                                                    "rotateLeft": {
                                                        "id": "RedBlackBST#rotateLeft"
                                                    },
                                                    "treeMinimum": {
                                                        "id": "RedBlackBST#treeMinimum"
                                                    },
                                                    "deleteDemo": {
                                                        "id": "RedBlackBST#deleteDemo"
                                                    },
                                                    "insert": {
                                                        "id": "RedBlackBST#insert"
                                                    },
                                                    "printTreepre": {
                                                        "id": "RedBlackBST#printTreepre"
                                                    },
                                                    "delete": {
                                                        "id": "RedBlackBST#delete"
                                                    },
                                                    "printTree": {
                                                        "id": "RedBlackBST#printTree"
                                                    },
                                                    "insertDemo": {
                                                        "id": "RedBlackBST#insertDemo"
                                                    },
                                                    "fixTree": {
                                                        "id": "RedBlackBST#fixTree"
                                                    },
                                                    "deleteFixup": {
                                                        "id": "RedBlackBST#deleteFixup"
                                                    },
                                                    "transplant": {
                                                        "id": "RedBlackBST#transplant"
                                                    },
                                                    "findNode": {
                                                        "id": "RedBlackBST#findNode"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/RedBlackBST.java",
                                                "name": "RedBlackBST"
                                            }
                                        },
                                        "SameTreesCheck.java": {
                                            "name": "SameTreesCheck",
                                            "class": {
                                                "id": "a9f131c9-56c3-4d9d-a457-ffeed4a236fd",
                                                "functions": {
                                                    "equalNodes": {
                                                        "id": "SameTreesCheck#equalNodes"
                                                    },
                                                    "check": {
                                                        "id": "SameTreesCheck#check"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/SameTreesCheck.java",
                                                "name": "SameTreesCheck"
                                            }
                                        },
                                        "SegmentTree.java": {
                                            "name": "SegmentTree",
                                            "class": {
                                                "id": "c1d2c96e-8ccd-450d-b53b-e7c5ab4c7c46",
                                                "functions": {
                                                    "constructTree": {
                                                        "id": "SegmentTree#constructTree"
                                                    },
                                                    "update": {
                                                        "id": "SegmentTree#update"
                                                    },
                                                    "updateTree": {
                                                        "id": "SegmentTree#updateTree"
                                                    },
                                                    "getSumTree": {
                                                        "id": "SegmentTree#getSumTree"
                                                    },
                                                    "getSum": {
                                                        "id": "SegmentTree#getSum"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/SegmentTree.java",
                                                "name": "SegmentTree"
                                            }
                                        },
                                        "TreeRandomNode.java": {
                                            "name": "TreeRandomNode",
                                            "class": {
                                                "id": "2c73b4c8-c5d1-46b3-9339-11eabfd74e72",
                                                "functions": {
                                                    "getRandom": {
                                                        "id": "TreeRandomNode#getRandom"
                                                    },
                                                    "inOrder": {
                                                        "id": "TreeRandomNode#inOrder"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/TreeRandomNode.java",
                                                "name": "TreeRandomNode"
                                            }
                                        },
                                        "TreeTraversal.java": {
                                            "name": "TreeTraversal",
                                            "class": {
                                                "id": "1c76de85-1197-4b32-bc2f-b91121a7b6c0",
                                                "functions": {
                                                    "main": {
                                                        "id": "TreeTraversal#main"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/TreeTraversal.java",
                                                "name": "TreeTraversal"
                                            }
                                        },
                                        "TrieImp.java": {
                                            "name": "TrieImp",
                                            "class": {
                                                "id": "4a3559a0-da0c-4d76-a87b-9f4da6eeb35c",
                                                "functions": {
                                                    "search": {
                                                        "id": "TrieImp#search"
                                                    },
                                                    "sop": {
                                                        "id": "TrieImp#sop"
                                                    },
                                                    "isValid": {
                                                        "id": "TrieImp#isValid"
                                                    },
                                                    "insert": {
                                                        "id": "TrieImp#insert"
                                                    },
                                                    "main": {
                                                        "id": "TrieImp#main"
                                                    },
                                                    "delete": {
                                                        "id": "TrieImp#delete"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/TrieImp.java",
                                                "name": "TrieImp"
                                            }
                                        },
                                        "ValidBSTOrNot.java": {
                                            "name": "ValidBSTOrNot",
                                            "class": {
                                                "id": "003e8dbb-0f12-42a5-ad1a-353d88eb5f80",
                                                "functions": {
                                                    "isBST": {
                                                        "id": "ValidBSTOrNot#isBST"
                                                    },
                                                    "isBSTUtil": {
                                                        "id": "ValidBSTOrNot#isBSTUtil"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/ValidBSTOrNot.java",
                                                "name": "ValidBSTOrNot"
                                            }
                                        },
                                        "VerticalOrderTraversal.java": {
                                            "name": "VerticalOrderTraversal",
                                            "class": {
                                                "id": "c711800f-4a6e-4210-ac24-2760b6607df5",
                                                "functions": {
                                                    "verticalTraversal": {
                                                        "id": "VerticalOrderTraversal#verticalTraversal"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/VerticalOrderTraversal.java",
                                                "name": "VerticalOrderTraversal"
                                            }
                                        },
                                        "ZigzagTraversal.java": {
                                            "name": "ZigzagTraversal",
                                            "class": {
                                                "id": "97353980-d4a7-49a1-a6e2-93dc1994e862",
                                                "functions": {
                                                    "traverse": {
                                                        "id": "ZigzagTraversal#traverse"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/ZigzagTraversal.java",
                                                "name": "ZigzagTraversal"
                                            }
                                        },
                                        "nearestRightKey.java": {
                                            "name": "Main",
                                            "class": {
                                                "id": "31fb5a30-4465-41fa-bd4e-9fdc84a64c8e",
                                                "functions": {
                                                    "nearestRightKey": {
                                                        "id": "Main#nearestRightKey"
                                                    },
                                                    "main": {
                                                        "id": "Main#main"
                                                    },
                                                    "BuildTree": {
                                                        "id": "Main#BuildTree"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/datastructures/trees/nearestRightKey.java",
                                                "name": "Main"
                                            }
                                        }
                                    }
                                },
                                "devutils": {
                                    "entities": {
                                        "ProcessDetails.java": {
                                            "name": "ProcessDetails",
                                            "class": {
                                                "id": "cc9b0be9-2b48-4f47-8ed0-30e38eb13940",
                                                "functions": {
                                                    "getBurstTime": {
                                                        "id": "ProcessDetails#getBurstTime"
                                                    },
                                                    "setBurstTime": {
                                                        "id": "ProcessDetails#setBurstTime"
                                                    },
                                                    "getArrivalTime": {
                                                        "id": "ProcessDetails#getArrivalTime"
                                                    },
                                                    "getTurnAroundTimeTime": {
                                                        "id": "ProcessDetails#getTurnAroundTimeTime"
                                                    },
                                                    "setWaitingTime": {
                                                        "id": "ProcessDetails#setWaitingTime"
                                                    },
                                                    "getProcessId": {
                                                        "id": "ProcessDetails#getProcessId"
                                                    },
                                                    "setProcessId": {
                                                        "id": "ProcessDetails#setProcessId"
                                                    },
                                                    "getWaitingTime": {
                                                        "id": "ProcessDetails#getWaitingTime"
                                                    },
                                                    "setArrivalTime": {
                                                        "id": "ProcessDetails#setArrivalTime"
                                                    },
                                                    "setTurnAroundTimeTime": {
                                                        "id": "ProcessDetails#setTurnAroundTimeTime"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/devutils/entities/ProcessDetails.java",
                                                "name": "ProcessDetails"
                                            }
                                        }
                                    },
                                    "nodes": {
                                        "LargeTreeNode.java": {
                                            "name": "LargeTreeNode",
                                            "class": {
                                                "id": "5f57c100-65e1-463a-9cf4-ed1d5911030d",
                                                "functions": {
                                                    "isLeafNode": {
                                                        "id": "LargeTreeNode#isLeafNode"
                                                    },
                                                    "setChildNodes": {
                                                        "id": "LargeTreeNode#setChildNodes"
                                                    },
                                                    "getChildNodes": {
                                                        "id": "LargeTreeNode#getChildNodes"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/devutils/nodes/LargeTreeNode.java",
                                                "name": "LargeTreeNode"
                                            }
                                        },
                                        "Node.java": {
                                            "name": "Node",
                                            "class": {
                                                "id": "57b0751e-15b7-4bff-bf82-4f0d6fad0c6b",
                                                "functions": {
                                                    "setData": {
                                                        "id": "Node#setData"
                                                    },
                                                    "getData": {
                                                        "id": "Node#getData"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/devutils/nodes/Node.java",
                                                "name": "Node"
                                            }
                                        },
                                        "SimpleNode.java": {
                                            "name": "SimpleNode",
                                            "class": {
                                                "id": "48baa8a6-8a5a-41eb-ae0a-ef0879cff263",
                                                "functions": {
                                                    "setNextNode": {
                                                        "id": "SimpleNode#setNextNode"
                                                    },
                                                    "getNextNode": {
                                                        "id": "SimpleNode#getNextNode"
                                                    },
                                                    "hasNext": {
                                                        "id": "SimpleNode#hasNext"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/devutils/nodes/SimpleNode.java",
                                                "name": "SimpleNode"
                                            }
                                        },
                                        "SimpleTreeNode.java": {
                                            "name": "SimpleTreeNode",
                                            "class": {
                                                "id": "7283c511-3ebc-4476-8f56-3d320d296f27",
                                                "functions": {
                                                    "setLeftNode": {
                                                        "id": "SimpleTreeNode#setLeftNode"
                                                    },
                                                    "getLeftNode": {
                                                        "id": "SimpleTreeNode#getLeftNode"
                                                    },
                                                    "getRightNode": {
                                                        "id": "SimpleTreeNode#getRightNode"
                                                    },
                                                    "setRightNode": {
                                                        "id": "SimpleTreeNode#setRightNode"
                                                    },
                                                    "isLeafNode": {
                                                        "id": "SimpleTreeNode#isLeafNode"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/devutils/nodes/SimpleTreeNode.java",
                                                "name": "SimpleTreeNode"
                                            }
                                        },
                                        "TreeNode.java": {
                                            "name": "TreeNode",
                                            "class": {
                                                "id": "ea872e4c-c61c-4a6f-ad65-a36bbe4205ef",
                                                "functions": {
                                                    "getParent": {
                                                        "id": "TreeNode#getParent"
                                                    },
                                                    "getDepth": {
                                                        "id": "TreeNode#getDepth"
                                                    },
                                                    "setParent": {
                                                        "id": "TreeNode#setParent"
                                                    },
                                                    "isRootNode": {
                                                        "id": "TreeNode#isRootNode"
                                                    },
                                                    "isLeafNode": {
                                                        "id": "TreeNode#isLeafNode"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/devutils/nodes/TreeNode.java",
                                                "name": "TreeNode"
                                            }
                                        }
                                    },
                                    "searches": {
                                        "MatrixSearchAlgorithm.java": {
                                            "name": "MatrixSearchAlgorithm",
                                            "class": {
                                                "id": "d79d43b5-a43a-4a42-bc50-45e4c5347495",
                                                "functions": {
                                                    "find": {
                                                        "id": "MatrixSearchAlgorithm#find"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/devutils/searches/MatrixSearchAlgorithm.java",
                                                "name": "MatrixSearchAlgorithm"
                                            }
                                        },
                                        "SearchAlgorithm.java": {
                                            "name": "SearchAlgorithm",
                                            "class": {
                                                "id": "21288404-806a-4ad6-9c08-0791c68d3127",
                                                "functions": {
                                                    "find": {
                                                        "id": "SearchAlgorithm#find"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/devutils/searches/SearchAlgorithm.java",
                                                "name": "SearchAlgorithm"
                                            }
                                        }
                                    }
                                },
                                "divideandconquer": {
                                    "BinaryExponentiation.java": {
                                        "name": "BinaryExponentiation",
                                        "class": {
                                            "id": "2ce83aba-7a9f-4c10-9cce-a8290319b9d9",
                                            "functions": {
                                                "calculatePower": {
                                                    "id": "BinaryExponentiation#calculatePower"
                                                },
                                                "power": {
                                                    "id": "BinaryExponentiation#power"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/divideandconquer/BinaryExponentiation.java",
                                            "name": "BinaryExponentiation"
                                        }
                                    },
                                    "ClosestPair.java": {
                                        "name": "ClosestPair",
                                        "class": {
                                            "id": "a47ad936-3376-432f-9d89-e3ed076e93b0",
                                            "functions": {
                                                "yPartition": {
                                                    "id": "ClosestPair#yPartition"
                                                },
                                                "setMinNum": {
                                                    "id": "ClosestPair#setMinNum"
                                                },
                                                "yQuickSort": {
                                                    "id": "ClosestPair#yQuickSort"
                                                },
                                                "buildLocation": {
                                                    "id": "ClosestPair#buildLocation"
                                                },
                                                "xQuickSort": {
                                                    "id": "ClosestPair#xQuickSort"
                                                },
                                                "setSecondCount": {
                                                    "id": "ClosestPair#setSecondCount"
                                                },
                                                "closestPair": {
                                                    "id": "ClosestPair#closestPair"
                                                },
                                                "xPartition": {
                                                    "id": "ClosestPair#xPartition"
                                                },
                                                "main": {
                                                    "id": "ClosestPair#main"
                                                },
                                                "createLocation": {
                                                    "id": "ClosestPair#createLocation"
                                                },
                                                "bruteForce": {
                                                    "id": "ClosestPair#bruteForce"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/divideandconquer/ClosestPair.java",
                                            "name": "ClosestPair"
                                        }
                                    },
                                    "SkylineAlgorithm.java": {
                                        "name": "SkylineAlgorithm",
                                        "class": {
                                            "id": "a7d65758-d8c2-4e16-bf04-6c96532dc008",
                                            "functions": {
                                                "produceSubSkyLines": {
                                                    "id": "SkylineAlgorithm#produceSubSkyLines"
                                                },
                                                "produceFinalSkyLine": {
                                                    "id": "SkylineAlgorithm#produceFinalSkyLine"
                                                },
                                                "getPoints": {
                                                    "id": "SkylineAlgorithm#getPoints"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/divideandconquer/SkylineAlgorithm.java",
                                            "name": "SkylineAlgorithm"
                                        }
                                    },
                                    "StrassenMatrixMultiplication.java": {
                                        "name": "StrassenMatrixMultiplication",
                                        "class": {
                                            "id": "96f78b9c-41e0-4eaa-9e11-050f3b9e7e24",
                                            "functions": {
                                                "add": {
                                                    "id": "StrassenMatrixMultiplication#add"
                                                },
                                                "sub": {
                                                    "id": "StrassenMatrixMultiplication#sub"
                                                },
                                                "split": {
                                                    "id": "StrassenMatrixMultiplication#split"
                                                },
                                                "join": {
                                                    "id": "StrassenMatrixMultiplication#join"
                                                },
                                                "multiply": {
                                                    "id": "StrassenMatrixMultiplication#multiply"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/divideandconquer/StrassenMatrixMultiplication.java",
                                            "name": "StrassenMatrixMultiplication"
                                        }
                                    }
                                },
                                "dynamicprogramming": {
                                    "BoardPath.java": {
                                        "name": "BoardPath",
                                        "class": {
                                            "id": "24271498-f97c-403b-931d-d0feaaede8b6",
                                            "functions": {
                                                "bpRS": {
                                                    "id": "BoardPath#bpRS"
                                                },
                                                "endAlgo": {
                                                    "id": "BoardPath#endAlgo"
                                                },
                                                "bpR": {
                                                    "id": "BoardPath#bpR"
                                                },
                                                "bpIS": {
                                                    "id": "BoardPath#bpIS"
                                                },
                                                "startAlgo": {
                                                    "id": "BoardPath#startAlgo"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/BoardPath.java",
                                            "name": "BoardPath"
                                        }
                                    },
                                    "BoundaryFill.java": {
                                        "name": "BoundaryFill",
                                        "class": {
                                            "id": "13e45fd6-4922-4866-8c98-e9531712d08d",
                                            "functions": {
                                                "putPixel": {
                                                    "id": "BoundaryFill#putPixel"
                                                },
                                                "boundaryFill": {
                                                    "id": "BoundaryFill#boundaryFill"
                                                },
                                                "getPixel": {
                                                    "id": "BoundaryFill#getPixel"
                                                },
                                                "printImageArray": {
                                                    "id": "BoundaryFill#printImageArray"
                                                },
                                                "main": {
                                                    "id": "BoundaryFill#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/BoundaryFill.java",
                                            "name": "BoundaryFill"
                                        }
                                    },
                                    "BruteForceKnapsack.java": {
                                        "name": "BruteForceKnapsack",
                                        "class": {
                                            "id": "7b9ff365-967d-4cf6-a04e-b23cb7bdeb88",
                                            "functions": {
                                                "max": {
                                                    "id": "BruteForceKnapsack#max"
                                                },
                                                "knapSack": {
                                                    "id": "BruteForceKnapsack#knapSack"
                                                },
                                                "main": {
                                                    "id": "BruteForceKnapsack#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/BruteForceKnapsack.java",
                                            "name": "BruteForceKnapsack"
                                        }
                                    },
                                    "CatalanNumber.java": {
                                        "name": "CatalanNumber",
                                        "class": {
                                            "id": "d958615d-3c4e-44c5-938d-c84a7188617d",
                                            "functions": {
                                                "main": {
                                                    "id": "CatalanNumber#main"
                                                },
                                                "findNthCatalan": {
                                                    "id": "CatalanNumber#findNthCatalan"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/CatalanNumber.java",
                                            "name": "CatalanNumber"
                                        }
                                    },
                                    "CoinChange.java": {
                                        "name": "CoinChange",
                                        "class": {
                                            "id": "7fd97044-67d4-49ab-81be-83cb7594ac34",
                                            "functions": {
                                                "printAmount": {
                                                    "id": "CoinChange#printAmount"
                                                },
                                                "change": {
                                                    "id": "CoinChange#change"
                                                },
                                                "main": {
                                                    "id": "CoinChange#main"
                                                },
                                                "minimumCoins": {
                                                    "id": "CoinChange#minimumCoins"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/CoinChange.java",
                                            "name": "CoinChange"
                                        }
                                    },
                                    "CountFriendsPairing.java": {
                                        "name": "CountFriendsPairing",
                                        "class": {
                                            "id": "e598b07b-2806-48bb-ab78-60252e50a5af",
                                            "functions": {
                                                "countFriendsPairing": {
                                                    "id": "CountFriendsPairing#countFriendsPairing"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/CountFriendsPairing.java",
                                            "name": "CountFriendsPairing"
                                        }
                                    },
                                    "DiceThrow.java": {
                                        "name": "DP",
                                        "class": {
                                            "id": "9a80f55d-99dd-4e3f-88ed-666bd799538e",
                                            "functions": {
                                                "findWays": {
                                                    "id": "DP#findWays"
                                                },
                                                "main": {
                                                    "id": "DP#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/DiceThrow.java",
                                            "name": "DP"
                                        }
                                    },
                                    "DyanamicProgrammingKnapsack.java": {
                                        "name": "DyanamicProgrammingKnapsack",
                                        "class": {
                                            "id": "39a1ee63-3da0-4cc3-b1fe-1d6e5cf219fd",
                                            "functions": {
                                                "max": {
                                                    "id": "DyanamicProgrammingKnapsack#max"
                                                },
                                                "knapSack": {
                                                    "id": "DyanamicProgrammingKnapsack#knapSack"
                                                },
                                                "main": {
                                                    "id": "DyanamicProgrammingKnapsack#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/DyanamicProgrammingKnapsack.java",
                                            "name": "DyanamicProgrammingKnapsack"
                                        }
                                    },
                                    "EditDistance.java": {
                                        "name": "EditDistance",
                                        "class": {
                                            "id": "d080e13b-74ba-4a4e-a8fd-6536c648c1de",
                                            "functions": {
                                                "minDistance": {
                                                    "id": "EditDistance#minDistance"
                                                },
                                                "editDistance": {
                                                    "id": "EditDistance#editDistance"
                                                },
                                                "main": {
                                                    "id": "EditDistance#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/EditDistance.java",
                                            "name": "EditDistance"
                                        }
                                    },
                                    "EggDropping.java": {
                                        "name": "EggDropping",
                                        "class": {
                                            "id": "d57e8f45-5e92-4a11-a3cd-9bd2cbd6de8d",
                                            "functions": {
                                                "minTrials": {
                                                    "id": "EggDropping#minTrials"
                                                },
                                                "main": {
                                                    "id": "EggDropping#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/EggDropping.java",
                                            "name": "EggDropping"
                                        }
                                    },
                                    "Fibonacci.java": {
                                        "name": "Fibonacci",
                                        "class": {
                                            "id": "d3c3bb23-d4a3-482b-88e9-1866cdbc090a",
                                            "functions": {
                                                "fibBinet": {
                                                    "id": "Fibonacci#fibBinet"
                                                },
                                                "fibBotUp": {
                                                    "id": "Fibonacci#fibBotUp"
                                                },
                                                "fibMemo": {
                                                    "id": "Fibonacci#fibMemo"
                                                },
                                                "main": {
                                                    "id": "Fibonacci#main"
                                                },
                                                "fibOptimized": {
                                                    "id": "Fibonacci#fibOptimized"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/Fibonacci.java",
                                            "name": "Fibonacci"
                                        }
                                    },
                                    "FordFulkerson.java": {
                                        "name": "FordFulkerson",
                                        "class": {
                                            "id": "11b5e157-90d5-4d70-9a9b-7bd07cd91ee2",
                                            "functions": {
                                                "networkFlow": {
                                                    "id": "FordFulkerson#networkFlow"
                                                },
                                                "main": {
                                                    "id": "FordFulkerson#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/FordFulkerson.java",
                                            "name": "FordFulkerson"
                                        }
                                    },
                                    "KadaneAlgorithm.java": {
                                        "name": "KadaneAlgorithm",
                                        "class": {
                                            "id": "1b27c632-ffcc-4f4b-ada2-0c6d7ad16b62",
                                            "functions": {
                                                "max_Sum": {
                                                    "id": "KadaneAlgorithm#max_Sum"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/KadaneAlgorithm.java",
                                            "name": "KadaneAlgorithm"
                                        }
                                    },
                                    "Knapsack.java": {
                                        "name": "Knapsack",
                                        "class": {
                                            "id": "967e13fe-4555-4f77-94f8-5c3cfc98690c",
                                            "functions": {
                                                "knapSack": {
                                                    "id": "Knapsack#knapSack"
                                                },
                                                "main": {
                                                    "id": "Knapsack#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/Knapsack.java",
                                            "name": "Knapsack"
                                        }
                                    },
                                    "KnapsackMemoization.java": {
                                        "name": "KnapsackMemoization",
                                        "class": {
                                            "id": "19cda8d3-b306-430e-b695-f63ed1bd94ee",
                                            "functions": {
                                                "knapSack": {
                                                    "id": "KnapsackMemoization#knapSack"
                                                },
                                                "knapSackRec": {
                                                    "id": "KnapsackMemoization#knapSackRec"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/KnapsackMemoization.java",
                                            "name": "KnapsackMemoization"
                                        }
                                    },
                                    "LevenshteinDistance.java": {
                                        "name": "LevenshteinDistance",
                                        "class": {
                                            "id": "128fc4cd-68c5-417f-8210-66e7c0b493ca",
                                            "functions": {
                                                "main": {
                                                    "id": "LevenshteinDistance#main"
                                                },
                                                "minimum": {
                                                    "id": "LevenshteinDistance#minimum"
                                                },
                                                "calculateLevenshteinDistance": {
                                                    "id": "LevenshteinDistance#calculateLevenshteinDistance"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/LevenshteinDistance.java",
                                            "name": "LevenshteinDistance"
                                        }
                                    },
                                    "LongestAlternatingSubsequence.java": {
                                        "name": "LongestAlternatingSubsequence",
                                        "class": {
                                            "id": "fa2d010f-a268-48aa-b13a-00d7ccf39614",
                                            "functions": {
                                                "AlternatingLength": {
                                                    "id": "LongestAlternatingSubsequence#AlternatingLength"
                                                },
                                                "main": {
                                                    "id": "LongestAlternatingSubsequence#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/LongestAlternatingSubsequence.java",
                                            "name": "LongestAlternatingSubsequence"
                                        }
                                    },
                                    "LongestCommonSubsequence.java": {
                                        "name": "LongestCommonSubsequence",
                                        "class": {
                                            "id": "4868e6a9-c5b4-47e9-a464-603e98ed640e",
                                            "functions": {
                                                "lcsString": {
                                                    "id": "LongestCommonSubsequence#lcsString"
                                                },
                                                "main": {
                                                    "id": "LongestCommonSubsequence#main"
                                                },
                                                "getLCS": {
                                                    "id": "LongestCommonSubsequence#getLCS"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/LongestCommonSubsequence.java",
                                            "name": "LongestCommonSubsequence"
                                        }
                                    },
                                    "LongestIncreasingSubsequence.java": {
                                        "name": "LongestIncreasingSubsequence",
                                        "class": {
                                            "id": "efba5530-ca03-415d-8925-2865c45d2f01",
                                            "functions": {
                                                "upperBound": {
                                                    "id": "LongestIncreasingSubsequence#upperBound"
                                                },
                                                "LIS": {
                                                    "id": "LongestIncreasingSubsequence#LIS"
                                                },
                                                "binarySearchBetween": {
                                                    "id": "LongestIncreasingSubsequence#binarySearchBetween"
                                                },
                                                "findLISLen": {
                                                    "id": "LongestIncreasingSubsequence#findLISLen"
                                                },
                                                "main": {
                                                    "id": "LongestIncreasingSubsequence#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/LongestIncreasingSubsequence.java",
                                            "name": "LongestIncreasingSubsequence"
                                        }
                                    },
                                    "LongestPalindromicSubsequence.java": {
                                        "name": "LongestPalindromicSubsequence",
                                        "class": {
                                            "id": "09dbc233-38c4-41c1-a8f5-a861fe93ee8b",
                                            "functions": {
                                                "main": {
                                                    "id": "LongestPalindromicSubsequence#main"
                                                },
                                                "recursiveLPS": {
                                                    "id": "LongestPalindromicSubsequence#recursiveLPS"
                                                },
                                                "LPS": {
                                                    "id": "LongestPalindromicSubsequence#LPS"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/LongestPalindromicSubsequence.java",
                                            "name": "LongestPalindromicSubsequence"
                                        }
                                    },
                                    "LongestPalindromicSubstring.java": {
                                        "name": "LongestPalindromicSubstring",
                                        "class": {
                                            "id": "8b12a663-af05-4c56-a5ab-5d8cbea4bf1e",
                                            "functions": {
                                                "main": {
                                                    "id": "LongestPalindromicSubstring#main"
                                                },
                                                "LPS": {
                                                    "id": "LongestPalindromicSubstring#LPS"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/LongestPalindromicSubstring.java",
                                            "name": "LongestPalindromicSubstring"
                                        }
                                    },
                                    "LongestValidParentheses.java": {
                                        "name": "LongestValidParentheses",
                                        "class": {
                                            "id": "4f7b11ac-c2ad-429d-b7b4-890ef63a2c1f",
                                            "functions": {
                                                "getLongestValidParentheses": {
                                                    "id": "LongestValidParentheses#getLongestValidParentheses"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/LongestValidParentheses.java",
                                            "name": "LongestValidParentheses"
                                        }
                                    },
                                    "MatrixChainMultiplication.java": {
                                        "name": "MatrixChainMultiplication",
                                        "class": {
                                            "id": "ba581b41-ce04-4c78-aae6-4d63f602498f",
                                            "functions": {
                                                "input": {
                                                    "id": "MatrixChainMultiplication#input"
                                                },
                                                "printArray": {
                                                    "id": "MatrixChainMultiplication#printArray"
                                                },
                                                "main": {
                                                    "id": "MatrixChainMultiplication#main"
                                                },
                                                "printOptimalParens": {
                                                    "id": "MatrixChainMultiplication#printOptimalParens"
                                                },
                                                "matrixChainOrder": {
                                                    "id": "MatrixChainMultiplication#matrixChainOrder"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/MatrixChainMultiplication.java",
                                            "name": "MatrixChainMultiplication"
                                        }
                                    },
                                    "MatrixChainRecursiveTopDownMemoisation.java": {
                                        "name": "MatrixChainRecursiveTopDownMemoisation",
                                        "class": {
                                            "id": "14f20944-4031-44ec-98e2-0def3c68871b",
                                            "functions": {
                                                "Lookup_Chain": {
                                                    "id": "MatrixChainRecursiveTopDownMemoisation#Lookup_Chain"
                                                },
                                                "main": {
                                                    "id": "MatrixChainRecursiveTopDownMemoisation#main"
                                                },
                                                "Memoized_Matrix_Chain": {
                                                    "id": "MatrixChainRecursiveTopDownMemoisation#Memoized_Matrix_Chain"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/MatrixChainRecursiveTopDownMemoisation.java",
                                            "name": "MatrixChainRecursiveTopDownMemoisation"
                                        }
                                    },
                                    "MinimumPathSum.java": {
                                        "name": "MinimumPathSum",
                                        "class": {
                                            "id": "343354f3-8238-4f8d-a30e-4134a18090f4",
                                            "functions": {
                                                "testRegular": {
                                                    "id": "MinimumPathSum#testRegular"
                                                },
                                                "testLessRows": {
                                                    "id": "MinimumPathSum#testLessRows"
                                                },
                                                "testOneRowOneColumn": {
                                                    "id": "MinimumPathSum#testOneRowOneColumn"
                                                },
                                                "testLessColumns": {
                                                    "id": "MinimumPathSum#testLessColumns"
                                                },
                                                "minimumPathSum": {
                                                    "id": "MinimumPathSum#minimumPathSum"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/MinimumPathSum.java",
                                            "name": "MinimumPathSum"
                                        }
                                    },
                                    "MinimumSumPartition.java": {
                                        "name": "MinimumSumPartition",
                                        "class": {
                                            "id": "b709b08f-a41f-449b-9ef9-af57ef044523",
                                            "functions": {
                                                "getMin": {
                                                    "id": "MinimumSumPartition#getMin"
                                                },
                                                "subSet": {
                                                    "id": "MinimumSumPartition#subSet"
                                                },
                                                "main": {
                                                    "id": "MinimumSumPartition#main"
                                                },
                                                "getSum": {
                                                    "id": "MinimumSumPartition#getSum"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/MinimumSumPartition.java",
                                            "name": "MinimumSumPartition"
                                        }
                                    },
                                    "NewManShanksPrime.java": {
                                        "name": "NewManShanksPrime",
                                        "class": {
                                            "id": "1c30d65d-d9fe-4566-872d-d89e2f77407f",
                                            "functions": {
                                                "nthManShanksPrime": {
                                                    "id": "NewManShanksPrime#nthManShanksPrime"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/NewManShanksPrime.java",
                                            "name": "NewManShanksPrime"
                                        }
                                    },
                                    "OptimalJobScheduling.java": {
                                        "name": "OptimalJobScheduling",
                                        "class": {
                                            "id": "1d2b0243-b20e-4533-a563-e448da526068",
                                            "functions": {
                                                "calculateCost": {
                                                    "id": "OptimalJobScheduling#calculateCost"
                                                },
                                                "showResults": {
                                                    "id": "OptimalJobScheduling#showResults"
                                                },
                                                "runningCost": {
                                                    "id": "OptimalJobScheduling#runningCost"
                                                },
                                                "findMin": {
                                                    "id": "OptimalJobScheduling#findMin"
                                                },
                                                "execute": {
                                                    "id": "OptimalJobScheduling#execute"
                                                },
                                                "getCost": {
                                                    "id": "OptimalJobScheduling#getCost"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/OptimalJobScheduling.java",
                                            "name": "OptimalJobScheduling"
                                        }
                                    },
                                    "PalindromicPartitioning.java": {
                                        "name": "PalindromicPartitioning",
                                        "class": {
                                            "id": "fba60d4e-1754-4798-a0b1-8ecdb9a3f820",
                                            "functions": {
                                                "main": {
                                                    "id": "PalindromicPartitioning#main"
                                                },
                                                "minimalpartitions": {
                                                    "id": "PalindromicPartitioning#minimalpartitions"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/PalindromicPartitioning.java",
                                            "name": "PalindromicPartitioning"
                                        }
                                    },
                                    "RegexMatching.java": {
                                        "name": "RegexMatching",
                                        "class": {
                                            "id": "bd1b6d8a-a7ed-45f1-ac9a-ad71c71d070c",
                                            "functions": {
                                                "regexBU": {
                                                    "id": "RegexMatching#regexBU"
                                                },
                                                "main": {
                                                    "id": "RegexMatching#main"
                                                },
                                                "regexRecursion": {
                                                    "id": "RegexMatching#regexRecursion"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/RegexMatching.java",
                                            "name": "RegexMatching"
                                        }
                                    },
                                    "RodCutting.java": {
                                        "name": "RodCutting",
                                        "class": {
                                            "id": "51d4280a-d0d9-4458-9f3f-867bd511506f",
                                            "functions": {
                                                "cutRod": {
                                                    "id": "RodCutting#cutRod"
                                                },
                                                "main": {
                                                    "id": "RodCutting#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/RodCutting.java",
                                            "name": "RodCutting"
                                        }
                                    },
                                    "ShortestCommonSupersequenceLength.java": {
                                        "name": "ShortestSuperSequence",
                                        "class": {
                                            "id": "e3f8c743-3473-4cb6-9346-1c98f4a04f55",
                                            "functions": {
                                                "main": {
                                                    "id": "ShortestSuperSequence#main"
                                                },
                                                "shortestSuperSequence": {
                                                    "id": "ShortestSuperSequence#shortestSuperSequence"
                                                },
                                                "lcs": {
                                                    "id": "ShortestSuperSequence#lcs"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/ShortestCommonSupersequenceLength.java",
                                            "name": "ShortestSuperSequence"
                                        }
                                    },
                                    "SubsetCount.java": {
                                        "name": "SubsetCount",
                                        "class": {
                                            "id": "dfb485e2-5e72-4d61-b848-e115aa2742ef",
                                            "functions": {
                                                "getCountSO": {
                                                    "id": "SubsetCount#getCountSO"
                                                },
                                                "getCount": {
                                                    "id": "SubsetCount#getCount"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/SubsetCount.java",
                                            "name": "SubsetCount"
                                        }
                                    },
                                    "SubsetSum.java": {
                                        "name": "SubsetSum",
                                        "class": {
                                            "id": "a2b2efb5-753a-4973-b9fc-53fc7989b8a0",
                                            "functions": {
                                                "subsetSum": {
                                                    "id": "SubsetSum#subsetSum"
                                                },
                                                "main": {
                                                    "id": "SubsetSum#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/SubsetSum.java",
                                            "name": "SubsetSum"
                                        }
                                    },
                                    "Sum_Of_Subset.java": {
                                        "name": "Sum_Of_Subset",
                                        "class": {
                                            "id": "7733a8e3-334c-4a70-a6a9-dde956da8c7c",
                                            "functions": {
                                                "subsetSum": {
                                                    "id": "Sum_Of_Subset#subsetSum"
                                                },
                                                "main": {
                                                    "id": "Sum_Of_Subset#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/Sum_Of_Subset.java",
                                            "name": "Sum_Of_Subset"
                                        }
                                    },
                                    "UniquePaths.java": {
                                        "name": "UniquePaths",
                                        "class": {
                                            "id": "6ff022df-8bb0-47f2-bebf-da7f1a03ac63",
                                            "functions": {
                                                "uniquePaths2": {
                                                    "id": "UniquePaths#uniquePaths2"
                                                },
                                                "uniquePaths": {
                                                    "id": "UniquePaths#uniquePaths"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/UniquePaths.java",
                                            "name": "UniquePaths"
                                        }
                                    },
                                    "WineProblem.java": {
                                        "name": "WineProblem",
                                        "class": {
                                            "id": "b3601cc0-33e8-4601-af08-0ba04e2c3458",
                                            "functions": {
                                                "WPTD": {
                                                    "id": "WineProblem#WPTD"
                                                },
                                                "WPRecursion": {
                                                    "id": "WineProblem#WPRecursion"
                                                },
                                                "WPBU": {
                                                    "id": "WineProblem#WPBU"
                                                },
                                                "main": {
                                                    "id": "WineProblem#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/dynamicprogramming/WineProblem.java",
                                            "name": "WineProblem"
                                        }
                                    }
                                },
                                "io": {
                                    "BufferedReader.java": {
                                        "name": "BufferedReader",
                                        "class": {
                                            "id": "a478ae24-b3eb-44d5-9f7f-c7cbb7d769c3",
                                            "functions": {
                                                "readBlock": {
                                                    "id": "BufferedReader#readBlock"
                                                },
                                                "refill": {
                                                    "id": "BufferedReader#refill"
                                                },
                                                "read": {
                                                    "id": "BufferedReader#read"
                                                },
                                                "justRefill": {
                                                    "id": "BufferedReader#justRefill"
                                                },
                                                "available": {
                                                    "id": "BufferedReader#available"
                                                },
                                                "close": {
                                                    "id": "BufferedReader#close"
                                                },
                                                "assertStreamOpen": {
                                                    "id": "BufferedReader#assertStreamOpen"
                                                },
                                                "peek": {
                                                    "id": "BufferedReader#peek"
                                                },
                                                "pushRefreshData": {
                                                    "id": "BufferedReader#pushRefreshData"
                                                },
                                                "needsRefill": {
                                                    "id": "BufferedReader#needsRefill"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/io/BufferedReader.java",
                                            "name": "BufferedReader"
                                        }
                                    }
                                },
                                "maths": {
                                    "AbsoluteMax.java": {
                                        "name": "AbsoluteMax",
                                        "class": {
                                            "id": "c46326ee-1068-4a28-b403-c2d1ea50c192",
                                            "functions": {
                                                "getMaxValue": {
                                                    "id": "AbsoluteMax#getMaxValue"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/AbsoluteMax.java",
                                            "name": "AbsoluteMax"
                                        }
                                    },
                                    "AbsoluteMin.java": {
                                        "name": "AbsoluteMin",
                                        "class": {
                                            "id": "f0ef72a8-3ee6-4f84-ae7a-adf93f20b7aa",
                                            "functions": {
                                                "getMinValue": {
                                                    "id": "AbsoluteMin#getMinValue"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/AbsoluteMin.java",
                                            "name": "AbsoluteMin"
                                        }
                                    },
                                    "AbsoluteValue.java": {
                                        "name": "AbsoluteValue",
                                        "class": {
                                            "id": "5fadb4f0-db7c-444b-8f5e-3a366ea13aac",
                                            "functions": {
                                                "getAbsValue": {
                                                    "id": "AbsoluteValue#getAbsValue"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/AbsoluteValue.java",
                                            "name": "AbsoluteValue"
                                        }
                                    },
                                    "AliquotSum.java": {
                                        "name": "AliquotSum",
                                        "class": {
                                            "id": "9b2f18fb-59f4-46fa-9930-4bf0eedc55f2",
                                            "functions": {
                                                "getAliquotSum": {
                                                    "id": "AliquotSum#getAliquotSum"
                                                },
                                                "getAliquotValue": {
                                                    "id": "AliquotSum#getAliquotValue"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/AliquotSum.java",
                                            "name": "AliquotSum"
                                        }
                                    },
                                    "AmicableNumber.java": {
                                        "name": "AmicableNumber",
                                        "class": {
                                            "id": "1f9b6b5f-1948-49d4-b483-7fad1999f8f1",
                                            "functions": {
                                                "recursiveCalcOfDividerSum": {
                                                    "id": "AmicableNumber#recursiveCalcOfDividerSum"
                                                },
                                                "isAmicableNumber": {
                                                    "id": "AmicableNumber#isAmicableNumber"
                                                },
                                                "findAllInRange": {
                                                    "id": "AmicableNumber#findAllInRange"
                                                },
                                                "main": {
                                                    "id": "AmicableNumber#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/AmicableNumber.java",
                                            "name": "AmicableNumber"
                                        }
                                    },
                                    "Area.java": {
                                        "name": "Area",
                                        "class": {
                                            "id": "7ce2e0b5-2ce4-417f-a2ce-6e949ea058ce",
                                            "functions": {
                                                "surfaceAreaCylinder": {
                                                    "id": "Area#surfaceAreaCylinder"
                                                },
                                                "surfaceAreaSquare": {
                                                    "id": "Area#surfaceAreaSquare"
                                                },
                                                "surfaceAreaTrapezium": {
                                                    "id": "Area#surfaceAreaTrapezium"
                                                },
                                                "surfaceAreaSphere": {
                                                    "id": "Area#surfaceAreaSphere"
                                                },
                                                "surfaceAreaRectangle": {
                                                    "id": "Area#surfaceAreaRectangle"
                                                },
                                                "surfaceAreaTriangleRectangle": {
                                                    "id": "Area#surfaceAreaTriangleRectangle"
                                                },
                                                "surfaceAreaCircle": {
                                                    "id": "Area#surfaceAreaCircle"
                                                },
                                                "surfaceAreaHemisphere": {
                                                    "id": "Area#surfaceAreaHemisphere"
                                                },
                                                "surfaceAreaCone": {
                                                    "id": "Area#surfaceAreaCone"
                                                },
                                                "surfaceAreaCube": {
                                                    "id": "Area#surfaceAreaCube"
                                                },
                                                "surfaceAreaParallelogram": {
                                                    "id": "Area#surfaceAreaParallelogram"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Area.java",
                                            "name": "Area"
                                        }
                                    },
                                    "Armstrong.java": {
                                        "name": "Armstrong",
                                        "class": {
                                            "id": "520acc60-dd6a-4255-80ed-21edd682f343",
                                            "functions": {
                                                "isArmstrong": {
                                                    "id": "Armstrong#isArmstrong"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Armstrong.java",
                                            "name": "Armstrong"
                                        }
                                    },
                                    "AutomorphicNumber.java": {
                                        "name": "AutomorphicNumber",
                                        "class": {
                                            "id": "96a1c680-0366-4eca-ae34-1bb14a4ff0e3",
                                            "functions": {
                                                "isAutomorphic": {
                                                    "id": "AutomorphicNumber#isAutomorphic"
                                                },
                                                "isAutomorphic3": {
                                                    "id": "AutomorphicNumber#isAutomorphic3"
                                                },
                                                "isAutomorphic2": {
                                                    "id": "AutomorphicNumber#isAutomorphic2"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/AutomorphicNumber.java",
                                            "name": "AutomorphicNumber"
                                        }
                                    },
                                    "Average.java": {
                                        "name": "Average",
                                        "class": {
                                            "id": "42920fbd-6722-40eb-a1dc-facad0478fb5",
                                            "functions": {
                                                "average": {
                                                    "id": "Average#average"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Average.java",
                                            "name": "Average"
                                        }
                                    },
                                    "BinaryPow.java": {
                                        "name": "BinaryPow",
                                        "class": {
                                            "id": "f4021447-3608-46a6-bbc2-42d12ae6d5da",
                                            "functions": {
                                                "binPow": {
                                                    "id": "BinaryPow#binPow"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/BinaryPow.java",
                                            "name": "BinaryPow"
                                        }
                                    },
                                    "BinomialCoefficient.java": {
                                        "name": "BinomialCoefficient",
                                        "class": {
                                            "id": "df84fa69-20a3-458b-a667-11ff848c69d8",
                                            "functions": {
                                                "binomialCoefficient": {
                                                    "id": "BinomialCoefficient#binomialCoefficient"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/BinomialCoefficient.java",
                                            "name": "BinomialCoefficient"
                                        }
                                    },
                                    "Ceil.java": {
                                        "name": "Ceil",
                                        "class": {
                                            "id": "70e12637-6982-4cdb-a8ba-087c7fd3497b",
                                            "functions": {
                                                "ceil": {
                                                    "id": "Ceil#ceil"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Ceil.java",
                                            "name": "Ceil"
                                        }
                                    },
                                    "CircularConvolutionFFT.java": {
                                        "name": "CircularConvolutionFFT",
                                        "class": {
                                            "id": "ae893644-24b2-4374-9b14-85f820be7ed9",
                                            "functions": {
                                                "padding": {
                                                    "id": "CircularConvolutionFFT#padding"
                                                },
                                                "fftCircularConvolution": {
                                                    "id": "CircularConvolutionFFT#fftCircularConvolution"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/CircularConvolutionFFT.java",
                                            "name": "CircularConvolutionFFT"
                                        }
                                    },
                                    "CollatzConjecture.java": {
                                        "name": "CollatzConjecture",
                                        "class": {
                                            "id": "e6a99575-3909-4906-a6d2-e5c89d3dca09",
                                            "functions": {
                                                "nextNumber": {
                                                    "id": "CollatzConjecture#nextNumber"
                                                },
                                                "collatzConjecture": {
                                                    "id": "CollatzConjecture#collatzConjecture"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/CollatzConjecture.java",
                                            "name": "CollatzConjecture"
                                        }
                                    },
                                    "Combinations.java": {
                                        "name": "Combinations",
                                        "class": {
                                            "id": "e6dafd26-c568-4fe7-b538-18e5e6ae3376",
                                            "functions": {
                                                "combinations": {
                                                    "id": "Combinations#combinations"
                                                },
                                                "factorial": {
                                                    "id": "Combinations#factorial"
                                                },
                                                "combinationsOptimized": {
                                                    "id": "Combinations#combinationsOptimized"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Combinations.java",
                                            "name": "Combinations"
                                        }
                                    },
                                    "Convolution.java": {
                                        "name": "Convolution",
                                        "class": {
                                            "id": "c6f2e602-e14f-4e09-a530-f2e963cc168e",
                                            "functions": {
                                                "convolution": {
                                                    "id": "Convolution#convolution"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Convolution.java",
                                            "name": "Convolution"
                                        }
                                    },
                                    "ConvolutionFFT.java": {
                                        "name": "ConvolutionFFT",
                                        "class": {
                                            "id": "06a25218-631a-4c5f-a7b6-a747b98ce823",
                                            "functions": {
                                                "padding": {
                                                    "id": "ConvolutionFFT#padding"
                                                },
                                                "convolutionFFT": {
                                                    "id": "ConvolutionFFT#convolutionFFT"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/ConvolutionFFT.java",
                                            "name": "ConvolutionFFT"
                                        }
                                    },
                                    "DeterminantOfMatrix.java": {
                                        "name": "DeterminantOfMatrix",
                                        "class": {
                                            "id": "108726bf-6484-4478-a29f-16473cd855ad",
                                            "functions": {
                                                "main": {
                                                    "id": "DeterminantOfMatrix#main"
                                                },
                                                "determinant": {
                                                    "id": "DeterminantOfMatrix#determinant"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/DeterminantOfMatrix.java",
                                            "name": "DeterminantOfMatrix"
                                        }
                                    },
                                    "DigitalRoot.java": {
                                        "name": "DigitalRoot",
                                        "class": {
                                            "id": "e114662e-d8b3-4a04-9b22-b554781d0d5c",
                                            "functions": {
                                                "single": {
                                                    "id": "DigitalRoot#single"
                                                },
                                                "digitalRoot": {
                                                    "id": "DigitalRoot#digitalRoot"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/DigitalRoot.java",
                                            "name": "DigitalRoot"
                                        }
                                    },
                                    "DistanceFormula.java": {
                                        "name": "DistanceFormula",
                                        "class": {
                                            "id": "c17cba8f-9efa-49bf-88fa-276bef6f6f17",
                                            "functions": {
                                                "manhattanDistance": {
                                                    "id": "DistanceFormula#manhattanDistance"
                                                },
                                                "hammingDistance": {
                                                    "id": "DistanceFormula#hammingDistance"
                                                },
                                                "minkowskiDistance": {
                                                    "id": "DistanceFormula#minkowskiDistance"
                                                },
                                                "euclideanDistance": {
                                                    "id": "DistanceFormula#euclideanDistance"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/DistanceFormula.java",
                                            "name": "DistanceFormula"
                                        }
                                    },
                                    "DudeneyNumber.java": {
                                        "name": "DudeneyNumber",
                                        "class": {
                                            "id": "196694aa-df12-48f8-8a38-496939f28d3b",
                                            "functions": {
                                                "isDudeney": {
                                                    "id": "DudeneyNumber#isDudeney"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/DudeneyNumber.java",
                                            "name": "DudeneyNumber"
                                        }
                                    },
                                    "EulerMethod.java": {
                                        "name": "EulerMethod",
                                        "class": {
                                            "id": "f2ed9eff-774a-40a4-9ae7-45a78f40c756",
                                            "functions": {
                                                "eulerFull": {
                                                    "id": "EulerMethod#eulerFull"
                                                },
                                                "eulerStep": {
                                                    "id": "EulerMethod#eulerStep"
                                                },
                                                "main": {
                                                    "id": "EulerMethod#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/EulerMethod.java",
                                            "name": "EulerMethod"
                                        }
                                    },
                                    "FFT.java": {
                                        "name": "FFT",
                                        "class": {
                                            "id": "1de67fd5-8813-4982-8a7d-9509f3960173",
                                            "functions": {
                                                "fft": {
                                                    "id": "FFT#fft"
                                                },
                                                "paddingPowerOfTwo": {
                                                    "id": "FFT#paddingPowerOfTwo"
                                                },
                                                "findLog2": {
                                                    "id": "FFT#findLog2"
                                                },
                                                "fftBitReversal": {
                                                    "id": "FFT#fftBitReversal"
                                                },
                                                "inverseFFT": {
                                                    "id": "FFT#inverseFFT"
                                                },
                                                "reverseBits": {
                                                    "id": "FFT#reverseBits"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/FFT.java",
                                            "name": "FFT"
                                        }
                                    },
                                    "FFTBluestein.java": {
                                        "name": "FFTBluestein",
                                        "class": {
                                            "id": "124ed833-9083-4925-9413-cb12781a4b99",
                                            "functions": {
                                                "fftBluestein": {
                                                    "id": "FFTBluestein#fftBluestein"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/FFTBluestein.java",
                                            "name": "FFTBluestein"
                                        }
                                    },
                                    "Factorial.java": {
                                        "name": "Factorial",
                                        "class": {
                                            "id": "cf07077f-e1c5-4c39-bc72-6c1be13eac3d",
                                            "functions": {
                                                "factorial": {
                                                    "id": "Factorial#factorial"
                                                },
                                                "main": {
                                                    "id": "Factorial#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Factorial.java",
                                            "name": "Factorial"
                                        }
                                    },
                                    "FactorialRecursion.java": {
                                        "name": "FactorialRecursion",
                                        "class": {
                                            "id": "0bb59b21-9a8a-4dbb-82fd-10bbdfcdc41c",
                                            "functions": {
                                                "factorial": {
                                                    "id": "FactorialRecursion#factorial"
                                                },
                                                "main": {
                                                    "id": "FactorialRecursion#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/FactorialRecursion.java",
                                            "name": "FactorialRecursion"
                                        }
                                    },
                                    "FastInverseSqrt.java": {
                                        "name": "FastInverseSqrt",
                                        "class": {
                                            "id": "2828d63b-9aeb-46aa-99b2-c6cc9ba0a04d",
                                            "functions": {
                                                "inverseSqrt": {
                                                    "id": "FastInverseSqrt#inverseSqrt"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/FastInverseSqrt.java",
                                            "name": "FastInverseSqrt"
                                        }
                                    },
                                    "FibonacciJavaStreams.java": {
                                        "name": "FibonacciJavaStreams",
                                        "class": {
                                            "id": "0aba90af-0626-43e1-82bc-03b9795f3831",
                                            "functions": {
                                                "main": {
                                                    "id": "FibonacciJavaStreams#main"
                                                },
                                                "calculate": {
                                                    "id": "FibonacciJavaStreams#calculate"
                                                },
                                                "assertThat": {
                                                    "id": "FibonacciJavaStreams#assertThat"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/FibonacciJavaStreams.java",
                                            "name": "FibonacciJavaStreams"
                                        }
                                    },
                                    "FibonacciNumber.java": {
                                        "name": "FibonacciNumber",
                                        "class": {
                                            "id": "6814b73c-a99a-4af8-9e66-6ea367f27377",
                                            "functions": {
                                                "main": {
                                                    "id": "FibonacciNumber#main"
                                                },
                                                "isPerfectSquare": {
                                                    "id": "FibonacciNumber#isPerfectSquare"
                                                },
                                                "isFibonacciNumber": {
                                                    "id": "FibonacciNumber#isFibonacciNumber"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/FibonacciNumber.java",
                                            "name": "FibonacciNumber"
                                        }
                                    },
                                    "FindKthNumber.java": {
                                        "name": "FindKthNumber",
                                        "class": {
                                            "id": "79febcee-fcc1-4434-b76e-035f7d40eb13",
                                            "functions": {
                                                "partition": {
                                                    "id": "FindKthNumber#partition"
                                                },
                                                "swap": {
                                                    "id": "FindKthNumber#swap"
                                                },
                                                "generateArray": {
                                                    "id": "FindKthNumber#generateArray"
                                                },
                                                "main": {
                                                    "id": "FindKthNumber#main"
                                                },
                                                "findKthMax": {
                                                    "id": "FindKthNumber#findKthMax"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/FindKthNumber.java",
                                            "name": "FindKthNumber"
                                        }
                                    },
                                    "FindMax.java": {
                                        "name": "FindMax",
                                        "class": {
                                            "id": "36baa632-cf2e-47f7-af77-a690a8da57a2",
                                            "functions": {
                                                "main": {
                                                    "id": "FindMax#main"
                                                },
                                                "findMax": {
                                                    "id": "FindMax#findMax"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/FindMax.java",
                                            "name": "FindMax"
                                        }
                                    },
                                    "FindMaxRecursion.java": {
                                        "name": "FindMaxRecursion",
                                        "class": {
                                            "id": "5e75e348-9ddb-417b-b5d1-e3b43b368b4e",
                                            "functions": {
                                                "max": {
                                                    "id": "FindMaxRecursion#max"
                                                },
                                                "main": {
                                                    "id": "FindMaxRecursion#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/FindMaxRecursion.java",
                                            "name": "FindMaxRecursion"
                                        }
                                    },
                                    "FindMin.java": {
                                        "name": "FindMin",
                                        "class": {
                                            "id": "dedc1c11-78a5-40bc-9831-e4db016416c3",
                                            "functions": {
                                                "main": {
                                                    "id": "FindMin#main"
                                                },
                                                "findMin": {
                                                    "id": "FindMin#findMin"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/FindMin.java",
                                            "name": "FindMin"
                                        }
                                    },
                                    "FindMinRecursion.java": {
                                        "name": "FindMinRecursion",
                                        "class": {
                                            "id": "0043f2b4-d46f-42b5-9740-5c420ec6d32b",
                                            "functions": {
                                                "min": {
                                                    "id": "FindMinRecursion#min"
                                                },
                                                "main": {
                                                    "id": "FindMinRecursion#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/FindMinRecursion.java",
                                            "name": "FindMinRecursion"
                                        }
                                    },
                                    "Floor.java": {
                                        "name": "Floor",
                                        "class": {
                                            "id": "2adec50e-69de-4f36-832e-e11786250ce1",
                                            "functions": {
                                                "main": {
                                                    "id": "Floor#main"
                                                },
                                                "floor": {
                                                    "id": "Floor#floor"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Floor.java",
                                            "name": "Floor"
                                        }
                                    },
                                    "FrizzyNumber.java": {
                                        "name": "FrizzyNumber",
                                        "class": {
                                            "id": "975a5258-1209-475b-ba8d-3d5b73b69d99",
                                            "functions": {
                                                "getNthFrizzy": {
                                                    "id": "FrizzyNumber#getNthFrizzy"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/FrizzyNumber.java",
                                            "name": "FrizzyNumber"
                                        }
                                    },
                                    "GCD.java": {
                                        "name": "GCD",
                                        "class": {
                                            "id": "0b344f0b-8da6-4e9a-9365-47ed5d22f3bd",
                                            "functions": {
                                                "gcd": {
                                                    "id": "GCD#gcd"
                                                },
                                                "main": {
                                                    "id": "GCD#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/GCD.java",
                                            "name": "GCD"
                                        }
                                    },
                                    "GCDRecursion.java": {
                                        "name": "GCDRecursion",
                                        "class": {
                                            "id": "6c3c38ee-f803-4509-838b-98eb6279ad25",
                                            "functions": {
                                                "gcd": {
                                                    "id": "GCDRecursion#gcd"
                                                },
                                                "main": {
                                                    "id": "GCDRecursion#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/GCDRecursion.java",
                                            "name": "GCDRecursion"
                                        }
                                    },
                                    "Gaussian.java": {
                                        "name": "Gaussian",
                                        "class": {
                                            "id": "4eb8d236-8ea5-4912-80f4-75a0dd8faedd",
                                            "functions": {
                                                "gaussianElimination": {
                                                    "id": "Gaussian#gaussianElimination"
                                                },
                                                "gaussian": {
                                                    "id": "Gaussian#gaussian"
                                                },
                                                "valueOfGaussian": {
                                                    "id": "Gaussian#valueOfGaussian"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Gaussian.java",
                                            "name": "Gaussian"
                                        }
                                    },
                                    "GenericRoot.java": {
                                        "name": "GenericRoot",
                                        "class": {
                                            "id": "94bca3b9-4023-447a-9512-8831be1b62b2",
                                            "functions": {
                                                "genericRoot": {
                                                    "id": "GenericRoot#genericRoot"
                                                },
                                                "main": {
                                                    "id": "GenericRoot#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/GenericRoot.java",
                                            "name": "GenericRoot"
                                        }
                                    },
                                    "HarshadNumber.java": {
                                        "name": "HarshadNumber",
                                        "class": {
                                            "id": "1f7922dd-ca5b-4e70-97d0-11db00d85fbd",
                                            "functions": {
                                                "isHarshad": {
                                                    "id": "HarshadNumber#isHarshad"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/HarshadNumber.java",
                                            "name": "HarshadNumber"
                                        }
                                    },
                                    "HeronsFormula.java": {
                                        "name": "HeronsFormula",
                                        "class": {
                                            "id": "bd8f94b1-d8f5-483e-bea0-8feb0f3cf02c",
                                            "functions": {
                                                "Herons": {
                                                    "id": "HeronsFormula#Herons"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/HeronsFormula.java",
                                            "name": "HeronsFormula"
                                        }
                                    },
                                    "JosephusProblem.java": {
                                        "name": "JosephusProblem",
                                        "class": {
                                            "id": "b65cc45c-f66d-4ac2-9f31-cd776e7c06ce",
                                            "functions": {
                                                "winner": {
                                                    "id": "JosephusProblem#winner"
                                                },
                                                "findTheWinner": {
                                                    "id": "JosephusProblem#findTheWinner"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/JosephusProblem.java",
                                            "name": "JosephusProblem"
                                        }
                                    },
                                    "JugglerSequence.java": {
                                        "name": "JugglerSequence",
                                        "class": {
                                            "id": "966cc627-268c-4aaf-a2e9-2112f19b8fa7",
                                            "functions": {
                                                "main": {
                                                    "id": "JugglerSequence#main"
                                                },
                                                "jugglerSequence": {
                                                    "id": "JugglerSequence#jugglerSequence"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/JugglerSequence.java",
                                            "name": "JugglerSequence"
                                        }
                                    },
                                    "KaprekarNumbers.java": {
                                        "name": "KaprekarNumbers",
                                        "class": {
                                            "id": "a00de321-4392-4b8e-80e2-92e7447a43a5",
                                            "functions": {
                                                "kaprekarNumberInRange": {
                                                    "id": "KaprekarNumbers#kaprekarNumberInRange"
                                                },
                                                "isKaprekarNumber": {
                                                    "id": "KaprekarNumbers#isKaprekarNumber"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/KaprekarNumbers.java",
                                            "name": "KaprekarNumbers"
                                        }
                                    },
                                    "KeithNumber.java": {
                                        "name": "KeithNumber",
                                        "class": {
                                            "id": "1458d49b-61a9-4b15-9e35-fce0ef00d9cc",
                                            "functions": {
                                                "isKeith": {
                                                    "id": "KeithNumber#isKeith"
                                                },
                                                "main": {
                                                    "id": "KeithNumber#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/KeithNumber.java",
                                            "name": "KeithNumber"
                                        }
                                    },
                                    "KrishnamurthyNumber.java": {
                                        "name": "KrishnamurthyNumber",
                                        "class": {
                                            "id": "bfc5cf11-f406-43b0-ad9e-cf01cc34cb06",
                                            "functions": {
                                                "main": {
                                                    "id": "KrishnamurthyNumber#main"
                                                },
                                                "isKMurthy": {
                                                    "id": "KrishnamurthyNumber#isKMurthy"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/KrishnamurthyNumber.java",
                                            "name": "KrishnamurthyNumber"
                                        }
                                    },
                                    "LeastCommonMultiple.java": {
                                        "name": "LeastCommonMultiple",
                                        "class": {
                                            "id": "56aea51b-d21e-46bd-add0-217ca6d09d7f",
                                            "functions": {
                                                "lcm": {
                                                    "id": "LeastCommonMultiple#lcm"
                                                },
                                                "main": {
                                                    "id": "LeastCommonMultiple#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/LeastCommonMultiple.java",
                                            "name": "LeastCommonMultiple"
                                        }
                                    },
                                    "LeonardoNumber.java": {
                                        "name": "LeonardoNumber",
                                        "class": {
                                            "id": "5539ee45-c213-4324-95a7-25adfb9ad024",
                                            "functions": {
                                                "main": {
                                                    "id": "LeonardoNumber#main"
                                                },
                                                "leonardoNumber": {
                                                    "id": "LeonardoNumber#leonardoNumber"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/LeonardoNumber.java",
                                            "name": "LeonardoNumber"
                                        }
                                    },
                                    "LiouvilleLambdaFunction.java": {
                                        "name": "LiouvilleLambdaFunction",
                                        "class": {
                                            "id": "b1a3280d-6236-4f5c-93b3-2df12fb2fb60",
                                            "functions": {
                                                "liouvilleLambda": {
                                                    "id": "LiouvilleLambdaFunction#liouvilleLambda"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/LiouvilleLambdaFunction.java",
                                            "name": "LiouvilleLambdaFunction"
                                        }
                                    },
                                    "LongDivision.java": {
                                        "name": "LongDivision",
                                        "class": {
                                            "id": "44ffe9bf-2014-4278-b313-f64c9151634a",
                                            "functions": {
                                                "divide": {
                                                    "id": "LongDivision#divide"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/LongDivision.java",
                                            "name": "LongDivision"
                                        }
                                    },
                                    "LucasSeries.java": {
                                        "name": "LucasSeries",
                                        "class": {
                                            "id": "9bb18fd8-df88-46b6-b98e-981f2f2dfa64",
                                            "functions": {
                                                "lucasSeriesIteration": {
                                                    "id": "LucasSeries#lucasSeriesIteration"
                                                },
                                                "main": {
                                                    "id": "LucasSeries#main"
                                                },
                                                "lucasSeries": {
                                                    "id": "LucasSeries#lucasSeries"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/LucasSeries.java",
                                            "name": "LucasSeries"
                                        }
                                    },
                                    "MagicSquare.java": {
                                        "name": "MagicSquare",
                                        "class": {
                                            "id": "1ccadbc8-015a-4406-bdde-44ab64859ed4",
                                            "functions": {
                                                "main": {
                                                    "id": "MagicSquare#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/MagicSquare.java",
                                            "name": "MagicSquare"
                                        }
                                    },
                                    "MatrixUtil.java": {
                                        "name": "MatrixUtil",
                                        "class": {
                                            "id": "81ab0968-84e9-4941-aaef-7e53dd25fd47",
                                            "functions": {
                                                "add": {
                                                    "id": "MatrixUtil#add"
                                                },
                                                "hasEqualSizes": {
                                                    "id": "MatrixUtil#hasEqualSizes"
                                                },
                                                "operate": {
                                                    "id": "MatrixUtil#operate"
                                                },
                                                "isValid": {
                                                    "id": "MatrixUtil#isValid"
                                                },
                                                "subtract": {
                                                    "id": "MatrixUtil#subtract"
                                                },
                                                "main": {
                                                    "id": "MatrixUtil#main"
                                                },
                                                "canMultiply": {
                                                    "id": "MatrixUtil#canMultiply"
                                                },
                                                "multiply": {
                                                    "id": "MatrixUtil#multiply"
                                                },
                                                "assertThat": {
                                                    "id": "MatrixUtil#assertThat"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/MatrixUtil.java",
                                            "name": "MatrixUtil"
                                        }
                                    },
                                    "MaxValue.java": {
                                        "name": "MaxValue",
                                        "class": {
                                            "id": "d808c455-f90a-43d1-83c4-f53c4a64f562",
                                            "functions": {
                                                "max": {
                                                    "id": "MaxValue#max"
                                                },
                                                "main": {
                                                    "id": "MaxValue#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/MaxValue.java",
                                            "name": "MaxValue"
                                        }
                                    },
                                    "Median.java": {
                                        "name": "Median",
                                        "class": {
                                            "id": "63512c95-204f-4da2-bf7f-46d72c777bdd",
                                            "functions": {
                                                "median": {
                                                    "id": "Median#median"
                                                },
                                                "main": {
                                                    "id": "Median#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Median.java",
                                            "name": "Median"
                                        }
                                    },
                                    "MinValue.java": {
                                        "name": "MinValue",
                                        "class": {
                                            "id": "28543465-e62f-4c16-816a-072a8726d72b",
                                            "functions": {
                                                "min": {
                                                    "id": "MinValue#min"
                                                },
                                                "main": {
                                                    "id": "MinValue#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/MinValue.java",
                                            "name": "MinValue"
                                        }
                                    },
                                    "MobiusFunction.java": {
                                        "name": "MobiusFunction",
                                        "class": {
                                            "id": "eff50507-2aed-45dc-a94a-dd919c80befd",
                                            "functions": {
                                                "mobius": {
                                                    "id": "MobiusFunction#mobius"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/MobiusFunction.java",
                                            "name": "MobiusFunction"
                                        }
                                    },
                                    "Mode.java": {
                                        "name": "Mode",
                                        "class": {
                                            "id": "5a58ed09-2f84-47db-b5ab-772b516a372b",
                                            "functions": {
                                                "mode": {
                                                    "id": "Mode#mode"
                                                },
                                                "main": {
                                                    "id": "Mode#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Mode.java",
                                            "name": "Mode"
                                        }
                                    },
                                    "NonRepeatingElement.java": {
                                        "name": "NonRepeatingElement",
                                        "class": {
                                            "id": "123ef811-a2b3-44d9-a964-774ac52b5df6",
                                            "functions": {
                                                "main": {
                                                    "id": "NonRepeatingElement#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/NonRepeatingElement.java",
                                            "name": "NonRepeatingElement"
                                        }
                                    },
                                    "NthUglyNumber.java": {
                                        "name": "NthUglyNumber",
                                        "class": {
                                            "id": "074d08cd-2b50-4252-ad8c-25f0ec3e412b",
                                            "functions": {
                                                "getNthUglyNo": {
                                                    "id": "NthUglyNumber#getNthUglyNo"
                                                },
                                                "main": {
                                                    "id": "NthUglyNumber#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/NthUglyNumber.java",
                                            "name": "NthUglyNumber"
                                        }
                                    },
                                    "NumberOfDigits.java": {
                                        "name": "NumberOfDigits",
                                        "class": {
                                            "id": "d6a9ea79-49ca-4f7f-a661-8ec9a444b2ab",
                                            "functions": {
                                                "numberOfDigitsRecursion": {
                                                    "id": "NumberOfDigits#numberOfDigitsRecursion"
                                                },
                                                "main": {
                                                    "id": "NumberOfDigits#main"
                                                },
                                                "numberOfDigitsFaster": {
                                                    "id": "NumberOfDigits#numberOfDigitsFaster"
                                                },
                                                "numberOfDigitsFast": {
                                                    "id": "NumberOfDigits#numberOfDigitsFast"
                                                },
                                                "numberOfDigits": {
                                                    "id": "NumberOfDigits#numberOfDigits"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/NumberOfDigits.java",
                                            "name": "NumberOfDigits"
                                        }
                                    },
                                    "PalindromeNumber.java": {
                                        "name": "PalindromeNumber",
                                        "class": {
                                            "id": "f78a1a84-a129-4381-ba02-afe71e21d422",
                                            "functions": {
                                                "isPalindrome": {
                                                    "id": "PalindromeNumber#isPalindrome"
                                                },
                                                "main": {
                                                    "id": "PalindromeNumber#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/PalindromeNumber.java",
                                            "name": "PalindromeNumber"
                                        }
                                    },
                                    "ParseInteger.java": {
                                        "name": "ParseInteger",
                                        "class": {
                                            "id": "bd299be7-5017-48e6-a69c-4329af5363a8",
                                            "functions": {
                                                "parseInt": {
                                                    "id": "ParseInteger#parseInt"
                                                },
                                                "main": {
                                                    "id": "ParseInteger#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/ParseInteger.java",
                                            "name": "ParseInteger"
                                        }
                                    },
                                    "PascalTriangle.java": {
                                        "name": "PascalTriangle",
                                        "class": {
                                            "id": "105f1a0f-081b-4a75-b660-cde0e5eee755",
                                            "functions": {
                                                "pascal": {
                                                    "id": "PascalTriangle#pascal"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/PascalTriangle.java",
                                            "name": "PascalTriangle"
                                        }
                                    },
                                    "PerfectCube.java": {
                                        "name": "PerfectCube",
                                        "class": {
                                            "id": "44668182-552d-4939-b9c2-9df0579e324c",
                                            "functions": {
                                                "isPerfectCubeMathCbrt": {
                                                    "id": "PerfectCube#isPerfectCubeMathCbrt"
                                                },
                                                "isPerfectCube": {
                                                    "id": "PerfectCube#isPerfectCube"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/PerfectCube.java",
                                            "name": "PerfectCube"
                                        }
                                    },
                                    "PerfectNumber.java": {
                                        "name": "PerfectNumber",
                                        "class": {
                                            "id": "32e7c9f0-1173-4cc7-9635-f1ba558da377",
                                            "functions": {
                                                "isPerfectNumber2": {
                                                    "id": "PerfectNumber#isPerfectNumber2"
                                                },
                                                "isPerfectNumber": {
                                                    "id": "PerfectNumber#isPerfectNumber"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/PerfectNumber.java",
                                            "name": "PerfectNumber"
                                        }
                                    },
                                    "PerfectSquare.java": {
                                        "name": "PerfectSquare",
                                        "class": {
                                            "id": "00ba5a01-c2df-4810-8489-7bf71883348b",
                                            "functions": {
                                                "main": {
                                                    "id": "PerfectSquare#main"
                                                },
                                                "isPerfectSquare": {
                                                    "id": "PerfectSquare#isPerfectSquare"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/PerfectSquare.java",
                                            "name": "PerfectSquare"
                                        }
                                    },
                                    "Perimeter.java": {
                                        "name": "Perimeter",
                                        "class": {
                                            "id": "cacb1701-c011-4340-b690-306af922d46b",
                                            "functions": {
                                                "perimeterRegularPolygon": {
                                                    "id": "Perimeter#perimeterRegularPolygon"
                                                },
                                                "perimeterRectangle": {
                                                    "id": "Perimeter#perimeterRectangle"
                                                },
                                                "perimeterCircle": {
                                                    "id": "Perimeter#perimeterCircle"
                                                },
                                                "perimeterIrregularPolygon": {
                                                    "id": "Perimeter#perimeterIrregularPolygon"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Perimeter.java",
                                            "name": "Perimeter"
                                        }
                                    },
                                    "PiNilakantha.java": {
                                        "name": "PiNilakantha",
                                        "class": {
                                            "id": "9e2c9902-73af-420d-aceb-df1e28665c92",
                                            "functions": {
                                                "calculatePi": {
                                                    "id": "PiNilakantha#calculatePi"
                                                },
                                                "main": {
                                                    "id": "PiNilakantha#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/PiNilakantha.java",
                                            "name": "PiNilakantha"
                                        }
                                    },
                                    "PollardRho.java": {
                                        "name": "PollardRho",
                                        "class": {
                                            "id": "47637200-a287-47a7-81db-931575e3a186",
                                            "functions": {
                                                "g": {
                                                    "id": "PollardRho#g"
                                                },
                                                "pollardRho": {
                                                    "id": "PollardRho#pollardRho"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/PollardRho.java",
                                            "name": "PollardRho"
                                        }
                                    },
                                    "Pow.java": {
                                        "name": "Pow",
                                        "class": {
                                            "id": "d07d303b-eef4-4626-b49d-d8dc6e93c823",
                                            "functions": {
                                                "pow": {
                                                    "id": "Pow#pow"
                                                },
                                                "main": {
                                                    "id": "Pow#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Pow.java",
                                            "name": "Pow"
                                        }
                                    },
                                    "PowRecursion.java": {
                                        "name": "PowRecursion",
                                        "class": {
                                            "id": "cc7a16e8-5271-43f9-98fd-5d5611160768",
                                            "functions": {
                                                "pow": {
                                                    "id": "PowRecursion#pow"
                                                },
                                                "main": {
                                                    "id": "PowRecursion#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/PowRecursion.java",
                                            "name": "PowRecursion"
                                        }
                                    },
                                    "PowerOfTwoOrNot.java": {
                                        "name": "PowerOfTwoOrNot",
                                        "class": {
                                            "id": "66c8c736-ea87-455c-b815-d35a9b345f9e",
                                            "functions": {
                                                "main": {
                                                    "id": "PowerOfTwoOrNot#main"
                                                },
                                                "checkIfPowerOfTwoOrNot": {
                                                    "id": "PowerOfTwoOrNot#checkIfPowerOfTwoOrNot"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/PowerOfTwoOrNot.java",
                                            "name": "PowerOfTwoOrNot"
                                        }
                                    },
                                    "PrimeCheck.java": {
                                        "name": "PrimeCheck",
                                        "class": {
                                            "id": "c0f55139-5e8c-4b39-993b-dc5cbfc8109e",
                                            "functions": {
                                                "fermatPrimeChecking": {
                                                    "id": "PrimeCheck#fermatPrimeChecking"
                                                },
                                                "main": {
                                                    "id": "PrimeCheck#main"
                                                },
                                                "isPrime": {
                                                    "id": "PrimeCheck#isPrime"
                                                },
                                                "modPow": {
                                                    "id": "PrimeCheck#modPow"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/PrimeCheck.java",
                                            "name": "PrimeCheck"
                                        }
                                    },
                                    "PrimeFactorization.java": {
                                        "name": "PrimeFactorization",
                                        "class": {
                                            "id": "07202ce1-9c07-4811-bf04-ed77ea39c317",
                                            "functions": {
                                                "pfactors": {
                                                    "id": "PrimeFactorization#pfactors"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/PrimeFactorization.java",
                                            "name": "PrimeFactorization"
                                        }
                                    },
                                    "PronicNumber.java": {
                                        "name": "PronicNumber",
                                        "class": {
                                            "id": "4f00061c-2aac-4ecc-8805-8016237bb1fc",
                                            "functions": {
                                                "isPronic": {
                                                    "id": "PronicNumber#isPronic"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/PronicNumber.java",
                                            "name": "PronicNumber"
                                        }
                                    },
                                    "PythagoreanTriple.java": {
                                        "name": "PythagoreanTriple",
                                        "class": {
                                            "id": "48bb3612-8b89-4247-93ad-ec9c1a9867d7",
                                            "functions": {
                                                "main": {
                                                    "id": "PythagoreanTriple#main"
                                                },
                                                "isPythagTriple": {
                                                    "id": "PythagoreanTriple#isPythagTriple"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/PythagoreanTriple.java",
                                            "name": "PythagoreanTriple"
                                        }
                                    },
                                    "ReverseNumber.java": {
                                        "name": "ReverseNumber",
                                        "class": {
                                            "id": "79cc4515-afa9-4f00-b551-2449667a734f",
                                            "functions": {
                                                "main": {
                                                    "id": "ReverseNumber#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/ReverseNumber.java",
                                            "name": "ReverseNumber"
                                        }
                                    },
                                    "RomanNumeralUtil.java": {
                                        "name": "RomanNumeralUtil",
                                        "class": {
                                            "id": "355c3219-458b-4eb7-a53e-dacc367c3a8b",
                                            "functions": {
                                                "generate": {
                                                    "id": "RomanNumeralUtil#generate"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/RomanNumeralUtil.java",
                                            "name": "RomanNumeralUtil"
                                        }
                                    },
                                    "SimpsonIntegration.java": {
                                        "name": "SimpsonIntegration",
                                        "class": {
                                            "id": "40853b20-60c5-40c6-a07c-75c3863b362f",
                                            "functions": {
                                                "f": {
                                                    "id": "SimpsonIntegration#f"
                                                },
                                                "simpsonsMethod": {
                                                    "id": "SimpsonIntegration#simpsonsMethod"
                                                },
                                                "main": {
                                                    "id": "SimpsonIntegration#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/SimpsonIntegration.java",
                                            "name": "SimpsonIntegration"
                                        }
                                    },
                                    "SquareFreeInteger.java": {
                                        "name": "SquareFreeInteger",
                                        "class": {
                                            "id": "72ba4d0a-d933-44e9-aa00-2391b2759baa",
                                            "functions": {
                                                "isSquareFreeInteger": {
                                                    "id": "SquareFreeInteger#isSquareFreeInteger"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/SquareFreeInteger.java",
                                            "name": "SquareFreeInteger"
                                        }
                                    },
                                    "SquareRootWithBabylonianMethod.java": {
                                        "name": "SquareRootWithBabylonianMethod",
                                        "class": {
                                            "id": "5d660b11-a672-45ea-b650-96cb42903767",
                                            "functions": {
                                                "square_Root": {
                                                    "id": "SquareRootWithBabylonianMethod#square_Root"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/SquareRootWithBabylonianMethod.java",
                                            "name": "SquareRootWithBabylonianMethod"
                                        }
                                    },
                                    "SquareRootWithNewtonRaphsonMethod.java": {
                                        "name": "SquareRootWithNewtonRaphsonMethod",
                                        "class": {
                                            "id": "576fb427-df82-4ffd-a3da-f3f6d5acb076",
                                            "functions": {
                                                "squareRoot": {
                                                    "id": "SquareRootWithNewtonRaphsonMethod#squareRoot"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/SquareRootWithNewtonRaphsonMethod.java",
                                            "name": "SquareRootWithNewtonRaphsonMethod"
                                        }
                                    },
                                    "StandardDeviation.java": {
                                        "name": "StandardDeviation",
                                        "class": {
                                            "id": "ab4638e0-52d0-49aa-abd4-6afd2ed56b93",
                                            "functions": {
                                                "stdDev": {
                                                    "id": "StandardDeviation#stdDev"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/StandardDeviation.java",
                                            "name": "StandardDeviation"
                                        }
                                    },
                                    "StandardScore.java": {
                                        "name": "StandardScore",
                                        "class": {
                                            "id": "9dd9f7ad-6b68-45ab-8a44-a7979b7d8e09",
                                            "functions": {
                                                "zScore": {
                                                    "id": "StandardScore#zScore"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/StandardScore.java",
                                            "name": "StandardScore"
                                        }
                                    },
                                    "SumOfArithmeticSeries.java": {
                                        "name": "SumOfArithmeticSeries",
                                        "class": {
                                            "id": "8cebb7eb-1a75-40ab-9adf-058a40fbf87f",
                                            "functions": {
                                                "sumOfSeries": {
                                                    "id": "SumOfArithmeticSeries#sumOfSeries"
                                                },
                                                "main": {
                                                    "id": "SumOfArithmeticSeries#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/SumOfArithmeticSeries.java",
                                            "name": "SumOfArithmeticSeries"
                                        }
                                    },
                                    "SumOfDigits.java": {
                                        "name": "SumOfDigits",
                                        "class": {
                                            "id": "bfa130d2-c7c2-46aa-8264-1c652e38da9e",
                                            "functions": {
                                                "sumOfDigitsRecursion": {
                                                    "id": "SumOfDigits#sumOfDigitsRecursion"
                                                },
                                                "sumOfDigits": {
                                                    "id": "SumOfDigits#sumOfDigits"
                                                },
                                                "main": {
                                                    "id": "SumOfDigits#main"
                                                },
                                                "sumOfDigitsFast": {
                                                    "id": "SumOfDigits#sumOfDigitsFast"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/SumOfDigits.java",
                                            "name": "SumOfDigits"
                                        }
                                    },
                                    "SumWithoutArithmeticOperators.java": {
                                        "name": "SumWithoutArithmeticOperators",
                                        "class": {
                                            "id": "95155915-1fc7-4082-bf56-ec147a2ec45f",
                                            "functions": {
                                                "getSum": {
                                                    "id": "SumWithoutArithmeticOperators#getSum"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/SumWithoutArithmeticOperators.java",
                                            "name": "SumWithoutArithmeticOperators"
                                        }
                                    },
                                    "TrinomialTriangle.java": {
                                        "name": "TrinomialTriangle",
                                        "class": {
                                            "id": "4b6d94eb-f501-4d9e-9284-0e184cbcbd78",
                                            "functions": {
                                                "printTrinomial": {
                                                    "id": "TrinomialTriangle#printTrinomial"
                                                },
                                                "TrinomialValue": {
                                                    "id": "TrinomialTriangle#TrinomialValue"
                                                },
                                                "main": {
                                                    "id": "TrinomialTriangle#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/TrinomialTriangle.java",
                                            "name": "TrinomialTriangle"
                                        }
                                    },
                                    "TwinPrime.java": {
                                        "name": "TwinPrime",
                                        "class": {
                                            "id": "1d951dfa-f16b-4f7d-ae91-ff2147f9c350",
                                            "functions": {
                                                "getTwinPrime": {
                                                    "id": "TwinPrime#getTwinPrime"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/TwinPrime.java",
                                            "name": "TwinPrime"
                                        }
                                    },
                                    "VampireNumber.java": {
                                        "name": "VampireNumber",
                                        "class": {
                                            "id": "4bed6fe0-f10b-4716-8f11-26b2bb5754b8",
                                            "functions": {
                                                "test": {
                                                    "id": "VampireNumber#test"
                                                },
                                                "splitIntoDigits": {
                                                    "id": "VampireNumber#splitIntoDigits"
                                                },
                                                "main": {
                                                    "id": "VampireNumber#main"
                                                },
                                                "isVampireNumber": {
                                                    "id": "VampireNumber#isVampireNumber"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/VampireNumber.java",
                                            "name": "VampireNumber"
                                        }
                                    },
                                    "VectorCrossProduct.java": {
                                        "name": "VectorCrossProduct",
                                        "class": {
                                            "id": "fd9f42be-4eb7-4fb7-8d10-3d865d1cc138",
                                            "functions": {
                                                "crossProduct": {
                                                    "id": "VectorCrossProduct#crossProduct"
                                                },
                                                "test": {
                                                    "id": "VectorCrossProduct#test"
                                                },
                                                "magnitude": {
                                                    "id": "VectorCrossProduct#magnitude"
                                                },
                                                "main": {
                                                    "id": "VectorCrossProduct#main"
                                                },
                                                "dotProduct": {
                                                    "id": "VectorCrossProduct#dotProduct"
                                                },
                                                "displayVector": {
                                                    "id": "VectorCrossProduct#displayVector"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/VectorCrossProduct.java",
                                            "name": "VectorCrossProduct"
                                        }
                                    },
                                    "Volume.java": {
                                        "name": "Volume",
                                        "class": {
                                            "id": "d5f145b3-91f4-4b8d-8b27-eab8af5cccf7",
                                            "functions": {
                                                "volumeCone": {
                                                    "id": "Volume#volumeCone"
                                                },
                                                "volumeCube": {
                                                    "id": "Volume#volumeCube"
                                                },
                                                "volumeCuboid": {
                                                    "id": "Volume#volumeCuboid"
                                                },
                                                "volumePyramid": {
                                                    "id": "Volume#volumePyramid"
                                                },
                                                "volumeSphere": {
                                                    "id": "Volume#volumeSphere"
                                                },
                                                "volumeCylinder": {
                                                    "id": "Volume#volumeCylinder"
                                                },
                                                "volumeHemisphere": {
                                                    "id": "Volume#volumeHemisphere"
                                                },
                                                "volumePrism": {
                                                    "id": "Volume#volumePrism"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/maths/Volume.java",
                                            "name": "Volume"
                                        }
                                    }
                                },
                                "matrixexponentiation": {
                                    "Fibonacci.java": {
                                        "name": "Fibonacci",
                                        "class": {
                                            "id": "2f0be519-623f-4c85-b103-8c911867a4a8",
                                            "functions": {
                                                "main": {
                                                    "id": "Fibonacci#main"
                                                },
                                                "matrixMultiplication": {
                                                    "id": "Fibonacci#matrixMultiplication"
                                                },
                                                "fib": {
                                                    "id": "Fibonacci#fib"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/matrixexponentiation/Fibonacci.java",
                                            "name": "Fibonacci"
                                        }
                                    }
                                },
                                "minimizinglateness": {
                                    "MinimizingLateness.java": {
                                        "name": "MinimizingLateness",
                                        "class": {
                                            "id": "86501195-7187-485c-94e7-22541377a5b2",
                                            "functions": {
                                                "main": {
                                                    "id": "MinimizingLateness#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/minimizinglateness/MinimizingLateness.java",
                                            "name": "MinimizingLateness"
                                        }
                                    }
                                },
                                "misc": {
                                    "ColorContrastRatio.java": {
                                        "name": "ColorContrastRatio",
                                        "class": {
                                            "id": "dd48de8c-9962-4688-830d-c069e1619077",
                                            "functions": {
                                                "test": {
                                                    "id": "ColorContrastRatio#test"
                                                },
                                                "getColorSRgb": {
                                                    "id": "ColorContrastRatio#getColorSRgb"
                                                },
                                                "getColor": {
                                                    "id": "ColorContrastRatio#getColor"
                                                },
                                                "getContrastRatio": {
                                                    "id": "ColorContrastRatio#getContrastRatio"
                                                },
                                                "main": {
                                                    "id": "ColorContrastRatio#main"
                                                },
                                                "getRelativeLuminance": {
                                                    "id": "ColorContrastRatio#getRelativeLuminance"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/misc/ColorContrastRatio.java",
                                            "name": "ColorContrastRatio"
                                        }
                                    },
                                    "InverseOfMatrix.java": {
                                        "name": "InverseOfMatrix",
                                        "class": {
                                            "id": "0d35374e-1229-412b-91cb-9a32b6e6134a",
                                            "functions": {
                                                "invert": {
                                                    "id": "InverseOfMatrix#invert"
                                                },
                                                "main": {
                                                    "id": "InverseOfMatrix#main"
                                                },
                                                "gaussian": {
                                                    "id": "InverseOfMatrix#gaussian"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/misc/InverseOfMatrix.java",
                                            "name": "InverseOfMatrix"
                                        }
                                    },
                                    "MedianOfRunningArray.java": {
                                        "name": "MedianOfRunningArray",
                                        "class": {
                                            "id": "d673e36b-1865-4162-9300-4c3acbe8008f",
                                            "functions": {
                                                "median": {
                                                    "id": "MedianOfRunningArray#median"
                                                },
                                                "insert": {
                                                    "id": "MedianOfRunningArray#insert"
                                                },
                                                "main": {
                                                    "id": "MedianOfRunningArray#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/misc/MedianOfRunningArray.java",
                                            "name": "MedianOfRunningArray"
                                        }
                                    },
                                    "PalindromePrime.java": {
                                        "name": "PalindromePrime",
                                        "class": {
                                            "id": "b5122810-9a88-4c60-98e7-8867f6c1ed93",
                                            "functions": {
                                                "prime": {
                                                    "id": "PalindromePrime#prime"
                                                },
                                                "functioning": {
                                                    "id": "PalindromePrime#functioning"
                                                },
                                                "main": {
                                                    "id": "PalindromePrime#main"
                                                },
                                                "reverse": {
                                                    "id": "PalindromePrime#reverse"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/misc/PalindromePrime.java",
                                            "name": "PalindromePrime"
                                        }
                                    },
                                    "PalindromeSinglyLinkedList.java": {
                                        "name": "PalindromeSinglyLinkedList",
                                        "class": {
                                            "id": "dc8b7191-1639-442a-b023-76f0d3399285",
                                            "functions": {
                                                "isPalindrome": {
                                                    "id": "PalindromeSinglyLinkedList#isPalindrome"
                                                },
                                                "main": {
                                                    "id": "PalindromeSinglyLinkedList#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/misc/PalindromeSinglyLinkedList.java",
                                            "name": "PalindromeSinglyLinkedList"
                                        }
                                    },
                                    "RangeInSortedArray.java": {
                                        "name": "RangeInSortedArray",
                                        "class": {
                                            "id": "8c987992-9a1a-4d14-8c98-556aa5fa87fb",
                                            "functions": {
                                                "sortedRange": {
                                                    "id": "RangeInSortedArray#sortedRange"
                                                },
                                                "alteredBinSearch": {
                                                    "id": "RangeInSortedArray#alteredBinSearch"
                                                },
                                                "getCountLessThan": {
                                                    "id": "RangeInSortedArray#getCountLessThan"
                                                },
                                                "getLessThan": {
                                                    "id": "RangeInSortedArray#getLessThan"
                                                },
                                                "main": {
                                                    "id": "RangeInSortedArray#main"
                                                },
                                                "alteredBinSearchIter": {
                                                    "id": "RangeInSortedArray#alteredBinSearchIter"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/misc/RangeInSortedArray.java",
                                            "name": "RangeInSortedArray"
                                        }
                                    },
                                    "Sort012D.java": {
                                        "name": "Sort012D",
                                        "class": {
                                            "id": "d9df6712-e07c-41b1-80a9-d7d9cc6dc2d5",
                                            "functions": {
                                                "sort012": {
                                                    "id": "Sort012D#sort012"
                                                },
                                                "main": {
                                                    "id": "Sort012D#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/misc/Sort012D.java",
                                            "name": "Sort012D"
                                        }
                                    },
                                    "Sparcity.java": {
                                        "name": "Sparcity",
                                        "class": {
                                            "id": "2885120f-c784-4ec0-98f0-4ee4b0664947",
                                            "functions": {
                                                "sparcity": {
                                                    "id": "Sparcity#sparcity"
                                                },
                                                "main": {
                                                    "id": "Sparcity#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/misc/Sparcity.java",
                                            "name": "Sparcity"
                                        }
                                    },
                                    "ThreeSumProblem.java": {
                                        "name": "ThreeSumProblem",
                                        "class": {
                                            "id": "b9d53210-7fe5-434c-83bf-f6a5f8ce5d6b",
                                            "functions": {
                                                "TwoPointer": {
                                                    "id": "ThreeSumProblem#TwoPointer"
                                                },
                                                "Hashmap": {
                                                    "id": "ThreeSumProblem#Hashmap"
                                                },
                                                "BruteForce": {
                                                    "id": "ThreeSumProblem#BruteForce"
                                                },
                                                "main": {
                                                    "id": "ThreeSumProblem#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/misc/ThreeSumProblem.java",
                                            "name": "ThreeSumProblem"
                                        }
                                    },
                                    "TwoSumProblem.java": {
                                        "name": "TwoSumProblem",
                                        "class": {
                                            "id": "c03cb917-9c24-4c65-b653-b63555f41405",
                                            "functions": {
                                                "TwoPointer": {
                                                    "id": "TwoSumProblem#TwoPointer"
                                                },
                                                "HashMap": {
                                                    "id": "TwoSumProblem#HashMap"
                                                },
                                                "BruteForce": {
                                                    "id": "TwoSumProblem#BruteForce"
                                                },
                                                "main": {
                                                    "id": "TwoSumProblem#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/misc/TwoSumProblem.java",
                                            "name": "TwoSumProblem"
                                        }
                                    },
                                    "WordBoggle.java": {
                                        "name": "WordBoggle",
                                        "class": {
                                            "id": "d780bf3b-f73e-43ed-999c-a54013545272",
                                            "functions": {
                                                "explore": {
                                                    "id": "WordBoggle#explore"
                                                },
                                                "boggleBoard": {
                                                    "id": "WordBoggle#boggleBoard"
                                                },
                                                "main": {
                                                    "id": "WordBoggle#main"
                                                },
                                                "getNeighbors": {
                                                    "id": "WordBoggle#getNeighbors"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/misc/WordBoggle.java",
                                            "name": "WordBoggle"
                                        }
                                    },
                                    "matrixTranspose.java": {
                                        "name": "matrixTranspose",
                                        "class": {
                                            "id": "6d049a4a-0f63-4a36-a4b2-4662d5122212",
                                            "functions": {
                                                "main": {
                                                    "id": "matrixTranspose#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/misc/matrixTranspose.java",
                                            "name": "matrixTranspose"
                                        }
                                    }
                                },
                                "others": {
                                    "ArrayLeftRotation.java": {
                                        "name": "ArrayLeftRotation",
                                        "class": {
                                            "id": "c805773c-149f-438b-8ac5-4aadb5e0afeb",
                                            "functions": {
                                                "rotateLeft": {
                                                    "id": "ArrayLeftRotation#rotateLeft"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/ArrayLeftRotation.java",
                                            "name": "ArrayLeftRotation"
                                        }
                                    },
                                    "BFPRT.java": {
                                        "name": "BFPRT",
                                        "class": {
                                            "id": "b19091ba-74e0-482d-92f2-4edeb434ca99",
                                            "functions": {
                                                "getMinKthByBFPRT": {
                                                    "id": "BFPRT#getMinKthByBFPRT"
                                                },
                                                "copyArray": {
                                                    "id": "BFPRT#copyArray"
                                                },
                                                "partition": {
                                                    "id": "BFPRT#partition"
                                                },
                                                "swap": {
                                                    "id": "BFPRT#swap"
                                                },
                                                "getMedian": {
                                                    "id": "BFPRT#getMedian"
                                                },
                                                "insertionSort": {
                                                    "id": "BFPRT#insertionSort"
                                                },
                                                "medianOfMedians": {
                                                    "id": "BFPRT#medianOfMedians"
                                                },
                                                "main": {
                                                    "id": "BFPRT#main"
                                                },
                                                "getMinKNumsByBFPRT": {
                                                    "id": "BFPRT#getMinKNumsByBFPRT"
                                                },
                                                "bfprt": {
                                                    "id": "BFPRT#bfprt"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/BFPRT.java",
                                            "name": "BFPRT"
                                        }
                                    },
                                    "BankersAlgorithm.java": {
                                        "name": "BankersAlgorithm",
                                        "class": {
                                            "id": "45d84188-9c53-4d85-b897-fcbc079b9e9d",
                                            "functions": {
                                                "calculateNeed": {
                                                    "id": "BankersAlgorithm#calculateNeed"
                                                },
                                                "main": {
                                                    "id": "BankersAlgorithm#main"
                                                },
                                                "checkSafeSystem": {
                                                    "id": "BankersAlgorithm#checkSafeSystem"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/BankersAlgorithm.java",
                                            "name": "BankersAlgorithm"
                                        }
                                    },
                                    "BoyerMoore.java": {
                                        "name": "BoyerMoore",
                                        "class": {
                                            "id": "65df230b-2716-4cc1-b284-11d008928d75",
                                            "functions": {
                                                "main": {
                                                    "id": "BoyerMoore#main"
                                                },
                                                "findmajor": {
                                                    "id": "BoyerMoore#findmajor"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/BoyerMoore.java",
                                            "name": "BoyerMoore"
                                        }
                                    },
                                    "BrianKernighanAlgorithm.java": {
                                        "name": "BrianKernighanAlgorithm",
                                        "class": {
                                            "id": "226c0d3c-29f4-4a8e-abc5-7d9f297c0c6a",
                                            "functions": {
                                                "countSetBits": {
                                                    "id": "BrianKernighanAlgorithm#countSetBits"
                                                },
                                                "main": {
                                                    "id": "BrianKernighanAlgorithm#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/BrianKernighanAlgorithm.java",
                                            "name": "BrianKernighanAlgorithm"
                                        }
                                    },
                                    "CRC16.java": {
                                        "name": "CRC16",
                                        "class": {
                                            "id": "34b949a2-dcaa-4722-bdc0-477ce3789b2a",
                                            "functions": {
                                                "crc16": {
                                                    "id": "CRC16#crc16"
                                                },
                                                "main": {
                                                    "id": "CRC16#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/CRC16.java",
                                            "name": "CRC16"
                                        }
                                    },
                                    "CRC32.java": {
                                        "name": "CRC32",
                                        "class": {
                                            "id": "3ebc5c49-adda-424f-99bc-a7f2dfa5a16c",
                                            "functions": {
                                                "main": {
                                                    "id": "CRC32#main"
                                                },
                                                "crc32": {
                                                    "id": "CRC32#crc32"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/CRC32.java",
                                            "name": "CRC32"
                                        }
                                    },
                                    "CRCAlgorithm.java": {
                                        "name": "CRCAlgorithm",
                                        "class": {
                                            "id": "b518ebba-29a7-4367-a97e-74d3a73ef65b",
                                            "functions": {
                                                "getWrongMessCaught": {
                                                    "id": "CRCAlgorithm#getWrongMessCaught"
                                                },
                                                "changeMess": {
                                                    "id": "CRCAlgorithm#changeMess"
                                                },
                                                "getWrongMess": {
                                                    "id": "CRCAlgorithm#getWrongMess"
                                                },
                                                "getCorrectMess": {
                                                    "id": "CRCAlgorithm#getCorrectMess"
                                                },
                                                "divideMessageWithP": {
                                                    "id": "CRCAlgorithm#divideMessageWithP"
                                                },
                                                "generateRandomMess": {
                                                    "id": "CRCAlgorithm#generateRandomMess"
                                                },
                                                "refactor": {
                                                    "id": "CRCAlgorithm#refactor"
                                                },
                                                "getWrongMessNotCaught": {
                                                    "id": "CRCAlgorithm#getWrongMessNotCaught"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/CRCAlgorithm.java",
                                            "name": "CRCAlgorithm"
                                        }
                                    },
                                    "Conway.java": {
                                        "name": "Conway",
                                        "class": {
                                            "id": "ed6e27d4-d458-41c8-92fd-ec1f95e6b9a4",
                                            "functions": {
                                                "generateList": {
                                                    "id": "Conway#generateList"
                                                },
                                                "generateNextElement": {
                                                    "id": "Conway#generateNextElement"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/Conway.java",
                                            "name": "Conway"
                                        }
                                    },
                                    "CountChar.java": {
                                        "name": "CountChar",
                                        "class": {
                                            "id": "b5e2ced0-b902-413c-aba0-190bf5948236",
                                            "functions": {
                                                "CountCharacters": {
                                                    "id": "CountChar#CountCharacters"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/CountChar.java",
                                            "name": "CountChar"
                                        }
                                    },
                                    "CountWords.java": {
                                        "name": "CountWords",
                                        "class": {
                                            "id": "3b8224d3-c9e4-49a0-95bd-35a52f261bb6",
                                            "functions": {
                                                "wordCount": {
                                                    "id": "CountWords#wordCount"
                                                },
                                                "secondaryWordCount": {
                                                    "id": "CountWords#secondaryWordCount"
                                                },
                                                "main": {
                                                    "id": "CountWords#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/CountWords.java",
                                            "name": "CountWords"
                                        }
                                    },
                                    "Damm.java": {
                                        "name": "Damm",
                                        "class": {
                                            "id": "cb98f325-9403-4ee4-9c11-0d05e26b27c0",
                                            "functions": {
                                                "checkInput": {
                                                    "id": "Damm#checkInput"
                                                },
                                                "checkAndPrint": {
                                                    "id": "Damm#checkAndPrint"
                                                },
                                                "toIntArray": {
                                                    "id": "Damm#toIntArray"
                                                },
                                                "main": {
                                                    "id": "Damm#main"
                                                },
                                                "addDammChecksum": {
                                                    "id": "Damm#addDammChecksum"
                                                },
                                                "dammCheck": {
                                                    "id": "Damm#dammCheck"
                                                },
                                                "generateAndPrint": {
                                                    "id": "Damm#generateAndPrint"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/Damm.java",
                                            "name": "Damm"
                                        }
                                    },
                                    "Dijkstra.java": {
                                        "name": "Dijkstra",
                                        "class": {
                                            "id": "0e1fbc29-648d-4b47-bd8c-62df3245ec79",
                                            "functions": {
                                                "main": {
                                                    "id": "Dijkstra#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/Dijkstra.java",
                                            "name": "Dijkstra"
                                        }
                                    },
                                    "EulersFunction.java": {
                                        "name": "EulersFunction",
                                        "class": {
                                            "id": "619b3a95-619a-4b9e-b406-a7bba6492bf8",
                                            "functions": {
                                                "getEuler": {
                                                    "id": "EulersFunction#getEuler"
                                                },
                                                "main": {
                                                    "id": "EulersFunction#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/EulersFunction.java",
                                            "name": "EulersFunction"
                                        }
                                    },
                                    "FibbonaciSeries.java": {
                                        "name": "FibbonaciSeries",
                                        "class": {
                                            "id": "59c3f4ad-4b36-4de4-b58a-0e03efce51a7",
                                            "functions": {
                                                "main": {
                                                    "id": "FibbonaciSeries#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/FibbonaciSeries.java",
                                            "name": "FibbonaciSeries"
                                        }
                                    },
                                    "FloydTriangle.java": {
                                        "name": "FloydTriangle",
                                        "class": {
                                            "id": "ebe7d132-2d39-4da8-a2dd-40da56c6dfb1",
                                            "functions": {
                                                "main": {
                                                    "id": "FloydTriangle#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/FloydTriangle.java",
                                            "name": "FloydTriangle"
                                        }
                                    },
                                    "GuassLegendre.java": {
                                        "name": "GuassLegendre",
                                        "class": {
                                            "id": "82f411f8-9775-4f6d-a70d-9ecd0395ea2e",
                                            "functions": {
                                                "pi": {
                                                    "id": "GuassLegendre#pi"
                                                },
                                                "update": {
                                                    "id": "GuassLegendre#update"
                                                },
                                                "main": {
                                                    "id": "GuassLegendre#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/GuassLegendre.java",
                                            "name": "GuassLegendre"
                                        }
                                    },
                                    "HappyNumbersSeq.java": {
                                        "name": "HappyNumbersSeq",
                                        "class": {
                                            "id": "7d25739e-0cf6-402e-af80-1245677cadd8",
                                            "functions": {
                                                "isSad": {
                                                    "id": "HappyNumbersSeq#isSad"
                                                },
                                                "sumSquares": {
                                                    "id": "HappyNumbersSeq#sumSquares"
                                                },
                                                "main": {
                                                    "id": "HappyNumbersSeq#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/HappyNumbersSeq.java",
                                            "name": "HappyNumbersSeq"
                                        }
                                    },
                                    "Huffman.java": {
                                        "name": "HuffmanNode",
                                        "class": {
                                            "id": "945f184e-3d47-4419-b0b7-a6eb0da2f3bb",
                                            "functions": {},
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/Huffman.java",
                                            "name": "HuffmanNode"
                                        }
                                    },
                                    "Implementing_auto_completing_features_using_trie.java": {
                                        "name": "Trieac",
                                        "class": {
                                            "id": "e0daedfc-c8fb-4ed5-bf98-bf6a0b56ddbd",
                                            "functions": {
                                                "search": {
                                                    "id": "Trieac#search"
                                                },
                                                "printAutoSuggestions": {
                                                    "id": "Trieac#printAutoSuggestions"
                                                },
                                                "insert": {
                                                    "id": "Trieac#insert"
                                                },
                                                "isLastNode": {
                                                    "id": "Trieac#isLastNode"
                                                },
                                                "main": {
                                                    "id": "Trieac#main"
                                                },
                                                "getNode": {
                                                    "id": "Trieac#getNode"
                                                },
                                                "suggestionsRec": {
                                                    "id": "Trieac#suggestionsRec"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/Implementing_auto_completing_features_using_trie.java",
                                            "name": "Trieac"
                                        }
                                    },
                                    "InsertDeleteInArray.java": {
                                        "name": "InsertDeleteInArray",
                                        "class": {
                                            "id": "baf6f9c0-a07c-42ad-809f-53d8efd6c621",
                                            "functions": {
                                                "main": {
                                                    "id": "InsertDeleteInArray#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/InsertDeleteInArray.java",
                                            "name": "InsertDeleteInArray"
                                        }
                                    },
                                    "KMP.java": {
                                        "name": "KMP",
                                        "class": {
                                            "id": "6cd017c0-fcc8-424d-92df-f45b3a5a0ce5",
                                            "functions": {
                                                "KMPmatcher": {
                                                    "id": "KMP#KMPmatcher"
                                                },
                                                "computePrefixFunction": {
                                                    "id": "KMP#computePrefixFunction"
                                                },
                                                "main": {
                                                    "id": "KMP#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/KMP.java",
                                            "name": "KMP"
                                        }
                                    },
                                    "KochSnowflake.java": {
                                        "name": "KochSnowflake",
                                        "class": {
                                            "id": "2018b84f-cbc6-45bf-87cd-603f80fe48ec",
                                            "functions": {
                                                "Iterate": {
                                                    "id": "KochSnowflake#Iterate"
                                                },
                                                "IterationStep": {
                                                    "id": "KochSnowflake#IterationStep"
                                                },
                                                "GetImage": {
                                                    "id": "KochSnowflake#GetImage"
                                                },
                                                "GetKochSnowflake": {
                                                    "id": "KochSnowflake#GetKochSnowflake"
                                                },
                                                "main": {
                                                    "id": "KochSnowflake#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/KochSnowflake.java",
                                            "name": "KochSnowflake"
                                        }
                                    },
                                    "Krishnamurthy.java": {
                                        "name": "Krishnamurthy",
                                        "class": {
                                            "id": "eab7818c-da63-4699-a2bc-ffa392e30c16",
                                            "functions": {
                                                "fact": {
                                                    "id": "Krishnamurthy#fact"
                                                },
                                                "main": {
                                                    "id": "Krishnamurthy#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/Krishnamurthy.java",
                                            "name": "Krishnamurthy"
                                        }
                                    },
                                    "LinearCongruentialGenerator.java": {
                                        "name": "LinearCongruentialGenerator",
                                        "class": {
                                            "id": "1d2ff91f-2b88-4ba7-95dc-ea5c9c819b4c",
                                            "functions": {
                                                "nextNumber": {
                                                    "id": "LinearCongruentialGenerator#nextNumber"
                                                },
                                                "main": {
                                                    "id": "LinearCongruentialGenerator#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/LinearCongruentialGenerator.java",
                                            "name": "LinearCongruentialGenerator"
                                        }
                                    },
                                    "LowestBasePalindrome.java": {
                                        "name": "LowestBasePalindrome",
                                        "class": {
                                            "id": "4a0ee576-4284-40d2-9751-d9af12e7cf46",
                                            "functions": {
                                                "main": {
                                                    "id": "LowestBasePalindrome#main"
                                                },
                                                "base2base": {
                                                    "id": "LowestBasePalindrome#base2base"
                                                },
                                                "reverse": {
                                                    "id": "LowestBasePalindrome#reverse"
                                                },
                                                "lowestBasePalindrome": {
                                                    "id": "LowestBasePalindrome#lowestBasePalindrome"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/LowestBasePalindrome.java",
                                            "name": "LowestBasePalindrome"
                                        }
                                    },
                                    "Mandelbrot.java": {
                                        "name": "Mandelbrot",
                                        "class": {
                                            "id": "35a750dd-c3f4-4128-b7d8-700200acd009",
                                            "functions": {
                                                "colorCodedColorMap": {
                                                    "id": "Mandelbrot#colorCodedColorMap"
                                                },
                                                "getDistance": {
                                                    "id": "Mandelbrot#getDistance"
                                                },
                                                "main": {
                                                    "id": "Mandelbrot#main"
                                                },
                                                "getImage": {
                                                    "id": "Mandelbrot#getImage"
                                                },
                                                "blackAndWhiteColorMap": {
                                                    "id": "Mandelbrot#blackAndWhiteColorMap"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/Mandelbrot.java",
                                            "name": "Mandelbrot"
                                        }
                                    },
                                    "MemoryManagementAlgorithms.java": {
                                        "name": "MemoryManagementAlgorithms",
                                        "class": {
                                            "id": "29867ff0-acc9-42a9-923d-c013e1b20d81",
                                            "functions": {
                                                "fitProcess": {
                                                    "id": "MemoryManagementAlgorithms#fitProcess"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/MemoryManagementAlgorithms.java",
                                            "name": "MemoryManagementAlgorithms"
                                        }
                                    },
                                    "MiniMaxAlgorithm.java": {
                                        "name": "MiniMaxAlgorithm",
                                        "class": {
                                            "id": "4c70dfd2-65da-4be4-aa38-44fda7115a2a",
                                            "functions": {
                                                "getHeight": {
                                                    "id": "MiniMaxAlgorithm#getHeight"
                                                },
                                                "setScores": {
                                                    "id": "MiniMaxAlgorithm#setScores"
                                                },
                                                "getRandomScores": {
                                                    "id": "MiniMaxAlgorithm#getRandomScores"
                                                },
                                                "main": {
                                                    "id": "MiniMaxAlgorithm#main"
                                                },
                                                "log2": {
                                                    "id": "MiniMaxAlgorithm#log2"
                                                },
                                                "getScores": {
                                                    "id": "MiniMaxAlgorithm#getScores"
                                                },
                                                "miniMax": {
                                                    "id": "MiniMaxAlgorithm#miniMax"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/MiniMaxAlgorithm.java",
                                            "name": "MiniMaxAlgorithm"
                                        }
                                    },
                                    "PageRank.java": {
                                        "name": "PageRank",
                                        "class": {
                                            "id": "6b62c768-2567-4eee-9494-44bde047653e",
                                            "functions": {
                                                "main": {
                                                    "id": "PageRank#main"
                                                },
                                                "calc": {
                                                    "id": "PageRank#calc"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/PageRank.java",
                                            "name": "PageRank"
                                        }
                                    },
                                    "PasswordGen.java": {
                                        "name": "PasswordGen",
                                        "class": {
                                            "id": "bf11c325-955d-4b8f-9b6c-e69301f71948",
                                            "functions": {
                                                "main": {
                                                    "id": "PasswordGen#main"
                                                },
                                                "generatePassword": {
                                                    "id": "PasswordGen#generatePassword"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/PasswordGen.java",
                                            "name": "PasswordGen"
                                        }
                                    },
                                    "PerlinNoise.java": {
                                        "name": "PerlinNoise",
                                        "class": {
                                            "id": "f6215a0a-8699-424c-a1e4-33293c313a7b",
                                            "functions": {
                                                "generatePerlinNoise": {
                                                    "id": "PerlinNoise#generatePerlinNoise"
                                                },
                                                "interpolate": {
                                                    "id": "PerlinNoise#interpolate"
                                                },
                                                "main": {
                                                    "id": "PerlinNoise#main"
                                                },
                                                "generatePerlinNoiseLayer": {
                                                    "id": "PerlinNoise#generatePerlinNoiseLayer"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/PerlinNoise.java",
                                            "name": "PerlinNoise"
                                        }
                                    },
                                    "PrintAMatrixInSpiralOrder.java": {
                                        "name": "PrintAMatrixInSpiralOrder",
                                        "class": {
                                            "id": "e8f8578a-abdc-4d2e-ae61-41b1c1b8d3cf",
                                            "functions": {
                                                "print": {
                                                    "id": "PrintAMatrixInSpiralOrder#print"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/PrintAMatrixInSpiralOrder.java",
                                            "name": "PrintAMatrixInSpiralOrder"
                                        }
                                    },
                                    "QueueUsingTwoStacks.java": {
                                        "name": "QueueWithStack",
                                        "class": {
                                            "id": "0ffe2e06-ecc7-43b9-af79-316f3fe6505d",
                                            "functions": {
                                                "peekBack": {
                                                    "id": "QueueWithStack#peekBack"
                                                },
                                                "isInStackEmpty": {
                                                    "id": "QueueWithStack#isInStackEmpty"
                                                },
                                                "isEmpty": {
                                                    "id": "QueueWithStack#isEmpty"
                                                },
                                                "insert": {
                                                    "id": "QueueWithStack#insert"
                                                },
                                                "isOutStackEmpty": {
                                                    "id": "QueueWithStack#isOutStackEmpty"
                                                },
                                                "peekFront": {
                                                    "id": "QueueWithStack#peekFront"
                                                },
                                                "remove": {
                                                    "id": "QueueWithStack#remove"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/QueueUsingTwoStacks.java",
                                            "name": "QueueWithStack"
                                        }
                                    },
                                    "RabinKarp.java": {
                                        "name": "RabinKarp",
                                        "class": {
                                            "id": "ed40a684-cfc2-4aa3-9fd1-b3185a7dbe99",
                                            "functions": {
                                                "searchPat": {
                                                    "id": "RabinKarp#searchPat"
                                                },
                                                "main": {
                                                    "id": "RabinKarp#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/RabinKarp.java",
                                            "name": "RabinKarp"
                                        }
                                    },
                                    "RemoveDuplicateFromString.java": {
                                        "name": "RemoveDuplicateFromString",
                                        "class": {
                                            "id": "75b1172e-d733-4c04-9304-2c501396a880",
                                            "functions": {
                                                "main": {
                                                    "id": "RemoveDuplicateFromString#main"
                                                },
                                                "removeDuplicate": {
                                                    "id": "RemoveDuplicateFromString#removeDuplicate"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/RemoveDuplicateFromString.java",
                                            "name": "RemoveDuplicateFromString"
                                        }
                                    },
                                    "ReturnSubsequence.java": {
                                        "name": "ReturnSubsequence",
                                        "class": {
                                            "id": "a882dbf9-a0b3-4d34-9e20-8615511b42af",
                                            "functions": {
                                                "returnSubsequence": {
                                                    "id": "ReturnSubsequence#returnSubsequence"
                                                },
                                                "main": {
                                                    "id": "ReturnSubsequence#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/ReturnSubsequence.java",
                                            "name": "ReturnSubsequence"
                                        }
                                    },
                                    "ReverseStackUsingRecursion.java": {
                                        "name": "ReverseStackUsingRecursion",
                                        "class": {
                                            "id": "ed6bddd4-6ec1-4dd9-9117-a1b3e71859f4",
                                            "functions": {
                                                "reverseUsingRecursion": {
                                                    "id": "ReverseStackUsingRecursion#reverseUsingRecursion"
                                                },
                                                "main": {
                                                    "id": "ReverseStackUsingRecursion#main"
                                                },
                                                "insertAtEnd": {
                                                    "id": "ReverseStackUsingRecursion#insertAtEnd"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/ReverseStackUsingRecursion.java",
                                            "name": "ReverseStackUsingRecursion"
                                        }
                                    },
                                    "RootPrecision.java": {
                                        "name": "RootPrecision",
                                        "class": {
                                            "id": "fd2536e4-2bb1-421f-8355-0ec90ef9f7e6",
                                            "functions": {
                                                "squareRoot": {
                                                    "id": "RootPrecision#squareRoot"
                                                },
                                                "main": {
                                                    "id": "RootPrecision#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/RootPrecision.java",
                                            "name": "RootPrecision"
                                        }
                                    },
                                    "RotateMatriceBy90Degree.java": {
                                        "name": "Rotate_by_90_degree",
                                        "class": {
                                            "id": "5e3459fd-0a9d-4543-88ab-a62f4d662af1",
                                            "functions": {
                                                "printMatrix": {
                                                    "id": "Rotate_by_90_degree#printMatrix"
                                                },
                                                "main": {
                                                    "id": "Rotate_by_90_degree#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/RotateMatriceBy90Degree.java",
                                            "name": "Rotate_by_90_degree"
                                        }
                                    },
                                    "SieveOfEratosthenes.java": {
                                        "name": "SieveOfEratosthenes",
                                        "class": {
                                            "id": "4cd4256e-c5bc-465e-8240-8c143c5901e4",
                                            "functions": {
                                                "main": {
                                                    "id": "SieveOfEratosthenes#main"
                                                },
                                                "findPrimesTill": {
                                                    "id": "SieveOfEratosthenes#findPrimesTill"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/SieveOfEratosthenes.java",
                                            "name": "SieveOfEratosthenes"
                                        }
                                    },
                                    "SkylineProblem.java": {
                                        "name": "SkylineProblem",
                                        "class": {
                                            "id": "ccb7e354-4cda-4cef-ad4f-8ea804c11ccb",
                                            "functions": {
                                                "add": {
                                                    "id": "SkylineProblem#add"
                                                },
                                                "print": {
                                                    "id": "SkylineProblem#print"
                                                },
                                                "mergeSkyline": {
                                                    "id": "SkylineProblem#mergeSkyline"
                                                },
                                                "run": {
                                                    "id": "SkylineProblem#run"
                                                },
                                                "main": {
                                                    "id": "SkylineProblem#main"
                                                },
                                                "findSkyline": {
                                                    "id": "SkylineProblem#findSkyline"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/SkylineProblem.java",
                                            "name": "SkylineProblem"
                                        }
                                    },
                                    "StackPostfixNotation.java": {
                                        "name": "StackPostfixNotation",
                                        "class": {
                                            "id": "92fe6cb2-7510-46f4-828e-9d8edea18262",
                                            "functions": {
                                                "main": {
                                                    "id": "StackPostfixNotation#main"
                                                },
                                                "postfixEvaluate": {
                                                    "id": "StackPostfixNotation#postfixEvaluate"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/StackPostfixNotation.java",
                                            "name": "StackPostfixNotation"
                                        }
                                    },
                                    "StringMatchFiniteAutomata.java": {
                                        "name": "StringMatchFiniteAutomata",
                                        "class": {
                                            "id": "8d67ea00-bf12-4eb5-8280-897d720d1d99",
                                            "functions": {
                                                "computeFA": {
                                                    "id": "StringMatchFiniteAutomata#computeFA"
                                                },
                                                "searchPat": {
                                                    "id": "StringMatchFiniteAutomata#searchPat"
                                                },
                                                "getNextState": {
                                                    "id": "StringMatchFiniteAutomata#getNextState"
                                                },
                                                "main": {
                                                    "id": "StringMatchFiniteAutomata#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/StringMatchFiniteAutomata.java",
                                            "name": "StringMatchFiniteAutomata"
                                        }
                                    },
                                    "Sudoku.java": {
                                        "name": "Sudoku",
                                        "class": {
                                            "id": "c37a7bb9-fad0-4087-8294-df0a960c073b",
                                            "functions": {
                                                "print": {
                                                    "id": "Sudoku#print"
                                                },
                                                "solveSudoku": {
                                                    "id": "Sudoku#solveSudoku"
                                                },
                                                "main": {
                                                    "id": "Sudoku#main"
                                                },
                                                "isSafe": {
                                                    "id": "Sudoku#isSafe"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/Sudoku.java",
                                            "name": "Sudoku"
                                        }
                                    },
                                    "ThreeSum.java": {
                                        "name": "ThreeSum",
                                        "class": {
                                            "id": "a9de9f9c-381e-4fca-8ba6-5d0dfcb90ed4",
                                            "functions": {
                                                "main": {
                                                    "id": "ThreeSum#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/ThreeSum.java",
                                            "name": "ThreeSum"
                                        }
                                    },
                                    "TopKWords.java": {
                                        "name": "TopKWords",
                                        "class": {
                                            "id": "92744e8e-47d8-4e5d-a776-9bfdabfd36c6",
                                            "functions": {
                                                "main": {
                                                    "id": "TopKWords#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/TopKWords.java",
                                            "name": "TopKWords"
                                        }
                                    },
                                    "TowerOfHanoi.java": {
                                        "name": "TowerOfHanoi",
                                        "class": {
                                            "id": "5b7f8637-b9d2-4a54-980e-fc6ee90fe828",
                                            "functions": {
                                                "shift": {
                                                    "id": "TowerOfHanoi#shift"
                                                },
                                                "main": {
                                                    "id": "TowerOfHanoi#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/TowerOfHanoi.java",
                                            "name": "TowerOfHanoi"
                                        }
                                    },
                                    "TwoPointers.java": {
                                        "name": "TwoPointers",
                                        "class": {
                                            "id": "85ad18e1-f590-4d9e-8454-e2e095ccce36",
                                            "functions": {
                                                "main": {
                                                    "id": "TwoPointers#main"
                                                },
                                                "isPairedSum": {
                                                    "id": "TwoPointers#isPairedSum"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/TwoPointers.java",
                                            "name": "TwoPointers"
                                        }
                                    },
                                    "Verhoeff.java": {
                                        "name": "Verhoeff",
                                        "class": {
                                            "id": "d171a58e-79c3-4f33-aa47-6ea3e130c2ca",
                                            "functions": {
                                                "checkInput": {
                                                    "id": "Verhoeff#checkInput"
                                                },
                                                "checkAndPrint": {
                                                    "id": "Verhoeff#checkAndPrint"
                                                },
                                                "toIntArray": {
                                                    "id": "Verhoeff#toIntArray"
                                                },
                                                "main": {
                                                    "id": "Verhoeff#main"
                                                },
                                                "verhoeffCheck": {
                                                    "id": "Verhoeff#verhoeffCheck"
                                                },
                                                "addVerhoeffChecksum": {
                                                    "id": "Verhoeff#addVerhoeffChecksum"
                                                },
                                                "generateAndPrint": {
                                                    "id": "Verhoeff#generateAndPrint"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/Verhoeff.java",
                                            "name": "Verhoeff"
                                        }
                                    },
                                    "cn": {
                                        "HammingDistance.java": {
                                            "name": "HammingDistance",
                                            "class": {
                                                "id": "7a35d3a0-cd3a-4ee4-b9fa-c1b3a8f0d9e0",
                                                "functions": {
                                                    "getHammingDistanceBetweenBits": {
                                                        "id": "HammingDistance#getHammingDistanceBetweenBits"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/others/cn/HammingDistance.java",
                                                "name": "HammingDistance"
                                            }
                                        }
                                    },
                                    "countSetBits.java": {
                                        "name": "countSetBits",
                                        "class": {
                                            "id": "fcec48e8-bdb1-42fd-8cda-4c797dce531f",
                                            "functions": {
                                                "countsetBits": {
                                                    "id": "countSetBits#countsetBits"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/others/countSetBits.java",
                                            "name": "countSetBits"
                                        }
                                    }
                                },
                                "scheduling": {
                                    "FCFSScheduling.java": {
                                        "name": "FCFSScheduling",
                                        "class": {
                                            "id": "ad6aec06-ce6e-4584-b8ce-677bdc61f9f3",
                                            "functions": {
                                                "evaluateWaitingTime": {
                                                    "id": "FCFSScheduling#evaluateWaitingTime"
                                                },
                                                "scheduleProcesses": {
                                                    "id": "FCFSScheduling#scheduleProcesses"
                                                },
                                                "evaluateTurnAroundTime": {
                                                    "id": "FCFSScheduling#evaluateTurnAroundTime"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/scheduling/FCFSScheduling.java",
                                            "name": "FCFSScheduling"
                                        }
                                    },
                                    "SJFScheduling.java": {
                                        "name": "SJFScheduling",
                                        "class": {
                                            "id": "afb3272a-badb-4534-af36-fdc19771aefa",
                                            "functions": {
                                                "findShortestJob": {
                                                    "id": "SJFScheduling#findShortestJob"
                                                },
                                                "scheduleProcesses": {
                                                    "id": "SJFScheduling#scheduleProcesses"
                                                },
                                                "sortByArrivalTime": {
                                                    "id": "SJFScheduling#sortByArrivalTime"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/scheduling/SJFScheduling.java",
                                            "name": "SJFScheduling"
                                        }
                                    }
                                },
                                "searches": {
                                    "BinarySearch.java": {
                                        "name": "BinarySearch",
                                        "class": {
                                            "id": "1f136b9c-bf37-418b-a2a3-33d6241550b0",
                                            "functions": {
                                                "search": {
                                                    "id": "BinarySearch#search"
                                                },
                                                "find": {
                                                    "id": "BinarySearch#find"
                                                },
                                                "main": {
                                                    "id": "BinarySearch#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/BinarySearch.java",
                                            "name": "BinarySearch"
                                        }
                                    },
                                    "BinarySearch2dArray.java": {
                                        "name": "BinarySearch2dArray",
                                        "class": {
                                            "id": "d3e6b85d-732b-4513-9d6a-f1b230308cb6",
                                            "functions": {
                                                "BinarySearch": {
                                                    "id": "BinarySearch2dArray#BinarySearch"
                                                },
                                                "binarySearch": {
                                                    "id": "BinarySearch2dArray#binarySearch"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/BinarySearch2dArray.java",
                                            "name": "BinarySearch2dArray"
                                        }
                                    },
                                    "BreadthFirstSearch.java": {
                                        "name": "BreadthFirstSearch",
                                        "class": {
                                            "id": "5f805725-45f0-49e7-980c-8be12011a57d",
                                            "functions": {
                                                "search": {
                                                    "id": "BreadthFirstSearch#search"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/BreadthFirstSearch.java",
                                            "name": "BreadthFirstSearch"
                                        }
                                    },
                                    "DepthFirstSearch.java": {
                                        "name": "DepthFirstSearch",
                                        "class": {
                                            "id": "6f539c42-dce5-4165-8a1c-35dd33353931",
                                            "functions": {
                                                "search": {
                                                    "id": "DepthFirstSearch#search"
                                                },
                                                "main": {
                                                    "id": "DepthFirstSearch#main"
                                                },
                                                "assertThat": {
                                                    "id": "DepthFirstSearch#assertThat"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/DepthFirstSearch.java",
                                            "name": "DepthFirstSearch"
                                        }
                                    },
                                    "ExponentalSearch.java": {
                                        "name": "ExponentialSearch",
                                        "class": {
                                            "id": "c45cdc85-ded0-455d-b400-8b8aee730734",
                                            "functions": {
                                                "find": {
                                                    "id": "ExponentialSearch#find"
                                                },
                                                "main": {
                                                    "id": "ExponentialSearch#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/ExponentalSearch.java",
                                            "name": "ExponentialSearch"
                                        }
                                    },
                                    "FibonacciSearch.java": {
                                        "name": "FibonacciSearch",
                                        "class": {
                                            "id": "a5a8e28d-22d3-4381-8937-ce7632b6d2f8",
                                            "functions": {
                                                "find": {
                                                    "id": "FibonacciSearch#find"
                                                },
                                                "main": {
                                                    "id": "FibonacciSearch#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/FibonacciSearch.java",
                                            "name": "FibonacciSearch"
                                        }
                                    },
                                    "HowManyTimesRotated.java": {
                                        "name": "HowManyTimesRotated",
                                        "class": {
                                            "id": "c600626e-a997-463c-88bf-6ea6a954063d",
                                            "functions": {
                                                "rotated": {
                                                    "id": "HowManyTimesRotated#rotated"
                                                },
                                                "main": {
                                                    "id": "HowManyTimesRotated#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/HowManyTimesRotated.java",
                                            "name": "HowManyTimesRotated"
                                        }
                                    },
                                    "InterpolationSearch.java": {
                                        "name": "InterpolationSearch",
                                        "class": {
                                            "id": "f7084185-b897-4050-b4d0-3b02e011b7a6",
                                            "functions": {
                                                "find": {
                                                    "id": "InterpolationSearch#find"
                                                },
                                                "main": {
                                                    "id": "InterpolationSearch#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/InterpolationSearch.java",
                                            "name": "InterpolationSearch"
                                        }
                                    },
                                    "IterativeBinarySearch.java": {
                                        "name": "IterativeBinarySearch",
                                        "class": {
                                            "id": "9de3bc29-76a4-4178-b3aa-55c5d30a9eef",
                                            "functions": {
                                                "find": {
                                                    "id": "IterativeBinarySearch#find"
                                                },
                                                "main": {
                                                    "id": "IterativeBinarySearch#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/IterativeBinarySearch.java",
                                            "name": "IterativeBinarySearch"
                                        }
                                    },
                                    "IterativeTernarySearch.java": {
                                        "name": "IterativeTernarySearch",
                                        "class": {
                                            "id": "d97d4234-a378-4533-a0d9-0b33351b4e71",
                                            "functions": {
                                                "find": {
                                                    "id": "IterativeTernarySearch#find"
                                                },
                                                "main": {
                                                    "id": "IterativeTernarySearch#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/IterativeTernarySearch.java",
                                            "name": "IterativeTernarySearch"
                                        }
                                    },
                                    "JumpSearch.java": {
                                        "name": "JumpSearch",
                                        "class": {
                                            "id": "165bf649-6ca1-40e7-801a-5336002b292a",
                                            "functions": {
                                                "find": {
                                                    "id": "JumpSearch#find"
                                                },
                                                "main": {
                                                    "id": "JumpSearch#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/JumpSearch.java",
                                            "name": "JumpSearch"
                                        }
                                    },
                                    "KMPSearch.java": {
                                        "name": "KMPSearch",
                                        "class": {
                                            "id": "564713f9-082f-4700-b3ee-0a0122c03599",
                                            "functions": {
                                                "computeLPSArray": {
                                                    "id": "KMPSearch#computeLPSArray"
                                                },
                                                "KMPSearch": {
                                                    "id": "KMPSearch#KMPSearch"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/KMPSearch.java",
                                            "name": "KMPSearch"
                                        }
                                    },
                                    "LinearSearch.java": {
                                        "name": "LinearSearch",
                                        "class": {
                                            "id": "6585f99c-9f2e-46c7-8ee5-2f37b66fa1d3",
                                            "functions": {
                                                "find": {
                                                    "id": "LinearSearch#find"
                                                },
                                                "main": {
                                                    "id": "LinearSearch#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/LinearSearch.java",
                                            "name": "LinearSearch"
                                        }
                                    },
                                    "LinearSearchThread.java": {
                                        "name": "LinearSearchThread",
                                        "class": {
                                            "id": "b0ca5bf2-4305-4b5f-86cc-d4c9737b6a0e",
                                            "functions": {
                                                "main": {
                                                    "id": "LinearSearchThread#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/LinearSearchThread.java",
                                            "name": "LinearSearchThread"
                                        }
                                    },
                                    "LowerBound.java": {
                                        "name": "LowerBound",
                                        "class": {
                                            "id": "2d08405a-6660-4e08-8157-14d37870178f",
                                            "functions": {
                                                "search": {
                                                    "id": "LowerBound#search"
                                                },
                                                "find": {
                                                    "id": "LowerBound#find"
                                                },
                                                "main": {
                                                    "id": "LowerBound#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/LowerBound.java",
                                            "name": "LowerBound"
                                        }
                                    },
                                    "MonteCarloTreeSearch.java": {
                                        "name": "MonteCarloTreeSearch",
                                        "class": {
                                            "id": "52047844-d497-413e-9e76-d13ddcf76ec4",
                                            "functions": {
                                                "addChildNodes": {
                                                    "id": "MonteCarloTreeSearch#addChildNodes"
                                                },
                                                "monteCarloTreeSearch": {
                                                    "id": "MonteCarloTreeSearch#monteCarloTreeSearch"
                                                },
                                                "simulateRandomPlay": {
                                                    "id": "MonteCarloTreeSearch#simulateRandomPlay"
                                                },
                                                "main": {
                                                    "id": "MonteCarloTreeSearch#main"
                                                },
                                                "getPromisingNode": {
                                                    "id": "MonteCarloTreeSearch#getPromisingNode"
                                                },
                                                "getWinnerNode": {
                                                    "id": "MonteCarloTreeSearch#getWinnerNode"
                                                },
                                                "printScores": {
                                                    "id": "MonteCarloTreeSearch#printScores"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/MonteCarloTreeSearch.java",
                                            "name": "MonteCarloTreeSearch"
                                        }
                                    },
                                    "OrderAgnosticBinarySearch.java": {
                                        "name": "OrderAgnosticBinarySearch",
                                        "class": {
                                            "id": "7ad3c916-941e-43f5-8307-de7cdb8000d9",
                                            "functions": {
                                                "BinSearchAlgo": {
                                                    "id": "OrderAgnosticBinarySearch#BinSearchAlgo"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/OrderAgnosticBinarySearch.java",
                                            "name": "OrderAgnosticBinarySearch"
                                        }
                                    },
                                    "PerfectBinarySearch.java": {
                                        "name": "PerfectBinarySearch",
                                        "class": {
                                            "id": "f0063b56-39e9-464e-b4f7-01a4111743a4",
                                            "functions": {
                                                "main": {
                                                    "id": "PerfectBinarySearch#main"
                                                },
                                                "binarySearch": {
                                                    "id": "PerfectBinarySearch#binarySearch"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/PerfectBinarySearch.java",
                                            "name": "PerfectBinarySearch"
                                        }
                                    },
                                    "QuickSelect.java": {
                                        "name": "QuickSelect",
                                        "class": {
                                            "id": "ceb3744b-304a-4b10-a187-7d0a55ec8245",
                                            "functions": {
                                                "partition5": {
                                                    "id": "QuickSelect#partition5"
                                                },
                                                "select": {
                                                    "id": "QuickSelect#select"
                                                },
                                                "partition": {
                                                    "id": "QuickSelect#partition"
                                                },
                                                "selectIndex": {
                                                    "id": "QuickSelect#selectIndex"
                                                },
                                                "pivot": {
                                                    "id": "QuickSelect#pivot"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/QuickSelect.java",
                                            "name": "QuickSelect"
                                        }
                                    },
                                    "RabinKarpAlgorithm.java": {
                                        "name": "RabinKarpAlgorithm",
                                        "class": {
                                            "id": "772007ff-4027-475a-ad3a-ce784e75c25c",
                                            "functions": {
                                                "search": {
                                                    "id": "RabinKarpAlgorithm#search"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/RabinKarpAlgorithm.java",
                                            "name": "RabinKarpAlgorithm"
                                        }
                                    },
                                    "RowColumnWiseSorted2dArrayBinarySearch.java": {
                                        "name": "RowColumnWiseSorted2dArrayBinarySearch",
                                        "class": {
                                            "id": "4555c49f-d925-45d6-a617-c5c36b5035a4",
                                            "functions": {
                                                "search": {
                                                    "id": "RowColumnWiseSorted2dArrayBinarySearch#search"
                                                },
                                                "find": {
                                                    "id": "RowColumnWiseSorted2dArrayBinarySearch#find"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/RowColumnWiseSorted2dArrayBinarySearch.java",
                                            "name": "RowColumnWiseSorted2dArrayBinarySearch"
                                        }
                                    },
                                    "SaddlebackSearch.java": {
                                        "name": "SaddlebackSearch",
                                        "class": {
                                            "id": "91b8be1b-e8e2-4a6c-b20d-ab5861ef696e",
                                            "functions": {
                                                "find": {
                                                    "id": "SaddlebackSearch#find"
                                                },
                                                "main": {
                                                    "id": "SaddlebackSearch#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/SaddlebackSearch.java",
                                            "name": "SaddlebackSearch"
                                        }
                                    },
                                    "SearchInARowAndColWiseSortedMatrix.java": {
                                        "name": "SearchInARowAndColWiseSortedMatrix",
                                        "class": {
                                            "id": "45625ce1-951d-4e87-ac20-8f9b8cf2680c",
                                            "functions": {
                                                "search": {
                                                    "id": "SearchInARowAndColWiseSortedMatrix#search"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/SearchInARowAndColWiseSortedMatrix.java",
                                            "name": "SearchInARowAndColWiseSortedMatrix"
                                        }
                                    },
                                    "SquareRootBinarySearch.java": {
                                        "name": "SquareRootBinarySearch",
                                        "class": {
                                            "id": "31f0ef6e-a888-4826-9a71-b5b08097138d",
                                            "functions": {
                                                "squareRoot": {
                                                    "id": "SquareRootBinarySearch#squareRoot"
                                                },
                                                "main": {
                                                    "id": "SquareRootBinarySearch#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/SquareRootBinarySearch.java",
                                            "name": "SquareRootBinarySearch"
                                        }
                                    },
                                    "TernarySearch.java": {
                                        "name": "TernarySearch",
                                        "class": {
                                            "id": "1c484847-2654-4d41-9feb-b7e16ac8d1ad",
                                            "functions": {
                                                "ternarySearch": {
                                                    "id": "TernarySearch#ternarySearch"
                                                },
                                                "find": {
                                                    "id": "TernarySearch#find"
                                                },
                                                "main": {
                                                    "id": "TernarySearch#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/TernarySearch.java",
                                            "name": "TernarySearch"
                                        }
                                    },
                                    "UnionFind.java": {
                                        "name": "UnionFind",
                                        "class": {
                                            "id": "78d0f5e3-3315-436f-a05a-8ddca6d87f5c",
                                            "functions": {
                                                "find": {
                                                    "id": "UnionFind#find"
                                                },
                                                "count": {
                                                    "id": "UnionFind#count"
                                                },
                                                "toString": {
                                                    "id": "UnionFind#toString"
                                                },
                                                "main": {
                                                    "id": "UnionFind#main"
                                                },
                                                "union": {
                                                    "id": "UnionFind#union"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/UnionFind.java",
                                            "name": "UnionFind"
                                        }
                                    },
                                    "UpperBound.java": {
                                        "name": "UpperBound",
                                        "class": {
                                            "id": "91542512-2b1e-43b0-8a1f-61eb6f3cc286",
                                            "functions": {
                                                "search": {
                                                    "id": "UpperBound#search"
                                                },
                                                "find": {
                                                    "id": "UpperBound#find"
                                                },
                                                "main": {
                                                    "id": "UpperBound#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/UpperBound.java",
                                            "name": "UpperBound"
                                        }
                                    },
                                    "sortOrderAgnosticBinarySearch.java": {
                                        "name": "sortOrderAgnosticBinarySearch",
                                        "class": {
                                            "id": "4a55c679-6ec8-48ed-85ec-47693fb27f77",
                                            "functions": {
                                                "find": {
                                                    "id": "sortOrderAgnosticBinarySearch#find"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/searches/sortOrderAgnosticBinarySearch.java",
                                            "name": "sortOrderAgnosticBinarySearch"
                                        }
                                    }
                                },
                                "sorts": {
                                    "BeadSort.java": {
                                        "name": "BeadSort",
                                        "class": {
                                            "id": "04e76a55-e6d7-4675-bb43-6c01620eb076",
                                            "functions": {
                                                "sort": {
                                                    "id": "BeadSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/BeadSort.java",
                                            "name": "BeadSort"
                                        }
                                    },
                                    "BinaryInsertionSort.java": {
                                        "name": "BinaryInsertionSort",
                                        "class": {
                                            "id": "7ca6b522-a17a-4cc6-add7-1da20df85e89",
                                            "functions": {
                                                "binaryInsertSort": {
                                                    "id": "BinaryInsertionSort#binaryInsertSort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/BinaryInsertionSort.java",
                                            "name": "BinaryInsertionSort"
                                        }
                                    },
                                    "BitonicSort.java": {
                                        "name": "BitonicSort",
                                        "class": {
                                            "id": "31ef9fd4-5424-4495-a6a8-169e78aad526",
                                            "functions": {
                                                "bitonicSort": {
                                                    "id": "BitonicSort#bitonicSort"
                                                },
                                                "printArray": {
                                                    "id": "BitonicSort#printArray"
                                                },
                                                "compAndSwap": {
                                                    "id": "BitonicSort#compAndSwap"
                                                },
                                                "main": {
                                                    "id": "BitonicSort#main"
                                                },
                                                "sort": {
                                                    "id": "BitonicSort#sort"
                                                },
                                                "bitonicMerge": {
                                                    "id": "BitonicSort#bitonicMerge"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/BitonicSort.java",
                                            "name": "BitonicSort"
                                        }
                                    },
                                    "BogoSort.java": {
                                        "name": "BogoSort",
                                        "class": {
                                            "id": "6012cfe2-022f-45b1-86ce-4e8fda3e5818",
                                            "functions": {
                                                "nextPermutation": {
                                                    "id": "BogoSort#nextPermutation"
                                                },
                                                "main": {
                                                    "id": "BogoSort#main"
                                                },
                                                "isSorted": {
                                                    "id": "BogoSort#isSorted"
                                                },
                                                "sort": {
                                                    "id": "BogoSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/BogoSort.java",
                                            "name": "BogoSort"
                                        }
                                    },
                                    "BubbleSort.java": {
                                        "name": "BubbleSort",
                                        "class": {
                                            "id": "08dd8b65-b56e-45f1-ae7c-11705860d3fa",
                                            "functions": {
                                                "sort": {
                                                    "id": "BubbleSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/BubbleSort.java",
                                            "name": "BubbleSort"
                                        }
                                    },
                                    "BubbleSortRecursion.java": {
                                        "name": "BubbleSortRecursion",
                                        "class": {
                                            "id": "c5dba207-350e-4b92-9359-bf8aa0120778",
                                            "functions": {
                                                "bubbleSort": {
                                                    "id": "BubbleSortRecursion#bubbleSort"
                                                },
                                                "main": {
                                                    "id": "BubbleSortRecursion#main"
                                                },
                                                "sort": {
                                                    "id": "BubbleSortRecursion#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/BubbleSortRecursion.java",
                                            "name": "BubbleSortRecursion"
                                        }
                                    },
                                    "BucketSort.java": {
                                        "name": "BucketSort",
                                        "class": {
                                            "id": "60edaf56-f9b6-4c23-9db9-667b97272dce",
                                            "functions": {
                                                "min": {
                                                    "id": "BucketSort#min"
                                                },
                                                "max": {
                                                    "id": "BucketSort#max"
                                                },
                                                "main": {
                                                    "id": "BucketSort#main"
                                                },
                                                "bucketSort": {
                                                    "id": "BucketSort#bucketSort"
                                                },
                                                "hash": {
                                                    "id": "BucketSort#hash"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/BucketSort.java",
                                            "name": "BucketSort"
                                        }
                                    },
                                    "CircleSort.java": {
                                        "name": "CircleSort",
                                        "class": {
                                            "id": "21ed3014-55d4-4ec6-809e-d81b2c0dbcf2",
                                            "functions": {
                                                "doSort": {
                                                    "id": "CircleSort#doSort"
                                                },
                                                "main": {
                                                    "id": "CircleSort#main"
                                                },
                                                "sort": {
                                                    "id": "CircleSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/CircleSort.java",
                                            "name": "CircleSort"
                                        }
                                    },
                                    "CocktailShakerSort.java": {
                                        "name": "CocktailShakerSort",
                                        "class": {
                                            "id": "f12c8b08-94ae-4208-b270-dd1406885318",
                                            "functions": {
                                                "main": {
                                                    "id": "CocktailShakerSort#main"
                                                },
                                                "sort": {
                                                    "id": "CocktailShakerSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/CocktailShakerSort.java",
                                            "name": "CocktailShakerSort"
                                        }
                                    },
                                    "CombSort.java": {
                                        "name": "CombSort",
                                        "class": {
                                            "id": "8e7815a5-1167-4dc0-af1b-f74a31ff4cce",
                                            "functions": {
                                                "nextGap": {
                                                    "id": "CombSort#nextGap"
                                                },
                                                "main": {
                                                    "id": "CombSort#main"
                                                },
                                                "sort": {
                                                    "id": "CombSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/CombSort.java",
                                            "name": "CombSort"
                                        }
                                    },
                                    "CountingSort.java": {
                                        "name": "CountingSort",
                                        "class": {
                                            "id": "3a467a33-9905-4ada-8790-93132839b36d",
                                            "functions": {
                                                "streamSort": {
                                                    "id": "CountingSort#streamSort"
                                                },
                                                "main": {
                                                    "id": "CountingSort#main"
                                                },
                                                "sort": {
                                                    "id": "CountingSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/CountingSort.java",
                                            "name": "CountingSort"
                                        }
                                    },
                                    "CycleSort.java": {
                                        "name": "CycleSort",
                                        "class": {
                                            "id": "cbd2e231-0cc5-4c16-8a30-73488f23d229",
                                            "functions": {
                                                "replace": {
                                                    "id": "CycleSort#replace"
                                                },
                                                "main": {
                                                    "id": "CycleSort#main"
                                                },
                                                "sort": {
                                                    "id": "CycleSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/CycleSort.java",
                                            "name": "CycleSort"
                                        }
                                    },
                                    "DNFSort.java": {
                                        "name": "DNFSort",
                                        "class": {
                                            "id": "b8855064-b11b-4ecc-ae16-9b454e62ae40",
                                            "functions": {
                                                "sort012": {
                                                    "id": "DNFSort#sort012"
                                                },
                                                "printArray": {
                                                    "id": "DNFSort#printArray"
                                                },
                                                "main": {
                                                    "id": "DNFSort#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/DNFSort.java",
                                            "name": "DNFSort"
                                        }
                                    },
                                    "DualPivotQuickSort.java": {
                                        "name": "DualPivotQuickSort",
                                        "class": {
                                            "id": "c7d8dd33-4bb3-4619-b5bf-f1ff64c3c227",
                                            "functions": {
                                                "partition": {
                                                    "id": "DualPivotQuickSort#partition"
                                                },
                                                "swap": {
                                                    "id": "DualPivotQuickSort#swap"
                                                },
                                                "dualPivotQuicksort": {
                                                    "id": "DualPivotQuickSort#dualPivotQuicksort"
                                                },
                                                "main": {
                                                    "id": "DualPivotQuickSort#main"
                                                },
                                                "sort": {
                                                    "id": "DualPivotQuickSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/DualPivotQuickSort.java",
                                            "name": "DualPivotQuickSort"
                                        }
                                    },
                                    "DutchNationalFlagSort.java": {
                                        "name": "DutchNationalFlagSort",
                                        "class": {
                                            "id": "b83ee7c0-0631-4383-b101-acc7e514dd80",
                                            "functions": {
                                                "dutch_national_flag_sort": {
                                                    "id": "DutchNationalFlagSort#dutch_national_flag_sort"
                                                },
                                                "sort": {
                                                    "id": "DutchNationalFlagSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/DutchNationalFlagSort.java",
                                            "name": "DutchNationalFlagSort"
                                        }
                                    },
                                    "GnomeSort.java": {
                                        "name": "GnomeSort",
                                        "class": {
                                            "id": "a5591b37-7627-43b0-8416-13f8c3c0f6da",
                                            "functions": {
                                                "main": {
                                                    "id": "GnomeSort#main"
                                                },
                                                "sort": {
                                                    "id": "GnomeSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/GnomeSort.java",
                                            "name": "GnomeSort"
                                        }
                                    },
                                    "HeapSort.java": {
                                        "name": "HeapSort",
                                        "class": {
                                            "id": "d31c04ec-02b2-4560-9411-6821adc5c34a",
                                            "functions": {
                                                "siftDown": {
                                                    "id": "HeapSort#siftDown"
                                                },
                                                "swap": {
                                                    "id": "HeapSort#swap"
                                                },
                                                "sort": {
                                                    "id": "HeapSort#sort"
                                                },
                                                "less": {
                                                    "id": "HeapSort#less"
                                                },
                                                "heapify": {
                                                    "id": "HeapSort#heapify"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/HeapSort.java",
                                            "name": "HeapSort"
                                        }
                                    },
                                    "InsertionSort.java": {
                                        "name": "InsertionSort",
                                        "class": {
                                            "id": "83d473ed-7319-487f-bea0-c32b7b00c9a8",
                                            "functions": {
                                                "sentinelSort": {
                                                    "id": "InsertionSort#sentinelSort"
                                                },
                                                "main": {
                                                    "id": "InsertionSort#main"
                                                },
                                                "sort": {
                                                    "id": "InsertionSort#sort"
                                                },
                                                "measureApproxExecTime": {
                                                    "id": "InsertionSort#measureApproxExecTime"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/InsertionSort.java",
                                            "name": "InsertionSort"
                                        }
                                    },
                                    "IntrospectiveSort.java": {
                                        "name": "IntrospectiveSort",
                                        "class": {
                                            "id": "7f631860-9950-42b1-80f6-19bc35e52a0a",
                                            "functions": {
                                                "partition": {
                                                    "id": "IntrospectiveSort#partition"
                                                },
                                                "swap": {
                                                    "id": "IntrospectiveSort#swap"
                                                },
                                                "insertionSort": {
                                                    "id": "IntrospectiveSort#insertionSort"
                                                },
                                                "sort": {
                                                    "id": "IntrospectiveSort#sort"
                                                },
                                                "introSort": {
                                                    "id": "IntrospectiveSort#introSort"
                                                },
                                                "heapify": {
                                                    "id": "IntrospectiveSort#heapify"
                                                },
                                                "heapSort": {
                                                    "id": "IntrospectiveSort#heapSort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/IntrospectiveSort.java",
                                            "name": "IntrospectiveSort"
                                        }
                                    },
                                    "LinkListSort.java": {
                                        "name": "LinkListSort",
                                        "class": {
                                            "id": "d3244bad-0d84-4c46-b36e-bef188e91fdd",
                                            "functions": {
                                                "compare": {
                                                    "id": "LinkListSort#compare"
                                                },
                                                "isSorted": {
                                                    "id": "LinkListSort#isSorted"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/LinkListSort.java",
                                            "name": "LinkListSort"
                                        }
                                    },
                                    "MergeSort.java": {
                                        "name": "MergeSort",
                                        "class": {
                                            "id": "9c156c93-cc47-4e91-85f5-d8234a2b621b",
                                            "functions": {
                                                "doSort": {
                                                    "id": "MergeSort#doSort"
                                                },
                                                "merge": {
                                                    "id": "MergeSort#merge"
                                                },
                                                "sort": {
                                                    "id": "MergeSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/MergeSort.java",
                                            "name": "MergeSort"
                                        }
                                    },
                                    "MergeSortNoExtraSpace.java": {
                                        "name": "MergeSortNoExtraSpace",
                                        "class": {
                                            "id": "0d58296b-add2-406a-bdb9-e6463f1b9ba4",
                                            "functions": {
                                                "implement_merge_sort": {
                                                    "id": "MergeSortNoExtraSpace#implement_merge_sort"
                                                },
                                                "merge_sort": {
                                                    "id": "MergeSortNoExtraSpace#merge_sort"
                                                },
                                                "call_merge_sort": {
                                                    "id": "MergeSortNoExtraSpace#call_merge_sort"
                                                },
                                                "main": {
                                                    "id": "MergeSortNoExtraSpace#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/MergeSortNoExtraSpace.java",
                                            "name": "MergeSortNoExtraSpace"
                                        }
                                    },
                                    "MergeSortRecursive.java": {
                                        "name": "MergeSortRecursive",
                                        "class": {
                                            "id": "8bfff5e2-2d69-4118-b3cf-b306233ff61e",
                                            "functions": {
                                                "merge": {
                                                    "id": "MergeSortRecursive#merge"
                                                },
                                                "sort": {
                                                    "id": "MergeSortRecursive#sort"
                                                },
                                                "mergeSort": {
                                                    "id": "MergeSortRecursive#mergeSort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/MergeSortRecursive.java",
                                            "name": "MergeSortRecursive"
                                        }
                                    },
                                    "OddEvenSort.java": {
                                        "name": "OddEvenSort",
                                        "class": {
                                            "id": "e0a79528-acc8-46ca-ae81-a37f99b6aed7",
                                            "functions": {
                                                "oddEvenSort": {
                                                    "id": "OddEvenSort#oddEvenSort"
                                                },
                                                "swap": {
                                                    "id": "OddEvenSort#swap"
                                                },
                                                "main": {
                                                    "id": "OddEvenSort#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/OddEvenSort.java",
                                            "name": "OddEvenSort"
                                        }
                                    },
                                    "PancakeSort.java": {
                                        "name": "PancakeSort",
                                        "class": {
                                            "id": "9fc7630c-c678-46f0-ac58-3646c14c9888",
                                            "functions": {
                                                "main": {
                                                    "id": "PancakeSort#main"
                                                },
                                                "sort": {
                                                    "id": "PancakeSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/PancakeSort.java",
                                            "name": "PancakeSort"
                                        }
                                    },
                                    "PigeonholeSort.java": {
                                        "name": "PigeonholeSort",
                                        "class": {
                                            "id": "fb64deba-71f2-4b1a-b66c-95d82c65d7f0",
                                            "functions": {
                                                "main": {
                                                    "id": "PigeonholeSort#main"
                                                },
                                                "sort": {
                                                    "id": "PigeonholeSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/PigeonholeSort.java",
                                            "name": "PigeonholeSort"
                                        }
                                    },
                                    "QuickSort.java": {
                                        "name": "QuickSort",
                                        "class": {
                                            "id": "d40fdb8a-d901-4f83-8afd-362091c9f856",
                                            "functions": {
                                                "doSort": {
                                                    "id": "QuickSort#doSort"
                                                },
                                                "partition": {
                                                    "id": "QuickSort#partition"
                                                },
                                                "sort": {
                                                    "id": "QuickSort#sort"
                                                },
                                                "randomPartition": {
                                                    "id": "QuickSort#randomPartition"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/QuickSort.java",
                                            "name": "QuickSort"
                                        }
                                    },
                                    "RadixSort.java": {
                                        "name": "RadixSort",
                                        "class": {
                                            "id": "25ce44a5-4a56-4960-a66d-d276c0b52503",
                                            "functions": {
                                                "print": {
                                                    "id": "RadixSort#print"
                                                },
                                                "getMax": {
                                                    "id": "RadixSort#getMax"
                                                },
                                                "radixsort": {
                                                    "id": "RadixSort#radixsort"
                                                },
                                                "main": {
                                                    "id": "RadixSort#main"
                                                },
                                                "countSort": {
                                                    "id": "RadixSort#countSort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/RadixSort.java",
                                            "name": "RadixSort"
                                        }
                                    },
                                    "SelectionSort.java": {
                                        "name": "SelectionSort",
                                        "class": {
                                            "id": "ab30a18b-99ea-46ab-9112-b6de621c8a1c",
                                            "functions": {
                                                "main": {
                                                    "id": "SelectionSort#main"
                                                },
                                                "sort": {
                                                    "id": "SelectionSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/SelectionSort.java",
                                            "name": "SelectionSort"
                                        }
                                    },
                                    "ShellSort.java": {
                                        "name": "ShellSort",
                                        "class": {
                                            "id": "21648c31-a864-4940-b8f5-5c0f01451d0d",
                                            "functions": {
                                                "main": {
                                                    "id": "ShellSort#main"
                                                },
                                                "sort": {
                                                    "id": "ShellSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/ShellSort.java",
                                            "name": "ShellSort"
                                        }
                                    },
                                    "SimpleSort.java": {
                                        "name": "SimpleSort",
                                        "class": {
                                            "id": "077a2dba-8a9a-43b4-8fef-bc1aa009d33a",
                                            "functions": {
                                                "main": {
                                                    "id": "SimpleSort#main"
                                                },
                                                "sort": {
                                                    "id": "SimpleSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/SimpleSort.java",
                                            "name": "SimpleSort"
                                        }
                                    },
                                    "SlowSort.java": {
                                        "name": "SlowSort",
                                        "class": {
                                            "id": "7cb9bcd8-e869-41ef-b271-7d51f24a2e8f",
                                            "functions": {
                                                "sort": {
                                                    "id": "SlowSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/SlowSort.java",
                                            "name": "SlowSort"
                                        }
                                    },
                                    "SortAlgorithm.java": {
                                        "name": "SortAlgorithm",
                                        "class": {
                                            "id": "96dcc56b-4618-4efb-8214-421f9323945c",
                                            "functions": {
                                                "sort": {
                                                    "id": "SortAlgorithm#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/SortAlgorithm.java",
                                            "name": "SortAlgorithm"
                                        }
                                    },
                                    "SortUtils.java": {
                                        "name": "SortUtils",
                                        "class": {
                                            "id": "83bc99ca-62b9-4f0d-bf93-d9f2385c1c08",
                                            "functions": {
                                                "greaterOrEqual": {
                                                    "id": "SortUtils#greaterOrEqual"
                                                },
                                                "print": {
                                                    "id": "SortUtils#print"
                                                },
                                                "swap": {
                                                    "id": "SortUtils#swap"
                                                },
                                                "less": {
                                                    "id": "SortUtils#less"
                                                },
                                                "isSorted": {
                                                    "id": "SortUtils#isSorted"
                                                },
                                                "greater": {
                                                    "id": "SortUtils#greater"
                                                },
                                                "flip": {
                                                    "id": "SortUtils#flip"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/SortUtils.java",
                                            "name": "SortUtils"
                                        }
                                    },
                                    "SortUtilsRandomGenerator.java": {
                                        "name": "SortUtilsRandomGenerator",
                                        "class": {
                                            "id": "8ead8f8b-b968-4f1c-86e6-4b9a46120576",
                                            "functions": {
                                                "generateInt": {
                                                    "id": "SortUtilsRandomGenerator#generateInt"
                                                },
                                                "generateArray": {
                                                    "id": "SortUtilsRandomGenerator#generateArray"
                                                },
                                                "generateDouble": {
                                                    "id": "SortUtilsRandomGenerator#generateDouble"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/SortUtilsRandomGenerator.java",
                                            "name": "SortUtilsRandomGenerator"
                                        }
                                    },
                                    "StoogeSort.java": {
                                        "name": "StoogeSort",
                                        "class": {
                                            "id": "ee18d9ff-ee5e-4a2e-afb3-b84aab30c413",
                                            "functions": {
                                                "main": {
                                                    "id": "StoogeSort#main"
                                                },
                                                "sort": {
                                                    "id": "StoogeSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/StoogeSort.java",
                                            "name": "StoogeSort"
                                        }
                                    },
                                    "StrandSort.java": {
                                        "name": "StrandSort",
                                        "class": {
                                            "id": "d076e348-af47-4168-803a-3732d035a4e9",
                                            "functions": {
                                                "strandSort": {
                                                    "id": "StrandSort#strandSort"
                                                },
                                                "merge": {
                                                    "id": "StrandSort#merge"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/StrandSort.java",
                                            "name": "StrandSort"
                                        }
                                    },
                                    "SwapSort.java": {
                                        "name": "SwapSort",
                                        "class": {
                                            "id": "c97c9bad-d5e3-4b7d-8707-c0788a830080",
                                            "functions": {
                                                "main": {
                                                    "id": "SwapSort#main"
                                                },
                                                "sort": {
                                                    "id": "SwapSort#sort"
                                                },
                                                "getSmallerElementCount": {
                                                    "id": "SwapSort#getSmallerElementCount"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/SwapSort.java",
                                            "name": "SwapSort"
                                        }
                                    },
                                    "TimSort.java": {
                                        "name": "TimSort",
                                        "class": {
                                            "id": "e9a61d47-a956-4af4-b3e1-cc76091095b7",
                                            "functions": {
                                                "merge": {
                                                    "id": "TimSort#merge"
                                                },
                                                "sort": {
                                                    "id": "TimSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/TimSort.java",
                                            "name": "TimSort"
                                        }
                                    },
                                    "TopologicalSort.java": {
                                        "name": "TopologicalSort",
                                        "class": {
                                            "id": "7728e0f2-d1b1-458b-a1d8-9a376fac879f",
                                            "functions": {
                                                "sort": {
                                                    "id": "TopologicalSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/TopologicalSort.java",
                                            "name": "TopologicalSort"
                                        }
                                    },
                                    "TreeSort.java": {
                                        "name": "TreeSort",
                                        "class": {
                                            "id": "3aef16d6-3166-4d5b-a55f-fb86c3053a78",
                                            "functions": {
                                                "doTreeSortArray": {
                                                    "id": "TreeSort#doTreeSortArray"
                                                },
                                                "doTreeSortList": {
                                                    "id": "TreeSort#doTreeSortList"
                                                },
                                                "main": {
                                                    "id": "TreeSort#main"
                                                },
                                                "sort": {
                                                    "id": "TreeSort#sort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/TreeSort.java",
                                            "name": "TreeSort"
                                        }
                                    },
                                    "WiggleSort.java": {
                                        "name": "WiggleSort",
                                        "class": {
                                            "id": "c1ff7f8b-2eaf-46ac-b67f-2750d3c2d8e2",
                                            "functions": {
                                                "mapIndex": {
                                                    "id": "WiggleSort#mapIndex"
                                                },
                                                "sort": {
                                                    "id": "WiggleSort#sort"
                                                },
                                                "wiggleSort": {
                                                    "id": "WiggleSort#wiggleSort"
                                                },
                                                "triColorSort": {
                                                    "id": "WiggleSort#triColorSort"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/sorts/WiggleSort.java",
                                            "name": "WiggleSort"
                                        }
                                    }
                                },
                                "strings": {
                                    "Alphabetical.java": {
                                        "name": "Alphabetical",
                                        "class": {
                                            "id": "6226fc37-c4f8-4d49-942d-4d619b528b47",
                                            "functions": {
                                                "isAlphabetical": {
                                                    "id": "Alphabetical#isAlphabetical"
                                                },
                                                "main": {
                                                    "id": "Alphabetical#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/Alphabetical.java",
                                            "name": "Alphabetical"
                                        }
                                    },
                                    "Anagrams.java": {
                                        "name": "Anagrams",
                                        "class": {
                                            "id": "e1c6211d-dd26-4478-8edb-09ec660c8020",
                                            "functions": {
                                                "approach4": {
                                                    "id": "Anagrams#approach4"
                                                },
                                                "approach1": {
                                                    "id": "Anagrams#approach1"
                                                },
                                                "approach3": {
                                                    "id": "Anagrams#approach3"
                                                },
                                                "approach2": {
                                                    "id": "Anagrams#approach2"
                                                },
                                                "main": {
                                                    "id": "Anagrams#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/Anagrams.java",
                                            "name": "Anagrams"
                                        }
                                    },
                                    "CharactersSame.java": {
                                        "name": "CharactersSame",
                                        "class": {
                                            "id": "c0f24b53-0186-41fe-8f3c-1375d5e035ad",
                                            "functions": {
                                                "isAllCharactersSame": {
                                                    "id": "CharactersSame#isAllCharactersSame"
                                                },
                                                "main": {
                                                    "id": "CharactersSame#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/CharactersSame.java",
                                            "name": "CharactersSame"
                                        }
                                    },
                                    "CheckAnagrams.java": {
                                        "name": "CheckAnagrams",
                                        "class": {
                                            "id": "4800fc84-1fd9-40ed-b7df-499d57f54884",
                                            "functions": {
                                                "main": {
                                                    "id": "CheckAnagrams#main"
                                                },
                                                "isAnagrams": {
                                                    "id": "CheckAnagrams#isAnagrams"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/CheckAnagrams.java",
                                            "name": "CheckAnagrams"
                                        }
                                    },
                                    "CheckVowels.java": {
                                        "name": "CheckVowels",
                                        "class": {
                                            "id": "cc82c295-4c2c-4d78-ada9-8d01880b94fe",
                                            "functions": {
                                                "hasVowels": {
                                                    "id": "CheckVowels#hasVowels"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/CheckVowels.java",
                                            "name": "CheckVowels"
                                        }
                                    },
                                    "HammingDistance.java": {
                                        "name": "HammingDistance",
                                        "class": {
                                            "id": "31e8b868-e0be-4d9d-8b81-aa40755c4f77",
                                            "functions": {
                                                "calculateHammingDistance": {
                                                    "id": "HammingDistance#calculateHammingDistance"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/HammingDistance.java",
                                            "name": "HammingDistance"
                                        }
                                    },
                                    "HorspoolSearch.java": {
                                        "name": "HorspoolSearch",
                                        "class": {
                                            "id": "1603860c-17fe-464c-8234-5d80ba7d567f",
                                            "functions": {
                                                "findFirstInsensitive": {
                                                    "id": "HorspoolSearch#findFirstInsensitive"
                                                },
                                                "calcShiftValues": {
                                                    "id": "HorspoolSearch#calcShiftValues"
                                                },
                                                "firstOccurrence": {
                                                    "id": "HorspoolSearch#firstOccurrence"
                                                },
                                                "findFirst": {
                                                    "id": "HorspoolSearch#findFirst"
                                                },
                                                "getShiftValue": {
                                                    "id": "HorspoolSearch#getShiftValue"
                                                },
                                                "charEquals": {
                                                    "id": "HorspoolSearch#charEquals"
                                                },
                                                "getLastComparisons": {
                                                    "id": "HorspoolSearch#getLastComparisons"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/HorspoolSearch.java",
                                            "name": "HorspoolSearch"
                                        }
                                    },
                                    "Isomorphic.java": {
                                        "name": "Isomorphic",
                                        "class": {
                                            "id": "c085e947-cbb0-48bc-a891-083e0163e9ee",
                                            "functions": {
                                                "checkStrings": {
                                                    "id": "Isomorphic#checkStrings"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/Isomorphic.java",
                                            "name": "Isomorphic"
                                        }
                                    },
                                    "LetterCombinationsOfPhoneNumber.java": {
                                        "name": "LetterCombinationsOfPhoneNumber",
                                        "class": {
                                            "id": "e8799d9b-e165-4f13-bd84-e05ac1b0f488",
                                            "functions": {
                                                "printWords": {
                                                    "id": "LetterCombinationsOfPhoneNumber#printWords"
                                                },
                                                "main": {
                                                    "id": "LetterCombinationsOfPhoneNumber#main"
                                                },
                                                "generateNumberToCharMap": {
                                                    "id": "LetterCombinationsOfPhoneNumber#generateNumberToCharMap"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/LetterCombinationsOfPhoneNumber.java",
                                            "name": "LetterCombinationsOfPhoneNumber"
                                        }
                                    },
                                    "LongestPalindromicSubstring.java": {
                                        "name": "LongestPalindromicSubstring",
                                        "class": {
                                            "id": "03fed000-fb0d-4020-953f-4952791c2129",
                                            "functions": {
                                                "main": {
                                                    "id": "LongestPalindromicSubstring#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/LongestPalindromicSubstring.java",
                                            "name": "LongestPalindromicSubstring"
                                        }
                                    },
                                    "Lower.java": {
                                        "name": "Lower",
                                        "class": {
                                            "id": "4be2958c-d340-44d0-8dfb-50bd4b52c599",
                                            "functions": {
                                                "toLowerCase": {
                                                    "id": "Lower#toLowerCase"
                                                },
                                                "main": {
                                                    "id": "Lower#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/Lower.java",
                                            "name": "Lower"
                                        }
                                    },
                                    "MyAtoi.java": {
                                        "name": "MyAtoi",
                                        "class": {
                                            "id": "be1cbdb0-673e-4b19-b5de-caaf2c8183dd",
                                            "functions": {
                                                "myAtoi": {
                                                    "id": "MyAtoi#myAtoi"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/MyAtoi.java",
                                            "name": "MyAtoi"
                                        }
                                    },
                                    "Palindrome.java": {
                                        "name": "Palindrome",
                                        "class": {
                                            "id": "c2c5c668-7965-4182-a2cc-382d325156cd",
                                            "functions": {
                                                "isPalindrome": {
                                                    "id": "Palindrome#isPalindrome"
                                                },
                                                "isPalindromeTwoPointer": {
                                                    "id": "Palindrome#isPalindromeTwoPointer"
                                                },
                                                "isPalindromeRecursion": {
                                                    "id": "Palindrome#isPalindromeRecursion"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/Palindrome.java",
                                            "name": "Palindrome"
                                        }
                                    },
                                    "Pangram.java": {
                                        "name": "Pangram",
                                        "class": {
                                            "id": "01beffb4-fe5f-4f58-baf0-31df08bea280",
                                            "functions": {
                                                "isPangram": {
                                                    "id": "Pangram#isPangram"
                                                },
                                                "isPangram2": {
                                                    "id": "Pangram#isPangram2"
                                                },
                                                "main": {
                                                    "id": "Pangram#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/Pangram.java",
                                            "name": "Pangram"
                                        }
                                    },
                                    "PermuteString.java": {
                                        "name": "PermuteString",
                                        "class": {
                                            "id": "3956aa1e-facb-4f5f-b9b0-0732ef669870",
                                            "functions": {
                                                "swapString": {
                                                    "id": "PermuteString#swapString"
                                                },
                                                "main": {
                                                    "id": "PermuteString#main"
                                                },
                                                "generatePermutation": {
                                                    "id": "PermuteString#generatePermutation"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/PermuteString.java",
                                            "name": "PermuteString"
                                        }
                                    },
                                    "ReverseString.java": {
                                        "name": "ReverseString",
                                        "class": {
                                            "id": "ff50a4e4-e587-4747-a91c-48e0b734595c",
                                            "functions": {
                                                "main": {
                                                    "id": "ReverseString#main"
                                                },
                                                "reverse": {
                                                    "id": "ReverseString#reverse"
                                                },
                                                "reverse2": {
                                                    "id": "ReverseString#reverse2"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/ReverseString.java",
                                            "name": "ReverseString"
                                        }
                                    },
                                    "ReverseStringRecursive.java": {
                                        "name": "ReverseStringRecursive",
                                        "class": {
                                            "id": "799052c1-0e42-45d6-bf6f-c60623f2a230",
                                            "functions": {
                                                "reverse": {
                                                    "id": "ReverseStringRecursive#reverse"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/ReverseStringRecursive.java",
                                            "name": "ReverseStringRecursive"
                                        }
                                    },
                                    "Rotation.java": {
                                        "name": "Rotation",
                                        "class": {
                                            "id": "7906ca47-67f9-470f-a3ea-1588492df8b9",
                                            "functions": {
                                                "rotation": {
                                                    "id": "Rotation#rotation"
                                                },
                                                "main": {
                                                    "id": "Rotation#main"
                                                },
                                                "reverse": {
                                                    "id": "Rotation#reverse"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/Rotation.java",
                                            "name": "Rotation"
                                        }
                                    },
                                    "StringCompression.java": {
                                        "name": "StringCompression",
                                        "class": {
                                            "id": "22dcb718-90f0-4b5e-8908-b5acd90364ba",
                                            "functions": {
                                                "appendCount": {
                                                    "id": "StringCompression#appendCount"
                                                },
                                                "compress": {
                                                    "id": "StringCompression#compress"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/StringCompression.java",
                                            "name": "StringCompression"
                                        }
                                    },
                                    "Upper.java": {
                                        "name": "Upper",
                                        "class": {
                                            "id": "ae040ddd-6c93-4480-bd92-92bb355678f7",
                                            "functions": {
                                                "toUpperCase": {
                                                    "id": "Upper#toUpperCase"
                                                },
                                                "main": {
                                                    "id": "Upper#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/Upper.java",
                                            "name": "Upper"
                                        }
                                    },
                                    "ValidParentheses.java": {
                                        "name": "ValidParentheses",
                                        "class": {
                                            "id": "56e09a2a-d40c-48d2-9418-ca35efbd47d6",
                                            "functions": {
                                                "isValid": {
                                                    "id": "ValidParentheses#isValid"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/ValidParentheses.java",
                                            "name": "ValidParentheses"
                                        }
                                    },
                                    "WordLadder.java": {
                                        "name": "WordLadder",
                                        "class": {
                                            "id": "2a39f675-0cc5-4871-a359-dfefdd8d97b5",
                                            "functions": {
                                                "ladderLength": {
                                                    "id": "WordLadder#ladderLength"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/WordLadder.java",
                                            "name": "WordLadder"
                                        }
                                    },
                                    "longestNonRepeativeSubstring.java": {
                                        "name": "longestNonRepeativeSubstring",
                                        "class": {
                                            "id": "754a41e9-228f-4368-8e9a-9f3415f992f5",
                                            "functions": {
                                                "lengthOfLongestSubstring": {
                                                    "id": "longestNonRepeativeSubstring#lengthOfLongestSubstring"
                                                }
                                            },
                                            "fileName": "Java-master/src/main/java/com/thealgorithms/strings/longestNonRepeativeSubstring.java",
                                            "name": "longestNonRepeativeSubstring"
                                        }
                                    },
                                    "zigZagPattern": {
                                        "zigZagPattern.java": {
                                            "name": "zigZagPattern",
                                            "class": {
                                                "id": "e6f17441-2fa4-4565-b3e0-c90ea304666c",
                                                "functions": {
                                                    "encode": {
                                                        "id": "zigZagPattern#encode"
                                                    }
                                                },
                                                "fileName": "Java-master/src/main/java/com/thealgorithms/strings/zigZagPattern/zigZagPattern.java",
                                                "name": "zigZagPattern"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "test": {
                    "java": {
                        "com": {
                            "thealgorithms": {
                                "backtracking": {
                                    "AllPathsFromSourceToTargetTest.java": {
                                        "name": "AllPathsFromSourceToTargetTest",
                                        "class": {
                                            "id": "a8156403-dcfe-4a66-a2eb-7e1ca15963dd",
                                            "functions": {
                                                "testForThirdCase": {
                                                    "id": "AllPathsFromSourceToTargetTest#testForThirdCase"
                                                },
                                                "testForFourthcase": {
                                                    "id": "AllPathsFromSourceToTargetTest#testForFourthcase"
                                                },
                                                "testForFirstCase": {
                                                    "id": "AllPathsFromSourceToTargetTest#testForFirstCase"
                                                },
                                                "testForSecondCase": {
                                                    "id": "AllPathsFromSourceToTargetTest#testForSecondCase"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/backtracking/AllPathsFromSourceToTargetTest.java",
                                            "name": "AllPathsFromSourceToTargetTest"
                                        }
                                    },
                                    "ArrayCombinationTest.java": {
                                        "name": "ArrayCombinationTest",
                                        "class": {
                                            "id": "bc8423fc-07fb-4ffe-bdf5-e644b9a71470",
                                            "functions": {
                                                "testLengthTwo": {
                                                    "id": "ArrayCombinationTest#testLengthTwo"
                                                },
                                                "testLengthFive": {
                                                    "id": "ArrayCombinationTest#testLengthFive"
                                                },
                                                "testNoLengthElement": {
                                                    "id": "ArrayCombinationTest#testNoLengthElement"
                                                },
                                                "testNBeingZeroOrLess": {
                                                    "id": "ArrayCombinationTest#testNBeingZeroOrLess"
                                                },
                                                "testLengthOne": {
                                                    "id": "ArrayCombinationTest#testLengthOne"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/backtracking/ArrayCombinationTest.java",
                                            "name": "ArrayCombinationTest"
                                        }
                                    },
                                    "CombinationTest.java": {
                                        "name": "CombinationTest",
                                        "class": {
                                            "id": "21d8ae22-ddd9-4f28-bf95-030e1c92520c",
                                            "functions": {
                                                "testLengthTwo": {
                                                    "id": "CombinationTest#testLengthTwo"
                                                },
                                                "testNoElement": {
                                                    "id": "CombinationTest#testNoElement"
                                                },
                                                "testLengthOne": {
                                                    "id": "CombinationTest#testLengthOne"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/backtracking/CombinationTest.java",
                                            "name": "CombinationTest"
                                        }
                                    },
                                    "FloodFillTest.java": {
                                        "name": "FloodFillTest",
                                        "class": {
                                            "id": "5bd55f12-3665-450c-b839-235f18989838",
                                            "functions": {
                                                "testForImageThree": {
                                                    "id": "FloodFillTest#testForImageThree"
                                                },
                                                "testForImageTwo": {
                                                    "id": "FloodFillTest#testForImageTwo"
                                                },
                                                "testForSingleElementImage": {
                                                    "id": "FloodFillTest#testForSingleElementImage"
                                                },
                                                "testForEmptyImage": {
                                                    "id": "FloodFillTest#testForEmptyImage"
                                                },
                                                "testForImageOne": {
                                                    "id": "FloodFillTest#testForImageOne"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/backtracking/FloodFillTest.java",
                                            "name": "FloodFillTest"
                                        }
                                    },
                                    "MazeRecursionTest.java": {
                                        "name": "MazeRecursionTest",
                                        "class": {
                                            "id": "5c8069ab-734a-431c-918f-431a4c64a4c0",
                                            "functions": {
                                                "testMaze": {
                                                    "id": "MazeRecursionTest#testMaze"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/backtracking/MazeRecursionTest.java",
                                            "name": "MazeRecursionTest"
                                        }
                                    },
                                    "PermutationTest.java": {
                                        "name": "PermutationTest",
                                        "class": {
                                            "id": "f87f978e-81f8-4c06-a366-41f20fbfb4a7",
                                            "functions": {
                                                "testNoElement": {
                                                    "id": "PermutationTest#testNoElement"
                                                },
                                                "testSingleElement": {
                                                    "id": "PermutationTest#testSingleElement"
                                                },
                                                "testMultipleElements": {
                                                    "id": "PermutationTest#testMultipleElements"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/backtracking/PermutationTest.java",
                                            "name": "PermutationTest"
                                        }
                                    },
                                    "PowerSumTest.java": {
                                        "name": "PowerSumTest",
                                        "class": {
                                            "id": "aff28ca8-add4-439e-9da2-b8568c72df76",
                                            "functions": {
                                                "testNumberHundredAndPowerTwo": {
                                                    "id": "PowerSumTest#testNumberHundredAndPowerTwo"
                                                },
                                                "testNumberHundredAndPowerThree": {
                                                    "id": "PowerSumTest#testNumberHundredAndPowerThree"
                                                },
                                                "testNumberZeroAndPowerZero": {
                                                    "id": "PowerSumTest#testNumberZeroAndPowerZero"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/backtracking/PowerSumTest.java",
                                            "name": "PowerSumTest"
                                        }
                                    }
                                },
                                "ciphers": {
                                    "BlowfishTest.java": {
                                        "name": "BlowfishTest",
                                        "class": {
                                            "id": "819e08f6-75bc-4381-bfff-5eb899758c4a",
                                            "functions": {
                                                "testDecrypt": {
                                                    "id": "BlowfishTest#testDecrypt"
                                                },
                                                "testEncrypt": {
                                                    "id": "BlowfishTest#testEncrypt"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/ciphers/BlowfishTest.java",
                                            "name": "BlowfishTest"
                                        }
                                    },
                                    "CaesarTest.java": {
                                        "name": "CaesarTest",
                                        "class": {
                                            "id": "c4a17249-f201-4e6f-81c0-5be9617698e4",
                                            "functions": {
                                                "caesarDecryptTest": {
                                                    "id": "CaesarTest#caesarDecryptTest"
                                                },
                                                "caesarEncryptTest": {
                                                    "id": "CaesarTest#caesarEncryptTest"
                                                },
                                                "caesarBruteForce": {
                                                    "id": "CaesarTest#caesarBruteForce"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/ciphers/CaesarTest.java",
                                            "name": "CaesarTest"
                                        }
                                    },
                                    "PolybiusTest.java": {
                                        "name": "PolybiusTest",
                                        "class": {
                                            "id": "b02a2bcb-d277-499d-adf2-87fb6d7caf57",
                                            "functions": {
                                                "testDecrypt": {
                                                    "id": "PolybiusTest#testDecrypt"
                                                },
                                                "testIsTextTheSameAfterEncryptionAndDecryption": {
                                                    "id": "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption"
                                                },
                                                "testEncrypt": {
                                                    "id": "PolybiusTest#testEncrypt"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/ciphers/PolybiusTest.java",
                                            "name": "PolybiusTest"
                                        }
                                    },
                                    "RSATest.java": {
                                        "name": "RSATest",
                                        "class": {
                                            "id": "f933e276-4be6-4b07-be14-4e387f92b2fc",
                                            "functions": {
                                                "testRSA": {
                                                    "id": "RSATest#testRSA"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/ciphers/RSATest.java",
                                            "name": "RSATest"
                                        }
                                    },
                                    "SimpleSubCipherTest.java": {
                                        "name": "SimpleSubCipherTest",
                                        "class": {
                                            "id": "a76115e3-88a5-49e1-9629-a62946799931",
                                            "functions": {
                                                "simpleSubCipherDecryptTest": {
                                                    "id": "SimpleSubCipherTest#simpleSubCipherDecryptTest"
                                                },
                                                "simpleSubCipherEncryptTest": {
                                                    "id": "SimpleSubCipherTest#simpleSubCipherEncryptTest"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/ciphers/SimpleSubCipherTest.java",
                                            "name": "SimpleSubCipherTest"
                                        }
                                    },
                                    "SimpleSubstitutionCipherTest.java": {
                                        "name": "SimpleSubstitutionCipherTest",
                                        "class": {
                                            "id": "53d66e8c-fec8-467d-a88b-f49a1fb4c1b3",
                                            "functions": {
                                                "testEncode": {
                                                    "id": "SimpleSubstitutionCipherTest#testEncode"
                                                },
                                                "testDecode": {
                                                    "id": "SimpleSubstitutionCipherTest#testDecode"
                                                },
                                                "testIsTextTheSameAfterEncodeAndDecode": {
                                                    "id": "SimpleSubstitutionCipherTest#testIsTextTheSameAfterEncodeAndDecode"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/ciphers/SimpleSubstitutionCipherTest.java",
                                            "name": "SimpleSubstitutionCipherTest"
                                        }
                                    },
                                    "VigenereTest.java": {
                                        "name": "VigenereTest",
                                        "class": {
                                            "id": "18306fb1-c79e-4858-ae93-e3864395fa41",
                                            "functions": {
                                                "vigenereDecryptTest": {
                                                    "id": "VigenereTest#vigenereDecryptTest"
                                                },
                                                "vigenereEncryptTest": {
                                                    "id": "VigenereTest#vigenereEncryptTest"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/ciphers/VigenereTest.java",
                                            "name": "VigenereTest"
                                        }
                                    },
                                    "a5": {
                                        "LFSRTest.java": {
                                            "name": "LFSRTest",
                                            "class": {
                                                "id": "f433c2f4-1d8f-436c-a3cb-1aeda8a1b23c",
                                                "functions": {
                                                    "initialize": {
                                                        "id": "LFSRTest#initialize"
                                                    },
                                                    "clock": {
                                                        "id": "LFSRTest#clock"
                                                    },
                                                    "getClockBit": {
                                                        "id": "LFSRTest#getClockBit"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/ciphers/a5/LFSRTest.java",
                                                "name": "LFSRTest"
                                            }
                                        }
                                    }
                                },
                                "conversions": {
                                    "BinaryToDecimalTest.java": {
                                        "name": "BinaryToDecimalTest",
                                        "class": {
                                            "id": "5224cf60-e106-4778-b0c6-05411e9f13f9",
                                            "functions": {
                                                "testBinaryToDecimal": {
                                                    "id": "BinaryToDecimalTest#testBinaryToDecimal"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/conversions/BinaryToDecimalTest.java",
                                            "name": "BinaryToDecimalTest"
                                        }
                                    },
                                    "BinaryToHexadecimalTest.java": {
                                        "name": "BinaryToHexadecimalTest",
                                        "class": {
                                            "id": "a6703796-3a6d-475a-8a58-785b3acfd588",
                                            "functions": {
                                                "testBinaryToHexadecimal": {
                                                    "id": "BinaryToHexadecimalTest#testBinaryToHexadecimal"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/conversions/BinaryToHexadecimalTest.java",
                                            "name": "BinaryToHexadecimalTest"
                                        }
                                    },
                                    "BinaryToOctalTest.java": {
                                        "name": "BinaryToOctalTest",
                                        "class": {
                                            "id": "e31144ea-7036-4d06-a41f-c0a1811ff3d5",
                                            "functions": {
                                                "testBinaryToOctal": {
                                                    "id": "BinaryToOctalTest#testBinaryToOctal"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/conversions/BinaryToOctalTest.java",
                                            "name": "BinaryToOctalTest"
                                        }
                                    },
                                    "DecimalToHexaDecimalTest.java": {
                                        "name": "DecimalToHexaDecimalTest",
                                        "class": {
                                            "id": "6c01e1da-8af7-4fa3-a21c-b8cf17ee1482",
                                            "functions": {
                                                "testDecimalToHexaDecimal": {
                                                    "id": "DecimalToHexaDecimalTest#testDecimalToHexaDecimal"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/conversions/DecimalToHexaDecimalTest.java",
                                            "name": "DecimalToHexaDecimalTest"
                                        }
                                    },
                                    "HexToOctTest.java": {
                                        "name": "HexToOctTest",
                                        "class": {
                                            "id": "ac57ffa0-9bea-47ac-9cd1-683b809bf651",
                                            "functions": {
                                                "testHexToOct": {
                                                    "id": "HexToOctTest#testHexToOct"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/conversions/HexToOctTest.java",
                                            "name": "HexToOctTest"
                                        }
                                    },
                                    "HexaDecimalToBinaryTest.java": {
                                        "name": "HexaDecimalToBinaryTest",
                                        "class": {
                                            "id": "39456090-17e0-41e7-8ee5-3a9b82010229",
                                            "functions": {
                                                "testHexaDecimalToBinary": {
                                                    "id": "HexaDecimalToBinaryTest#testHexaDecimalToBinary"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/conversions/HexaDecimalToBinaryTest.java",
                                            "name": "HexaDecimalToBinaryTest"
                                        }
                                    },
                                    "HexaDecimalToDecimalTest.java": {
                                        "name": "HexaDecimalToDecimalTest",
                                        "class": {
                                            "id": "3a124737-79ec-410c-90ae-2c8d875e7bcd",
                                            "functions": {
                                                "testhexaDecimalToDecimal": {
                                                    "id": "HexaDecimalToDecimalTest#testhexaDecimalToDecimal"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/conversions/HexaDecimalToDecimalTest.java",
                                            "name": "HexaDecimalToDecimalTest"
                                        }
                                    },
                                    "IntegerToRomanTest.java": {
                                        "name": "IntegerToRomanTest",
                                        "class": {
                                            "id": "0591c1a3-90ab-4f33-9531-89eb2fafcd7c",
                                            "functions": {
                                                "testIntegerToRoman": {
                                                    "id": "IntegerToRomanTest#testIntegerToRoman"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/conversions/IntegerToRomanTest.java",
                                            "name": "IntegerToRomanTest"
                                        }
                                    },
                                    "OctalToDecimalTest.java": {
                                        "name": "OctalToDecimalTest",
                                        "class": {
                                            "id": "cf5e3326-792a-4fc3-99b4-d49fb391e930",
                                            "functions": {
                                                "testOctalToDecimal": {
                                                    "id": "OctalToDecimalTest#testOctalToDecimal"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/conversions/OctalToDecimalTest.java",
                                            "name": "OctalToDecimalTest"
                                        }
                                    },
                                    "OctalToHexadecimalTest.java": {
                                        "name": "OctalToHexadecimalTest",
                                        "class": {
                                            "id": "9a5f8186-7140-4459-ae5e-a15dea11a226",
                                            "functions": {
                                                "testOctalToHexadecimal": {
                                                    "id": "OctalToHexadecimalTest#testOctalToHexadecimal"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/conversions/OctalToHexadecimalTest.java",
                                            "name": "OctalToHexadecimalTest"
                                        }
                                    },
                                    "RomanToIntegerTest.java": {
                                        "name": "RomanToIntegerTest",
                                        "class": {
                                            "id": "478b20de-15bb-41ec-8b47-6eb61565cbed",
                                            "functions": {
                                                "testRomanToInteger": {
                                                    "id": "RomanToIntegerTest#testRomanToInteger"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/conversions/RomanToIntegerTest.java",
                                            "name": "RomanToIntegerTest"
                                        }
                                    }
                                },
                                "datastructures": {
                                    "bloomfilter": {
                                        "BloomFilterTest.java": {
                                            "name": "BloomFilterTest",
                                            "class": {
                                                "id": "dcb829a1-23cd-4572-b3df-f6561b02e897",
                                                "functions": {
                                                    "test2": {
                                                        "id": "BloomFilterTest#test2"
                                                    },
                                                    "test1": {
                                                        "id": "BloomFilterTest#test1"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/bloomfilter/BloomFilterTest.java",
                                                "name": "BloomFilterTest"
                                            }
                                        }
                                    },
                                    "buffers": {
                                        "CircularBufferTest.java": {
                                            "name": "CircularBufferTest",
                                            "class": {
                                                "id": "e3bcf2b4-5da2-4adc-b8e0-b6ca36bcf809",
                                                "functions": {
                                                    "generateInt": {
                                                        "id": "CircularBufferTest#generateInt"
                                                    },
                                                    "concurrentTest": {
                                                        "id": "CircularBufferTest#concurrentTest"
                                                    },
                                                    "get": {
                                                        "id": "CircularBufferTest#get"
                                                    },
                                                    "isEmpty": {
                                                        "id": "CircularBufferTest#isEmpty"
                                                    },
                                                    "getSortedListFrom": {
                                                        "id": "CircularBufferTest#getSortedListFrom"
                                                    },
                                                    "setUp": {
                                                        "id": "CircularBufferTest#setUp"
                                                    },
                                                    "isFull": {
                                                        "id": "CircularBufferTest#isFull"
                                                    },
                                                    "put": {
                                                        "id": "CircularBufferTest#put"
                                                    },
                                                    "shutDownExecutorSafely": {
                                                        "id": "CircularBufferTest#shutDownExecutorSafely"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/buffers/CircularBufferTest.java",
                                                "name": "CircularBufferTest"
                                            }
                                        }
                                    },
                                    "caches": {
                                        "LFUCacheTest.java": {
                                            "name": "LFUCacheTest",
                                            "class": {
                                                "id": "93c4b8da-08ae-4710-8691-97ffa6c49395",
                                                "functions": {
                                                    "testLFUCacheWithStringValueShouldPass": {
                                                        "id": "LFUCacheTest#testLFUCacheWithStringValueShouldPass"
                                                    },
                                                    "testLFUCacheWithIntegerValueShouldPass": {
                                                        "id": "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass"
                                                    },
                                                    "testAddNodeWithUpdatedFrequency": {
                                                        "id": "LFUCacheTest#testAddNodeWithUpdatedFrequency"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/caches/LFUCacheTest.java",
                                                "name": "LFUCacheTest"
                                            }
                                        },
                                        "LRUCacheTest.java": {
                                            "name": "LRUCacheTest",
                                            "class": {
                                                "id": "c101ae2d-0bed-4e10-b021-3c3890860520",
                                                "functions": {
                                                    "putAndGetStringValues": {
                                                        "id": "LRUCacheTest#putAndGetStringValues"
                                                    },
                                                    "nullKeysAndValues": {
                                                        "id": "LRUCacheTest#nullKeysAndValues"
                                                    },
                                                    "overCapacity": {
                                                        "id": "LRUCacheTest#overCapacity"
                                                    },
                                                    "putAndGetIntegerValues": {
                                                        "id": "LRUCacheTest#putAndGetIntegerValues"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/caches/LRUCacheTest.java",
                                                "name": "LRUCacheTest"
                                            }
                                        },
                                        "MRUCacheTest.java": {
                                            "name": "MRUCacheTest",
                                            "class": {
                                                "id": "6a43d0c4-59e8-4f1d-8c6b-5c276a96c905",
                                                "functions": {
                                                    "putAndGetStringValues": {
                                                        "id": "MRUCacheTest#putAndGetStringValues"
                                                    },
                                                    "nullKeysAndValues": {
                                                        "id": "MRUCacheTest#nullKeysAndValues"
                                                    },
                                                    "overCapacity": {
                                                        "id": "MRUCacheTest#overCapacity"
                                                    },
                                                    "putAndGetIntegerValues": {
                                                        "id": "MRUCacheTest#putAndGetIntegerValues"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/caches/MRUCacheTest.java",
                                                "name": "MRUCacheTest"
                                            }
                                        }
                                    },
                                    "graphs": {
                                        "HamiltonianCycleTest.java": {
                                            "name": "HamiltonianCycleTest",
                                            "class": {
                                                "id": "2a4c46d7-2626-464d-96f5-01e206f018ee",
                                                "functions": {
                                                    "testFindHamiltonianCycleShouldReturnHamiltonianCycle": {
                                                        "id": "HamiltonianCycleTest#testFindHamiltonianCycleShouldReturnHamiltonianCycle"
                                                    },
                                                    "testFindHamiltonianCycleShouldReturnInfinityArray": {
                                                        "id": "HamiltonianCycleTest#testFindHamiltonianCycleShouldReturnInfinityArray"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/graphs/HamiltonianCycleTest.java",
                                                "name": "HamiltonianCycleTest"
                                            }
                                        },
                                        "KosarajuTest.java": {
                                            "name": "KosarajuTest",
                                            "class": {
                                                "id": "486ee4eb-beec-4497-8e0b-e4932f77e7d2",
                                                "functions": {
                                                    "findStronglyConnectedComps": {
                                                        "id": "KosarajuTest#findStronglyConnectedComps"
                                                    },
                                                    "findStronglyConnectedCompsShouldGetSingleNodes": {
                                                        "id": "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/graphs/KosarajuTest.java",
                                                "name": "KosarajuTest"
                                            }
                                        },
                                        "TarjansAlgorithmTest.java": {
                                            "name": "TarjansAlgorithmTest",
                                            "class": {
                                                "id": "e6f61152-6dc2-48aa-bb96-ced33b518ca3",
                                                "functions": {
                                                    "findStronglyConnectedComps": {
                                                        "id": "TarjansAlgorithmTest#findStronglyConnectedComps"
                                                    },
                                                    "findStronglyConnectedCompsShouldGetSingleNodes": {
                                                        "id": "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/graphs/TarjansAlgorithmTest.java",
                                                "name": "TarjansAlgorithmTest"
                                            }
                                        }
                                    },
                                    "hashmap": {
                                        "HashMapCuckooHashingTest.java": {
                                            "name": "HashMapCuckooHashingTest",
                                            "class": {
                                                "id": "75b4e1fb-a56d-433c-9dfe-2d8f01352823",
                                                "functions": {
                                                    "avoidInfiniteLoops": {
                                                        "id": "HashMapCuckooHashingTest#avoidInfiniteLoops"
                                                    },
                                                    "createHashMapCuckooHashing": {
                                                        "id": "HashMapCuckooHashingTest#createHashMapCuckooHashing"
                                                    },
                                                    "insertKey": {
                                                        "id": "HashMapCuckooHashingTest#insertKey"
                                                    },
                                                    "removeKey": {
                                                        "id": "HashMapCuckooHashingTest#removeKey"
                                                    },
                                                    "removeNone": {
                                                        "id": "HashMapCuckooHashingTest#removeNone"
                                                    },
                                                    "getKeyIndex": {
                                                        "id": "HashMapCuckooHashingTest#getKeyIndex"
                                                    },
                                                    "containsKey": {
                                                        "id": "HashMapCuckooHashingTest#containsKey"
                                                    },
                                                    "hashFunctionsAreDifferent": {
                                                        "id": "HashMapCuckooHashingTest#hashFunctionsAreDifferent"
                                                    },
                                                    "reHashTableIncreasesTableSize": {
                                                        "id": "HashMapCuckooHashingTest#reHashTableIncreasesTableSize"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/hashmap/HashMapCuckooHashingTest.java",
                                                "name": "HashMapCuckooHashingTest"
                                            }
                                        },
                                        "hashing": {
                                            "GenericHashMapUsingArrayListTest.java": {
                                                "name": "GenericHashMapUsingArrayListTest",
                                                "class": {
                                                    "id": "c8570557-ea94-4db3-88bd-f3b25143c093",
                                                    "functions": {
                                                        "testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger": {
                                                            "id": "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger"
                                                        },
                                                        "testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings": {
                                                            "id": "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings"
                                                        },
                                                        "testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString": {
                                                            "id": "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString"
                                                        }
                                                    },
                                                    "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/hashmap/hashing/GenericHashMapUsingArrayListTest.java",
                                                    "name": "GenericHashMapUsingArrayListTest"
                                                }
                                            },
                                            "GenericHashMapUsingArrayTest.java": {
                                                "name": "GenericHashMapUsingArrayTest",
                                                "class": {
                                                    "id": "8548f917-8f98-4cc1-96d2-acaf9cbc779c",
                                                    "functions": {
                                                        "testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger": {
                                                            "id": "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger"
                                                        },
                                                        "testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings": {
                                                            "id": "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings"
                                                        },
                                                        "testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString": {
                                                            "id": "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString"
                                                        }
                                                    },
                                                    "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/hashmap/hashing/GenericHashMapUsingArrayTest.java",
                                                    "name": "GenericHashMapUsingArrayTest"
                                                }
                                            },
                                            "LinearProbingHashMapTest.java": {
                                                "name": "LinearProbingHashMapTest",
                                                "class": {
                                                    "id": "7a36657b-1da5-4325-8533-aa8aff07d0d2",
                                                    "functions": {
                                                        "getMap": {
                                                            "id": "LinearProbingHashMapTest#getMap"
                                                        }
                                                    },
                                                    "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/hashmap/hashing/LinearProbingHashMapTest.java",
                                                    "name": "LinearProbingHashMapTest"
                                                }
                                            },
                                            "MapTest.java": {
                                                "name": "MapTest",
                                                "class": {
                                                    "id": "45de3aac-e8a9-4d45-9aab-e3e8b5bd1ae4",
                                                    "functions": {
                                                        "deleteTest": {
                                                            "id": "MapTest#deleteTest"
                                                        },
                                                        "hashTest": {
                                                            "id": "MapTest#hashTest"
                                                        },
                                                        "sizeTest": {
                                                            "id": "MapTest#sizeTest"
                                                        },
                                                        "putTest": {
                                                            "id": "MapTest#putTest"
                                                        },
                                                        "getTest": {
                                                            "id": "MapTest#getTest"
                                                        },
                                                        "getMap": {
                                                            "id": "MapTest#getMap"
                                                        },
                                                        "containsTest": {
                                                            "id": "MapTest#containsTest"
                                                        },
                                                        "keysTest": {
                                                            "id": "MapTest#keysTest"
                                                        }
                                                    },
                                                    "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/hashmap/hashing/MapTest.java",
                                                    "name": "MapTest"
                                                }
                                            }
                                        }
                                    },
                                    "heaps": {
                                        "FibonacciHeapTest.java": {
                                            "name": "FibonacciHeapTest",
                                            "class": {
                                                "id": "d871a7ca-6306-44e0-a8da-5fe19126891a",
                                                "functions": {
                                                    "testHeap": {
                                                        "id": "FibonacciHeapTest#testHeap"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/heaps/FibonacciHeapTest.java",
                                                "name": "FibonacciHeapTest"
                                            }
                                        },
                                        "LeftistHeapTest.java": {
                                            "name": "LeftistHeapTest",
                                            "class": {
                                                "id": "6c616fa1-3ca3-49e0-8df7-a1a02491b8a1",
                                                "functions": {
                                                    "testLeftistHeap": {
                                                        "id": "LeftistHeapTest#testLeftistHeap"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/heaps/LeftistHeapTest.java",
                                                "name": "LeftistHeapTest"
                                            }
                                        }
                                    },
                                    "lists": {
                                        "SinglyLinkedListTest.java": {
                                            "name": "SinglyLinkedListTest",
                                            "class": {
                                                "id": "ca8e72af-4476-4faf-8bcf-056512199aea",
                                                "functions": {
                                                    "createSampleList": {
                                                        "id": "SinglyLinkedListTest#createSampleList"
                                                    },
                                                    "search": {
                                                        "id": "SinglyLinkedListTest#search"
                                                    },
                                                    "detectLoop": {
                                                        "id": "SinglyLinkedListTest#detectLoop"
                                                    },
                                                    "middle": {
                                                        "id": "SinglyLinkedListTest#middle"
                                                    },
                                                    "swap": {
                                                        "id": "SinglyLinkedListTest#swap"
                                                    },
                                                    "clear": {
                                                        "id": "SinglyLinkedListTest#clear"
                                                    },
                                                    "deleteNth": {
                                                        "id": "SinglyLinkedListTest#deleteNth"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/lists/SinglyLinkedListTest.java",
                                                "name": "SinglyLinkedListTest"
                                            }
                                        },
                                        "SkipListTest.java": {
                                            "name": "SkipListTest",
                                            "class": {
                                                "id": "1e048e06-bec9-490c-b168-9479ed54f4b1",
                                                "functions": {
                                                    "add": {
                                                        "id": "SkipListTest#add"
                                                    },
                                                    "contains": {
                                                        "id": "SkipListTest#contains"
                                                    },
                                                    "print": {
                                                        "id": "SkipListTest#print"
                                                    },
                                                    "createSkipList": {
                                                        "id": "SkipListTest#createSkipList"
                                                    },
                                                    "get": {
                                                        "id": "SkipListTest#get"
                                                    },
                                                    "removeFromTail": {
                                                        "id": "SkipListTest#removeFromTail"
                                                    },
                                                    "checkSortedOnLowestLayer": {
                                                        "id": "SkipListTest#checkSortedOnLowestLayer"
                                                    },
                                                    "removeFromHead": {
                                                        "id": "SkipListTest#removeFromHead"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/lists/SkipListTest.java",
                                                "name": "SkipListTest"
                                            }
                                        }
                                    },
                                    "queues": {
                                        "LinkedQueueTest.java": {
                                            "name": "LinkedQueueTest",
                                            "class": {
                                                "id": "78ca7ea3-b355-4d08-b0ab-7c5abe4d49bb",
                                                "functions": {
                                                    "testQue": {
                                                        "id": "LinkedQueueTest#testQue"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/queues/LinkedQueueTest.java",
                                                "name": "LinkedQueueTest"
                                            }
                                        },
                                        "PriorityQueuesTest.java": {
                                            "name": "PriorityQueuesTest",
                                            "class": {
                                                "id": "b9c60c82-e582-4a2b-a5e7-801c1de7d830",
                                                "functions": {
                                                    "testPQInsertion": {
                                                        "id": "PriorityQueuesTest#testPQInsertion"
                                                    },
                                                    "testPQExtra": {
                                                        "id": "PriorityQueuesTest#testPQExtra"
                                                    },
                                                    "testPQDeletion": {
                                                        "id": "PriorityQueuesTest#testPQDeletion"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/queues/PriorityQueuesTest.java",
                                                "name": "PriorityQueuesTest"
                                            }
                                        }
                                    },
                                    "trees": {
                                        "BinaryTreeTest.java": {
                                            "name": "BinaryTreeTest",
                                            "class": {
                                                "id": "2eee8625-6286-4d2a-a7d1-950e5de935db",
                                                "functions": {
                                                    "test4": {
                                                        "id": "BinaryTreeTest#test4"
                                                    },
                                                    "test2": {
                                                        "id": "BinaryTreeTest#test2"
                                                    },
                                                    "test3": {
                                                        "id": "BinaryTreeTest#test3"
                                                    },
                                                    "test1": {
                                                        "id": "BinaryTreeTest#test1"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/BinaryTreeTest.java",
                                                "name": "BinaryTreeTest"
                                            }
                                        },
                                        "CeilInBinarySearchTreeTest.java": {
                                            "name": "CeilInBinarySearchTreeTest",
                                            "class": {
                                                "id": "a013e411-ea37-4ec7-b332-a7a967722d16",
                                                "functions": {
                                                    "testKeyAbsentLeftMostNodeIsCeil": {
                                                        "id": "CeilInBinarySearchTreeTest#testKeyAbsentLeftMostNodeIsCeil"
                                                    },
                                                    "testRootNull": {
                                                        "id": "CeilInBinarySearchTreeTest#testRootNull"
                                                    },
                                                    "testKeyAbsentCeilIsNull": {
                                                        "id": "CeilInBinarySearchTreeTest#testKeyAbsentCeilIsNull"
                                                    },
                                                    "testKeyAbsentRootIsCeil": {
                                                        "id": "CeilInBinarySearchTreeTest#testKeyAbsentRootIsCeil"
                                                    },
                                                    "testKeyPresentRootIsCeil": {
                                                        "id": "CeilInBinarySearchTreeTest#testKeyPresentRootIsCeil"
                                                    },
                                                    "testKeyPresentLeafIsCeil": {
                                                        "id": "CeilInBinarySearchTreeTest#testKeyPresentLeafIsCeil"
                                                    },
                                                    "testKeyAbsentLeafIsCeil": {
                                                        "id": "CeilInBinarySearchTreeTest#testKeyAbsentLeafIsCeil"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/CeilInBinarySearchTreeTest.java",
                                                "name": "CeilInBinarySearchTreeTest"
                                            }
                                        },
                                        "CheckTreeIsSymmetricTest.java": {
                                            "name": "CheckTreeIsSymmetricTest",
                                            "class": {
                                                "id": "150fdc78-0c65-438d-bdbc-c8bad4712a4b",
                                                "functions": {
                                                    "testSymmetricTree": {
                                                        "id": "CheckTreeIsSymmetricTest#testSymmetricTree"
                                                    },
                                                    "testRootNull": {
                                                        "id": "CheckTreeIsSymmetricTest#testRootNull"
                                                    },
                                                    "testNonSymmetricTree": {
                                                        "id": "CheckTreeIsSymmetricTest#testNonSymmetricTree"
                                                    },
                                                    "testSingleNodeTree": {
                                                        "id": "CheckTreeIsSymmetricTest#testSingleNodeTree"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/CheckTreeIsSymmetricTest.java",
                                                "name": "CheckTreeIsSymmetricTest"
                                            }
                                        },
                                        "InorderTraversalTest.java": {
                                            "name": "InorderTraversalTest",
                                            "class": {
                                                "id": "6ba2ac46-6a4f-432f-b5a9-f6f7d1a25806",
                                                "functions": {
                                                    "testRecursiveInorderNonBalanced": {
                                                        "id": "InorderTraversalTest#testRecursiveInorderNonBalanced"
                                                    },
                                                    "testNullRoot": {
                                                        "id": "InorderTraversalTest#testNullRoot"
                                                    },
                                                    "testRecursiveInorder": {
                                                        "id": "InorderTraversalTest#testRecursiveInorder"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/InorderTraversalTest.java",
                                                "name": "InorderTraversalTest"
                                            }
                                        },
                                        "KDTreeTest.java": {
                                            "name": "KDTreeTest",
                                            "class": {
                                                "id": "01763ab8-0770-4eff-a7b9-26ab9f36be01",
                                                "functions": {
                                                    "findNearest": {
                                                        "id": "KDTreeTest#findNearest"
                                                    },
                                                    "pointOf": {
                                                        "id": "KDTreeTest#pointOf"
                                                    },
                                                    "findMin": {
                                                        "id": "KDTreeTest#findMin"
                                                    },
                                                    "delete": {
                                                        "id": "KDTreeTest#delete"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/KDTreeTest.java",
                                                "name": "KDTreeTest"
                                            }
                                        },
                                        "LazySegmentTreeTest.java": {
                                            "name": "LazySegmentTreeTest",
                                            "class": {
                                                "id": "d0d92c64-fbae-4b65-81c6-32a4a5e2d668",
                                                "functions": {
                                                    "build": {
                                                        "id": "LazySegmentTreeTest#build"
                                                    },
                                                    "get": {
                                                        "id": "LazySegmentTreeTest#get"
                                                    },
                                                    "update": {
                                                        "id": "LazySegmentTreeTest#update"
                                                    },
                                                    "updateAndGet": {
                                                        "id": "LazySegmentTreeTest#updateAndGet"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/LazySegmentTreeTest.java",
                                                "name": "LazySegmentTreeTest"
                                            }
                                        },
                                        "LevelOrderTraversalTest.java": {
                                            "name": "LevelOrderTraversalTest",
                                            "class": {
                                                "id": "8c2a2664-c6b4-404a-a73c-5ef158d51616",
                                                "functions": {
                                                    "testLevelOrderTraversalDifferentHeight": {
                                                        "id": "LevelOrderTraversalTest#testLevelOrderTraversalDifferentHeight"
                                                    },
                                                    "testRootNull": {
                                                        "id": "LevelOrderTraversalTest#testRootNull"
                                                    },
                                                    "testLevelOrderTraversalCompleteTree": {
                                                        "id": "LevelOrderTraversalTest#testLevelOrderTraversalCompleteTree"
                                                    },
                                                    "testSingleNodeTree": {
                                                        "id": "LevelOrderTraversalTest#testSingleNodeTree"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/LevelOrderTraversalTest.java",
                                                "name": "LevelOrderTraversalTest"
                                            }
                                        },
                                        "PostOrderTraversalTest.java": {
                                            "name": "PostOrderTraversalTest",
                                            "class": {
                                                "id": "e983b6ad-c264-4ff9-857f-c660f85bcd49",
                                                "functions": {
                                                    "testPostOrder": {
                                                        "id": "PostOrderTraversalTest#testPostOrder"
                                                    },
                                                    "testNullRoot": {
                                                        "id": "PostOrderTraversalTest#testNullRoot"
                                                    },
                                                    "testPostOrderNonBalanced": {
                                                        "id": "PostOrderTraversalTest#testPostOrderNonBalanced"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/PostOrderTraversalTest.java",
                                                "name": "PostOrderTraversalTest"
                                            }
                                        },
                                        "PreOrderTraversalTest.java": {
                                            "name": "PreOrderTraversalTest",
                                            "class": {
                                                "id": "6173f40e-0c5a-4a74-9aaa-02ea93b7d7b9",
                                                "functions": {
                                                    "testRecursivePreOrder": {
                                                        "id": "PreOrderTraversalTest#testRecursivePreOrder"
                                                    },
                                                    "testNullRoot": {
                                                        "id": "PreOrderTraversalTest#testNullRoot"
                                                    },
                                                    "testRecursivePreOrderNonBalanced": {
                                                        "id": "PreOrderTraversalTest#testRecursivePreOrderNonBalanced"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/PreOrderTraversalTest.java",
                                                "name": "PreOrderTraversalTest"
                                            }
                                        },
                                        "SameTreesCheckTest.java": {
                                            "name": "SameTreesCheckTest",
                                            "class": {
                                                "id": "d30fe6b2-5f6c-429a-a419-ea3406643041",
                                                "functions": {
                                                    "testOneRootIsNull": {
                                                        "id": "SameTreesCheckTest#testOneRootIsNull"
                                                    },
                                                    "testSingleNodeTreesAreSame": {
                                                        "id": "SameTreesCheckTest#testSingleNodeTreesAreSame"
                                                    },
                                                    "testTreesWithDifferentStructure": {
                                                        "id": "SameTreesCheckTest#testTreesWithDifferentStructure"
                                                    },
                                                    "testBothRootsAreNull": {
                                                        "id": "SameTreesCheckTest#testBothRootsAreNull"
                                                    },
                                                    "testSameTreesFails": {
                                                        "id": "SameTreesCheckTest#testSameTreesFails"
                                                    },
                                                    "testSameTreesIsSuccessful": {
                                                        "id": "SameTreesCheckTest#testSameTreesIsSuccessful"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/SameTreesCheckTest.java",
                                                "name": "SameTreesCheckTest"
                                            }
                                        },
                                        "TreeTestUtils.java": {
                                            "name": "TreeTestUtils",
                                            "class": {
                                                "id": "ead48380-d1a4-4b12-9106-26443d4ea354",
                                                "functions": {
                                                    "createTree": {
                                                        "id": "TreeTestUtils#createTree"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/TreeTestUtils.java",
                                                "name": "TreeTestUtils"
                                            }
                                        },
                                        "ValidBSTOrNotTest.java": {
                                            "name": "ValidBSTOrNotTest",
                                            "class": {
                                                "id": "3603f002-a3ae-4edb-bc07-2bb07749bfc6",
                                                "functions": {
                                                    "testOneNode": {
                                                        "id": "ValidBSTOrNotTest#testOneNode"
                                                    },
                                                    "testBinaryTreeWithDuplicatedNodesIsNotBST": {
                                                        "id": "ValidBSTOrNotTest#testBinaryTreeWithDuplicatedNodesIsNotBST"
                                                    },
                                                    "testRootNull": {
                                                        "id": "ValidBSTOrNotTest#testRootNull"
                                                    },
                                                    "testBinaryTreeIsNotBST": {
                                                        "id": "ValidBSTOrNotTest#testBinaryTreeIsNotBST"
                                                    },
                                                    "testBinaryTreeIsBST": {
                                                        "id": "ValidBSTOrNotTest#testBinaryTreeIsBST"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/ValidBSTOrNotTest.java",
                                                "name": "ValidBSTOrNotTest"
                                            }
                                        },
                                        "VerticalOrderTraversalTest.java": {
                                            "name": "VerticalOrderTraversalTest",
                                            "class": {
                                                "id": "dba869fe-1c63-4bfe-957d-f6d66c21a0c5",
                                                "functions": {
                                                    "testRootNull": {
                                                        "id": "VerticalOrderTraversalTest#testRootNull"
                                                    },
                                                    "testVerticalTraversalDifferentHeight": {
                                                        "id": "VerticalOrderTraversalTest#testVerticalTraversalDifferentHeight"
                                                    },
                                                    "testSingleNodeTree": {
                                                        "id": "VerticalOrderTraversalTest#testSingleNodeTree"
                                                    },
                                                    "testVerticalTraversalCompleteTree": {
                                                        "id": "VerticalOrderTraversalTest#testVerticalTraversalCompleteTree"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/VerticalOrderTraversalTest.java",
                                                "name": "VerticalOrderTraversalTest"
                                            }
                                        },
                                        "ZigzagTraversalTest.java": {
                                            "name": "ZigzagTraversalTest",
                                            "class": {
                                                "id": "fd2b83f9-ca5b-4758-97d9-136cb78dc001",
                                                "functions": {
                                                    "testRootNull": {
                                                        "id": "ZigzagTraversalTest#testRootNull"
                                                    },
                                                    "testZigzagTraversalCompleteTree": {
                                                        "id": "ZigzagTraversalTest#testZigzagTraversalCompleteTree"
                                                    },
                                                    "testSingleNodeTree": {
                                                        "id": "ZigzagTraversalTest#testSingleNodeTree"
                                                    },
                                                    "testZigzagTraversalDifferentHeight": {
                                                        "id": "ZigzagTraversalTest#testZigzagTraversalDifferentHeight"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/datastructures/trees/ZigzagTraversalTest.java",
                                                "name": "ZigzagTraversalTest"
                                            }
                                        }
                                    }
                                },
                                "divideandconquer": {
                                    "BinaryExponentiationTest.java": {
                                        "name": "BinaryExponentiationTest",
                                        "class": {
                                            "id": "e2975888-04d9-42a2-b2de-e1bbd5eef8eb",
                                            "functions": {
                                                "testPower": {
                                                    "id": "BinaryExponentiationTest#testPower"
                                                },
                                                "testCalculatePower": {
                                                    "id": "BinaryExponentiationTest#testCalculatePower"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/divideandconquer/BinaryExponentiationTest.java",
                                            "name": "BinaryExponentiationTest"
                                        }
                                    },
                                    "StrassenMatrixMultiplicationTest.java": {
                                        "name": "StrassenMatrixMultiplicationTest",
                                        "class": {
                                            "id": "32c8aa9c-01c9-4d13-9ef9-db967b245ee4",
                                            "functions": {
                                                "StrassenMatrixMultiplicationTestNegetiveNumber4x4": {
                                                    "id": "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTestNegetiveNumber4x4"
                                                },
                                                "StrassenMatrixMultiplicationTest4x4": {
                                                    "id": "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest4x4"
                                                },
                                                "StrassenMatrixMultiplicationTest2x2": {
                                                    "id": "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest2x2"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/divideandconquer/StrassenMatrixMultiplicationTest.java",
                                            "name": "StrassenMatrixMultiplicationTest"
                                        }
                                    }
                                },
                                "dynamicprogramming": {
                                    "CatalanNumberTest.java": {
                                        "name": "CatalanNumberTest",
                                        "class": {
                                            "id": "edbdbb97-4a16-446a-b0e6-c8ab53e316d8",
                                            "functions": {
                                                "testCatalanNumber": {
                                                    "id": "CatalanNumberTest#testCatalanNumber"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/dynamicprogramming/CatalanNumberTest.java",
                                            "name": "CatalanNumberTest"
                                        }
                                    },
                                    "EggDroppingTest.java": {
                                        "name": "EggDroppingTest",
                                        "class": {
                                            "id": "e9f488fa-e4d8-40c7-b292-ba935dda1143",
                                            "functions": {
                                                "hasMultipleEggMultipleFloor": {
                                                    "id": "EggDroppingTest#hasMultipleEggMultipleFloor"
                                                },
                                                "hasSingleEggMultipleFloor": {
                                                    "id": "EggDroppingTest#hasSingleEggMultipleFloor"
                                                },
                                                "hasMultipleEggSingleFloor": {
                                                    "id": "EggDroppingTest#hasMultipleEggSingleFloor"
                                                },
                                                "hasSingleEggSingleFloor": {
                                                    "id": "EggDroppingTest#hasSingleEggSingleFloor"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/dynamicprogramming/EggDroppingTest.java",
                                            "name": "EggDroppingTest"
                                        }
                                    },
                                    "KnapsackMemoizationTest.java": {
                                        "name": "KnapsackMemoizationTest",
                                        "class": {
                                            "id": "94a515c2-8dbe-4de9-a62f-98f51e415713",
                                            "functions": {
                                                "Test1": {
                                                    "id": "KnapsackMemoizationTest#Test1"
                                                },
                                                "Test3": {
                                                    "id": "KnapsackMemoizationTest#Test3"
                                                },
                                                "Test2": {
                                                    "id": "KnapsackMemoizationTest#Test2"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/dynamicprogramming/KnapsackMemoizationTest.java",
                                            "name": "KnapsackMemoizationTest"
                                        }
                                    },
                                    "LevenshteinDistanceTests.java": {
                                        "name": "LevenshteinDistanceTests",
                                        "class": {
                                            "id": "1503a75a-2940-4f4c-9044-0675e52d1f85",
                                            "functions": {
                                                "levenshteinDistanceTest": {
                                                    "id": "LevenshteinDistanceTests#levenshteinDistanceTest"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/dynamicprogramming/LevenshteinDistanceTests.java",
                                            "name": "LevenshteinDistanceTests"
                                        }
                                    },
                                    "OptimalJobSchedulingTest.java": {
                                        "name": "OptimalJobSchedulingTest",
                                        "class": {
                                            "id": "eefacfd6-8dca-43c4-88c0-0dc650c2c984",
                                            "functions": {
                                                "testOptimalJobScheduling2": {
                                                    "id": "OptimalJobSchedulingTest#testOptimalJobScheduling2"
                                                },
                                                "testOptimalJobScheduling1": {
                                                    "id": "OptimalJobSchedulingTest#testOptimalJobScheduling1"
                                                },
                                                "testOptimalJobScheduling3": {
                                                    "id": "OptimalJobSchedulingTest#testOptimalJobScheduling3"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/dynamicprogramming/OptimalJobSchedulingTest.java",
                                            "name": "OptimalJobSchedulingTest"
                                        }
                                    },
                                    "SubsetCountTest.java": {
                                        "name": "SubsetCountTest",
                                        "class": {
                                            "id": "ad88faf1-124f-48ae-9bd7-93ce55e29521",
                                            "functions": {
                                                "singleElementSubset": {
                                                    "id": "SubsetCountTest#singleElementSubset"
                                                },
                                                "hasMultipleSubset": {
                                                    "id": "SubsetCountTest#hasMultipleSubset"
                                                },
                                                "singleSubsetSO": {
                                                    "id": "SubsetCountTest#singleSubsetSO"
                                                },
                                                "hasMultipleSubsetSO": {
                                                    "id": "SubsetCountTest#hasMultipleSubsetSO"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/dynamicprogramming/SubsetCountTest.java",
                                            "name": "SubsetCountTest"
                                        }
                                    }
                                },
                                "geometry": {
                                    "GrahamScanTest.java": {
                                        "name": "GrahamScanTest",
                                        "class": {
                                            "id": "af23abd6-f1e3-4428-9c5b-5da836bf21dd",
                                            "functions": {
                                                "testGrahamScan": {
                                                    "id": "GrahamScanTest#testGrahamScan"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/geometry/GrahamScanTest.java",
                                            "name": "GrahamScanTest"
                                        }
                                    }
                                },
                                "io": {
                                    "BufferedReaderTest.java": {
                                        "name": "BufferedReaderTest",
                                        "class": {
                                            "id": "4c0267c7-648a-43fe-b360-a5d71e2e234e",
                                            "functions": {
                                                "randomTest": {
                                                    "id": "BufferedReaderTest#randomTest"
                                                },
                                                "testBlockPractical": {
                                                    "id": "BufferedReaderTest#testBlockPractical"
                                                },
                                                "testPeeks": {
                                                    "id": "BufferedReaderTest#testPeeks"
                                                },
                                                "testMixes": {
                                                    "id": "BufferedReaderTest#testMixes"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/io/BufferedReaderTest.java",
                                            "name": "BufferedReaderTest"
                                        }
                                    }
                                },
                                "maths": {
                                    "ADTFractionTest.java": {
                                        "name": "ADTFractionTest",
                                        "class": {
                                            "id": "bc0f2544-3c5e-46ae-9e43-ab2d58ca82c7",
                                            "functions": {
                                                "testConstructorWithDenominatorEqualToZero": {
                                                    "id": "ADTFractionTest#testConstructorWithDenominatorEqualToZero"
                                                },
                                                "testEqualsAndHashCode": {
                                                    "id": "ADTFractionTest#testEqualsAndHashCode"
                                                },
                                                "testToString": {
                                                    "id": "ADTFractionTest#testToString"
                                                },
                                                "testTimes": {
                                                    "id": "ADTFractionTest#testTimes"
                                                },
                                                "testReciprocal": {
                                                    "id": "ADTFractionTest#testReciprocal"
                                                },
                                                "testValue": {
                                                    "id": "ADTFractionTest#testValue"
                                                },
                                                "testPlus": {
                                                    "id": "ADTFractionTest#testPlus"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/ADTFractionTest.java",
                                            "name": "ADTFractionTest"
                                        }
                                    },
                                    "AbsoluteMaxTest.java": {
                                        "name": "AbsoluteMaxTest",
                                        "class": {
                                            "id": "b4e347de-247c-4526-bc83-618f5791a9ea",
                                            "functions": {
                                                "testGetMaxValue": {
                                                    "id": "AbsoluteMaxTest#testGetMaxValue"
                                                },
                                                "testGetMaxValueWithNoArguments": {
                                                    "id": "AbsoluteMaxTest#testGetMaxValueWithNoArguments"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/AbsoluteMaxTest.java",
                                            "name": "AbsoluteMaxTest"
                                        }
                                    },
                                    "AbsoluteMinTest.java": {
                                        "name": "AbsoluteMinTest",
                                        "class": {
                                            "id": "47b84042-d7d4-4840-bd98-73bd88408f70",
                                            "functions": {
                                                "testGetMinValueWithNoArguments": {
                                                    "id": "AbsoluteMinTest#testGetMinValueWithNoArguments"
                                                },
                                                "testGetMinValue": {
                                                    "id": "AbsoluteMinTest#testGetMinValue"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/AbsoluteMinTest.java",
                                            "name": "AbsoluteMinTest"
                                        }
                                    },
                                    "AbsoluteValueTest.java": {
                                        "name": "AbsoluteValueTest",
                                        "class": {
                                            "id": "783b6945-4a3a-4384-b953-f87fea20fc8e",
                                            "functions": {
                                                "testGetAbsValue": {
                                                    "id": "AbsoluteValueTest#testGetAbsValue"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/AbsoluteValueTest.java",
                                            "name": "AbsoluteValueTest"
                                        }
                                    },
                                    "AliquotSumTest.java": {
                                        "name": "AliquotSumTest",
                                        "class": {
                                            "id": "edd5e411-12ed-41f1-86e8-af85d5898ca6",
                                            "functions": {
                                                "testGetMaxValue": {
                                                    "id": "AliquotSumTest#testGetMaxValue"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/AliquotSumTest.java",
                                            "name": "AliquotSumTest"
                                        }
                                    },
                                    "AmicableNumberTest.java": {
                                        "name": "AmicableNumberTest",
                                        "class": {
                                            "id": "8778d445-026d-49b8-8bf3-15a58719d1fb",
                                            "functions": {
                                                "testAmicableNumber": {
                                                    "id": "AmicableNumberTest#testAmicableNumber"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/AmicableNumberTest.java",
                                            "name": "AmicableNumberTest"
                                        }
                                    },
                                    "AreaTest.java": {
                                        "name": "AreaTest",
                                        "class": {
                                            "id": "7d0f3605-8049-43e6-b7ca-ecd7cd8a01eb",
                                            "functions": {
                                                "testSurfaceAreaCube": {
                                                    "id": "AreaTest#testSurfaceAreaCube"
                                                },
                                                "testSurfaceAreaSquare": {
                                                    "id": "AreaTest#testSurfaceAreaSquare"
                                                },
                                                "testSurfaceAreaTriangleRectangle": {
                                                    "id": "AreaTest#testSurfaceAreaTriangleRectangle"
                                                },
                                                "testSurfaceAreaSphere": {
                                                    "id": "AreaTest#testSurfaceAreaSphere"
                                                },
                                                "testSurfaceAreaTrapezium": {
                                                    "id": "AreaTest#testSurfaceAreaTrapezium"
                                                },
                                                "testSurfaceAreaParallelogram": {
                                                    "id": "AreaTest#testSurfaceAreaParallelogram"
                                                },
                                                "surfaceAreaHemisphere": {
                                                    "id": "AreaTest#surfaceAreaHemisphere"
                                                },
                                                "testAllIllegalInput": {
                                                    "id": "AreaTest#testAllIllegalInput"
                                                },
                                                "testSurfaceAreaRectangle": {
                                                    "id": "AreaTest#testSurfaceAreaRectangle"
                                                },
                                                "testSurfaceAreaCircle": {
                                                    "id": "AreaTest#testSurfaceAreaCircle"
                                                },
                                                "surfaceAreaCone": {
                                                    "id": "AreaTest#surfaceAreaCone"
                                                },
                                                "testSurfaceAreaCylinder": {
                                                    "id": "AreaTest#testSurfaceAreaCylinder"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/AreaTest.java",
                                            "name": "AreaTest"
                                        }
                                    },
                                    "ArmstrongTest.java": {
                                        "name": "ArmstrongTest",
                                        "class": {
                                            "id": "4a391316-06e1-44bc-8c22-57ba59e8e398",
                                            "functions": {
                                                "testIsArmstrong": {
                                                    "id": "ArmstrongTest#testIsArmstrong"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/ArmstrongTest.java",
                                            "name": "ArmstrongTest"
                                        }
                                    },
                                    "AutomorphicNumberTest.java": {
                                        "name": "AutomorphicNumberTest",
                                        "class": {
                                            "id": "5192b8ce-4612-4f1f-9c39-0b54dde66aaf",
                                            "functions": {
                                                "testAutomorphicNumber": {
                                                    "id": "AutomorphicNumberTest#testAutomorphicNumber"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/AutomorphicNumberTest.java",
                                            "name": "AutomorphicNumberTest"
                                        }
                                    },
                                    "AverageTest.java": {
                                        "name": "AverageTest",
                                        "class": {
                                            "id": "a3dd72dc-2125-4084-9e6c-27bcb2607c0f",
                                            "functions": {
                                                "testAverage_double_20": {
                                                    "id": "AverageTest#testAverage_double_20"
                                                },
                                                "testAverage_double_12": {
                                                    "id": "AverageTest#testAverage_double_12"
                                                },
                                                "testAverage_double_4_5": {
                                                    "id": "AverageTest#testAverage_double_4_5"
                                                },
                                                "testAverage_int_5": {
                                                    "id": "AverageTest#testAverage_int_5"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/AverageTest.java",
                                            "name": "AverageTest"
                                        }
                                    },
                                    "BinaryPowTest.java": {
                                        "name": "BinaryPowTest",
                                        "class": {
                                            "id": "0310fd9f-e0c1-4cb1-a8b6-2516b4d27ca4",
                                            "functions": {
                                                "testBinPow": {
                                                    "id": "BinaryPowTest#testBinPow"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/BinaryPowTest.java",
                                            "name": "BinaryPowTest"
                                        }
                                    },
                                    "BinomialCoefficientTest.java": {
                                        "name": "BinomialCoefficientTest",
                                        "class": {
                                            "id": "e64904da-295c-4b0d-a97d-e1f79ed8b142",
                                            "functions": {
                                                "testBinomialCoefficient": {
                                                    "id": "BinomialCoefficientTest#testBinomialCoefficient"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/BinomialCoefficientTest.java",
                                            "name": "BinomialCoefficientTest"
                                        }
                                    },
                                    "CeilTest.java": {
                                        "name": "CeilTest",
                                        "class": {
                                            "id": "bd5e0306-bc6f-4c0f-9b25-9072188a4344",
                                            "functions": {
                                                "testCeil": {
                                                    "id": "CeilTest#testCeil"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/CeilTest.java",
                                            "name": "CeilTest"
                                        }
                                    },
                                    "CollatzConjectureTest.java": {
                                        "name": "CollatzConjectureTest",
                                        "class": {
                                            "id": "8596bc10-a51e-44fb-a28e-5581332ace26",
                                            "functions": {
                                                "nextNumberFromEvenNumber": {
                                                    "id": "CollatzConjectureTest#nextNumberFromEvenNumber"
                                                },
                                                "collatzConjecture": {
                                                    "id": "CollatzConjectureTest#collatzConjecture"
                                                },
                                                "sequenceOfNotNaturalFirstNumber": {
                                                    "id": "CollatzConjectureTest#sequenceOfNotNaturalFirstNumber"
                                                },
                                                "setUp": {
                                                    "id": "CollatzConjectureTest#setUp"
                                                },
                                                "nextNumberFromOddNumber": {
                                                    "id": "CollatzConjectureTest#nextNumberFromOddNumber"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/CollatzConjectureTest.java",
                                            "name": "CollatzConjectureTest"
                                        }
                                    },
                                    "CombinationsTest.java": {
                                        "name": "CombinationsTest",
                                        "class": {
                                            "id": "72d649d3-0428-4460-8d40-79b3b0699476",
                                            "functions": {
                                                "testCombinationOptimised": {
                                                    "id": "CombinationsTest#testCombinationOptimised"
                                                },
                                                "testCombination": {
                                                    "id": "CombinationsTest#testCombination"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/CombinationsTest.java",
                                            "name": "CombinationsTest"
                                        }
                                    },
                                    "DigitalRootTest.java": {
                                        "name": "DigitalRootTest",
                                        "class": {
                                            "id": "d764b8d5-a0f7-4e54-b081-2309c7a47d2c",
                                            "functions": {
                                                "testDigitalroot": {
                                                    "id": "DigitalRootTest#testDigitalroot"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/DigitalRootTest.java",
                                            "name": "DigitalRootTest"
                                        }
                                    },
                                    "DistanceFormulaTest.java": {
                                        "name": "DistanceFormulaTest",
                                        "class": {
                                            "id": "97243b1a-b062-468d-9a0b-638422bd91b6",
                                            "functions": {
                                                "euclideanTest3": {
                                                    "id": "DistanceFormulaTest#euclideanTest3"
                                                },
                                                "hammingTest1": {
                                                    "id": "DistanceFormulaTest#hammingTest1"
                                                },
                                                "euclideanTest2": {
                                                    "id": "DistanceFormulaTest#euclideanTest2"
                                                },
                                                "hammingTest2": {
                                                    "id": "DistanceFormulaTest#hammingTest2"
                                                },
                                                "euclideanTest1": {
                                                    "id": "DistanceFormulaTest#euclideanTest1"
                                                },
                                                "euclideanTest4": {
                                                    "id": "DistanceFormulaTest#euclideanTest4"
                                                },
                                                "manhattantest1": {
                                                    "id": "DistanceFormulaTest#manhattantest1"
                                                },
                                                "hammingTest3": {
                                                    "id": "DistanceFormulaTest#hammingTest3"
                                                },
                                                "minkowskiTest2": {
                                                    "id": "DistanceFormulaTest#minkowskiTest2"
                                                },
                                                "minkowskiTest3": {
                                                    "id": "DistanceFormulaTest#minkowskiTest3"
                                                },
                                                "manhattanTest3": {
                                                    "id": "DistanceFormulaTest#manhattanTest3"
                                                },
                                                "minkowskiTest1": {
                                                    "id": "DistanceFormulaTest#minkowskiTest1"
                                                },
                                                "manhattantest2": {
                                                    "id": "DistanceFormulaTest#manhattantest2"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/DistanceFormulaTest.java",
                                            "name": "DistanceFormulaTest"
                                        }
                                    },
                                    "DudeneyNumberTest.java": {
                                        "name": "DudeneyNumberTest",
                                        "class": {
                                            "id": "bdf56434-8a5f-4be0-af1b-163e86042a80",
                                            "functions": {
                                                "isDudeney": {
                                                    "id": "DudeneyNumberTest#isDudeney"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/DudeneyNumberTest.java",
                                            "name": "DudeneyNumberTest"
                                        }
                                    },
                                    "FFTTest.java": {
                                        "name": "FFTTest",
                                        "class": {
                                            "id": "04c6ac4a-8095-4d53-989f-3491b33cfc2c",
                                            "functions": {
                                                "multiplyWithScalarTest": {
                                                    "id": "FFTTest#multiplyWithScalarTest"
                                                },
                                                "abs": {
                                                    "id": "FFTTest#abs"
                                                },
                                                "divideWithComplexTest": {
                                                    "id": "FFTTest#divideWithComplexTest"
                                                },
                                                "getRealtest": {
                                                    "id": "FFTTest#getRealtest"
                                                },
                                                "fft": {
                                                    "id": "FFTTest#fft"
                                                },
                                                "addFalseTest": {
                                                    "id": "FFTTest#addFalseTest"
                                                },
                                                "getImaginaryTest": {
                                                    "id": "FFTTest#getImaginaryTest"
                                                },
                                                "subtractTest": {
                                                    "id": "FFTTest#subtractTest"
                                                },
                                                "addTest": {
                                                    "id": "FFTTest#addTest"
                                                },
                                                "multiplyWithComplexTest": {
                                                    "id": "FFTTest#multiplyWithComplexTest"
                                                },
                                                "conjugateTest": {
                                                    "id": "FFTTest#conjugateTest"
                                                },
                                                "divideWithScalarTest": {
                                                    "id": "FFTTest#divideWithScalarTest"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/FFTTest.java",
                                            "name": "FFTTest"
                                        }
                                    },
                                    "FactorialTest.java": {
                                        "name": "FactorialTest",
                                        "class": {
                                            "id": "595c02a5-edb6-49ed-99db-964f90fb0237",
                                            "functions": {
                                                "test": {
                                                    "id": "FactorialTest#test"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/FactorialTest.java",
                                            "name": "FactorialTest"
                                        }
                                    },
                                    "FastInverseSqrtTests.java": {
                                        "name": "FastInverseSqrtTests",
                                        "class": {
                                            "id": "eff8b2dc-6924-4793-a2a5-b4025ff145e4",
                                            "functions": {
                                                "testForFifth": {
                                                    "id": "FastInverseSqrtTests#testForFifth"
                                                },
                                                "testForSixth": {
                                                    "id": "FastInverseSqrtTests#testForSixth"
                                                },
                                                "testForOneElement": {
                                                    "id": "FastInverseSqrtTests#testForOneElement"
                                                },
                                                "testForsecond": {
                                                    "id": "FastInverseSqrtTests#testForsecond"
                                                },
                                                "testForThird": {
                                                    "id": "FastInverseSqrtTests#testForThird"
                                                },
                                                "testForSeventh": {
                                                    "id": "FastInverseSqrtTests#testForSeventh"
                                                },
                                                "testForEighth": {
                                                    "id": "FastInverseSqrtTests#testForEighth"
                                                },
                                                "testForFourth": {
                                                    "id": "FastInverseSqrtTests#testForFourth"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/FastInverseSqrtTests.java",
                                            "name": "FastInverseSqrtTests"
                                        }
                                    },
                                    "FindMaxTest.java": {
                                        "name": "FindMaxTest",
                                        "class": {
                                            "id": "a3c44179-125d-460b-9fc6-7758bc56f3b8",
                                            "functions": {
                                                "testFindMaxValue": {
                                                    "id": "FindMaxTest#testFindMaxValue"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/FindMaxTest.java",
                                            "name": "FindMaxTest"
                                        }
                                    },
                                    "FindMinTest.java": {
                                        "name": "FindMinTest",
                                        "class": {
                                            "id": "b328d701-c545-4e96-b1fa-a24683b10f59",
                                            "functions": {
                                                "testFindMinValue": {
                                                    "id": "FindMinTest#testFindMinValue"
                                                },
                                                "test2": {
                                                    "id": "FindMinTest#test2"
                                                },
                                                "test1": {
                                                    "id": "FindMinTest#test1"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/FindMinTest.java",
                                            "name": "FindMinTest"
                                        }
                                    },
                                    "FrizzyNumberTest.java": {
                                        "name": "FrizzyNumberTest",
                                        "class": {
                                            "id": "6ac0d315-26a5-44e2-94cf-d885aa1c98e6",
                                            "functions": {
                                                "testFrizziesForBase69": {
                                                    "id": "FrizzyNumberTest#testFrizziesForBase69"
                                                },
                                                "testFrizziesForBase3": {
                                                    "id": "FrizzyNumberTest#testFrizziesForBase3"
                                                },
                                                "testFrizziesForBase2": {
                                                    "id": "FrizzyNumberTest#testFrizziesForBase2"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/FrizzyNumberTest.java",
                                            "name": "FrizzyNumberTest"
                                        }
                                    },
                                    "GCDTest.java": {
                                        "name": "GCDTest",
                                        "class": {
                                            "id": "312cf1a7-5153-4f7b-90e6-0b7c407b0548",
                                            "functions": {
                                                "test4": {
                                                    "id": "GCDTest#test4"
                                                },
                                                "test5": {
                                                    "id": "GCDTest#test5"
                                                },
                                                "test2": {
                                                    "id": "GCDTest#test2"
                                                },
                                                "test3": {
                                                    "id": "GCDTest#test3"
                                                },
                                                "test6": {
                                                    "id": "GCDTest#test6"
                                                },
                                                "test7": {
                                                    "id": "GCDTest#test7"
                                                },
                                                "test1": {
                                                    "id": "GCDTest#test1"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/GCDTest.java",
                                            "name": "GCDTest"
                                        }
                                    },
                                    "GaussianTest.java": {
                                        "name": "GaussianTest",
                                        "class": {
                                            "id": "3093e49a-33a7-40fd-be44-0bac42ee1f7a",
                                            "functions": {
                                                "passTest1": {
                                                    "id": "GaussianTest#passTest1"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/GaussianTest.java",
                                            "name": "GaussianTest"
                                        }
                                    },
                                    "HarshadNumberTest.java": {
                                        "name": "HarshadNumberTest",
                                        "class": {
                                            "id": "fbf46dab-dd24-4938-b659-a6e024e6da91",
                                            "functions": {
                                                "harshadNumber": {
                                                    "id": "HarshadNumberTest#harshadNumber"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/HarshadNumberTest.java",
                                            "name": "HarshadNumberTest"
                                        }
                                    },
                                    "HeronsFormulaTest.java": {
                                        "name": "HeronsFormulaTest",
                                        "class": {
                                            "id": "b420a52d-41a5-4e6b-b7d0-73433990df20",
                                            "functions": {
                                                "test4": {
                                                    "id": "HeronsFormulaTest#test4"
                                                },
                                                "test2": {
                                                    "id": "HeronsFormulaTest#test2"
                                                },
                                                "test3": {
                                                    "id": "HeronsFormulaTest#test3"
                                                },
                                                "test1": {
                                                    "id": "HeronsFormulaTest#test1"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/HeronsFormulaTest.java",
                                            "name": "HeronsFormulaTest"
                                        }
                                    },
                                    "JosephusProblemTest.java": {
                                        "name": "JosephusProblemTest",
                                        "class": {
                                            "id": "70abefa2-485b-437b-94da-17393ffbef47",
                                            "functions": {
                                                "testJosephusProblem": {
                                                    "id": "JosephusProblemTest#testJosephusProblem"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/JosephusProblemTest.java",
                                            "name": "JosephusProblemTest"
                                        }
                                    },
                                    "KaprekarNumbersTest.java": {
                                        "name": "KaprekarNumbersTest",
                                        "class": {
                                            "id": "5c0c7b25-5e1c-4a2f-88b4-7529ec98fba3",
                                            "functions": {
                                                "testFor98": {
                                                    "id": "KaprekarNumbersTest#testFor98"
                                                },
                                                "testForRangeOfNumber": {
                                                    "id": "KaprekarNumbersTest#testForRangeOfNumber"
                                                },
                                                "testFor3": {
                                                    "id": "KaprekarNumbersTest#testFor3"
                                                },
                                                "testFor2223": {
                                                    "id": "KaprekarNumbersTest#testFor2223"
                                                },
                                                "testFor1": {
                                                    "id": "KaprekarNumbersTest#testFor1"
                                                },
                                                "testFor857143": {
                                                    "id": "KaprekarNumbersTest#testFor857143"
                                                },
                                                "testFor297": {
                                                    "id": "KaprekarNumbersTest#testFor297"
                                                },
                                                "testFor26": {
                                                    "id": "KaprekarNumbersTest#testFor26"
                                                },
                                                "testFor45": {
                                                    "id": "KaprekarNumbersTest#testFor45"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/KaprekarNumbersTest.java",
                                            "name": "KaprekarNumbersTest"
                                        }
                                    },
                                    "LeastCommonMultipleTest.java": {
                                        "name": "LeastCommonMultipleTest",
                                        "class": {
                                            "id": "e2930918-64c8-4831-9641-af6ac0e8e7a6",
                                            "functions": {
                                                "testForSecond": {
                                                    "id": "LeastCommonMultipleTest#testForSecond"
                                                },
                                                "testForFirst": {
                                                    "id": "LeastCommonMultipleTest#testForFirst"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/LeastCommonMultipleTest.java",
                                            "name": "LeastCommonMultipleTest"
                                        }
                                    },
                                    "LiouvilleLambdaFunctionTest.java": {
                                        "name": "LiouvilleLambdaFunctionTest",
                                        "class": {
                                            "id": "1a2b2d33-a59d-49aa-a05f-2d390a712b5f",
                                            "functions": {
                                                "testLiouvilleLambdaMustReturnPositiveOne": {
                                                    "id": "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustReturnPositiveOne"
                                                },
                                                "testLiouvilleLambdaMustThrowExceptionIfNumberIsNegative": {
                                                    "id": "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustThrowExceptionIfNumberIsNegative"
                                                },
                                                "testLiouvilleLambdaMustThrowExceptionIfNumberIsZero": {
                                                    "id": "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustThrowExceptionIfNumberIsZero"
                                                },
                                                "testLiouvilleLambdaMustReturnNegativeOne": {
                                                    "id": "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustReturnNegativeOne"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/LiouvilleLambdaFunctionTest.java",
                                            "name": "LiouvilleLambdaFunctionTest"
                                        }
                                    },
                                    "LongDivisionTest.java": {
                                        "name": "LongDivisionTest",
                                        "class": {
                                            "id": "7211b952-c1a8-4d1f-8ad3-818adebb3619",
                                            "functions": {
                                                "testOne": {
                                                    "id": "LongDivisionTest#testOne"
                                                },
                                                "testThree": {
                                                    "id": "LongDivisionTest#testThree"
                                                },
                                                "testDivisionByZero": {
                                                    "id": "LongDivisionTest#testDivisionByZero"
                                                },
                                                "testDividendIsZero": {
                                                    "id": "LongDivisionTest#testDividendIsZero"
                                                },
                                                "testTwo": {
                                                    "id": "LongDivisionTest#testTwo"
                                                },
                                                "testDividendLessThanDivisor": {
                                                    "id": "LongDivisionTest#testDividendLessThanDivisor"
                                                },
                                                "testNegativeDividend": {
                                                    "id": "LongDivisionTest#testNegativeDividend"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/LongDivisionTest.java",
                                            "name": "LongDivisionTest"
                                        }
                                    },
                                    "MobiusFunctionTest.java": {
                                        "name": "MobiusFunctionTest",
                                        "class": {
                                            "id": "04325ff8-00ed-4781-9ab2-21284e40fdfd",
                                            "functions": {
                                                "testMobiusForZero": {
                                                    "id": "MobiusFunctionTest#testMobiusForZero"
                                                },
                                                "testMobiusForNegativeNumber": {
                                                    "id": "MobiusFunctionTest#testMobiusForNegativeNumber"
                                                },
                                                "testMobiusFunction": {
                                                    "id": "MobiusFunctionTest#testMobiusFunction"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/MobiusFunctionTest.java",
                                            "name": "MobiusFunctionTest"
                                        }
                                    },
                                    "PascalTriangleTest.java": {
                                        "name": "PascalTriangleTest",
                                        "class": {
                                            "id": "43159b77-43ed-4d0d-8be8-4be964d8f206",
                                            "functions": {
                                                "testForTwo": {
                                                    "id": "PascalTriangleTest#testForTwo"
                                                },
                                                "testForOne": {
                                                    "id": "PascalTriangleTest#testForOne"
                                                },
                                                "testForEight": {
                                                    "id": "PascalTriangleTest#testForEight"
                                                },
                                                "testForFive": {
                                                    "id": "PascalTriangleTest#testForFive"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/PascalTriangleTest.java",
                                            "name": "PascalTriangleTest"
                                        }
                                    },
                                    "PerfectCubeTest.java": {
                                        "name": "PerfectCubeTest",
                                        "class": {
                                            "id": "a132bd6a-1159-49fa-b4ee-b67c992c550d",
                                            "functions": {
                                                "perfectCube": {
                                                    "id": "PerfectCubeTest#perfectCube"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/PerfectCubeTest.java",
                                            "name": "PerfectCubeTest"
                                        }
                                    },
                                    "PerfectNumberTest.java": {
                                        "name": "PerfectNumberTest",
                                        "class": {
                                            "id": "ea6e90e9-2a2f-4540-86bf-ad722fc37276",
                                            "functions": {
                                                "perfectNumber": {
                                                    "id": "PerfectNumberTest#perfectNumber"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/PerfectNumberTest.java",
                                            "name": "PerfectNumberTest"
                                        }
                                    },
                                    "PerfectSquareTest.java": {
                                        "name": "PerfectSquareTest",
                                        "class": {
                                            "id": "d091ca97-0af5-4a3a-bf86-9e55b5e61831",
                                            "functions": {
                                                "TestPerfectSquareifisNegativeNumber": {
                                                    "id": "PerfectSquareTest#TestPerfectSquareifisNegativeNumber"
                                                },
                                                "TestPerfectSquareifisnotcorrect": {
                                                    "id": "PerfectSquareTest#TestPerfectSquareifisnotcorrect"
                                                },
                                                "TestPerfectSquareifiscorrect": {
                                                    "id": "PerfectSquareTest#TestPerfectSquareifiscorrect"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/PerfectSquareTest.java",
                                            "name": "PerfectSquareTest"
                                        }
                                    },
                                    "PerimeterTest.java": {
                                        "name": "PerimeterTest",
                                        "class": {
                                            "id": "6bf5ddaa-04e4-44f4-88c9-03a9d75ce005",
                                            "functions": {
                                                "testcase1": {
                                                    "id": "PerimeterTest#testcase1"
                                                },
                                                "testcase2": {
                                                    "id": "PerimeterTest#testcase2"
                                                },
                                                "testcase3": {
                                                    "id": "PerimeterTest#testcase3"
                                                },
                                                "testcase4": {
                                                    "id": "PerimeterTest#testcase4"
                                                },
                                                "testcase5": {
                                                    "id": "PerimeterTest#testcase5"
                                                },
                                                "testcase6": {
                                                    "id": "PerimeterTest#testcase6"
                                                },
                                                "testcase7": {
                                                    "id": "PerimeterTest#testcase7"
                                                },
                                                "testcase8": {
                                                    "id": "PerimeterTest#testcase8"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/PerimeterTest.java",
                                            "name": "PerimeterTest"
                                        }
                                    },
                                    "PollardRhoTest.java": {
                                        "name": "PollardRhoTest",
                                        "class": {
                                            "id": "e28a219b-8ea0-4987-899b-f9e96dbd08c2",
                                            "functions": {
                                                "testPollardRhoForNumber239MustThrowException": {
                                                    "id": "PollardRhoTest#testPollardRhoForNumber239MustThrowException"
                                                },
                                                "testPollardRhoForNumber187MustReturn11": {
                                                    "id": "PollardRhoTest#testPollardRhoForNumber187MustReturn11"
                                                },
                                                "testPollardRhoForNumber315MustReturn5": {
                                                    "id": "PollardRhoTest#testPollardRhoForNumber315MustReturn5"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/PollardRhoTest.java",
                                            "name": "PollardRhoTest"
                                        }
                                    },
                                    "PrimeCheckTest.java": {
                                        "name": "PrimeCheckTest",
                                        "class": {
                                            "id": "f725b7d1-134a-4f5b-a22b-9be8a8f3da96",
                                            "functions": {
                                                "test4": {
                                                    "id": "PrimeCheckTest#test4"
                                                },
                                                "test5": {
                                                    "id": "PrimeCheckTest#test5"
                                                },
                                                "test2": {
                                                    "id": "PrimeCheckTest#test2"
                                                },
                                                "test3": {
                                                    "id": "PrimeCheckTest#test3"
                                                },
                                                "test6": {
                                                    "id": "PrimeCheckTest#test6"
                                                },
                                                "test7": {
                                                    "id": "PrimeCheckTest#test7"
                                                },
                                                "test1": {
                                                    "id": "PrimeCheckTest#test1"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/PrimeCheckTest.java",
                                            "name": "PrimeCheckTest"
                                        }
                                    },
                                    "PrimeFactorizationTest.java": {
                                        "name": "PrimeFactorizationTest",
                                        "class": {
                                            "id": "d4a57941-0522-4769-a2b8-c451c589bc0c",
                                            "functions": {
                                                "testpFactorsMustReturnNonEmptyList": {
                                                    "id": "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList"
                                                },
                                                "testpFactorsMustReturnEmptyList": {
                                                    "id": "PrimeFactorizationTest#testpFactorsMustReturnEmptyList"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/PrimeFactorizationTest.java",
                                            "name": "PrimeFactorizationTest"
                                        }
                                    },
                                    "PronicNumberTest.java": {
                                        "name": "PronicNumberTest",
                                        "class": {
                                            "id": "65668f81-df9a-4147-96af-87cf931fb979",
                                            "functions": {
                                                "testForPronicNumber": {
                                                    "id": "PronicNumberTest#testForPronicNumber"
                                                },
                                                "testForNonPronicNumber": {
                                                    "id": "PronicNumberTest#testForNonPronicNumber"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/PronicNumberTest.java",
                                            "name": "PronicNumberTest"
                                        }
                                    },
                                    "PythagoreanTripleTest.java": {
                                        "name": "PythagoreanTripleTest",
                                        "class": {
                                            "id": "46c56da8-aa25-4ea5-ad62-d1a27fefe384",
                                            "functions": {
                                                "Testpythagoreantriple": {
                                                    "id": "PythagoreanTripleTest#Testpythagoreantriple"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/PythagoreanTripleTest.java",
                                            "name": "PythagoreanTripleTest"
                                        }
                                    },
                                    "SquareFreeIntegerTest.java": {
                                        "name": "SquareFreeIntegerTest",
                                        "class": {
                                            "id": "4aaea191-d64a-4a69-8934-3e852b2c8f75",
                                            "functions": {
                                                "testIsSquareFreeInteger": {
                                                    "id": "SquareFreeIntegerTest#testIsSquareFreeInteger"
                                                },
                                                "testIsSquareFreeIntegerMustThrowExceptionIfNumberIsNegative": {
                                                    "id": "SquareFreeIntegerTest#testIsSquareFreeIntegerMustThrowExceptionIfNumberIsNegative"
                                                },
                                                "testIsSquareFreeIntegerThrowExceptionIfNumberIsZero": {
                                                    "id": "SquareFreeIntegerTest#testIsSquareFreeIntegerThrowExceptionIfNumberIsZero"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/SquareFreeIntegerTest.java",
                                            "name": "SquareFreeIntegerTest"
                                        }
                                    },
                                    "SquareRootWithNewtonRaphsonTestMethod.java": {
                                        "name": "SquareRootWithNewtonRaphsonTestMethod",
                                        "class": {
                                            "id": "4037e6ee-6c8c-4983-bf15-8949a9c7267c",
                                            "functions": {
                                                "testfor625": {
                                                    "id": "SquareRootWithNewtonRaphsonTestMethod#testfor625"
                                                },
                                                "testfor2": {
                                                    "id": "SquareRootWithNewtonRaphsonTestMethod#testfor2"
                                                },
                                                "testfor1": {
                                                    "id": "SquareRootWithNewtonRaphsonTestMethod#testfor1"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/SquareRootWithNewtonRaphsonTestMethod.java",
                                            "name": "SquareRootWithNewtonRaphsonTestMethod"
                                        }
                                    },
                                    "SquareRootwithBabylonianMethodTest.java": {
                                        "name": "SquareRootwithBabylonianMethodTest",
                                        "class": {
                                            "id": "6be66c00-6bb5-4c2b-8d40-fe35d12b39c0",
                                            "functions": {
                                                "testfor4": {
                                                    "id": "SquareRootwithBabylonianMethodTest#testfor4"
                                                },
                                                "testfor625": {
                                                    "id": "SquareRootwithBabylonianMethodTest#testfor625"
                                                },
                                                "testfor2": {
                                                    "id": "SquareRootwithBabylonianMethodTest#testfor2"
                                                },
                                                "testfor1": {
                                                    "id": "SquareRootwithBabylonianMethodTest#testfor1"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/SquareRootwithBabylonianMethodTest.java",
                                            "name": "SquareRootwithBabylonianMethodTest"
                                        }
                                    },
                                    "StandardDeviationTest.java": {
                                        "name": "StandardDeviationTest",
                                        "class": {
                                            "id": "7ce4ec5b-7f0b-45ae-ba15-f879e5e8a19c",
                                            "functions": {
                                                "test4": {
                                                    "id": "StandardDeviationTest#test4"
                                                },
                                                "test2": {
                                                    "id": "StandardDeviationTest#test2"
                                                },
                                                "test3": {
                                                    "id": "StandardDeviationTest#test3"
                                                },
                                                "test1": {
                                                    "id": "StandardDeviationTest#test1"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/StandardDeviationTest.java",
                                            "name": "StandardDeviationTest"
                                        }
                                    },
                                    "StandardScoreTest.java": {
                                        "name": "StandardScoreTest",
                                        "class": {
                                            "id": "d846c204-57e3-44a9-97ed-6e1bc5ea14de",
                                            "functions": {
                                                "test4": {
                                                    "id": "StandardScoreTest#test4"
                                                },
                                                "test2": {
                                                    "id": "StandardScoreTest#test2"
                                                },
                                                "test3": {
                                                    "id": "StandardScoreTest#test3"
                                                },
                                                "test1": {
                                                    "id": "StandardScoreTest#test1"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/StandardScoreTest.java",
                                            "name": "StandardScoreTest"
                                        }
                                    },
                                    "SumOfDigitsTest.java": {
                                        "name": "SumOfDigitsTest",
                                        "class": {
                                            "id": "b1b4cd26-712f-4d84-9d54-939dc5654da8",
                                            "functions": {
                                                "testZero": {
                                                    "id": "SumOfDigitsTest#testZero"
                                                },
                                                "testNegative": {
                                                    "id": "SumOfDigitsTest#testNegative"
                                                },
                                                "testPositive": {
                                                    "id": "SumOfDigitsTest#testPositive"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/SumOfDigitsTest.java",
                                            "name": "SumOfDigitsTest"
                                        }
                                    },
                                    "SumWithoutArithmeticOperatorsTest.java": {
                                        "name": "SumWithoutArithmeticOperatorsTest",
                                        "class": {
                                            "id": "fb5dc429-40d2-49d1-80e8-7d0eb1f406d7",
                                            "functions": {
                                                "addZerotoNumber": {
                                                    "id": "SumWithoutArithmeticOperatorsTest#addZerotoNumber"
                                                },
                                                "addRandoms": {
                                                    "id": "SumWithoutArithmeticOperatorsTest#addRandoms"
                                                },
                                                "addEventoOdd": {
                                                    "id": "SumWithoutArithmeticOperatorsTest#addEventoOdd"
                                                },
                                                "addOddtoEven": {
                                                    "id": "SumWithoutArithmeticOperatorsTest#addOddtoEven"
                                                },
                                                "addZerotoZero": {
                                                    "id": "SumWithoutArithmeticOperatorsTest#addZerotoZero"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/SumWithoutArithmeticOperatorsTest.java",
                                            "name": "SumWithoutArithmeticOperatorsTest"
                                        }
                                    },
                                    "TestArmstrong.java": {
                                        "name": "TestArmstrong",
                                        "class": {
                                            "id": "39921cb9-330a-448b-9ba9-7927301da6d8",
                                            "functions": {
                                                "testArmstrong": {
                                                    "id": "TestArmstrong#testArmstrong"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/TestArmstrong.java",
                                            "name": "TestArmstrong"
                                        }
                                    },
                                    "TwinPrimeTest.java": {
                                        "name": "TwinPrimeTest",
                                        "class": {
                                            "id": "4b5e0b48-275e-4344-870f-5ba286726214",
                                            "functions": {
                                                "shouldReturn7": {
                                                    "id": "TwinPrimeTest#shouldReturn7"
                                                },
                                                "shouldReturn5": {
                                                    "id": "TwinPrimeTest#shouldReturn5"
                                                },
                                                "shouldReturn19": {
                                                    "id": "TwinPrimeTest#shouldReturn19"
                                                },
                                                "shouldReturnNegative1": {
                                                    "id": "TwinPrimeTest#shouldReturnNegative1"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/TwinPrimeTest.java",
                                            "name": "TwinPrimeTest"
                                        }
                                    },
                                    "VolumeTest.java": {
                                        "name": "VolumeTest",
                                        "class": {
                                            "id": "c975a5a0-db0c-4764-af9f-45d8b90d2780",
                                            "functions": {
                                                "volume": {
                                                    "id": "VolumeTest#volume"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/maths/VolumeTest.java",
                                            "name": "VolumeTest"
                                        }
                                    }
                                },
                                "others": {
                                    "ArrayLeftRotationTest.java": {
                                        "name": "ArrayLeftRotationTest",
                                        "class": {
                                            "id": "460d8d87-bf02-4ff2-bec5-7b0853b81dee",
                                            "functions": {
                                                "testForOneElement": {
                                                    "id": "ArrayLeftRotationTest#testForOneElement"
                                                },
                                                "testForZeroStep": {
                                                    "id": "ArrayLeftRotationTest#testForZeroStep"
                                                },
                                                "testForLowerSizeStep": {
                                                    "id": "ArrayLeftRotationTest#testForLowerSizeStep"
                                                },
                                                "testForEqualSizeStep": {
                                                    "id": "ArrayLeftRotationTest#testForEqualSizeStep"
                                                },
                                                "testForHigherSizeStep": {
                                                    "id": "ArrayLeftRotationTest#testForHigherSizeStep"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/ArrayLeftRotationTest.java",
                                            "name": "ArrayLeftRotationTest"
                                        }
                                    },
                                    "BestFitCPUTest.java": {
                                        "name": "BestFitCPUTest",
                                        "class": {
                                            "id": "b8fd34e0-367f-4b74-b2e6-7e0662a0efd5",
                                            "functions": {
                                                "testFitForMoreBlocksNoFit": {
                                                    "id": "BestFitCPUTest#testFitForMoreBlocksNoFit"
                                                },
                                                "testFitForNoEmptyBlockCell": {
                                                    "id": "BestFitCPUTest#testFitForNoEmptyBlockCell"
                                                },
                                                "testFitForSameInputDifferentQuery": {
                                                    "id": "BestFitCPUTest#testFitForSameInputDifferentQuery"
                                                },
                                                "testFitForUseOfOneBlock": {
                                                    "id": "BestFitCPUTest#testFitForUseOfOneBlock"
                                                },
                                                "testFitForEqualProcecesses": {
                                                    "id": "BestFitCPUTest#testFitForEqualProcecesses"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/BestFitCPUTest.java",
                                            "name": "BestFitCPUTest"
                                        }
                                    },
                                    "CRC16Test.java": {
                                        "name": "CRC16Test",
                                        "class": {
                                            "id": "be1ebc12-0607-481d-9769-641fed592e58",
                                            "functions": {
                                                "testCRC16": {
                                                    "id": "CRC16Test#testCRC16"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/CRC16Test.java",
                                            "name": "CRC16Test"
                                        }
                                    },
                                    "CRCAlgorithmTest.java": {
                                        "name": "CRCAlgorithmTest",
                                        "class": {
                                            "id": "bad8eee4-495e-4732-acf1-52350fb13df3",
                                            "functions": {
                                                "test2": {
                                                    "id": "CRCAlgorithmTest#test2"
                                                },
                                                "test1": {
                                                    "id": "CRCAlgorithmTest#test1"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/CRCAlgorithmTest.java",
                                            "name": "CRCAlgorithmTest"
                                        }
                                    },
                                    "CalculateMaxOfMinTest.java": {
                                        "name": "CalculateMaxOfMinTest",
                                        "class": {
                                            "id": "3e017703-75b0-48bd-b98e-cd4e85bca88c",
                                            "functions": {
                                                "testForFiveElements": {
                                                    "id": "CalculateMaxOfMinTest#testForFiveElements"
                                                },
                                                "testForThreeElements": {
                                                    "id": "CalculateMaxOfMinTest#testForThreeElements"
                                                },
                                                "testForSixElements": {
                                                    "id": "CalculateMaxOfMinTest#testForSixElements"
                                                },
                                                "testForOneElement": {
                                                    "id": "CalculateMaxOfMinTest#testForOneElement"
                                                },
                                                "testForFourElements": {
                                                    "id": "CalculateMaxOfMinTest#testForFourElements"
                                                },
                                                "testForTwoElements": {
                                                    "id": "CalculateMaxOfMinTest#testForTwoElements"
                                                },
                                                "testForSevenElements": {
                                                    "id": "CalculateMaxOfMinTest#testForSevenElements"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/CalculateMaxOfMinTest.java",
                                            "name": "CalculateMaxOfMinTest"
                                        }
                                    },
                                    "ConwayTest.java": {
                                        "name": "ConwayTest",
                                        "class": {
                                            "id": "419fe52d-ed9b-4404-ba93-73aac4d244a7",
                                            "functions": {
                                                "testGenerateWith123456": {
                                                    "id": "ConwayTest#testGenerateWith123456"
                                                },
                                                "testGenerateNextElementWith1": {
                                                    "id": "ConwayTest#testGenerateNextElementWith1"
                                                },
                                                "testGenerateWith1": {
                                                    "id": "ConwayTest#testGenerateWith1"
                                                },
                                                "testGenerateNextElementWith1A1Z3E1R1T3G1F1D2E1S1C": {
                                                    "id": "ConwayTest#testGenerateNextElementWith1A1Z3E1R1T3G1F1D2E1S1C"
                                                },
                                                "testGenerateNextElementWith123456": {
                                                    "id": "ConwayTest#testGenerateNextElementWith123456"
                                                },
                                                "testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C": {
                                                    "id": "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/ConwayTest.java",
                                            "name": "ConwayTest"
                                        }
                                    },
                                    "CountCharTest.java": {
                                        "name": "CountCharTest",
                                        "class": {
                                            "id": "4c5eeec2-1997-471e-a5b3-6e5c6f1fe143",
                                            "functions": {
                                                "testCountCharacters": {
                                                    "id": "CountCharTest#testCountCharacters"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/CountCharTest.java",
                                            "name": "CountCharTest"
                                        }
                                    },
                                    "CountFriendsPairingTest.java": {
                                        "name": "CountFriendsPairingTest",
                                        "class": {
                                            "id": "f1ba001e-afe8-4f0f-a30d-c5a86c2d1511",
                                            "functions": {
                                                "testForFiveElements": {
                                                    "id": "CountFriendsPairingTest#testForFiveElements"
                                                },
                                                "testForEightElements": {
                                                    "id": "CountFriendsPairingTest#testForEightElements"
                                                },
                                                "testForThreeElements": {
                                                    "id": "CountFriendsPairingTest#testForThreeElements"
                                                },
                                                "testForSixElements": {
                                                    "id": "CountFriendsPairingTest#testForSixElements"
                                                },
                                                "testForOneElement": {
                                                    "id": "CountFriendsPairingTest#testForOneElement"
                                                },
                                                "testForFourElements": {
                                                    "id": "CountFriendsPairingTest#testForFourElements"
                                                },
                                                "testForTwoElements": {
                                                    "id": "CountFriendsPairingTest#testForTwoElements"
                                                },
                                                "testForSevenElements": {
                                                    "id": "CountFriendsPairingTest#testForSevenElements"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/CountFriendsPairingTest.java",
                                            "name": "CountFriendsPairingTest"
                                        }
                                    },
                                    "FirstFitCPUTest.java": {
                                        "name": "FirstFitCPUTest",
                                        "class": {
                                            "id": "5ac56738-8426-4351-95e1-04d0ed28742e",
                                            "functions": {
                                                "testFitForMoreBlocksNoFit": {
                                                    "id": "FirstFitCPUTest#testFitForMoreBlocksNoFit"
                                                },
                                                "testFitForNoEmptyBlockCell": {
                                                    "id": "FirstFitCPUTest#testFitForNoEmptyBlockCell"
                                                },
                                                "testFitForSameInputDifferentQuery": {
                                                    "id": "FirstFitCPUTest#testFitForSameInputDifferentQuery"
                                                },
                                                "testFitForUseOfOneBlock": {
                                                    "id": "FirstFitCPUTest#testFitForUseOfOneBlock"
                                                },
                                                "testFitForEqualProcecesses": {
                                                    "id": "FirstFitCPUTest#testFitForEqualProcecesses"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/FirstFitCPUTest.java",
                                            "name": "FirstFitCPUTest"
                                        }
                                    },
                                    "KadaneAlogrithmTest.java": {
                                        "name": "KadaneAlogrithmTest",
                                        "class": {
                                            "id": "85413bb8-6684-417b-8919-2e5e706cdfba",
                                            "functions": {
                                                "testForFiveElements": {
                                                    "id": "KadaneAlogrithmTest#testForFiveElements"
                                                },
                                                "testForEightElements": {
                                                    "id": "KadaneAlogrithmTest#testForEightElements"
                                                },
                                                "testForThreeElements": {
                                                    "id": "KadaneAlogrithmTest#testForThreeElements"
                                                },
                                                "testForSixElements": {
                                                    "id": "KadaneAlogrithmTest#testForSixElements"
                                                },
                                                "testForOneElement": {
                                                    "id": "KadaneAlogrithmTest#testForOneElement"
                                                },
                                                "testForFourElements": {
                                                    "id": "KadaneAlogrithmTest#testForFourElements"
                                                },
                                                "testForTwoElements": {
                                                    "id": "KadaneAlogrithmTest#testForTwoElements"
                                                },
                                                "testForSevenElements": {
                                                    "id": "KadaneAlogrithmTest#testForSevenElements"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/KadaneAlogrithmTest.java",
                                            "name": "KadaneAlogrithmTest"
                                        }
                                    },
                                    "LinkListSortTest.java": {
                                        "name": "LinkListSortTest",
                                        "class": {
                                            "id": "76428be2-84e3-4f18-950b-4bd2984e0f50",
                                            "functions": {
                                                "testForFiveElements": {
                                                    "id": "LinkListSortTest#testForFiveElements"
                                                },
                                                "testForEightElements": {
                                                    "id": "LinkListSortTest#testForEightElements"
                                                },
                                                "testForThreeElements": {
                                                    "id": "LinkListSortTest#testForThreeElements"
                                                },
                                                "testForSixElements": {
                                                    "id": "LinkListSortTest#testForSixElements"
                                                },
                                                "testForOneElement": {
                                                    "id": "LinkListSortTest#testForOneElement"
                                                },
                                                "testForFourElements": {
                                                    "id": "LinkListSortTest#testForFourElements"
                                                },
                                                "testForTwoElements": {
                                                    "id": "LinkListSortTest#testForTwoElements"
                                                },
                                                "testForSevenElements": {
                                                    "id": "LinkListSortTest#testForSevenElements"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/LinkListSortTest.java",
                                            "name": "LinkListSortTest"
                                        }
                                    },
                                    "NewManShanksPrimeTest.java": {
                                        "name": "NewManShanksPrimeTest",
                                        "class": {
                                            "id": "de533601-e506-42ce-a7a1-0deff35ce7ab",
                                            "functions": {
                                                "testOne": {
                                                    "id": "NewManShanksPrimeTest#testOne"
                                                },
                                                "testSeven": {
                                                    "id": "NewManShanksPrimeTest#testSeven"
                                                },
                                                "testThree": {
                                                    "id": "NewManShanksPrimeTest#testThree"
                                                },
                                                "testSix": {
                                                    "id": "NewManShanksPrimeTest#testSix"
                                                },
                                                "testFour": {
                                                    "id": "NewManShanksPrimeTest#testFour"
                                                },
                                                "testEight": {
                                                    "id": "NewManShanksPrimeTest#testEight"
                                                },
                                                "testFive": {
                                                    "id": "NewManShanksPrimeTest#testFive"
                                                },
                                                "testTwo": {
                                                    "id": "NewManShanksPrimeTest#testTwo"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/NewManShanksPrimeTest.java",
                                            "name": "NewManShanksPrimeTest"
                                        }
                                    },
                                    "NextFitTest.java": {
                                        "name": "NextFitCPUTest",
                                        "class": {
                                            "id": "f636702a-d34e-4d0b-a718-b0dfd31210da",
                                            "functions": {
                                                "testFitForMoreBlocksNoFit": {
                                                    "id": "NextFitCPUTest#testFitForMoreBlocksNoFit"
                                                },
                                                "testFitForNoEmptyBlockCell": {
                                                    "id": "NextFitCPUTest#testFitForNoEmptyBlockCell"
                                                },
                                                "testFitForSameInputDifferentQuery": {
                                                    "id": "NextFitCPUTest#testFitForSameInputDifferentQuery"
                                                },
                                                "testFitForUseOfOneBlock": {
                                                    "id": "NextFitCPUTest#testFitForUseOfOneBlock"
                                                },
                                                "testFitForEqualProcecesses": {
                                                    "id": "NextFitCPUTest#testFitForEqualProcecesses"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/NextFitTest.java",
                                            "name": "NextFitCPUTest"
                                        }
                                    },
                                    "PasswordGenTest.java": {
                                        "name": "PasswordGenTest",
                                        "class": {
                                            "id": "e891d4c4-22ea-4dc0-bdae-cfc8706ebdcc",
                                            "functions": {
                                                "failGenerationWithSameMinMaxLengthTest": {
                                                    "id": "PasswordGenTest#failGenerationWithSameMinMaxLengthTest"
                                                },
                                                "failGenerationWithMinLengthSmallerThanMaxLengthTest": {
                                                    "id": "PasswordGenTest#failGenerationWithMinLengthSmallerThanMaxLengthTest"
                                                },
                                                "generatePasswordNonEmptyTest": {
                                                    "id": "PasswordGenTest#generatePasswordNonEmptyTest"
                                                },
                                                "generateOneCharacterPassword": {
                                                    "id": "PasswordGenTest#generateOneCharacterPassword"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/PasswordGenTest.java",
                                            "name": "PasswordGenTest"
                                        }
                                    },
                                    "TestPrintMatrixInSpiralOrder.java": {
                                        "name": "TestPrintMatrixInSpiralOrder",
                                        "class": {
                                            "id": "d54f5640-bc25-4088-9596-27882e04649f",
                                            "functions": {
                                                "testOne": {
                                                    "id": "TestPrintMatrixInSpiralOrder#testOne"
                                                },
                                                "testTwo": {
                                                    "id": "TestPrintMatrixInSpiralOrder#testTwo"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/TestPrintMatrixInSpiralOrder.java",
                                            "name": "TestPrintMatrixInSpiralOrder"
                                        }
                                    },
                                    "UniquePathsTests.java": {
                                        "name": "UniquePathsTests",
                                        "class": {
                                            "id": "cc22209a-c469-48a3-894e-f3bc3c7047ef",
                                            "functions": {
                                                "testForFiveElements": {
                                                    "id": "UniquePathsTests#testForFiveElements"
                                                },
                                                "testForEightElements": {
                                                    "id": "UniquePathsTests#testForEightElements"
                                                },
                                                "testForThreeElements": {
                                                    "id": "UniquePathsTests#testForThreeElements"
                                                },
                                                "testForSixElements": {
                                                    "id": "UniquePathsTests#testForSixElements"
                                                },
                                                "testForOneElement": {
                                                    "id": "UniquePathsTests#testForOneElement"
                                                },
                                                "testForFourElements": {
                                                    "id": "UniquePathsTests#testForFourElements"
                                                },
                                                "testForTwoElements": {
                                                    "id": "UniquePathsTests#testForTwoElements"
                                                },
                                                "testForSevenElements": {
                                                    "id": "UniquePathsTests#testForSevenElements"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/UniquePathsTests.java",
                                            "name": "UniquePathsTests"
                                        }
                                    },
                                    "WorstFitCPUTest.java": {
                                        "name": "WorstFitCPUTest",
                                        "class": {
                                            "id": "772f3f7a-b450-4770-b2dd-79043e8f1acb",
                                            "functions": {
                                                "testFitForMoreBlocksNoFit": {
                                                    "id": "WorstFitCPUTest#testFitForMoreBlocksNoFit"
                                                },
                                                "testFitBadCase": {
                                                    "id": "WorstFitCPUTest#testFitBadCase"
                                                },
                                                "testFitForNoEmptyBlockCell": {
                                                    "id": "WorstFitCPUTest#testFitForNoEmptyBlockCell"
                                                },
                                                "testFitForSameInputDifferentQuery": {
                                                    "id": "WorstFitCPUTest#testFitForSameInputDifferentQuery"
                                                },
                                                "testFitForUseOfOneBlock": {
                                                    "id": "WorstFitCPUTest#testFitForUseOfOneBlock"
                                                },
                                                "testFitForEqualProcecesses": {
                                                    "id": "WorstFitCPUTest#testFitForEqualProcecesses"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/WorstFitCPUTest.java",
                                            "name": "WorstFitCPUTest"
                                        }
                                    },
                                    "cn": {
                                        "HammingDistanceTest.java": {
                                            "name": "HammingDistanceTest",
                                            "class": {
                                                "id": "6d1100ec-6d91-4a79-b289-f6ee40fbbc02",
                                                "functions": {
                                                    "mismatchDataBits": {
                                                        "id": "HammingDistanceTest#mismatchDataBits"
                                                    },
                                                    "checkForDifferentBitsLength": {
                                                        "id": "HammingDistanceTest#checkForDifferentBitsLength"
                                                    },
                                                    "checkForSameBits": {
                                                        "id": "HammingDistanceTest#checkForSameBits"
                                                    },
                                                    "checkForLongDataBits": {
                                                        "id": "HammingDistanceTest#checkForLongDataBits"
                                                    },
                                                    "checkForLongDataBitsSame": {
                                                        "id": "HammingDistanceTest#checkForLongDataBitsSame"
                                                    },
                                                    "initialize": {
                                                        "id": "HammingDistanceTest#initialize"
                                                    },
                                                    "checkForDifferentBits": {
                                                        "id": "HammingDistanceTest#checkForDifferentBits"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/others/cn/HammingDistanceTest.java",
                                                "name": "HammingDistanceTest"
                                            }
                                        }
                                    },
                                    "countSetBitsTest.java": {
                                        "name": "countSetBitsTest",
                                        "class": {
                                            "id": "7db873a6-841c-431d-b8ed-02c1d152461d",
                                            "functions": {
                                                "testSetBits": {
                                                    "id": "countSetBitsTest#testSetBits"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/others/countSetBitsTest.java",
                                            "name": "countSetBitsTest"
                                        }
                                    }
                                },
                                "scheduling": {
                                    "FCFSSchedulingTest.java": {
                                        "name": "FCFSSchedulingTest",
                                        "class": {
                                            "id": "429f2107-1a0e-42ba-aae5-3e184b1df87c",
                                            "functions": {
                                                "testingProcesses": {
                                                    "id": "FCFSSchedulingTest#testingProcesses"
                                                },
                                                "addProcessesForFCFS": {
                                                    "id": "FCFSSchedulingTest#addProcessesForFCFS"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/scheduling/FCFSSchedulingTest.java",
                                            "name": "FCFSSchedulingTest"
                                        }
                                    },
                                    "SJFSchedulingTest.java": {
                                        "name": "SJFSchedulingTest",
                                        "class": {
                                            "id": "e15cafda-c3e9-468e-8f73-f4d84819d31e",
                                            "functions": {
                                                "initialisation0": {
                                                    "id": "SJFSchedulingTest#initialisation0"
                                                },
                                                "initialisation2": {
                                                    "id": "SJFSchedulingTest#initialisation2"
                                                },
                                                "schedulingOf_TwoProcesses": {
                                                    "id": "SJFSchedulingTest#schedulingOf_TwoProcesses"
                                                },
                                                "scheduling_WithProcessesNotComingBackToBack": {
                                                    "id": "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack"
                                                },
                                                "initialisation1": {
                                                    "id": "SJFSchedulingTest#initialisation1"
                                                },
                                                "initialisation3": {
                                                    "id": "SJFSchedulingTest#initialisation3"
                                                },
                                                "schedulingOfA_ShortestJobArrivingLast": {
                                                    "id": "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast"
                                                },
                                                "constructor": {
                                                    "id": "SJFSchedulingTest#constructor"
                                                },
                                                "scheduling": {
                                                    "id": "SJFSchedulingTest#scheduling"
                                                },
                                                "sort": {
                                                    "id": "SJFSchedulingTest#sort"
                                                },
                                                "schedulingOf_nothing": {
                                                    "id": "SJFSchedulingTest#schedulingOf_nothing"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/scheduling/SJFSchedulingTest.java",
                                            "name": "SJFSchedulingTest"
                                        }
                                    }
                                },
                                "searches": {
                                    "BinarySearch2dArrayTest.java": {
                                        "name": "BinarySearch2dArrayTest",
                                        "class": {
                                            "id": "818bcf17-5891-4579-92cf-55339dbc31ec",
                                            "functions": {
                                                "BinarySearch2dArrayTestNotFound": {
                                                    "id": "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound"
                                                },
                                                "BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn": {
                                                    "id": "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn"
                                                },
                                                "BinarySearch2dArrayTestTargetInMiddle": {
                                                    "id": "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle"
                                                },
                                                "BinarySearch2dArrayTestMiddleSide": {
                                                    "id": "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide"
                                                },
                                                "BinarySearch2dArrayTestUpper": {
                                                    "id": "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper"
                                                },
                                                "BinarySearch2dArrayTestUpperSide": {
                                                    "id": "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide"
                                                },
                                                "BinarySearch2dArrayTestLower": {
                                                    "id": "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower"
                                                },
                                                "BinarySearch2dArrayTestLowerSide": {
                                                    "id": "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide"
                                                },
                                                "BinarySearch2dArrayTestOneRow": {
                                                    "id": "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow"
                                                },
                                                "BinarySearch2dArrayTestMiddle": {
                                                    "id": "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle"
                                                },
                                                "BinarySearch2dArrayTestEmptyArray": {
                                                    "id": "BinarySearch2dArrayTest#BinarySearch2dArrayTestEmptyArray"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/searches/BinarySearch2dArrayTest.java",
                                            "name": "BinarySearch2dArrayTest"
                                        }
                                    },
                                    "BreadthFirstSearchTest.java": {
                                        "name": "BreadthFirstSearchTest",
                                        "class": {
                                            "id": "61517959-b449-4a00-9410-76a072a763e4",
                                            "functions": {
                                                "searchI": {
                                                    "id": "BreadthFirstSearchTest#searchI"
                                                },
                                                "searchG": {
                                                    "id": "BreadthFirstSearchTest#searchG"
                                                },
                                                "searchE": {
                                                    "id": "BreadthFirstSearchTest#searchE"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/searches/BreadthFirstSearchTest.java",
                                            "name": "BreadthFirstSearchTest"
                                        }
                                    },
                                    "HowManyTimesRotatedTest.java": {
                                        "name": "HowManyTimesRotatedTest",
                                        "class": {
                                            "id": "e727569d-f36d-4858-bca1-c8492cca8aa4",
                                            "functions": {
                                                "testHowManyTimesRotated": {
                                                    "id": "HowManyTimesRotatedTest#testHowManyTimesRotated"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/searches/HowManyTimesRotatedTest.java",
                                            "name": "HowManyTimesRotatedTest"
                                        }
                                    },
                                    "KMPSearchTest.java": {
                                        "name": "KMPSearchTest",
                                        "class": {
                                            "id": "8ac0b298-bac2-48bb-9a6d-e7165e9c6916",
                                            "functions": {
                                                "KMPSearchTestFront": {
                                                    "id": "KMPSearchTest#KMPSearchTestFront"
                                                },
                                                "KMPSearchTestMiddle": {
                                                    "id": "KMPSearchTest#KMPSearchTestMiddle"
                                                },
                                                "KMPSearchTest4": {
                                                    "id": "KMPSearchTest#KMPSearchTest4"
                                                },
                                                "KMPSearchTestLast": {
                                                    "id": "KMPSearchTest#KMPSearchTestLast"
                                                },
                                                "KMPSearchTestNotFound": {
                                                    "id": "KMPSearchTest#KMPSearchTestNotFound"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/searches/KMPSearchTest.java",
                                            "name": "KMPSearchTest"
                                        }
                                    },
                                    "OrderAgnosticBinarySearchTest.java": {
                                        "name": "OrderAgnosticBinarySearchTest",
                                        "class": {
                                            "id": "546ded1e-6c7d-4e79-92e5-1adaba1a6558",
                                            "functions": {
                                                "ElementInMiddle": {
                                                    "id": "OrderAgnosticBinarySearchTest#ElementInMiddle"
                                                },
                                                "LeftHalfAscOrder": {
                                                    "id": "OrderAgnosticBinarySearchTest#LeftHalfAscOrder"
                                                },
                                                "RightHalfDescOrder": {
                                                    "id": "OrderAgnosticBinarySearchTest#RightHalfDescOrder"
                                                },
                                                "LeftHalfDescOrder": {
                                                    "id": "OrderAgnosticBinarySearchTest#LeftHalfDescOrder"
                                                },
                                                "ElementNotFound": {
                                                    "id": "OrderAgnosticBinarySearchTest#ElementNotFound"
                                                },
                                                "RightHalfAscOrder": {
                                                    "id": "OrderAgnosticBinarySearchTest#RightHalfAscOrder"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/searches/OrderAgnosticBinarySearchTest.java",
                                            "name": "OrderAgnosticBinarySearchTest"
                                        }
                                    },
                                    "QuickSelectTest.java": {
                                        "name": "QuickSelectTest",
                                        "class": {
                                            "id": "0d5cdbba-d40b-458b-ae87-09b322da46c5",
                                            "functions": {
                                                "quickSelectMaximumOfTwoElements": {
                                                    "id": "QuickSelectTest#quickSelectMaximumOfTwoElements"
                                                },
                                                "quickSelect30thPercentileOfManyElements": {
                                                    "id": "QuickSelectTest#quickSelect30thPercentileOfManyElements"
                                                },
                                                "quickSelectMaximumOfManyElements": {
                                                    "id": "QuickSelectTest#quickSelectMaximumOfManyElements"
                                                },
                                                "quickSelectMedianOfManyElements": {
                                                    "id": "QuickSelectTest#quickSelectMedianOfManyElements"
                                                },
                                                "quickSelect30thPercentileOf10Elements": {
                                                    "id": "QuickSelectTest#quickSelect30thPercentileOf10Elements"
                                                },
                                                "quickSelect70thPercentileOf10Elements": {
                                                    "id": "QuickSelectTest#quickSelect70thPercentileOf10Elements"
                                                },
                                                "getSortedCopyOfList": {
                                                    "id": "QuickSelectTest#getSortedCopyOfList"
                                                },
                                                "quickSelectMedianOfManyCharacters": {
                                                    "id": "QuickSelectTest#quickSelectMedianOfManyCharacters"
                                                },
                                                "quickSelectMaximumOfThreeElements": {
                                                    "id": "QuickSelectTest#quickSelectMaximumOfThreeElements"
                                                },
                                                "quickSelectMedianOfThreeElements": {
                                                    "id": "QuickSelectTest#quickSelectMedianOfThreeElements"
                                                },
                                                "quickSelectIndexOutOfLeftBound": {
                                                    "id": "QuickSelectTest#quickSelectIndexOutOfLeftBound"
                                                },
                                                "quickSelect70thPercentileOfManyElements": {
                                                    "id": "QuickSelectTest#quickSelect70thPercentileOfManyElements"
                                                },
                                                "quickSelectMedianOfThreeCharacters": {
                                                    "id": "QuickSelectTest#quickSelectMedianOfThreeCharacters"
                                                },
                                                "generateRandomCharacters": {
                                                    "id": "QuickSelectTest#generateRandomCharacters"
                                                },
                                                "quickSelectMedianOfOneElement": {
                                                    "id": "QuickSelectTest#quickSelectMedianOfOneElement"
                                                },
                                                "quickSelectMinimumOfTwoElements": {
                                                    "id": "QuickSelectTest#quickSelectMinimumOfTwoElements"
                                                },
                                                "quickSelectEmptyList": {
                                                    "id": "QuickSelectTest#quickSelectEmptyList"
                                                },
                                                "quickSelectIndexOutOfRightBound": {
                                                    "id": "QuickSelectTest#quickSelectIndexOutOfRightBound"
                                                },
                                                "quickSelectMinimumOfOneElement": {
                                                    "id": "QuickSelectTest#quickSelectMinimumOfOneElement"
                                                },
                                                "quickSelectMinimumOfManyElements": {
                                                    "id": "QuickSelectTest#quickSelectMinimumOfManyElements"
                                                },
                                                "quickSelectMinimumOfThreeElements": {
                                                    "id": "QuickSelectTest#quickSelectMinimumOfThreeElements"
                                                },
                                                "quickSelectMaximumOfOneElement": {
                                                    "id": "QuickSelectTest#quickSelectMaximumOfOneElement"
                                                },
                                                "quickSelectNullList": {
                                                    "id": "QuickSelectTest#quickSelectNullList"
                                                },
                                                "generateRandomIntegers": {
                                                    "id": "QuickSelectTest#generateRandomIntegers"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/searches/QuickSelectTest.java",
                                            "name": "QuickSelectTest"
                                        }
                                    },
                                    "RabinKarpAlgorithmTest.java": {
                                        "name": "RabinKarpAlgorithmTest",
                                        "class": {
                                            "id": "107df0a5-5208-4e96-8da3-ce90a320bc90",
                                            "functions": {
                                                "RabinKarpAlgorithmTestLast": {
                                                    "id": "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast"
                                                },
                                                "RabinKarpAlgorithmTestMiddle": {
                                                    "id": "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle"
                                                },
                                                "RabinKarpAlgorithmTestFront": {
                                                    "id": "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront"
                                                },
                                                "RabinKarpAlgorithmTestNotFound": {
                                                    "id": "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound"
                                                },
                                                "RabinKarpAlgorithmTestExample": {
                                                    "id": "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/searches/RabinKarpAlgorithmTest.java",
                                            "name": "RabinKarpAlgorithmTest"
                                        }
                                    },
                                    "RowColumnWiseSorted2dArrayBinarySearchTest.java": {
                                        "name": "RowColumnWiseSorted2dArrayBinarySearchTest",
                                        "class": {
                                            "id": "72d0c366-cc55-49f3-8480-9f5f643e143e",
                                            "functions": {
                                                "rowColumnSorted2dArrayBinarySearchTestMiddle": {
                                                    "id": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle"
                                                },
                                                "rowColumnSorted2dArray_BinarySearchTestNotFound": {
                                                    "id": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound"
                                                },
                                                "rowColumnSorted2dArray_BinarySearchTestUpper": {
                                                    "id": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper"
                                                },
                                                "rowColumnSorted2dArrayBinarySearchTestSide": {
                                                    "id": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide"
                                                },
                                                "rowColumnSorted2dArray_BinarySearchTestUpperSide": {
                                                    "id": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide"
                                                },
                                                "rowColumnSorted2dArray_BinarySearchTestLower": {
                                                    "id": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower"
                                                },
                                                "rowColumnSorted2dArray_BinarySearchTestLowerSide": {
                                                    "id": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/searches/RowColumnWiseSorted2dArrayBinarySearchTest.java",
                                            "name": "RowColumnWiseSorted2dArrayBinarySearchTest"
                                        }
                                    },
                                    "TestSearchInARowAndColWiseSortedMatrix.java": {
                                        "name": "TestSearchInARowAndColWiseSortedMatrix",
                                        "class": {
                                            "id": "578935a4-1374-4bd9-9821-d34df4a889b6",
                                            "functions": {
                                                "searchItem": {
                                                    "id": "TestSearchInARowAndColWiseSortedMatrix#searchItem"
                                                },
                                                "notFound": {
                                                    "id": "TestSearchInARowAndColWiseSortedMatrix#notFound"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/searches/TestSearchInARowAndColWiseSortedMatrix.java",
                                            "name": "TestSearchInARowAndColWiseSortedMatrix"
                                        }
                                    },
                                    "sortOrderAgnosticBinarySearchTest.java": {
                                        "name": "sortOrderAgnosticBinarySearchTest",
                                        "class": {
                                            "id": "6a1849bf-a4b2-40a7-8fdf-e907b474ea5c",
                                            "functions": {
                                                "testAscending": {
                                                    "id": "sortOrderAgnosticBinarySearchTest#testAscending"
                                                },
                                                "testDescending": {
                                                    "id": "sortOrderAgnosticBinarySearchTest#testDescending"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/searches/sortOrderAgnosticBinarySearchTest.java",
                                            "name": "sortOrderAgnosticBinarySearchTest"
                                        }
                                    }
                                },
                                "sorts": {
                                    "BeadSortTest.java": {
                                        "name": "BeadSortTest",
                                        "class": {
                                            "id": "24e51b83-3f7a-4da0-819a-0ca6f4f8cd99",
                                            "functions": {
                                                "bogoSortDuplicateIntegerArray": {
                                                    "id": "BeadSortTest#bogoSortDuplicateIntegerArray"
                                                },
                                                "beadSortEmptyArray": {
                                                    "id": "BeadSortTest#beadSortEmptyArray"
                                                },
                                                "beadSortSingleIntegerArray": {
                                                    "id": "BeadSortTest#beadSortSingleIntegerArray"
                                                },
                                                "bogoSortNonDuplicateIntegerArray": {
                                                    "id": "BeadSortTest#bogoSortNonDuplicateIntegerArray"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/BeadSortTest.java",
                                            "name": "BeadSortTest"
                                        }
                                    },
                                    "BinaryInsertionSortTest.java": {
                                        "name": "BinaryInsertionSortTest",
                                        "class": {
                                            "id": "5d03b4ca-3b62-43fb-8b65-1f6ac12dc737",
                                            "functions": {
                                                "BinaryInsertionSortTestDuplicate": {
                                                    "id": "BinaryInsertionSortTest#BinaryInsertionSortTestDuplicate"
                                                },
                                                "BinaryInsertionSortTestNonDuplicate": {
                                                    "id": "BinaryInsertionSortTest#BinaryInsertionSortTestNonDuplicate"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/BinaryInsertionSortTest.java",
                                            "name": "BinaryInsertionSortTest"
                                        }
                                    },
                                    "BogoSortTest.java": {
                                        "name": "BogoSortTest",
                                        "class": {
                                            "id": "d64bd482-2474-471d-acd3-47008df2382d",
                                            "functions": {
                                                "bogoSortSingleStringArray": {
                                                    "id": "BogoSortTest#bogoSortSingleStringArray"
                                                },
                                                "bogoSortDuplicateIntegerArray": {
                                                    "id": "BogoSortTest#bogoSortDuplicateIntegerArray"
                                                },
                                                "bogoSortNonDuplicateStringArray": {
                                                    "id": "BogoSortTest#bogoSortNonDuplicateStringArray"
                                                },
                                                "bogoSortNonDuplicateIntegerArray": {
                                                    "id": "BogoSortTest#bogoSortNonDuplicateIntegerArray"
                                                },
                                                "bogoSortSingleIntegerArray": {
                                                    "id": "BogoSortTest#bogoSortSingleIntegerArray"
                                                },
                                                "bogoSortDuplicateStringArray": {
                                                    "id": "BogoSortTest#bogoSortDuplicateStringArray"
                                                },
                                                "bogoSortEmptyArray": {
                                                    "id": "BogoSortTest#bogoSortEmptyArray"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/BogoSortTest.java",
                                            "name": "BogoSortTest"
                                        }
                                    },
                                    "BubbleSortTest.java": {
                                        "name": "BubbleSortTest",
                                        "class": {
                                            "id": "93513d8c-4ab6-4751-a9b0-8d2243b15bea",
                                            "functions": {
                                                "bubbleSortStringArray": {
                                                    "id": "BubbleSortTest#bubbleSortStringArray"
                                                },
                                                "bubbleSortSingleIntegerElementArray": {
                                                    "id": "BubbleSortTest#bubbleSortSingleIntegerElementArray"
                                                },
                                                "bubbleSortSingleStringElementArray": {
                                                    "id": "BubbleSortTest#bubbleSortSingleStringElementArray"
                                                },
                                                "bubbleSortIntegerArray": {
                                                    "id": "BubbleSortTest#bubbleSortIntegerArray"
                                                },
                                                "bubbleSortEmptyArray": {
                                                    "id": "BubbleSortTest#bubbleSortEmptyArray"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/BubbleSortTest.java",
                                            "name": "BubbleSortTest"
                                        }
                                    },
                                    "BucketSortTest.java": {
                                        "name": "BucketSortTest",
                                        "class": {
                                            "id": "42f46596-d781-4e94-beaf-85930acd9432",
                                            "functions": {
                                                "bucketSortSingleIntegerArray": {
                                                    "id": "BucketSortTest#bucketSortSingleIntegerArray"
                                                },
                                                "bucketSortDuplicateIntegerArrayWithNegativeNum": {
                                                    "id": "BucketSortTest#bucketSortDuplicateIntegerArrayWithNegativeNum"
                                                },
                                                "bucketSortNonDuplicateIntegerArrayWithNegativeNum": {
                                                    "id": "BucketSortTest#bucketSortNonDuplicateIntegerArrayWithNegativeNum"
                                                },
                                                "bucketSortNonDuplicateIntegerArray": {
                                                    "id": "BucketSortTest#bucketSortNonDuplicateIntegerArray"
                                                },
                                                "bucketSortDuplicateIntegerArray": {
                                                    "id": "BucketSortTest#bucketSortDuplicateIntegerArray"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/BucketSortTest.java",
                                            "name": "BucketSortTest"
                                        }
                                    },
                                    "CocktailShakerSortTest.java": {
                                        "name": "CocktailShakerSortTest",
                                        "class": {
                                            "id": "79378b8c-7389-4648-88be-64f9c80e761e",
                                            "functions": {
                                                "cocktailShakerSortSingleStringElementArray": {
                                                    "id": "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray"
                                                },
                                                "cocktailShakerSortIntegerArray": {
                                                    "id": "CocktailShakerSortTest#cocktailShakerSortIntegerArray"
                                                },
                                                "cocktailShakerSortEmptyArray": {
                                                    "id": "CocktailShakerSortTest#cocktailShakerSortEmptyArray"
                                                },
                                                "cocktailShakerSortStringArray": {
                                                    "id": "CocktailShakerSortTest#cocktailShakerSortStringArray"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/CocktailShakerSortTest.java",
                                            "name": "CocktailShakerSortTest"
                                        }
                                    },
                                    "CombSortTest.java": {
                                        "name": "CombSortTest",
                                        "class": {
                                            "id": "6fe0f459-a8c2-4b0e-964c-fc3968fab636",
                                            "functions": {
                                                "combSortEmptyArray": {
                                                    "id": "CombSortTest#combSortEmptyArray"
                                                },
                                                "combSortDoubleArray": {
                                                    "id": "CombSortTest#combSortDoubleArray"
                                                },
                                                "combSortSingleStringElement": {
                                                    "id": "CombSortTest#combSortSingleStringElement"
                                                },
                                                "combSortIntegerArray": {
                                                    "id": "CombSortTest#combSortIntegerArray"
                                                },
                                                "combSortStringArray": {
                                                    "id": "CombSortTest#combSortStringArray"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/CombSortTest.java",
                                            "name": "CombSortTest"
                                        }
                                    },
                                    "DualPivotQuickSortTest.java": {
                                        "name": "DualPivotQuickSortTest",
                                        "class": {
                                            "id": "2bddc29e-7e25-4978-ad39-66e114ba2008",
                                            "functions": {
                                                "quickSortWithIntegerArrayShouldPass": {
                                                    "id": "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass"
                                                },
                                                "quickSortForArrayWithNegativeValuesShouldPass": {
                                                    "id": "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass"
                                                },
                                                "quickSortSingleValueArrayShouldPass": {
                                                    "id": "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass"
                                                },
                                                "quickSortEmptyArrayShouldPass": {
                                                    "id": "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass"
                                                },
                                                "quickSortWithStringArrayShouldPass": {
                                                    "id": "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass"
                                                },
                                                "quickSortForArrayWithDuplicateValuesShouldPass": {
                                                    "id": "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/DualPivotQuickSortTest.java",
                                            "name": "DualPivotQuickSortTest"
                                        }
                                    },
                                    "DutchNationalFlagSortTest.java": {
                                        "name": "DutchNationalFlagSortTest",
                                        "class": {
                                            "id": "eac3d5bd-fefb-4e3c-ab21-a16a1db7f5d9",
                                            "functions": {
                                                "DNFSTestOdd": {
                                                    "id": "DutchNationalFlagSortTest#DNFSTestOdd"
                                                },
                                                "DNFSTestEvenStringsMidGiven": {
                                                    "id": "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven"
                                                },
                                                "DNFSTestEvenStrings": {
                                                    "id": "DutchNationalFlagSortTest#DNFSTestEvenStrings"
                                                },
                                                "DNFSTestEvenMidGiven": {
                                                    "id": "DutchNationalFlagSortTest#DNFSTestEvenMidGiven"
                                                },
                                                "DNFSTestOddMidGiven": {
                                                    "id": "DutchNationalFlagSortTest#DNFSTestOddMidGiven"
                                                },
                                                "DNFSTestOddStrings": {
                                                    "id": "DutchNationalFlagSortTest#DNFSTestOddStrings"
                                                },
                                                "DNFSTestEven": {
                                                    "id": "DutchNationalFlagSortTest#DNFSTestEven"
                                                },
                                                "DNFSTestOddStringsMidGiven": {
                                                    "id": "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/DutchNationalFlagSortTest.java",
                                            "name": "DutchNationalFlagSortTest"
                                        }
                                    },
                                    "HeapSortTest.java": {
                                        "name": "HeapSortTest",
                                        "class": {
                                            "id": "b4bcd507-3976-4c4a-890c-096d65334d88",
                                            "functions": {
                                                "getSortAlgorithm": {
                                                    "id": "HeapSortTest#getSortAlgorithm"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/HeapSortTest.java",
                                            "name": "HeapSortTest"
                                        }
                                    },
                                    "InsertionSortTest.java": {
                                        "name": "InsertionSortTest",
                                        "class": {
                                            "id": "ecc0091f-c4eb-488d-bb7d-f3270b211d8a",
                                            "functions": {
                                                "insertionSortClassicalForArrayWithNegativeValuesShouldPass": {
                                                    "id": "InsertionSortTest#insertionSortClassicalForArrayWithNegativeValuesShouldPass"
                                                },
                                                "testSingleValue": {
                                                    "id": "InsertionSortTest#testSingleValue"
                                                },
                                                "testWithStringArray": {
                                                    "id": "InsertionSortTest#testWithStringArray"
                                                },
                                                "insertionSortClassicalWithIntegerArrayShouldPass": {
                                                    "id": "InsertionSortTest#insertionSortClassicalWithIntegerArrayShouldPass"
                                                },
                                                "insertionSortClassicalWithRandomArrayPass": {
                                                    "id": "InsertionSortTest#insertionSortClassicalWithRandomArrayPass"
                                                },
                                                "testWithNegativeValues": {
                                                    "id": "InsertionSortTest#testWithNegativeValues"
                                                },
                                                "testWithDuplicates": {
                                                    "id": "InsertionSortTest#testWithDuplicates"
                                                },
                                                "insertionSortClassicalWithStringArrayShouldPass": {
                                                    "id": "InsertionSortTest#insertionSortClassicalWithStringArrayShouldPass"
                                                },
                                                "testWithRandomArray": {
                                                    "id": "InsertionSortTest#testWithRandomArray"
                                                },
                                                "insertionSortClassicalSortSingleValueArrayShouldPass": {
                                                    "id": "InsertionSortTest#insertionSortClassicalSortSingleValueArrayShouldPass"
                                                },
                                                "testIntegerArray": {
                                                    "id": "InsertionSortTest#testIntegerArray"
                                                },
                                                "insertionSortClassicalForArrayWithDuplicateValuesShouldPass": {
                                                    "id": "InsertionSortTest#insertionSortClassicalForArrayWithDuplicateValuesShouldPass"
                                                },
                                                "testEmptyArray": {
                                                    "id": "InsertionSortTest#testEmptyArray"
                                                },
                                                "insertionSortSortEmptyArrayShouldPass": {
                                                    "id": "InsertionSortTest#insertionSortSortEmptyArrayShouldPass"
                                                },
                                                "setUp": {
                                                    "id": "InsertionSortTest#setUp"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/InsertionSortTest.java",
                                            "name": "InsertionSortTest"
                                        }
                                    },
                                    "IntrospectiveSortTest.java": {
                                        "name": "IntrospectiveSortTest",
                                        "class": {
                                            "id": "27b61b63-2c35-43c0-99a7-8ef3cd80b918",
                                            "functions": {
                                                "StrandSortDuplicateTest": {
                                                    "id": "IntrospectiveSortTest#StrandSortDuplicateTest"
                                                },
                                                "StrandSortEmptyTest": {
                                                    "id": "IntrospectiveSortTest#StrandSortEmptyTest"
                                                },
                                                "StrandSortNullTest": {
                                                    "id": "IntrospectiveSortTest#StrandSortNullTest"
                                                },
                                                "StrandSortNegativeAndPositiveTest": {
                                                    "id": "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest"
                                                },
                                                "StrandSortNonDuplicateTest": {
                                                    "id": "IntrospectiveSortTest#StrandSortNonDuplicateTest"
                                                },
                                                "allSameTest": {
                                                    "id": "IntrospectiveSortTest#allSameTest"
                                                },
                                                "StrandSortNegativeTest": {
                                                    "id": "IntrospectiveSortTest#StrandSortNegativeTest"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/IntrospectiveSortTest.java",
                                            "name": "IntrospectiveSortTest"
                                        }
                                    },
                                    "MergeSortRecursiveTest.java": {
                                        "name": "MergeSortRecursiveTest",
                                        "class": {
                                            "id": "cfa5e0f8-cd75-490b-9097-b6be580eb72a",
                                            "functions": {
                                                "testMergeSortRecursiveCase2": {
                                                    "id": "MergeSortRecursiveTest#testMergeSortRecursiveCase2"
                                                },
                                                "testMergeSortRecursiveCase1": {
                                                    "id": "MergeSortRecursiveTest#testMergeSortRecursiveCase1"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/MergeSortRecursiveTest.java",
                                            "name": "MergeSortRecursiveTest"
                                        }
                                    },
                                    "MergeSortTest.java": {
                                        "name": "MergeSortTest",
                                        "class": {
                                            "id": "fbcd9283-a4f4-41ce-b4fd-d98e13999334",
                                            "functions": {
                                                "getSortAlgorithm": {
                                                    "id": "MergeSortTest#getSortAlgorithm"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/MergeSortTest.java",
                                            "name": "MergeSortTest"
                                        }
                                    },
                                    "OddEvenSortTest.java": {
                                        "name": "OddEvenSortTest",
                                        "class": {
                                            "id": "136ce1df-b1f6-4db0-a510-ce20c47be77b",
                                            "functions": {
                                                "oddEvenSortIntegerArray": {
                                                    "id": "OddEvenSortTest#oddEvenSortIntegerArray"
                                                },
                                                "oddEvenSortEmptyArray": {
                                                    "id": "OddEvenSortTest#oddEvenSortEmptyArray"
                                                },
                                                "oddEvenSortNaturalNumberArray": {
                                                    "id": "OddEvenSortTest#oddEvenSortNaturalNumberArray"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/OddEvenSortTest.java",
                                            "name": "OddEvenSortTest"
                                        }
                                    },
                                    "QuickSortTest.java": {
                                        "name": "QuickSortTest",
                                        "class": {
                                            "id": "6287ac71-cacb-4c03-b169-05c2d09204ce",
                                            "functions": {
                                                "getSortAlgorithm": {
                                                    "id": "QuickSortTest#getSortAlgorithm"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/QuickSortTest.java",
                                            "name": "QuickSortTest"
                                        }
                                    },
                                    "SelectionSortTest.java": {
                                        "name": "SelectionSortTest",
                                        "class": {
                                            "id": "e22a0382-b20a-479d-ac32-37611201387a",
                                            "functions": {
                                                "emptyArrTest": {
                                                    "id": "SelectionSortTest#emptyArrTest"
                                                },
                                                "IntegerArrTest": {
                                                    "id": "SelectionSortTest#IntegerArrTest"
                                                },
                                                "StringArrTest": {
                                                    "id": "SelectionSortTest#StringArrTest"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/SelectionSortTest.java",
                                            "name": "SelectionSortTest"
                                        }
                                    },
                                    "ShellSortTest.java": {
                                        "name": "ShellSortTest",
                                        "class": {
                                            "id": "62eb9796-7149-4d98-93d0-c53ddd13ebec",
                                            "functions": {
                                                "ShellSortDuplicateIntegerArray": {
                                                    "id": "ShellSortTest#ShellSortDuplicateIntegerArray"
                                                },
                                                "ShellSortEmptyArray": {
                                                    "id": "ShellSortTest#ShellSortEmptyArray"
                                                },
                                                "ShellSortNonDuplicateIntegerArray": {
                                                    "id": "ShellSortTest#ShellSortNonDuplicateIntegerArray"
                                                },
                                                "ShellSortDuplicateStringArray": {
                                                    "id": "ShellSortTest#ShellSortDuplicateStringArray"
                                                },
                                                "ShellSortSingleStringArray": {
                                                    "id": "ShellSortTest#ShellSortSingleStringArray"
                                                },
                                                "ShellSortNonDuplicateStringArray": {
                                                    "id": "ShellSortTest#ShellSortNonDuplicateStringArray"
                                                },
                                                "ShellSortSingleIntegerArray": {
                                                    "id": "ShellSortTest#ShellSortSingleIntegerArray"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/ShellSortTest.java",
                                            "name": "ShellSortTest"
                                        }
                                    },
                                    "SimpleSortTest.java": {
                                        "name": "SimpleSortTest",
                                        "class": {
                                            "id": "bc9d7d9a-5073-4a4c-80cf-5f14a6d667e8",
                                            "functions": {
                                                "simpleSortEmptyArray": {
                                                    "id": "SimpleSortTest#simpleSortEmptyArray"
                                                },
                                                "simpleSortSingleIntegerArray": {
                                                    "id": "SimpleSortTest#simpleSortSingleIntegerArray"
                                                },
                                                "simpleSortDuplicateStringArray": {
                                                    "id": "SimpleSortTest#simpleSortDuplicateStringArray"
                                                },
                                                "simpleSortDuplicateIntegerArray": {
                                                    "id": "SimpleSortTest#simpleSortDuplicateIntegerArray"
                                                },
                                                "simpleSortSingleStringArray": {
                                                    "id": "SimpleSortTest#simpleSortSingleStringArray"
                                                },
                                                "simpleSortNonDuplicateIntegerArray": {
                                                    "id": "SimpleSortTest#simpleSortNonDuplicateIntegerArray"
                                                },
                                                "simpleSortNonDuplicateStringArray": {
                                                    "id": "SimpleSortTest#simpleSortNonDuplicateStringArray"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/SimpleSortTest.java",
                                            "name": "SimpleSortTest"
                                        }
                                    },
                                    "SlowSortTest.java": {
                                        "name": "SlowSortTest",
                                        "class": {
                                            "id": "2f8c71f5-20f1-4356-9a00-328ac0c593fd",
                                            "functions": {
                                                "slowSortSingleIntegerElementArray": {
                                                    "id": "SlowSortTest#slowSortSingleIntegerElementArray"
                                                },
                                                "slowSortSingleStringElementArray": {
                                                    "id": "SlowSortTest#slowSortSingleStringElementArray"
                                                },
                                                "slowSortDuplicateStringArray": {
                                                    "id": "SlowSortTest#slowSortDuplicateStringArray"
                                                },
                                                "slowSortStringArray": {
                                                    "id": "SlowSortTest#slowSortStringArray"
                                                },
                                                "slowSortEmptyArray": {
                                                    "id": "SlowSortTest#slowSortEmptyArray"
                                                },
                                                "slowSortDuplicateIntegerArray": {
                                                    "id": "SlowSortTest#slowSortDuplicateIntegerArray"
                                                },
                                                "slowSortIntegerArray": {
                                                    "id": "SlowSortTest#slowSortIntegerArray"
                                                },
                                                "slowSortStringSymbolArray": {
                                                    "id": "SlowSortTest#slowSortStringSymbolArray"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/SlowSortTest.java",
                                            "name": "SlowSortTest"
                                        }
                                    },
                                    "SortUtilsRandomGeneratorTest.java": {
                                        "name": "SortUtilsRandomGeneratorTest",
                                        "class": {
                                            "id": "62ddeb12-1d59-46f9-9593-9b865b6a5e70",
                                            "functions": {
                                                "generateArray": {
                                                    "id": "SortUtilsRandomGeneratorTest#generateArray"
                                                },
                                                "generateArrayEmpty": {
                                                    "id": "SortUtilsRandomGeneratorTest#generateArrayEmpty"
                                                },
                                                "generateDouble": {
                                                    "id": "SortUtilsRandomGeneratorTest#generateDouble"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/SortUtilsRandomGeneratorTest.java",
                                            "name": "SortUtilsRandomGeneratorTest"
                                        }
                                    },
                                    "SortUtilsTest.java": {
                                        "name": "SortUtilsTest",
                                        "class": {
                                            "id": "a49d63ef-1b30-4c88-9870-d47bcbb237e6",
                                            "functions": {
                                                "isSortedArrayFalse": {
                                                    "id": "SortUtilsTest#isSortedArrayFalse"
                                                },
                                                "isSortedArrayTrue": {
                                                    "id": "SortUtilsTest#isSortedArrayTrue"
                                                },
                                                "isSortedListFalse": {
                                                    "id": "SortUtilsTest#isSortedListFalse"
                                                },
                                                "isSortedEmptyArray": {
                                                    "id": "SortUtilsTest#isSortedEmptyArray"
                                                },
                                                "isSortedListTrue": {
                                                    "id": "SortUtilsTest#isSortedListTrue"
                                                },
                                                "isSortedWithSingleElement": {
                                                    "id": "SortUtilsTest#isSortedWithSingleElement"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/SortUtilsTest.java",
                                            "name": "SortUtilsTest"
                                        }
                                    },
                                    "SortingAlgorithmTest.java": {
                                        "name": "SortingAlgorithmTest",
                                        "class": {
                                            "id": "aa8b64e7-9b64-4900-bd9c-ae3422c9df9c",
                                            "functions": {
                                                "shouldAcceptWhenArrayWithAllPositiveValuesIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed"
                                                },
                                                "shouldAcceptWhenStringValueArrayIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed"
                                                },
                                                "shouldAcceptWhenRandomArrayIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed"
                                                },
                                                "shouldAcceptWhenArrayWithDuplicateValueIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed"
                                                },
                                                "shouldAcceptWhenSingleValuedArrayIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed"
                                                },
                                                "shouldAcceptWhenListWithAllPositiveValuesIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed"
                                                },
                                                "shouldAcceptWhenArrayWithAllNegativeValuesIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed"
                                                },
                                                "shouldAcceptWhenArrayWithRealNumberValuesIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed"
                                                },
                                                "shouldAcceptWhenEmptyListIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed"
                                                },
                                                "shouldAcceptWhenListWithDuplicateValueIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed"
                                                },
                                                "shouldAcceptWhenEmptyArrayIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed"
                                                },
                                                "shouldAcceptWhenSingleValuedListIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed"
                                                },
                                                "shouldAcceptWhenListWithAllNegativeValuesIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed"
                                                },
                                                "shouldAcceptWhenRandomListIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
                                                },
                                                "shouldAcceptWhenListWithRealNumberValuesIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed"
                                                },
                                                "shouldAcceptWhenStringValueListIsPassed": {
                                                    "id": "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed"
                                                },
                                                "getSortAlgorithm": {
                                                    "id": "SortingAlgorithmTest#getSortAlgorithm"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/SortingAlgorithmTest.java",
                                            "name": "SortingAlgorithmTest"
                                        }
                                    },
                                    "StrandSortTest.java": {
                                        "name": "StrandSortTest",
                                        "class": {
                                            "id": "d700083c-8fcd-42cd-ad39-7075860f7028",
                                            "functions": {
                                                "StrandSortDuplicateTest": {
                                                    "id": "StrandSortTest#StrandSortDuplicateTest"
                                                },
                                                "StrandSortNonDuplicateTest": {
                                                    "id": "StrandSortTest#StrandSortNonDuplicateTest"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/StrandSortTest.java",
                                            "name": "StrandSortTest"
                                        }
                                    },
                                    "TimSortTest.java": {
                                        "name": "TimSortTest",
                                        "class": {
                                            "id": "9574f5ec-1163-43cc-b28d-9c7501835469",
                                            "functions": {
                                                "getSortAlgorithm": {
                                                    "id": "TimSortTest#getSortAlgorithm"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/TimSortTest.java",
                                            "name": "TimSortTest"
                                        }
                                    },
                                    "TopologicalSortTest.java": {
                                        "name": "TopologicalSortTest",
                                        "class": {
                                            "id": "e9cc33ac-c42e-4c9d-95a3-22c3ce15d8f0",
                                            "functions": {
                                                "failureTest": {
                                                    "id": "TopologicalSortTest#failureTest"
                                                },
                                                "successTest": {
                                                    "id": "TopologicalSortTest#successTest"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/TopologicalSortTest.java",
                                            "name": "TopologicalSortTest"
                                        }
                                    },
                                    "TreeSortTest.java": {
                                        "name": "TreeSortTest",
                                        "class": {
                                            "id": "fedfed49-7066-42b3-80e1-b3c49d195fef",
                                            "functions": {
                                                "treeSortStringArray": {
                                                    "id": "TreeSortTest#treeSortStringArray"
                                                },
                                                "treeSortEmptyArray": {
                                                    "id": "TreeSortTest#treeSortEmptyArray"
                                                },
                                                "treeSortSingleStringElement": {
                                                    "id": "TreeSortTest#treeSortSingleStringElement"
                                                },
                                                "treeSortIntegerArray": {
                                                    "id": "TreeSortTest#treeSortIntegerArray"
                                                },
                                                "treeSortDoubleArray": {
                                                    "id": "TreeSortTest#treeSortDoubleArray"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/TreeSortTest.java",
                                            "name": "TreeSortTest"
                                        }
                                    },
                                    "WiggleSortTest.java": {
                                        "name": "WiggleSortTest",
                                        "class": {
                                            "id": "53feebd1-c74f-40cc-90ce-b56c01048c46",
                                            "functions": {
                                                "WiggleTestNumbersEven": {
                                                    "id": "WiggleSortTest#WiggleTestNumbersEven"
                                                },
                                                "WiggleTestNumbersOddDuplicates": {
                                                    "id": "WiggleSortTest#WiggleTestNumbersOddDuplicates"
                                                },
                                                "WiggleTestNumbersEvenMultipleDuplicates": {
                                                    "id": "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
                                                },
                                                "WiggleTestNumbersEvenDuplicates": {
                                                    "id": "WiggleSortTest#WiggleTestNumbersEvenDuplicates"
                                                },
                                                "WiggleTestNumbersOddMultipleDuplicates": {
                                                    "id": "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates"
                                                },
                                                "WiggleTestStrings": {
                                                    "id": "WiggleSortTest#WiggleTestStrings"
                                                },
                                                "WiggleTestNumbersOdd": {
                                                    "id": "WiggleSortTest#WiggleTestNumbersOdd"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/sorts/WiggleSortTest.java",
                                            "name": "WiggleSortTest"
                                        }
                                    }
                                },
                                "strings": {
                                    "AlphabeticalTest.java": {
                                        "name": "AlphabeticalTest",
                                        "class": {
                                            "id": "25664a3b-86bf-4c02-83b3-6e69a17ca2e2",
                                            "functions": {
                                                "isAlphabetical": {
                                                    "id": "AlphabeticalTest#isAlphabetical"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/AlphabeticalTest.java",
                                            "name": "AlphabeticalTest"
                                        }
                                    },
                                    "AnagramsTest.java": {
                                        "name": "AnagramsTest",
                                        "class": {
                                            "id": "89e85edd-7730-43e7-9831-17ae41c8010e",
                                            "functions": {
                                                "isAlphabetical": {
                                                    "id": "AnagramsTest#isAlphabetical"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/AnagramsTest.java",
                                            "name": "AnagramsTest"
                                        }
                                    },
                                    "CharacterSameTest.java": {
                                        "name": "CharacterSameTest",
                                        "class": {
                                            "id": "4c787872-eaaf-4924-962e-4e873f4ab127",
                                            "functions": {
                                                "isAllCharactersSame": {
                                                    "id": "CharacterSameTest#isAllCharactersSame"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/CharacterSameTest.java",
                                            "name": "CharacterSameTest"
                                        }
                                    },
                                    "CheckAnagramsTest.java": {
                                        "name": "CheckAnagramsTest",
                                        "class": {
                                            "id": "92a54e9d-c3fa-43e0-bfef-d92409086427",
                                            "functions": {
                                                "CheckSameWordAnagrams": {
                                                    "id": "CheckAnagramsTest#CheckSameWordAnagrams"
                                                },
                                                "CheckDifferentCasesAnagram": {
                                                    "id": "CheckAnagramsTest#CheckDifferentCasesAnagram"
                                                },
                                                "CheckAnagrams": {
                                                    "id": "CheckAnagramsTest#CheckAnagrams"
                                                },
                                                "CheckFalseAnagrams": {
                                                    "id": "CheckAnagramsTest#CheckFalseAnagrams"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/CheckAnagramsTest.java",
                                            "name": "CheckAnagramsTest"
                                        }
                                    },
                                    "CheckVowelsTest.java": {
                                        "name": "CheckVowelsTest",
                                        "class": {
                                            "id": "5d3927b9-9f0f-464f-a76d-06c994b7908d",
                                            "functions": {
                                                "isVowel": {
                                                    "id": "CheckVowelsTest#isVowel"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/CheckVowelsTest.java",
                                            "name": "CheckVowelsTest"
                                        }
                                    },
                                    "HammingDistanceTest.java": {
                                        "name": "HammingDistanceTest",
                                        "class": {
                                            "id": "f40410e4-8c22-4a69-a13e-329caecc4de0",
                                            "functions": {
                                                "testNotEqualStringLengths": {
                                                    "id": "HammingDistanceTest#testNotEqualStringLengths"
                                                },
                                                "testHammingDistance": {
                                                    "id": "HammingDistanceTest#testHammingDistance"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/HammingDistanceTest.java",
                                            "name": "HammingDistanceTest"
                                        }
                                    },
                                    "IsomorphicTest.java": {
                                        "name": "IsomorphicTest",
                                        "class": {
                                            "id": "eb801baf-d0dc-4e77-8623-e4cc160307b8",
                                            "functions": {
                                                "main": {
                                                    "id": "IsomorphicTest#main"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/IsomorphicTest.java",
                                            "name": "IsomorphicTest"
                                        }
                                    },
                                    "LetterCombinationsOfPhoneNumberTest.java": {
                                        "name": "LetterCombinationsOfPhoneNumberTest",
                                        "class": {
                                            "id": "a2cc1b1c-5dca-41bc-b72d-54a1d21186db",
                                            "functions": {
                                                "letterCombinationsOfPhoneNumber": {
                                                    "id": "LetterCombinationsOfPhoneNumberTest#letterCombinationsOfPhoneNumber"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/LetterCombinationsOfPhoneNumberTest.java",
                                            "name": "LetterCombinationsOfPhoneNumberTest"
                                        }
                                    },
                                    "LowerTest.java": {
                                        "name": "LowerTest",
                                        "class": {
                                            "id": "6ba1cf8d-4747-4526-b7b9-b75688a8bef1",
                                            "functions": {
                                                "toLowerCase": {
                                                    "id": "LowerTest#toLowerCase"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/LowerTest.java",
                                            "name": "LowerTest"
                                        }
                                    },
                                    "MyAtoiTest.java": {
                                        "name": "MyAtoiTest",
                                        "class": {
                                            "id": "fb0fb2aa-f9f4-4eed-8348-ef954b63b565",
                                            "functions": {
                                                "testOne": {
                                                    "id": "MyAtoiTest#testOne"
                                                },
                                                "testSeven": {
                                                    "id": "MyAtoiTest#testSeven"
                                                },
                                                "testThree": {
                                                    "id": "MyAtoiTest#testThree"
                                                },
                                                "testSix": {
                                                    "id": "MyAtoiTest#testSix"
                                                },
                                                "testFour": {
                                                    "id": "MyAtoiTest#testFour"
                                                },
                                                "testFive": {
                                                    "id": "MyAtoiTest#testFive"
                                                },
                                                "testTwo": {
                                                    "id": "MyAtoiTest#testTwo"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/MyAtoiTest.java",
                                            "name": "MyAtoiTest"
                                        }
                                    },
                                    "PalindromeTest.java": {
                                        "name": "PalindromeTest",
                                        "class": {
                                            "id": "e8fc28d4-2e66-4216-bf4f-5a8a8dbd3f51",
                                            "functions": {
                                                "palindrome": {
                                                    "id": "PalindromeTest#palindrome"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/PalindromeTest.java",
                                            "name": "PalindromeTest"
                                        }
                                    },
                                    "PangramTest.java": {
                                        "name": "PangramTest",
                                        "class": {
                                            "id": "f5802797-a2d1-44d4-80a5-3f9dfecc7da7",
                                            "functions": {
                                                "testPangram": {
                                                    "id": "PangramTest#testPangram"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/PangramTest.java",
                                            "name": "PangramTest"
                                        }
                                    },
                                    "ReverseStringRecursiveTest.java": {
                                        "name": "ReverseStringRecursiveTest",
                                        "class": {
                                            "id": "f4b37658-6836-4845-bd49-b2afb1847def",
                                            "functions": {
                                                "shouldAcceptWhenEmptyStringIsPassed": {
                                                    "id": "ReverseStringRecursiveTest#shouldAcceptWhenEmptyStringIsPassed"
                                                },
                                                "shouldAcceptWhenStringIsPassed": {
                                                    "id": "ReverseStringRecursiveTest#shouldAcceptWhenStringIsPassed"
                                                },
                                                "shouldAcceptNotWhenWhenSingleCharacterIsPassed": {
                                                    "id": "ReverseStringRecursiveTest#shouldAcceptNotWhenWhenSingleCharacterIsPassed"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/ReverseStringRecursiveTest.java",
                                            "name": "ReverseStringRecursiveTest"
                                        }
                                    },
                                    "ReverseStringTest.java": {
                                        "name": "ReverseStringTest",
                                        "class": {
                                            "id": "00cc7994-edbf-4d35-b128-42da67c4a1aa",
                                            "functions": {
                                                "ReverseStringTest": {
                                                    "id": "ReverseStringTest#ReverseStringTest"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/ReverseStringTest.java",
                                            "name": "ReverseStringTest"
                                        }
                                    },
                                    "RotationTest.java": {
                                        "name": "RotationTest",
                                        "class": {
                                            "id": "fc664398-ff60-4fdb-b296-2d0194dce957",
                                            "functions": {
                                                "testRotation": {
                                                    "id": "RotationTest#testRotation"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/RotationTest.java",
                                            "name": "RotationTest"
                                        }
                                    },
                                    "StringCompressionTest.java": {
                                        "name": "StringCompressionTest",
                                        "class": {
                                            "id": "717a5e0a-1149-4a5d-bd51-7879b830c04e",
                                            "functions": {
                                                "stringCompressionTest": {
                                                    "id": "StringCompressionTest#stringCompressionTest"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/StringCompressionTest.java",
                                            "name": "StringCompressionTest"
                                        }
                                    },
                                    "UpperTest.java": {
                                        "name": "UpperTest",
                                        "class": {
                                            "id": "b628b90d-1d20-49a6-a50b-74ef054b6cc6",
                                            "functions": {
                                                "toUpperCase": {
                                                    "id": "UpperTest#toUpperCase"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/UpperTest.java",
                                            "name": "UpperTest"
                                        }
                                    },
                                    "ValidParenthesesTest.java": {
                                        "name": "ValidParenthesesTest",
                                        "class": {
                                            "id": "f60a9685-1d3a-49ee-9286-a4288a20e1c8",
                                            "functions": {
                                                "testOne": {
                                                    "id": "ValidParenthesesTest#testOne"
                                                },
                                                "testThree": {
                                                    "id": "ValidParenthesesTest#testThree"
                                                },
                                                "testTwo": {
                                                    "id": "ValidParenthesesTest#testTwo"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/ValidParenthesesTest.java",
                                            "name": "ValidParenthesesTest"
                                        }
                                    },
                                    "WordLadderTest.java": {
                                        "name": "WordLadderTest",
                                        "class": {
                                            "id": "c6d71327-7f0a-4e97-a325-602b3f5016fb",
                                            "functions": {
                                                "testWordLadder": {
                                                    "id": "WordLadderTest#testWordLadder"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/WordLadderTest.java",
                                            "name": "WordLadderTest"
                                        }
                                    },
                                    "longestNonRepeativeSubstringTest.java": {
                                        "name": "longestNonRepeativeSubstringTest",
                                        "class": {
                                            "id": "f0adf41d-f98f-4e40-91b6-9a21e4c73f50",
                                            "functions": {
                                                "palindrome": {
                                                    "id": "longestNonRepeativeSubstringTest#palindrome"
                                                }
                                            },
                                            "fileName": "Java-master/src/test/java/com/thealgorithms/strings/longestNonRepeativeSubstringTest.java",
                                            "name": "longestNonRepeativeSubstringTest"
                                        }
                                    },
                                    "zigZagPattern": {
                                        "zigZagPatternTest.java": {
                                            "name": "zigZagPatternTest",
                                            "class": {
                                                "id": "97610fce-8011-4992-9b16-fb5933fe871d",
                                                "functions": {
                                                    "palindrome": {
                                                        "id": "zigZagPatternTest#palindrome"
                                                    }
                                                },
                                                "fileName": "Java-master/src/test/java/com/thealgorithms/strings/zigZagPattern/zigZagPatternTest.java",
                                                "name": "zigZagPatternTest"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "functions": {
        "RSA#decrypt": {
            "parameters": {
                "encryptedMessage": "BigInteger"
            },
            "name": "RSA#decrypt",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HillCipher#hillCipher",
                "BlowfishTest#testDecrypt",
                "PolybiusTest#testDecrypt",
                "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption",
                "RSATest#testRSA",
                "VigenereTest#vigenereDecryptTest"
            ],
            "children": [
                "PrimeCheck#modPow"
            ]
        },
        "GenericHeap#isLarger": {
            "parameters": {
                "t": "T",
                "o": "T"
            },
            "name": "GenericHeap#isLarger",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify"
            ],
            "children": []
        },
        "QuickSelectTest#quickSelectMaximumOfManyElements": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectMaximumOfManyElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DynamicArray#stream",
                "DyanamicProgrammingKnapsack#max",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "FindMaxRecursion#max",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "QuickSelect#select",
                "LFUCache#get",
                "QuickSelectTest#generateRandomIntegers"
            ]
        },
        "Node#setNext": {
            "parameters": {
                "node": "Node\u003cE\u003e",
                "layer": "int"
            },
            "name": "Node#setNext",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "StackArray#resize": {
            "parameters": {
                "newSize": "int"
            },
            "name": "StackArray#resize",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "LinearProbingHashMap#put",
                "LinearProbingHashMap#delete",
                "StackArray#push",
                "StackArray#pop"
            ],
            "children": []
        },
        "Area#surfaceAreaTrapezium": {
            "parameters": {
                "base1": "double",
                "base2": "double",
                "height": "double"
            },
            "name": "Area#surfaceAreaTrapezium",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "AreaTest#testSurfaceAreaTrapezium",
                "AreaTest#testAllIllegalInput"
            ],
            "children": []
        },
        "Rotation#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Rotation#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapElement#equals",
                "Rotation#rotation"
            ]
        },
        "SortUtilsTest#isSortedArrayFalse": {
            "parameters": {},
            "name": "SortUtilsTest#isSortedArrayFalse",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "LongestCommonSubsequence#getLCS": {
            "parameters": {
                "str1": "String",
                "str2": "String"
            },
            "name": "LongestCommonSubsequence#getLCS",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LongestCommonSubsequence#main"
            ],
            "children": [
                "StrassenMatrixMultiplication#split",
                "LongestCommonSubsequence#lcsString",
                "HeapElement#equals"
            ]
        },
        "MRUCacheTest#putAndGetStringValues": {
            "parameters": {},
            "name": "MRUCacheTest#putAndGetStringValues",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "CountFriendsPairingTest#testForThreeElements": {
            "parameters": {},
            "name": "CountFriendsPairingTest#testForThreeElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CountFriendsPairing#countFriendsPairing"
            ]
        },
        "BruteForceKnapsack#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BruteForceKnapsack#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DyanamicProgrammingKnapsack#knapSack",
                "KnapsackMemoization#knapSack",
                "Knapsack#knapSack",
                "BruteForceKnapsack#knapSack"
            ]
        },
        "FordFulkerson#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "FordFulkerson#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FordFulkerson#networkFlow"
            ]
        },
        "Entry#getValue": {
            "parameters": {},
            "name": "Entry#getValue",
            "recursive": "false",
            "inComing": 22,
            "outGoing": 0,
            "numberOfCalls": 22,
            "parents": [
                "LRUCache#get",
                "MRUCache#get",
                "SkipList#add",
                "SkipList#remove",
                "SkipList#contains",
                "LazySegmentTree#getRange",
                "TwoSumProblem#TwoPointer",
                "Graph#dijkstra",
                "TopKWords#main",
                "CountingSort#sort",
                "CountingSort#streamSort",
                "LazySegmentTreeTest#build",
                "LazySegmentTreeTest#update"
            ],
            "children": []
        },
        "PermutationTest#testNoElement": {
            "parameters": {},
            "name": "PermutationTest#testNoElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "Permutation#permutation",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "RSA#generateKeys": {
            "parameters": {
                "bits": "int"
            },
            "name": "RSA#generateKeys",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "null#null"
            ],
            "children": [
                "Trie#add",
                "GCDRecursion#gcd",
                "Vector2#add",
                "Complex#subtract",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "Vector2#multiply",
                "Vector2#subtract",
                "GCD#gcd",
                "Complex#multiply",
                "MatrixUtil#subtract",
                "DynamicArray#add",
                "MatrixUtil#multiply",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "StrassenMatrixMultiplication#multiply",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "TreeTestUtils#createTree": {
            "parameters": {
                "values": "Integer[]"
            },
            "name": "TreeTestUtils#createTree",
            "recursive": "false",
            "inComing": 40,
            "outGoing": 0,
            "numberOfCalls": 40,
            "parents": [
                "CreateBinaryTreeFromInorderPreorder#test",
                "CreateBinaryTreeFromInorderPreorder#createTree",
                "CeilInBinarySearchTreeTest#testKeyPresentRootIsCeil",
                "CeilInBinarySearchTreeTest#testKeyPresentLeafIsCeil",
                "CeilInBinarySearchTreeTest#testKeyAbsentRootIsCeil",
                "CeilInBinarySearchTreeTest#testKeyAbsentLeafIsCeil",
                "CeilInBinarySearchTreeTest#testKeyAbsentLeftMostNodeIsCeil",
                "CeilInBinarySearchTreeTest#testKeyAbsentCeilIsNull",
                "CheckTreeIsSymmetricTest#testSingleNodeTree",
                "CheckTreeIsSymmetricTest#testSymmetricTree",
                "CheckTreeIsSymmetricTest#testNonSymmetricTree",
                "InorderTraversalTest#testRecursiveInorder",
                "InorderTraversalTest#testRecursiveInorderNonBalanced",
                "LevelOrderTraversalTest#testSingleNodeTree",
                "LevelOrderTraversalTest#testLevelOrderTraversalCompleteTree",
                "LevelOrderTraversalTest#testLevelOrderTraversalDifferentHeight",
                "PostOrderTraversalTest#testPostOrder",
                "PostOrderTraversalTest#testPostOrderNonBalanced",
                "PreOrderTraversalTest#testRecursivePreOrder",
                "PreOrderTraversalTest#testRecursivePreOrderNonBalanced",
                "SameTreesCheckTest#testOneRootIsNull",
                "SameTreesCheckTest#testSingleNodeTreesAreSame",
                "SameTreesCheckTest#testSameTreesIsSuccessful",
                "SameTreesCheckTest#testSameTreesFails",
                "SameTreesCheckTest#testTreesWithDifferentStructure",
                "ValidBSTOrNotTest#testOneNode",
                "ValidBSTOrNotTest#testBinaryTreeIsBST",
                "ValidBSTOrNotTest#testBinaryTreeWithDuplicatedNodesIsNotBST",
                "ValidBSTOrNotTest#testBinaryTreeIsNotBST",
                "VerticalOrderTraversalTest#testSingleNodeTree",
                "VerticalOrderTraversalTest#testVerticalTraversalCompleteTree",
                "VerticalOrderTraversalTest#testVerticalTraversalDifferentHeight",
                "ZigzagTraversalTest#testSingleNodeTree",
                "ZigzagTraversalTest#testZigzagTraversalCompleteTree",
                "ZigzagTraversalTest#testZigzagTraversalDifferentHeight"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursive#remove",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircleLinkedList#remove",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "DynamicArray#add",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "MatrixUtil#add",
                "Complex#add",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Area#surfaceAreaSquare": {
            "parameters": {
                "sideLength": "double"
            },
            "name": "Area#surfaceAreaSquare",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AreaTest#testSurfaceAreaSquare",
                "AreaTest#testAllIllegalInput"
            ],
            "children": []
        },
        "MatrixUtil#operate": {
            "parameters": {
                "matrix2": "BigDecimal[][]",
                "matrix1": "BigDecimal[][]",
                "operation": "BiFunction\u003cBigDecimal,BigDecimal,BigDecimal\u003e"
            },
            "name": "MatrixUtil#operate",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MatrixUtil#add",
                "MatrixUtil#subtract"
            ],
            "children": [
                "FibonacciHeap#empty",
                "MatrixUtil#hasEqualSizes"
            ]
        },
        "HeapSortTest#getSortAlgorithm": {
            "parameters": {},
            "name": "HeapSortTest#getSortAlgorithm",
            "recursive": "false",
            "inComing": 16,
            "outGoing": 0,
            "numberOfCalls": 16,
            "parents": [
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
            ],
            "children": []
        },
        "ProcessDetails#setArrivalTime": {
            "parameters": {
                "arrivalTime": "int"
            },
            "name": "ProcessDetails#setArrivalTime",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTestNegetiveNumber4x4": {
            "parameters": {},
            "name": "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTestNegetiveNumber4x4",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Vector2#multiply",
                "Complex#multiply",
                "MatrixUtil#multiply",
                "StrassenMatrixMultiplication#multiply"
            ]
        },
        "Perimeter#perimeterRectangle": {
            "parameters": {
                "breadth": "float",
                "length": "float"
            },
            "name": "Perimeter#perimeterRectangle",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "PerimeterTest#testcase3",
                "PerimeterTest#testcase4"
            ],
            "children": []
        },
        "PerfectSquareTest#TestPerfectSquareifiscorrect": {
            "parameters": {},
            "name": "PerfectSquareTest#TestPerfectSquareifiscorrect",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PerfectSquare#isPerfectSquare",
                "FibonacciNumber#isPerfectSquare"
            ]
        },
        "Caesar#isCapitalLatinLetter": {
            "parameters": {
                "c": "char"
            },
            "name": "Caesar#isCapitalLatinLetter",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Caesar#encode",
                "Caesar#decode"
            ],
            "children": []
        },
        "SkipList#toString": {
            "parameters": {},
            "name": "SkipList#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "DynamicArray#stream",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "Trie#add",
                "GenericHashMapUsingArrayList#toString",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "Deques#toString",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "ReverseString#reverse",
                "HeapElement#toString",
                "GenericHashMapUsingArrayList#get",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "SkipListTest#get",
                "DynamicArray#toString",
                "SkipList#get",
                "CircularBufferTest#get",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "GenericHeap#get",
                "Rotation#reverse",
                "Vector2#toString",
                "DynamicArray#add",
                "BSTRecursive#add",
                "PalindromePrime#reverse",
                "CursorLinkedList#append",
                "LinkOperations#reverse",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFSR#toString",
                "ReverseStringRecursive#reverse",
                "GenericHashMapUsingArray#toString",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "Queue#toString",
                "CircleLinkedList#append",
                "SkylineProblem#add",
                "LowestBasePalindrome#reverse",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "LinkedQueue#toString",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "SumOfDigitsTest#testZero": {
            "parameters": {},
            "name": "SumOfDigitsTest#testZero",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SumOfDigits#sumOfDigits",
                "SumOfDigits#sumOfDigitsRecursion",
                "SumOfDigits#sumOfDigitsFast"
            ]
        },
        "RgbHsvConversion#hsvToRgb": {
            "parameters": {
                "saturation": "double",
                "hue": "double",
                "value": "double"
            },
            "name": "RgbHsvConversion#hsvToRgb",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "RgbHsvConversion#main"
            ],
            "children": [
                "FFTTest#abs",
                "Complex#abs",
                "RgbHsvConversion#getRgbBySection"
            ]
        },
        "Fibonacci#fibOptimized": {
            "parameters": {
                "n": "int"
            },
            "name": "Fibonacci#fibOptimized",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "A5KeyStreamGenerator#initialize": {
            "parameters": {
                "frameCounter": "BitSet",
                "sessionKey": "BitSet"
            },
            "name": "A5KeyStreamGenerator#initialize",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "null#null",
                "A5KeyStreamGenerator#initialize",
                "A5KeyStreamGenerator#reInitialize",
                "A5KeyStreamGenerator#reInitializeRegisters",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LFSRTest#getClockBit"
            ],
            "children": [
                "A5KeyStreamGenerator#initialize",
                "SinglyLinkedList#clear",
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "SinglyLinkedListTest#clear",
                "LinkedQueue#clear",
                "LFSR#initialize",
                "BaseLFSR#initialize",
                "LeftistHeap#clear",
                "DynamicArray#add",
                "LFSRTest#initialize",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "CoinChange#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CoinChange#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CoinChange#change",
                "CoinChange#minimumCoins"
            ]
        },
        "PollardRhoTest#testPollardRhoForNumber315MustReturn5": {
            "parameters": {},
            "name": "PollardRhoTest#testPollardRhoForNumber315MustReturn5",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PollardRho#pollardRho"
            ]
        },
        "QuickSelectTest#quickSelectMedianOfThreeCharacters": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectMedianOfThreeCharacters",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "QuickSelect#select"
            ]
        },
        "ClosestPair#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ClosestPair#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ClosestPair#closestPair",
                "ClosestPair#xQuickSort",
                "ClosestPair#buildLocation"
            ]
        },
        "SameTreesCheckTest#testOneRootIsNull": {
            "parameters": {},
            "name": "SameTreesCheckTest#testOneRootIsNull",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "SameTreesCheck#check",
                "DuplicateBrackets#check",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "CalculateMaxOfMinTest#testForFourElements": {
            "parameters": {},
            "name": "CalculateMaxOfMinTest#testForFourElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MaximumMinimumWindow#calculateMaxOfMin",
                "CalculateMaxOfMin#calculateMaxOfMin"
            ]
        },
        "BinaryTree#preOrder": {
            "parameters": {
                "localRoot": "Node"
            },
            "name": "BinaryTree#preOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursive#preOrder",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "AdjacencyMatrixGraph#toString": {
            "parameters": {},
            "name": "AdjacencyMatrixGraph#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": [
                "AdjacencyMatrixGraph#numberOfVertices"
            ]
        },
        "PermuteString#swapString": {
            "parameters": {
                "a": "String",
                "i": "int",
                "j": "int"
            },
            "name": "PermuteString#swapString",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "PermuteString#generatePermutation"
            ],
            "children": []
        },
        "PowerOfTwoOrNot#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PowerOfTwoOrNot#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PowerOfTwoOrNot#checkIfPowerOfTwoOrNot"
            ]
        },
        "LevenshteinDistanceTests#levenshteinDistanceTest": {
            "parameters": {
                "distance": "int",
                "str1": "String",
                "str2": "String"
            },
            "name": "LevenshteinDistanceTests#levenshteinDistanceTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LevenshteinDistance#calculateLevenshteinDistance"
            ]
        },
        "AVLSimple#bf": {
            "parameters": {
                "node": "Node"
            },
            "name": "AVLSimple#bf",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "AVLSimple#insert"
            ],
            "children": [
                "HeightStrategy#height",
                "BernoulliHeightStrategy#height",
                "AVLTree#height",
                "GenericTree#height",
                "AVLSimple#height",
                "LevelOrderTraversalHelper#height"
            ]
        },
        "SJFSchedulingTest#schedulingOf_nothing": {
            "parameters": {},
            "name": "SJFSchedulingTest#schedulingOf_nothing",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "FCFSScheduling#scheduleProcesses",
                "CircularQueue#isEmpty",
                "SJFScheduling#scheduleProcesses",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "DisjointSets#FindSet": {
            "parameters": {
                "node": "Node\u003cT\u003e"
            },
            "name": "DisjointSets#FindSet",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "DisjointSets#FindSet",
                "DisjointSets#UnionSet"
            ],
            "children": [
                "DisjointSets#FindSet"
            ]
        },
        "InorderTraversal#iterativeInorder": {
            "parameters": {
                "root": "BinaryTree.Node"
            },
            "name": "InorderTraversal#iterativeInorder",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "InorderTraversalTest#testNullRoot",
                "InorderTraversalTest#testRecursiveInorder",
                "InorderTraversalTest#testRecursiveInorderNonBalanced"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LinkedListStack#push",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "QueueWithStack#isEmpty",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "StackArrayList#push",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "NodeStack#push",
                "LinkedListStack#pop",
                "MatrixUtil#add",
                "CircularQueue#isEmpty",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "DynamicArray#isEmpty",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest": {
            "parameters": {},
            "name": "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "SinglyLinkedList#clear": {
            "parameters": {},
            "name": "SinglyLinkedList#clear",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "A5KeyStreamGenerator#initialize",
                "LFSR#initialize",
                "SinglyLinkedList#main",
                "LinkedQueue#main",
                "ConvolutionFFT#convolutionFFT",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear"
            ],
            "children": []
        },
        "ProcessDetails#getTurnAroundTimeTime": {
            "parameters": {},
            "name": "ProcessDetails#getTurnAroundTimeTime",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "FCFSSchedulingTest#testingProcesses"
            ],
            "children": []
        },
        "GenericHashMapUsingArray#size": {
            "parameters": {},
            "name": "GenericHashMapUsingArray#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": []
        },
        "CircularConvolutionFFT#padding": {
            "parameters": {
                "x": "ArrayList\u003cFFT.Complex\u003e",
                "newSize": "int"
            },
            "name": "CircularConvolutionFFT#padding",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Trie#add",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "NodeStack#size",
                "MatrixUtil#add",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustThrowExceptionIfNumberIsNegative": {
            "parameters": {},
            "name": "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustThrowExceptionIfNumberIsNegative",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LiouvilleLambdaFunction#liouvilleLambda"
            ]
        },
        "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper": {
            "parameters": {},
            "name": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "InsertionSort#sentinelSort": {
            "parameters": {
                "array": "T[]"
            },
            "name": "InsertionSort#sentinelSort",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "SortUtils#less",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "HeapSort#less",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "CombSortTest#combSortEmptyArray": {
            "parameters": {},
            "name": "CombSortTest#combSortEmptyArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "SkylineProblem#mergeSkyline": {
            "parameters": {
                "sky2": "ArrayList\u003cSkyline\u003e",
                "sky1": "ArrayList\u003cSkyline\u003e"
            },
            "name": "SkylineProblem#mergeSkyline",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SkylineProblem#findSkyline"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SinglyLinkedList#isEmpty",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "QueueWithStack#isEmpty",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "SkipList#get",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "GenericHeap#get",
                "SkipList#remove",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "BSTRecursive#add",
                "ListIterator#remove",
                "CircularBufferTest#isEmpty",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "CircularQueue#isEmpty",
                "LFUCache#get",
                "Complex#add",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "DynamicArray#isEmpty",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "UnionFind#toString": {
            "parameters": {},
            "name": "UnionFind#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray": {
            "parameters": {},
            "name": "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "HammingDistanceTest#checkForLongDataBits": {
            "parameters": {},
            "name": "HammingDistanceTest#checkForLongDataBits",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MatrixUtil#assertThat",
                "FibonacciJavaStreams#assertThat",
                "DepthFirstSearch#assertThat"
            ]
        },
        "LinkOperations#insertTail": {
            "parameters": {
                "x": "int",
                "doublyLinkedList": "DoublyLinkedList"
            },
            "name": "LinkOperations#insertTail",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "null#null",
                "Link#main",
                "LinkOperations#insertElementByIndex",
                "LinkOperations#insertOrdered"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "Queue#isEmpty": {
            "parameters": {},
            "name": "Queue#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "Vertex#equals": {
            "parameters": {
                "object": "Object"
            },
            "name": "Vertex#equals",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapElement#equals"
            ]
        },
        "DepthFirstSearch#search": {
            "parameters": {
                "node": "Node",
                "name": "String"
            },
            "name": "DepthFirstSearch#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": [
                "DepthFirstSearch#search",
                "DynamicArray#stream",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "HeapElement#equals",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "MaxHeap#deleteElement": {
            "parameters": {
                "elementIndex": "int"
            },
            "name": "MaxHeap#deleteElement",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MaxHeap#extractMax",
                "MinHeap#extractMin"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "MaxHeap#toggleUp",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "MinHeap#getElementKey",
                "LeftistHeap#isEmpty",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "MaxHeap#getElementKey",
                "PriorityQueue#remove",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "MinHeap#getElement",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "BSTIterative#remove",
                "Queue#remove",
                "DynamicArray#getElement",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "SkipList#remove",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "MaxHeap#getElement",
                "MinHeap#toggleUp",
                "GenericHeap#isEmpty",
                "MinHeap#toggleDown",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "ListIterator#remove",
                "CircularBufferTest#isEmpty",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "Heap#getElement",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "CircularQueue#isEmpty",
                "Floor#floor",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "GenericHashMapUsingArrayList#remove",
                "DynamicArray#isEmpty",
                "MaxHeap#toggleDown",
                "GenericHeap#remove",
                "PriorityQueue#isEmpty"
            ]
        },
        "SimpsonIntegration#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "SimpsonIntegration#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SimpsonIntegration#simpsonsMethod"
            ]
        },
        "FrizzyNumberTest#testFrizziesForBase2": {
            "parameters": {},
            "name": "FrizzyNumberTest#testFrizziesForBase2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FrizzyNumber#getNthFrizzy"
            ]
        },
        "GaussianTest#passTest1": {
            "parameters": {},
            "name": "GaussianTest#passTest1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Trie#add",
                "Vector2#add",
                "InverseOfMatrix#gaussian",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "Gaussian#gaussian"
            ]
        },
        "PrimeFactorizationTest#testpFactorsMustReturnEmptyList": {
            "parameters": {},
            "name": "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "PrimeFactorization#pfactors",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "ColumnarTranspositionCipher#decrypter": {
            "parameters": {},
            "name": "ColumnarTranspositionCipher#decrypter",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ColumnarTranspositionCipher#main"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "FrizzyNumberTest#testFrizziesForBase3": {
            "parameters": {},
            "name": "FrizzyNumberTest#testFrizziesForBase3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FrizzyNumber#getNthFrizzy"
            ]
        },
        "Knapsack#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Knapsack#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DyanamicProgrammingKnapsack#knapSack",
                "KnapsackMemoization#knapSack",
                "Knapsack#knapSack",
                "BruteForceKnapsack#knapSack"
            ]
        },
        "KMPSearchTest#KMPSearchTestFront": {
            "parameters": {},
            "name": "KMPSearchTest#KMPSearchTestFront",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KMPSearch#KMPSearch"
            ]
        },
        "BinaryInsertionSortTest#BinaryInsertionSortTestNonDuplicate": {
            "parameters": {},
            "name": "BinaryInsertionSortTest#BinaryInsertionSortTestNonDuplicate",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BinaryInsertionSort#binaryInsertSort"
            ]
        },
        "MinimumSumPartition#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MinimumSumPartition#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MinimumSumPartition#subSet"
            ]
        },
        "MaxHeap#toggleUp": {
            "parameters": {
                "elementIndex": "int"
            },
            "name": "MaxHeap#toggleUp",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#insertElement",
                "MinHeap#deleteElement"
            ],
            "children": [
                "FindKthNumber#swap",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "MinHeap#getElementKey",
                "OddEvenSort#swap",
                "LazySegmentTreeTest#get",
                "Map#get",
                "MinHeap#swap",
                "DynamicArray#get",
                "SinglyLinkedListTest#swap",
                "MaxHeap#getElementKey",
                "HeapElement#getKey",
                "CircularBuffer#get",
                "GenericHeap#swap",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "SkipList#get",
                "CircularBufferTest#get",
                "IntrospectiveSort#swap",
                "GenericHeap#get",
                "HeapNode#getKey",
                "LinearProbingHashMap#get",
                "HeapSort#swap",
                "LRUCache#get",
                "LFUCache#get",
                "Floor#floor",
                "BFPRT#swap",
                "Entry#getKey",
                "DualPivotQuickSort#swap"
            ]
        },
        "NQueens#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "NQueens#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "NQueens#placeQueens"
            ]
        },
        "StackArrayList#peek": {
            "parameters": {},
            "name": "StackArrayList#peek",
            "recursive": "false",
            "inComing": 76,
            "outGoing": 0,
            "numberOfCalls": 76,
            "parents": [
                "CircularQueue#main",
                "GenericArrayListQueue#main",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#postorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "VerticalOrderTraversal#verticalTraversal",
                "FordFulkerson#networkFlow",
                "BufferedReader#peek",
                "MedianOfRunningArray#median",
                "Huffman#main",
                "QueueWithStack#peekFront",
                "QueueWithStack#peekBack",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StrandSort#merge",
                "LinkedQueueTest#testQue",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BufferedReaderTest#testPeeks",
                "BufferedReaderTest#testMixes",
                "BufferedReaderTest#testBlockPractical"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SinglyLinkedList#isEmpty",
                "MRUCache#get",
                "LFSR#get",
                "LeftistHeap#isEmpty",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularBufferTest#get",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "GenericHeap#get",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "CircularBufferTest#isEmpty",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "CircularQueue#isEmpty",
                "LFUCache#get",
                "FibonacciHeap#size",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "WordBoggle#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "WordBoggle#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WordBoggle#boggleBoard",
                "HeapElement#equals"
            ]
        },
        "DutchNationalFlagSort#sort": {
            "parameters": {
                "unsorted": "T[]",
                "intendedMiddle": "T"
            },
            "name": "DutchNationalFlagSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "Ceil#ceil",
                "DutchNationalFlagSort#dutch_national_flag_sort"
            ]
        },
        "InsertionSortTest#insertionSortClassicalForArrayWithDuplicateValuesShouldPass": {
            "parameters": {},
            "name": "InsertionSortTest#insertionSortClassicalForArrayWithDuplicateValuesShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "InsertionSortTest#testWithDuplicates"
            ]
        },
        "DynamicArray#stream": {
            "parameters": {},
            "name": "DynamicArray#stream",
            "recursive": "false",
            "inComing": 28,
            "outGoing": 0,
            "numberOfCalls": 28,
            "parents": [
                "DynamicArray#stream",
                "DynamicArray#toString",
                "DynamicArray#main",
                "SkipList#toString",
                "AbsoluteMax#getMaxValue",
                "AbsoluteMin#getMinValue",
                "FindMax#main",
                "FindMaxRecursion#main",
                "FindMin#main",
                "FindMinRecursion#main",
                "Mode#mode",
                "TwoSumProblem#TwoPointer",
                "Conway#generateNextElement",
                "SieveOfEratosthenes#findPrimesTill",
                "DepthFirstSearch#search",
                "CountingSort#streamSort",
                "MergeSortNoExtraSpace#call_merge_sort",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "HashMapCuckooHashingTest#createHashMapCuckooHashing",
                "SkipListTest#checkSortedOnLowestLayer",
                "SkipListTest#createSkipList",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#getSortedCopyOfList"
            ],
            "children": [
                "DynamicArray#stream"
            ]
        },
        "MatrixUtil#assertThat": {
            "parameters": {
                "actual": "BigDecimal[][]",
                "expected": "BigDecimal[][]"
            },
            "name": "MatrixUtil#assertThat",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "FibonacciJavaStreams#main",
                "MatrixUtil#main",
                "DepthFirstSearch#main",
                "AmicableNumberTest#testAmicableNumber",
                "ArmstrongTest#testIsArmstrong",
                "TestArmstrong#testArmstrong",
                "HammingDistanceTest#checkForDifferentBits",
                "HammingDistanceTest#checkForDifferentBitsLength",
                "HammingDistanceTest#checkForSameBits",
                "HammingDistanceTest#checkForLongDataBits",
                "HammingDistanceTest#mismatchDataBits",
                "HammingDistanceTest#checkForLongDataBitsSame",
                "SortUtilsRandomGeneratorTest#generateArray",
                "SortUtilsRandomGeneratorTest#generateArrayEmpty",
                "SortUtilsRandomGeneratorTest#generateDouble"
            ],
            "children": []
        },
        "DeterminantOfMatrix#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "DeterminantOfMatrix#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DeterminantOfMatrix#determinant",
                "HillCipher#determinant"
            ]
        },
        "QuickSort#doSort": {
            "parameters": {
                "array": "T[]",
                "left": "int",
                "right": "int"
            },
            "name": "QuickSort#doSort",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "CircleSort#sort",
                "CircleSort#doSort",
                "MergeSort#sort",
                "MergeSort#doSort",
                "QuickSort#sort",
                "QuickSort#doSort"
            ],
            "children": [
                "QuickSort#doSort",
                "MergeSort#doSort",
                "CircleSort#doSort",
                "QuickSort#randomPartition"
            ]
        },
        "GenericHashMapUsingArray#reHash": {
            "parameters": {},
            "name": "GenericHashMapUsingArray#reHash",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArray#initBuckets",
                "GenericHashMapUsingArray#put",
                "DynamicArray#put",
                "CircularBufferTest#put",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "Trieac#search": {
            "parameters": {
                "root": "TrieNode",
                "key": "String"
            },
            "name": "Trieac#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": []
        },
        "MinimumSumPartition#getSum": {
            "parameters": {
                "arr": "int[]"
            },
            "name": "MinimumSumPartition#getSum",
            "recursive": "false",
            "inComing": 13,
            "outGoing": 0,
            "numberOfCalls": 13,
            "parents": [
                "MinimumSumPartition#subSet",
                "SumWithoutArithmeticOperators#getSum",
                "SumWithoutArithmeticOperatorsTest#addZerotoZero",
                "SumWithoutArithmeticOperatorsTest#addZerotoNumber",
                "SumWithoutArithmeticOperatorsTest#addOddtoEven",
                "SumWithoutArithmeticOperatorsTest#addEventoOdd",
                "SumWithoutArithmeticOperatorsTest#addRandoms"
            ],
            "children": []
        },
        "StackArray#isEmpty": {
            "parameters": {},
            "name": "StackArray#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "DyanamicProgrammingKnapsack#max": {
            "parameters": {
                "a": "int",
                "b": "int"
            },
            "name": "DyanamicProgrammingKnapsack#max",
            "recursive": "false",
            "inComing": 54,
            "outGoing": 0,
            "numberOfCalls": 54,
            "parents": [
                "RgbHsvConversion#rgbToHsv",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "AVLSimple#insert",
                "AVLSimple#rightRotate",
                "AVLSimple#leftRotate",
                "AVLTree#reheight",
                "CheckIfBinaryTreeBalanced#isBalancedRecursive",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#maxcall",
                "GenericTree#max",
                "LevelOrderTraversalHelper#height",
                "VerticalOrderTraversal#verticalTraversal",
                "BruteForceKnapsack#knapSack",
                "DyanamicProgrammingKnapsack#knapSack",
                "EggDropping#minTrials",
                "KadaneAlgorithm#max_Sum",
                "Knapsack#knapSack",
                "KnapsackMemoization#knapSackRec",
                "LongestAlternatingSubsequence#AlternatingLength",
                "LongestValidParentheses#getLongestValidParentheses",
                "RodCutting#cutRod",
                "ShortestSuperSequence#lcs",
                "WineProblem#WPRecursion",
                "WineProblem#WPTD",
                "WineProblem#WPBU",
                "CircularConvolutionFFT#fftCircularConvolution",
                "Convolution#convolution",
                "FindMax#main",
                "FindMaxRecursion#main",
                "FindMaxRecursion#max",
                "MaxValue#main",
                "Mode#mode",
                "MinimizingLateness#main",
                "MiniMaxAlgorithm#miniMax",
                "MonteCarloTreeSearch#getWinnerNode",
                "BeadSort#sort",
                "BucketSort#bucketSort",
                "MergeSortNoExtraSpace#call_merge_sort",
                "QuickSelectTest#quickSelectMaximumOfManyElements"
            ],
            "children": []
        },
        "PerfectCube#isPerfectCubeMathCbrt": {
            "parameters": {
                "number": "int"
            },
            "name": "PerfectCube#isPerfectCubeMathCbrt",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "PerfectCubeTest#perfectCube"
            ],
            "children": []
        },
        "BloomFilterTest#test1": {
            "parameters": {},
            "name": "BloomFilterTest#test1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "Map#contains",
                "Bag#contains",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "BloomFilter#contains",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "SkipList#contains",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "PriorityQueue#insert"
            ]
        },
        "Hash#asciiString": {
            "parameters": {
                "word": "String"
            },
            "name": "Hash#asciiString",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Hash#compute"
            ],
            "children": []
        },
        "BloomFilterTest#test2": {
            "parameters": {},
            "name": "BloomFilterTest#test2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "Map#contains",
                "Bag#contains",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "BloomFilter#contains",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "SkipList#contains",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "PriorityQueue#insert"
            ]
        },
        "BeadSortTest#beadSortEmptyArray": {
            "parameters": {},
            "name": "BeadSortTest#beadSortEmptyArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "FFTTest#conjugateTest": {
            "parameters": {},
            "name": "FFTTest#conjugateTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Complex#getImaginary",
                "Complex#conjugate",
                "Complex#getReal"
            ]
        },
        "SinglyLinkedList#setHead": {
            "parameters": {
                "head": "Node"
            },
            "name": "SinglyLinkedList#setHead",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "SinglyLinkedList#main",
                "NodeStack#push",
                "NodeStack#pop"
            ],
            "children": []
        },
        "MergeSortNoExtraSpace#merge_sort": {
            "parameters": {
                "a": "int[]",
                "maxele": "int",
                "start": "int",
                "end": "int"
            },
            "name": "MergeSortNoExtraSpace#merge_sort",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "MergeSortNoExtraSpace#call_merge_sort",
                "MergeSortNoExtraSpace#merge_sort"
            ],
            "children": [
                "MergeSortNoExtraSpace#merge_sort",
                "MergeSortNoExtraSpace#implement_merge_sort"
            ]
        },
        "BellmanFord#printPath": {
            "parameters": {
                "p": "int[]",
                "i": "int"
            },
            "name": "BellmanFord#printPath",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "BellmanFord#printPath",
                "BellmanFord#go",
                "BellmanFord#show",
                "Dijkstra#main",
                "Vertex#printPath",
                "Graph#printPath",
                "Graph#printAllPaths"
            ],
            "children": [
                "BellmanFord#printPath",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "GenericTree#postordercall": {
            "parameters": {},
            "name": "GenericTree#postordercall",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#postorder",
                "BSTRecursiveGeneric#postorder",
                "BSTIterative#postorder",
                "BSTRecursive#postorder"
            ]
        },
        "DoublyLinkedList#isEmpty": {
            "parameters": {},
            "name": "DoublyLinkedList#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "GuassLegendre#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "GuassLegendre#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GuassLegendre#pi"
            ]
        },
        "KMP#computePrefixFunction": {
            "parameters": {
                "P": "String"
            },
            "name": "KMP#computePrefixFunction",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "KMP#KMPmatcher"
            ],
            "children": []
        },
        "DutchNationalFlagSortTest#DNFSTestEven": {
            "parameters": {},
            "name": "DutchNationalFlagSortTest#DNFSTestEven",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack": {
            "parameters": {},
            "name": "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "FCFSScheduling#scheduleProcesses",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "SJFSchedulingTest#initialisation3",
                "LFUCache#get",
                "SJFScheduling#scheduleProcesses"
            ]
        },
        "FibonacciHeap#updateMin": {
            "parameters": {
                "posMin": "HeapNode"
            },
            "name": "FibonacciHeap#updateMin",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "FibonacciHeap#insert",
                "FibonacciHeap#meld",
                "FibonacciHeap#decreaseKey",
                "FibonacciHeap#cut"
            ],
            "children": [
                "HeapElement#getKey",
                "HeapNode#getKey",
                "Entry#getKey"
            ]
        },
        "TreeNode#isLeafNode": {
            "parameters": {},
            "name": "TreeNode#isLeafNode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "OptimalJobScheduling#getCost": {
            "parameters": {
                "process": "int",
                "machine": "int"
            },
            "name": "OptimalJobScheduling#getCost",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "OptimalJobSchedulingTest#testOptimalJobScheduling1",
                "OptimalJobSchedulingTest#testOptimalJobScheduling2",
                "OptimalJobSchedulingTest#testOptimalJobScheduling3"
            ],
            "children": []
        },
        "RandomNode#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "RandomNode#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeRandomNode#getRandom",
                "RandomNode#getRandom"
            ]
        },
        "CombSortTest#combSortSingleStringElement": {
            "parameters": {},
            "name": "CombSortTest#combSortSingleStringElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "RomanToInteger#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "RomanToInteger#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RomanToInteger#romanToInt"
            ]
        },
        "CircularBuffer#put": {
            "parameters": {
                "item": "Item"
            },
            "name": "CircularBuffer#put",
            "recursive": "false",
            "inComing": 156,
            "outGoing": 0,
            "numberOfCalls": 156,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "BinaryToHexadecimal#binToHex",
                "null#null",
                "LFUCache#put",
                "LRUCache#put",
                "MRUCache#put",
                "AdjacencyList#addEdge",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "GenericHashMapUsingArray#reHash",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#delete",
                "LinearProbingHashMap#resize",
                "GenericHeap#add",
                "GenericHeap#swap",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#test",
                "VerticalOrderTraversal#verticalTraversal",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#TwoPointer",
                "TwoSumProblem#HashMap",
                "Trie#add",
                "CountWords#getDictionary",
                "CountingSort#sort",
                "Graph#addEdge",
                "Anagrams#approach4",
                "CheckAnagrams#isAnagrams",
                "Isomorphic#checkStrings",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#isFull",
                "CircularBufferTest#get",
                "CircularBufferTest#put",
                "CircularBufferTest#concurrentTest",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#putTest",
                "MapTest#getTest",
                "MapTest#deleteTest",
                "MapTest#containsTest",
                "MapTest#sizeTest",
                "MapTest#keysTest",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "StackArray#isFull",
                "PriorityQueue#isFull",
                "CircularQueue#isFull",
                "HashMapCuckooHashing#isFull",
                "CircularPointer#getAndIncrement",
                "MinPriorityQueue#isFull",
                "CircularBufferTest#isFull",
                "Queue#isFull",
                "CircularBuffer#isFull"
            ]
        },
        "RedBlackBST#deleteDemo": {
            "parameters": {},
            "name": "RedBlackBST#deleteDemo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Map#delete",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "LinkOperations#delete",
                "AVLTree#delete",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BSTRecursive#delete",
                "FibonacciHeap#delete",
                "RedBlackBST#printTree",
                "SinglyLinkedList#delete",
                "BufferedReader#close",
                "RedBlackBST#printTreepre",
                "RedBlackBST#delete",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "KDTreeTest#delete",
                "NodeStack#print",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "SortUtils#print",
                "RadixSort#print",
                "BSTRecursiveGeneric#delete",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "FindKthNumber#swap": {
            "parameters": {
                "a": "int",
                "b": "int",
                "nums": "int[]"
            },
            "name": "FindKthNumber#swap",
            "recursive": "false",
            "inComing": 55,
            "outGoing": 0,
            "numberOfCalls": 55,
            "parents": [
                "Permutation#backtracking",
                "GenericHeap#upHeapify",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "FFT#fftBitReversal",
                "FindKthNumber#partition",
                "BFPRT#partition",
                "BFPRT#insertionSort",
                "QuickSelect#partition",
                "QuickSelect#pivot",
                "BogoSort#nextPermutation",
                "BubbleSort#sort",
                "BubbleSortRecursion#bubbleSort",
                "CircleSort#doSort",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "DualPivotQuickSort#partition",
                "DutchNationalFlagSort#dutch_national_flag_sort",
                "GnomeSort#sort",
                "HeapSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "IntrospectiveSort#partition",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify",
                "OddEvenSort#oddEvenSort",
                "QuickSort#randomPartition",
                "QuickSort#partition",
                "SortUtils#flip",
                "WiggleSort#triColorSort"
            ],
            "children": []
        },
        "CountWords#secondaryWordCount": {
            "parameters": {
                "s": "String"
            },
            "name": "CountWords#secondaryWordCount",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "LeftistHeap#isEmpty",
                "StrassenMatrixMultiplication#split",
                "Deques#toString",
                "QueueWithStack#isEmpty",
                "HeapElement#toString",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "DynamicArray#toString",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircleLinkedList#toString",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CursorLinkedList#append",
                "LFSR#toString",
                "CircularQueue#isEmpty",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "DynamicArray#isEmpty",
                "LinkedQueue#toString",
                "PriorityQueue#isEmpty"
            ]
        },
        "MinPriorityQueue#sink": {
            "parameters": {},
            "name": "MinPriorityQueue#sink",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MinPriorityQueue#delete",
                "PriorityQueue#remove"
            ],
            "children": []
        },
        "BinaryToDecimalTest#testBinaryToDecimal": {
            "parameters": {},
            "name": "BinaryToDecimalTest#testBinaryToDecimal",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BinaryToDecimal#binaryToDecimal"
            ]
        },
        "BinaryTree#put": {
            "parameters": {
                "value": "int"
            },
            "name": "BinaryTree#put",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "HorspoolSearch#getLastComparisons": {
            "parameters": {},
            "name": "HorspoolSearch#getLastComparisons",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "LFUCache#put": {
            "parameters": {
                "value": "V",
                "key": "K"
            },
            "name": "LFUCache#put",
            "recursive": "false",
            "inComing": 156,
            "outGoing": 0,
            "numberOfCalls": 156,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "BinaryToHexadecimal#binToHex",
                "null#null",
                "LFUCache#put",
                "LRUCache#put",
                "MRUCache#put",
                "AdjacencyList#addEdge",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "GenericHashMapUsingArray#reHash",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#delete",
                "LinearProbingHashMap#resize",
                "GenericHeap#add",
                "GenericHeap#swap",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#test",
                "VerticalOrderTraversal#verticalTraversal",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#TwoPointer",
                "TwoSumProblem#HashMap",
                "Trie#add",
                "CountWords#getDictionary",
                "CountingSort#sort",
                "Graph#addEdge",
                "Anagrams#approach4",
                "CheckAnagrams#isAnagrams",
                "Isomorphic#checkStrings",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#isFull",
                "CircularBufferTest#get",
                "CircularBufferTest#put",
                "CircularBufferTest#concurrentTest",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#putTest",
                "MapTest#getTest",
                "MapTest#deleteTest",
                "MapTest#containsTest",
                "MapTest#sizeTest",
                "MapTest#keysTest",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#containsKey",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "LFUCache#addNodeWithUpdatedFrequency",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "LFUCache#removeNode",
                "GenericHeap#get",
                "SkipList#remove",
                "SkipList#size",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "GenericHashMapUsingArrayList#remove",
                "LinearProbingHashMap#put",
                "GenericHeap#remove"
            ]
        },
        "Map#delete": {
            "parameters": {
                "key": "Key"
            },
            "name": "Map#delete",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "HashMap#deleteHash",
                "LinkedList#delete",
                "MinPriorityQueue#heapSort",
                "Link#main",
                "LinkOperations#removeDuplicates",
                "SinglyLinkedList#main",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "BSTRecursive#remove",
                "BSTRecursiveGeneric#delete",
                "BSTRecursiveGeneric#remove",
                "RedBlackBST#deleteDemo",
                "TrieImp#main",
                "MapTest#deleteTest",
                "MapTest#sizeTest",
                "KDTreeTest#delete"
            ],
            "children": []
        },
        "RootPrecision#squareRoot": {
            "parameters": {
                "P": "int",
                "N": "int"
            },
            "name": "RootPrecision#squareRoot",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "RootPrecision#main",
                "SquareRootBinarySearch#main",
                "SquareRootWithNewtonRaphsonTestMethod#testfor1",
                "SquareRootWithNewtonRaphsonTestMethod#testfor2",
                "SquareRootWithNewtonRaphsonTestMethod#testfor625"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "BinaryExponentiationTest#testPower": {
            "parameters": {},
            "name": "BinaryExponentiationTest#testPower",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PowerSum#power",
                "BinaryExponentiation#power"
            ]
        },
        "Palindrome#isPalindromeTwoPointer": {
            "parameters": {
                "s": "String"
            },
            "name": "Palindrome#isPalindromeTwoPointer",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "PalindromeTest#palindrome"
            ],
            "children": []
        },
        "ParseInteger#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ParseInteger#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ParseInteger#parseInt"
            ]
        },
        "SlowSortTest#slowSortSingleStringElementArray": {
            "parameters": {},
            "name": "SlowSortTest#slowSortSingleStringElementArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "SumWithoutArithmeticOperatorsTest#addRandoms": {
            "parameters": {},
            "name": "SumWithoutArithmeticOperatorsTest#addRandoms",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MinimumSumPartition#getSum",
                "SegmentTree#getSum",
                "SumWithoutArithmeticOperators#getSum"
            ]
        },
        "FibonacciHeap#empty": {
            "parameters": {},
            "name": "FibonacciHeap#empty",
            "recursive": "false",
            "inComing": 21,
            "outGoing": 0,
            "numberOfCalls": 21,
            "parents": [
                "FibonacciHeap#insert",
                "FibonacciHeap#deleteMin",
                "FibonacciHeap#meld",
                "FibonacciHeap#countersRep",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextSmallerElement#findNextSmallerElements",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "FibonacciJavaStreams#calculate",
                "MatrixUtil#operate",
                "MatrixUtil#multiply",
                "BreadthFirstSearch#search"
            ],
            "children": []
        },
        "WordLadderTest#testWordLadder": {
            "parameters": {},
            "name": "WordLadderTest#testWordLadder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WordLadder#ladderLength"
            ]
        },
        "BinaryExponentiationTest#testCalculatePower": {
            "parameters": {},
            "name": "BinaryExponentiationTest#testCalculatePower",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BinaryExponentiation#calculatePower"
            ]
        },
        "CircularQueue#deleteQueue": {
            "parameters": {},
            "name": "CircularQueue#deleteQueue",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CircularQueue#main"
            ],
            "children": []
        },
        "QuickSelectTest#quickSelectNullList": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectNullList",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "QuickSelect#select"
            ]
        },
        "QuickSelect#partition": {
            "parameters": {
                "left": "int",
                "right": "int",
                "pivotIndex": "int",
                "list": "List\u003cT\u003e",
                "n": "int"
            },
            "name": "QuickSelect#partition",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "FindKthNumber#findKthMax",
                "BFPRT#bfprt",
                "QuickSelect#selectIndex",
                "DualPivotQuickSort#dualPivotQuicksort",
                "IntrospectiveSort#introSort",
                "QuickSort#randomPartition"
            ],
            "children": [
                "FindKthNumber#swap",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "OddEvenSort#swap",
                "LazySegmentTreeTest#get",
                "Map#get",
                "MinHeap#swap",
                "DynamicArray#get",
                "SinglyLinkedListTest#swap",
                "CircularBuffer#get",
                "GenericHeap#swap",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "SkipList#get",
                "FindMinRecursion#min",
                "CircularBufferTest#get",
                "IntrospectiveSort#swap",
                "GenericHeap#get",
                "MinValue#min",
                "LinearProbingHashMap#get",
                "HeapSort#swap",
                "LRUCache#get",
                "LFUCache#get",
                "BFPRT#swap",
                "BucketSort#min",
                "DualPivotQuickSort#swap"
            ]
        },
        "GenericTree#size2call": {
            "parameters": {},
            "name": "GenericTree#size2call",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#size2"
            ]
        },
        "Area#surfaceAreaHemisphere": {
            "parameters": {
                "radius": "double"
            },
            "name": "Area#surfaceAreaHemisphere",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AreaTest#surfaceAreaHemisphere",
                "AreaTest#testAllIllegalInput"
            ],
            "children": []
        },
        "LCA#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LCA#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "Kosaraju#dfs",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "LCA#dfs",
                "CircularBufferTest#get",
                "Cycle#dfs",
                "GenericHeap#get",
                "DynamicArray#add",
                "BSTRecursive#add",
                "LCA#getLCA",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Edge#getWeight": {
            "parameters": {},
            "name": "Edge#getWeight",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "UpperTest#toUpperCase": {
            "parameters": {},
            "name": "UpperTest#toUpperCase",
            "recursive": "false",
            "inComing": 20,
            "outGoing": 0,
            "numberOfCalls": 20,
            "parents": [
                "HillCipher#encrypt",
                "HillCipher#decrypt",
                "HillCipher#hillCipher",
                "Polybius#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "HexToOct#hex2decimal",
                "HexaDecimalToDecimal#getHexaToDec",
                "RomanToInteger#romanToInt",
                "CRC16#crc16",
                "Upper#main",
                "Upper#toUpperCase",
                "UpperTest#toUpperCase"
            ],
            "children": [
                "UpperTest#toUpperCase",
                "Upper#toUpperCase"
            ]
        },
        "FibonacciHeap#fromBuckets": {
            "parameters": {
                "buckets": "HeapNode[]"
            },
            "name": "FibonacciHeap#fromBuckets",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FibonacciHeap#successiveLink"
            ],
            "children": [
                "NodeStack#setNext",
                "HeapElement#getKey",
                "HeapNode#getKey",
                "HeapNode#setNext",
                "Entry#getKey"
            ]
        },
        "WiggleSortTest#WiggleTestNumbersOddDuplicates": {
            "parameters": {},
            "name": "WiggleSortTest#WiggleTestNumbersOddDuplicates",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "PriorityQueue#getSize": {
            "parameters": {},
            "name": "PriorityQueue#getSize",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "DynamicArray#main",
                "NodeStack#push",
                "NodeStack#pop",
                "NodeStack#isEmpty",
                "NodeStack#size",
                "StackOfLinkedList#main",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": []
        },
        "Conway#generateList": {
            "parameters": {
                "maxIteration": "int",
                "originalString": "String"
            },
            "name": "Conway#generateList",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "Conway#generateNextElement",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "BogoSort#nextPermutation": {
            "parameters": {
                "array": "T[]"
            },
            "name": "BogoSort#nextPermutation",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BogoSort#sort"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "GenericTree#find": {
            "parameters": {
                "node": "Node",
                "info": "int"
            },
            "name": "GenericTree#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericTree#find",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "MRUCache#get",
                "LFSR#get",
                "BSTRecursiveGeneric#find",
                "LazySegmentTreeTest#get",
                "Map#get",
                "BSTIterative#find",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinearSearch#find",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "IterativeTernarySearch#find",
                "CircularBuffer#get",
                "GenericHeap#size",
                "IterativeBinarySearch#find",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "UpperBound#find",
                "StackArrayList#size",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "CircularBufferTest#get",
                "FibonacciSearch#find",
                "GenericHeap#get",
                "SkipList#size",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "StackArray#size",
                "LowerBound#find",
                "Deques#size",
                "BinarySearch#find",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "FibonacciHeap#size",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "GenericHashMapUsingArray#get": {
            "parameters": {
                "key": "K"
            },
            "name": "GenericHashMapUsingArray#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "GenericHashMapUsingArray#hashFunction",
                "HeapElement#equals"
            ]
        },
        "HappyNumbersSeq#sumSquares": {
            "parameters": {
                "n": "int"
            },
            "name": "HappyNumbersSeq#sumSquares",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "HappyNumbersSeq#main"
            ],
            "children": []
        },
        "FibonacciHeapTest#testHeap": {
            "parameters": {},
            "name": "FibonacciHeapTest#testHeap",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "FindMin#findMin",
                "AVLSimple#insert",
                "Queue#insert",
                "FibonacciHeap#deleteMin",
                "MedianOfRunningArray#insert",
                "HeapElement#getKey",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "HeapNode#getKey",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "KDTreeTest#findMin",
                "BSTRecursive#insert",
                "FibonacciHeap#findMin",
                "Trieac#insert",
                "Entry#getKey",
                "PriorityQueue#insert",
                "OptimalJobScheduling#findMin"
            ]
        },
        "FenwickTree#query": {
            "parameters": {
                "i": "int"
            },
            "name": "FenwickTree#query",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "CursorLinkedList#get": {
            "parameters": {
                "position": "int"
            },
            "name": "CursorLinkedList#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": []
        },
        "AVLTree#rebalance": {
            "parameters": {
                "n": "Node"
            },
            "name": "AVLTree#rebalance",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AVLTree#insert",
                "AVLTree#delete",
                "AVLTree#rebalance"
            ],
            "children": [
                "AVLTree#rebalance",
                "AVLTree#rotateRight",
                "HeightStrategy#height",
                "AVLTree#rotateLeftThenRight",
                "BernoulliHeightStrategy#height",
                "RedBlackBST#rotateLeft",
                "AVLTree#rotateRightThenLeft",
                "AVLTree#height",
                "GenericTree#height",
                "RedBlackBST#rotateRight",
                "ArrayLeftRotation#rotateLeft",
                "AVLTree#rotateLeft",
                "AVLTree#setBalance",
                "AVLSimple#height",
                "LevelOrderTraversalHelper#height"
            ]
        },
        "SearchAlgorithm#find": {
            "parameters": {
                "array": "T[]",
                "key": "T"
            },
            "name": "SearchAlgorithm#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": []
        },
        "RangeInSortedArray#alteredBinSearch": {
            "parameters": {
                "left": "int",
                "range": "int[]",
                "right": "int",
                "goLeft": "boolean",
                "nums": "int[]",
                "key": "int"
            },
            "name": "RangeInSortedArray#alteredBinSearch",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "RangeInSortedArray#alteredBinSearch"
            ],
            "children": [
                "RangeInSortedArray#alteredBinSearch"
            ]
        },
        "BinaryPow#binPow": {
            "parameters": {
                "p": "int",
                "a": "int"
            },
            "name": "BinaryPow#binPow",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "BinaryPowTest#testBinPow"
            ],
            "children": []
        },
        "PalindromicPartitioning#minimalpartitions": {
            "parameters": {
                "word": "String"
            },
            "name": "PalindromicPartitioning#minimalpartitions",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PalindromicPartitioning#main"
            ],
            "children": []
        },
        "A5KeyStreamGenerator#getNextKeyStream": {
            "parameters": {},
            "name": "A5KeyStreamGenerator#getNextKeyStream",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "A5Cipher#encrypt"
            ],
            "children": [
                "LFSR#clock",
                "A5KeyStreamGenerator#reInitializeRegisters",
                "LFSRTest#clock",
                "BaseLFSR#clock",
                "CompositeLFSR#clock"
            ]
        },
        "GenericTree#create_treeG": {
            "parameters": {
                "node": "Node",
                "childindx": "int",
                "scn": "Scanner"
            },
            "name": "GenericTree#create_treeG",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "null#null",
                "GenericTree#create_treeG"
            ],
            "children": [
                "GenericTree#create_treeG",
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "matrixTranspose#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "matrixTranspose#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "TopologicalSort#sort": {
            "parameters": {
                "u": "Vertex",
                "list": "LinkedList\u003cString\u003e",
                "graph": "Graph"
            },
            "name": "TopologicalSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "TopologicalSort#sort",
                "MRUCache#get",
                "LFSR#get",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DynamicArray#get",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CircularBuffer#get",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "GenericHashMapUsingArrayList#get",
                "PancakeSort#sort",
                "SkipListTest#get",
                "TreeSort#sort",
                "SkipList#get",
                "CircularBufferTest#get",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "GenericHeap#get",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "LinearProbingHashMap#get",
                "StoogeSort#sort",
                "LRUCache#get",
                "PigeonholeSort#sort",
                "LFUCache#get",
                "Deques#addFirst",
                "BitonicSort#sort"
            ]
        },
        "FindMaxRecursion#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "FindMaxRecursion#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DynamicArray#stream",
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "HorspoolSearch#findFirstInsensitive": {
            "parameters": {
                "pattern": "String",
                "text": "String"
            },
            "name": "HorspoolSearch#findFirstInsensitive",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HorspoolSearch#firstOccurrence"
            ]
        },
        "NextGraterElement#findNextGreaterElements": {
            "parameters": {
                "array": "int[]"
            },
            "name": "NextGraterElement#findNextGreaterElements",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "NextGraterElement#main"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LinkedListStack#push",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "StackArrayList#push",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "NodeStack#push",
                "LinkedListStack#pop",
                "CircularQueue#isEmpty",
                "NodeStack#peek",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "PriorityQueue#isEmpty"
            ]
        },
        "ExponentialSearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ExponentialSearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "PerfectBinarySearch#binarySearch",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "RomanNumeralUtil#generate",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BinarySearch2dArray#binarySearch",
                "BSTRecursive#find"
            ]
        },
        "A5KeyStreamGenerator#incrementFrameCounter": {
            "parameters": {},
            "name": "A5KeyStreamGenerator#incrementFrameCounter",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "A5KeyStreamGenerator#reInitializeRegisters"
            ],
            "children": [
                "LinearProbingHashMap#increment",
                "Utils#increment"
            ]
        },
        "ExponentialSearch#find": {
            "parameters": {
                "array": "T[]",
                "key": "T"
            },
            "name": "ExponentialSearch#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": [
                "PerfectBinarySearch#binarySearch",
                "FindMinRecursion#min",
                "MinValue#min",
                "BinarySearch2dArray#binarySearch",
                "BucketSort#min"
            ]
        },
        "CreateAndDetectLoop#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CreateAndDetectLoop#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciHeap#insert",
                "SkylineProblem#print",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "PrintAMatrixInSpiralOrder#print",
                "BloomFilter#insert",
                "SinglyLinkedList#detectLoop",
                "AVLSimple#insert",
                "Queue#insert",
                "CursorLinkedList#printList",
                "SkipListTest#print",
                "MedianOfRunningArray#insert",
                "dijkstras#print",
                "SinglyLinkedList#getHead",
                "MinPriorityQueue#print",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "CreateAndDetectLoop#createLoop",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "BufferedReader#close",
                "AVLTree#insert",
                "CreateAndDetectLoop#detectLoop",
                "CreateAndDetectLoop#printList",
                "Sudoku#print",
                "SinglyLinkedListTest#detectLoop",
                "SinglyLinkedList#print",
                "NodeStack#getHead",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "NodeStack#print",
                "BSTRecursive#insert",
                "SortUtils#print",
                "Trieac#insert",
                "RadixSort#print",
                "PriorityQueue#insert"
            ]
        },
        "Permutation#permutation": {
            "parameters": {
                "arr": "T[]"
            },
            "name": "Permutation#permutation",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements"
            ],
            "children": [
                "Permutation#backtracking",
                "Combination#backtracking"
            ]
        },
        "ConwayTest#testGenerateNextElementWith123456": {
            "parameters": {},
            "name": "ConwayTest#testGenerateNextElementWith123456",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Conway#generateNextElement"
            ]
        },
        "CountFriendsPairingTest#testForFiveElements": {
            "parameters": {},
            "name": "CountFriendsPairingTest#testForFiveElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CountFriendsPairing#countFriendsPairing"
            ]
        },
        "ColorContrastRatio#getContrastRatio": {
            "parameters": {
                "a": "Color",
                "b": "Color"
            },
            "name": "ColorContrastRatio#getContrastRatio",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "ColorContrastRatio#test"
            ],
            "children": [
                "ColorContrastRatio#getRelativeLuminance"
            ]
        },
        "WorstFitCPUTest#testFitBadCase": {
            "parameters": {},
            "name": "WorstFitCPUTest#testFitBadCase",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "Sort012D#sort012": {
            "parameters": {
                "a": "int[]"
            },
            "name": "Sort012D#sort012",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Sort012D#main",
                "DNFSort#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "SinglyLinkedList#isEmpty": {
            "parameters": {},
            "name": "SinglyLinkedList#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "MRUCache#get": {
            "parameters": {
                "key": "K"
            },
            "name": "MRUCache#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "Entry#getValue",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "MRUCache#moveEntryToLast",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "GenericHashMapUsingArray#containsKey"
            ]
        },
        "Mandelbrot#getImage": {
            "parameters": {
                "imageWidth": "int",
                "figureCenterY": "double",
                "useDistanceColorCoding": "boolean",
                "figureWidth": "double",
                "figureCenterX": "double",
                "imageHeight": "int",
                "maxStep": "int"
            },
            "name": "Mandelbrot#getImage",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Mandelbrot#main"
            ],
            "children": [
                "Mandelbrot#blackAndWhiteColorMap",
                "Mandelbrot#colorCodedColorMap",
                "PathAndDistance#getDistance",
                "Mandelbrot#getDistance"
            ]
        },
        "WiggleSort#wiggleSort": {
            "parameters": {
                "sortThis": "T[]"
            },
            "name": "WiggleSort#wiggleSort",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "WiggleSort#sort"
            ],
            "children": [
                "Ceil#ceil",
                "WiggleSort#triColorSort",
                "QuickSelect#select",
                "Floor#floor"
            ]
        },
        "LongDivisionTest#testDividendIsZero": {
            "parameters": {},
            "name": "LongDivisionTest#testDividendIsZero",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LongDivision#divide",
                "Complex#divide"
            ]
        },
        "CountFriendsPairingTest#testForOneElement": {
            "parameters": {},
            "name": "CountFriendsPairingTest#testForOneElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CountFriendsPairing#countFriendsPairing"
            ]
        },
        "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide": {
            "parameters": {},
            "name": "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString",
                "BinarySearch2dArray#BinarySearch"
            ]
        },
        "HammingDistance#calculateHammingDistance": {
            "parameters": {
                "s1": "String",
                "s2": "String"
            },
            "name": "HammingDistance#calculateHammingDistance",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HammingDistanceTest#testHammingDistance",
                "HammingDistanceTest#testNotEqualStringLengths"
            ],
            "children": []
        },
        "LinearProbingHashMap#keys": {
            "parameters": {},
            "name": "LinearProbingHashMap#keys",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MapTest#keysTest"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "Trie#add",
                "GnomeSort#sort",
                "Vector2#add",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "BSTRecursiveGeneric#add",
                "SlowSort#sort",
                "StrassenMatrixMultiplication#add",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "DynamicArray#add",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "BSTRecursive#add",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "MatrixUtil#add",
                "PigeonholeSort#sort",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "BitonicSort#sort",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "SameTreesCheckTest#testSameTreesFails": {
            "parameters": {},
            "name": "SameTreesCheckTest#testSameTreesFails",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "SameTreesCheck#check",
                "DuplicateBrackets#check",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "MainCuckooHashing#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MainCuckooHashing#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HashMapCuckooHashing#checkLoadFactor",
                "HashMapCuckooHashing#findKeyInTable",
                "HashMapCuckooHashing#displayHashtable",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#reHashTableIncreasesTableSize",
                "HashMapCuckooHashing#insertKey2HashTable",
                "BufferedReader#close",
                "HashMapCuckooHashingTest#reHashTableIncreasesTableSize",
                "HashMap#displayHashtable"
            ]
        },
        "BubbleSortTest#bubbleSortSingleStringElementArray": {
            "parameters": {},
            "name": "BubbleSortTest#bubbleSortSingleStringElementArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "SimpleTreeNode#isLeafNode": {
            "parameters": {},
            "name": "SimpleTreeNode#isLeafNode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "RadixSort#radixsort": {
            "parameters": {
                "arr": "int[]",
                "n": "int"
            },
            "name": "RadixSort#radixsort",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "RadixSort#main"
            ],
            "children": [
                "RadixSort#getMax",
                "RadixSort#countSort"
            ]
        },
        "QuickSelectTest#quickSelectMedianOfOneElement": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectMedianOfOneElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "QuickSelect#select"
            ]
        },
        "MinimizingLateness#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MinimizingLateness#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DyanamicProgrammingKnapsack#max",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "FindMaxRecursion#max",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "BufferedReader#close",
                "LinkedList#isEmpty",
                "MaxValue#max",
                "HashMapCuckooHashing#isEmpty",
                "ParseInteger#parseInt",
                "BruteForceKnapsack#max",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "GenericTree#max",
                "BucketSort#max",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "HashMapCuckooHashing#checkLoadFactor": {
            "parameters": {},
            "name": "HashMapCuckooHashing#checkLoadFactor",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "HashMapCuckooHashing#insertKey2HashTable",
                "MainCuckooHashing#main"
            ],
            "children": [
                "HashMapCuckooHashing#reHashTableIncreasesTableSize",
                "HashMapCuckooHashingTest#reHashTableIncreasesTableSize"
            ]
        },
        "FibonacciHeap#insert": {
            "parameters": {
                "key": "int"
            },
            "name": "FibonacciHeap#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "FibonacciHeap#updateMin",
                "FibonacciHeap#empty",
                "NodeStack#setNext",
                "HeapNode#setNext"
            ]
        },
        "VectorCrossProduct#test": {
            "parameters": {},
            "name": "VectorCrossProduct#test",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "CreateBSTFromSortedArray#main",
                "CreateBinaryTreeFromInorderPreorder#main",
                "VampireNumber#main",
                "VectorCrossProduct#main",
                "ColorContrastRatio#main"
            ],
            "children": [
                "VectorCrossProduct#dotProduct",
                "VectorCrossProduct#crossProduct",
                "VectorCrossProduct#displayVector"
            ]
        },
        "zigZagPattern#encode": {
            "parameters": {
                "s": "String",
                "numRows": "int"
            },
            "name": "zigZagPattern#encode",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "CaesarTest#caesarEncryptTest",
                "SimpleSubCipherTest#simpleSubCipherEncryptTest",
                "SimpleSubstitutionCipherTest#testEncode",
                "SimpleSubstitutionCipherTest#testIsTextTheSameAfterEncodeAndDecode",
                "zigZagPatternTest#palindrome"
            ],
            "children": []
        },
        "LeftistHeap#in_order": {
            "parameters": {},
            "name": "LeftistHeap#in_order",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "LeftistHeapTest#testLeftistHeap"
            ],
            "children": [
                "LeftistHeap#in_order_aux"
            ]
        },
        "SimpleSortTest#simpleSortSingleIntegerArray": {
            "parameters": {},
            "name": "SimpleSortTest#simpleSortSingleIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "LFSR#get": {
            "parameters": {
                "bitIndex": "int"
            },
            "name": "LFSR#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "FrizzyNumber#getNthFrizzy": {
            "parameters": {
                "n": "int",
                "base": "int"
            },
            "name": "FrizzyNumber#getNthFrizzy",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "FrizzyNumberTest#testFrizziesForBase2",
                "FrizzyNumberTest#testFrizziesForBase3",
                "FrizzyNumberTest#testFrizziesForBase69"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "Area#surfaceAreaParallelogram": {
            "parameters": {
                "base": "double",
                "height": "double"
            },
            "name": "Area#surfaceAreaParallelogram",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AreaTest#testSurfaceAreaParallelogram",
                "AreaTest#testAllIllegalInput"
            ],
            "children": []
        },
        "ShellSort#sort": {
            "parameters": {
                "array": "T[]"
            },
            "name": "ShellSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "SortUtils#less",
                "HeapSort#less"
            ]
        },
        "CharactersSame#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CharactersSame#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CharacterSameTest#isAllCharactersSame",
                "CharactersSame#isAllCharactersSame"
            ]
        },
        "LeftistHeap#in_order_aux": {
            "parameters": {
                "lst": "ArrayList\u003cInteger\u003e",
                "n": "Node"
            },
            "name": "LeftistHeap#in_order_aux",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "LeftistHeap#in_order",
                "LeftistHeap#in_order_aux"
            ],
            "children": [
                "LeftistHeap#in_order_aux",
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "OrderAgnosticBinarySearchTest#LeftHalfAscOrder": {
            "parameters": {},
            "name": "OrderAgnosticBinarySearchTest#LeftHalfAscOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OrderAgnosticBinarySearch#BinSearchAlgo"
            ]
        },
        "SimpleSort#sort": {
            "parameters": {
                "array": "T[]"
            },
            "name": "SimpleSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "SortUtils#less",
                "HeapSort#less"
            ]
        },
        "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings": {
            "parameters": {},
            "name": "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "FibonacciHeap#size",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "Area#surfaceAreaCylinder": {
            "parameters": {
                "radius": "double",
                "height": "double"
            },
            "name": "Area#surfaceAreaCylinder",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AreaTest#testSurfaceAreaCylinder",
                "AreaTest#testAllIllegalInput"
            ],
            "children": []
        },
        "KeithNumber#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "KeithNumber#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KeithNumber#isKeith"
            ]
        },
        "PrimeCheck#modPow": {
            "parameters": {
                "a": "long",
                "b": "long",
                "c": "long"
            },
            "name": "PrimeCheck#modPow",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "RSA#encrypt",
                "RSA#decrypt",
                "PrimeCheck#fermatPrimeChecking"
            ],
            "children": []
        },
        "Entry#setNextEntry": {
            "parameters": {
                "nextEntry": "Entry\u003cI,J\u003e"
            },
            "name": "Entry#setNextEntry",
            "recursive": "false",
            "inComing": 13,
            "outGoing": 0,
            "numberOfCalls": 13,
            "parents": [
                "LRUCache#evict",
                "LRUCache#moveNodeToLast",
                "LRUCache#addNewEntry",
                "MRUCache#evict",
                "MRUCache#addNewEntry",
                "MRUCache#moveEntryToLast"
            ],
            "children": []
        },
        "Combinations#factorial": {
            "parameters": {
                "n": "int"
            },
            "name": "Combinations#factorial",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "Combinations#factorial",
                "Combinations#combinations",
                "Factorial#main",
                "FactorialRecursion#main",
                "FactorialRecursion#factorial",
                "FactorialTest#test"
            ],
            "children": [
                "Combinations#factorial",
                "Factorial#factorial",
                "FactorialRecursion#factorial"
            ]
        },
        "KrishnamurthyNumber#isKMurthy": {
            "parameters": {
                "n": "int"
            },
            "name": "KrishnamurthyNumber#isKMurthy",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "KrishnamurthyNumber#main"
            ],
            "children": []
        },
        "BubbleSortRecursion#sort": {
            "parameters": {
                "unsorted": "T[]"
            },
            "name": "BubbleSortRecursion#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "BubbleSortRecursion#bubbleSort"
            ]
        },
        "PalindromePrime#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PalindromePrime#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BufferedReader#close",
                "PalindromePrime#functioning"
            ]
        },
        "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound": {
            "parameters": {},
            "name": "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "TreeSortTest#treeSortEmptyArray": {
            "parameters": {},
            "name": "TreeSortTest#treeSortEmptyArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "SkylineProblem#print": {
            "parameters": {
                "skyline": "ArrayList\u003cSkyline\u003e"
            },
            "name": "SkylineProblem#print",
            "recursive": "false",
            "inComing": 209,
            "outGoing": 0,
            "numberOfCalls": 209,
            "parents": [
                "MazeRecursion#mazeRecursion",
                "ColumnarTranspositionCipher#showTable",
                "ProductCipher#main",
                "AnyBaseToAnyBase#main",
                "BinaryToDecimal#main",
                "DecimalToOctal#main",
                "HexToOct#main",
                "HexaDecimalToDecimal#main",
                "OctalToDecimal#main",
                "OctalToHexadecimal#main",
                "BellmanFord#printPath",
                "BellmanFord#go",
                "BellmanFord#show",
                "null#null",
                "Cycle#printAll",
                "dijkstras#dijkstra",
                "FloydWarshall#floydwarshall",
                "AdjacencyList#printGraph",
                "KahnsAlgorithm#main",
                "MinPriorityQueue#print",
                "MinPriorityQueue#main",
                "CreateAndDetectLoop#printList",
                "CreateAndDetectLoop#main",
                "Link#displayLink",
                "SinglyLinkedList#print",
                "SinglyLinkedList#main",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NodeStack#main",
                "ReverseStack#main",
                "AVLTree#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "BSTRecursive#preOrder",
                "BSTRecursive#postOrder",
                "BSTRecursive#inOrder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursiveGeneric#inOrder",
                "BinaryTree#inOrder",
                "BinaryTree#preOrder",
                "BinaryTree#postOrder",
                "BinaryTree#bfs",
                "GenericTree#display_1",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "LevelOrderTraversalHelper#printGivenLevel",
                "Tree#printTopView",
                "RedBlackBST#printTree",
                "RedBlackBST#printTreepre",
                "RedBlackBST#deleteDemo",
                "Node#printInOrder",
                "Node#printPreOrder",
                "Node#printPostOrder",
                "Node#printLevelOrder",
                "Main#main",
                "BoundaryFill#printImageArray",
                "CoinChange#printAmount",
                "LevenshteinDistance#main",
                "MatrixChainMultiplication#main",
                "MatrixChainMultiplication#printOptimalParens",
                "MatrixChainMultiplication#printArray",
                "MatrixChainMultiplication#input",
                "OptimalJobScheduling#showResults",
                "Sum_Of_Subset#main",
                "LeonardoNumber#main",
                "MagicSquare#main",
                "PrimeCheck#main",
                "TrinomialTriangle#printTrinomial",
                "InverseOfMatrix#main",
                "MedianOfRunningArray#main",
                "PalindromePrime#functioning",
                "Sort012D#sort012",
                "ThreeSumProblem#main",
                "TwoSumProblem#main",
                "matrixTranspose#main",
                "BankersAlgorithm#checkSafeSystem",
                "FloydTriangle#main",
                "HappyNumbersSeq#main",
                "Krishnamurthy#main",
                "LowestBasePalindrome#main",
                "PageRank#main",
                "PasswordGen#main",
                "PerlinNoise#main",
                "Rotate_by_90_degree#printMatrix",
                "SkylineProblem#run",
                "SkylineProblem#print",
                "Sudoku#print",
                "Sudoku#main",
                "TowerOfHanoi#main",
                "LinearSearchThread#main",
                "SquareRootBinarySearch#main",
                "BitonicSort#printArray",
                "BogoSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#main",
                "CycleSort#main",
                "DNFSort#printArray",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "MergeSortNoExtraSpace#main",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "RadixSort#print",
                "RadixSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "StoogeSort#main",
                "SwapSort#main",
                "TreeSort#main",
                "LongestPalindromicSubstring#main",
                "SkipListTest#add",
                "SkipListTest#get",
                "SkipListTest#contains",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "SkipListTest#checkSortedOnLowestLayer",
                "TestPrintMatrixInSpiralOrder#testOne",
                "TestPrintMatrixInSpiralOrder#testTwo"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "SimpleNode#hasNext",
                "LinkedQueue#iterator",
                "ListIterator#hasNext",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "DynamicArray#iterator",
                "DynamicArrayIterator#hasNext",
                "Bag#iterator",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "NodeStack#getNext": {
            "parameters": {},
            "name": "NodeStack#getNext",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "LinkedList#findEnd",
                "LinkedList#findKey",
                "LinkedList#delete",
                "LinkedList#display",
                "FibonacciHeap#deleteMin"
            ],
            "children": []
        },
        "NumberOfDigits#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "NumberOfDigits#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "NumberOfDigits#numberOfDigitsRecursion",
                "NumberOfDigits#numberOfDigits",
                "NumberOfDigits#numberOfDigitsFast",
                "NumberOfDigits#numberOfDigitsFaster"
            ]
        },
        "WordBoggle#boggleBoard": {
            "parameters": {
                "words": "String[]",
                "board": "char[][]"
            },
            "name": "WordBoggle#boggleBoard",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "WordBoggle#main"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "WordBoggle#explore",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "InsertionSort#measureApproxExecTime": {
            "parameters": {
                "randomArray": "Double[]",
                "sortAlgorithm": "Function\u003cDouble[],Double[]\u003e"
            },
            "name": "InsertionSort#measureApproxExecTime",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "InsertionSort#main"
            ],
            "children": []
        },
        "MyAtoiTest#testTwo": {
            "parameters": {},
            "name": "MyAtoiTest#testTwo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MyAtoi#myAtoi"
            ]
        },
        "ClosestPair#closestPair": {
            "parameters": {
                "indexNum": "int",
                "a": "Location[]"
            },
            "name": "ClosestPair#closestPair",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "ClosestPair#closestPair",
                "ClosestPair#main"
            ],
            "children": [
                "ClosestPair#closestPair",
                "ClosestPair#setMinNum",
                "Pow#pow",
                "FFTTest#abs",
                "FindMinRecursion#min",
                "ClosestPair#bruteForce",
                "MinValue#min",
                "ClosestPair#yQuickSort",
                "ClosestPair#setSecondCount",
                "Complex#abs",
                "PowRecursion#pow",
                "BucketSort#min"
            ]
        },
        "Pangram#isPangram2": {
            "parameters": {
                "s": "String"
            },
            "name": "Pangram#isPangram2",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "PangramTest#testPangram"
            ],
            "children": [
                "CursorLinkedList#indexOf",
                "Lower#toLowerCase",
                "LowerTest#toLowerCase"
            ]
        },
        "BubbleSortRecursion#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BubbleSortRecursion#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "ShellSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ShellSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "FindMinRecursion#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "FindMinRecursion#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DynamicArray#stream",
                "FindMinRecursion#min",
                "MinValue#min",
                "BucketSort#min"
            ]
        },
        "Palindrome#isPalindromeRecursion": {
            "parameters": {
                "s": "String"
            },
            "name": "Palindrome#isPalindromeRecursion",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "Palindrome#isPalindromeRecursion",
                "PalindromeTest#palindrome"
            ],
            "children": [
                "Palindrome#isPalindromeRecursion"
            ]
        },
        "SquareFreeInteger#isSquareFreeInteger": {
            "parameters": {
                "number": "int"
            },
            "name": "SquareFreeInteger#isSquareFreeInteger",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "SquareFreeIntegerTest#testIsSquareFreeInteger",
                "SquareFreeIntegerTest#testIsSquareFreeIntegerThrowExceptionIfNumberIsZero",
                "SquareFreeIntegerTest#testIsSquareFreeIntegerMustThrowExceptionIfNumberIsNegative"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "PrimeFactorization#pfactors",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "FibonacciHeap#size"
            ]
        },
        "BinaryInsertionSortTest#BinaryInsertionSortTestDuplicate": {
            "parameters": {},
            "name": "BinaryInsertionSortTest#BinaryInsertionSortTestDuplicate",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BinaryInsertionSort#binaryInsertSort"
            ]
        },
        "Damm#checkAndPrint": {
            "parameters": {
                "input": "String"
            },
            "name": "Damm#checkAndPrint",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Damm#main",
                "Verhoeff#main"
            ],
            "children": [
                "Damm#dammCheck"
            ]
        },
        "HillCipher#hillCipher": {
            "parameters": {
                "message": "String"
            },
            "name": "HillCipher#hillCipher",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "HillCipher#main"
            ],
            "children": [
                "RSA#decrypt",
                "UpperTest#toUpperCase",
                "Blowfish#encrypt",
                "HillCipher#decrypt",
                "Upper#toUpperCase",
                "Vigenere#decrypt",
                "Vigenere#encrypt",
                "A5Cipher#encrypt",
                "HillCipher#encrypt",
                "Blowfish#decrypt",
                "Polybius#decrypt",
                "RSA#encrypt",
                "Polybius#encrypt"
            ]
        },
        "AdjacencyList#getVertices": {
            "parameters": {},
            "name": "AdjacencyList#getVertices",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "TopologicalSort#calculateInDegree"
            ],
            "children": []
        },
        "RabinKarp#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "RabinKarp#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RabinKarp#searchPat",
                "StringMatchFiniteAutomata#searchPat"
            ]
        },
        "CeilInBinarySearchTreeTest#testKeyAbsentLeafIsCeil": {
            "parameters": {},
            "name": "CeilInBinarySearchTreeTest#testKeyAbsentLeafIsCeil",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "CeilInBinarySearchTree#getCeil",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "MatrixChainMultiplication#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MatrixChainMultiplication#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "Trie#add",
                "CountSinglyLinkedListRecursion#count",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SkipListTest#print",
                "LinearProbingHashMap#size",
                "Task2#count",
                "DynamicArray#get",
                "dijkstras#print",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "MinPriorityQueue#print",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Task#count",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "Matrix#col",
                "BitonicSort#printArray",
                "CircularBufferTest#get",
                "UnionFind#count",
                "GenericHeap#get",
                "SkipList#size",
                "DNFSort#printArray",
                "DynamicArray#add",
                "ParseInteger#parseInt",
                "StackArray#size",
                "BSTRecursive#add",
                "Task1#count",
                "Deques#size",
                "Sudoku#print",
                "MatrixChainMultiplication#printArray",
                "NodeStack#size",
                "Matrix#row",
                "SinglyLinkedList#print",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "MatrixChainMultiplication#printOptimalParens",
                "LFUCache#get",
                "NodeStack#print",
                "FibonacciHeap#size",
                "MatrixChainMultiplication#input",
                "Complex#add",
                "SinglyLinkedList#count",
                "MatrixChainMultiplication#matrixChainOrder",
                "SortUtils#print",
                "GenericHeap#add",
                "Matrix#count",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "RadixSort#print",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "PasswordGen#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PasswordGen#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "PasswordGen#generatePassword",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "GenericArrayListQueue#pull": {
            "parameters": {},
            "name": "GenericArrayListQueue#pull",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "GenericArrayListQueue#main"
            ],
            "children": [
                "BSTRecursive#remove",
                "PriorityQueue#remove",
                "CircleLinkedList#remove",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "QueueWithStack#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "GenericArrayListQueue#hasElements"
            ]
        },
        "SkipListTest#removeFromTail": {
            "parameters": {},
            "name": "SkipListTest#removeFromTail",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SkipListTest#print",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "dijkstras#print",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "CircularBuffer#get",
                "MinPriorityQueue#print",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#remove",
                "SkipList#size",
                "SkipListTest#createSkipList",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "Sudoku#print",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "SinglyLinkedList#print",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "NodeStack#print",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "SortUtils#print",
                "RadixSort#print",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove"
            ]
        },
        "KMPSearchTest#KMPSearchTestLast": {
            "parameters": {},
            "name": "KMPSearchTest#KMPSearchTestLast",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KMPSearch#KMPSearch"
            ]
        },
        "MRUCache#addNewEntry": {
            "parameters": {
                "newEntry": "Entry\u003cK,V\u003e"
            },
            "name": "MRUCache#addNewEntry",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "LRUCache#put",
                "MRUCache#put"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "Entry#setNextEntry",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "Entry#setPreEntry",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "BinaryExponentiation#calculatePower": {
            "parameters": {
                "x": "long",
                "y": "long"
            },
            "name": "BinaryExponentiation#calculatePower",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "BinaryExponentiation#calculatePower",
                "BinaryExponentiationTest#testCalculatePower"
            ],
            "children": [
                "BinaryExponentiation#calculatePower"
            ]
        },
        "Verhoeff#verhoeffCheck": {
            "parameters": {
                "digits": "String"
            },
            "name": "Verhoeff#verhoeffCheck",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Verhoeff#checkAndPrint"
            ],
            "children": [
                "Damm#checkInput",
                "Verhoeff#checkInput",
                "Damm#toIntArray",
                "Verhoeff#toIntArray"
            ]
        },
        "InsertionSortTest#insertionSortClassicalSortSingleValueArrayShouldPass": {
            "parameters": {},
            "name": "InsertionSortTest#insertionSortClassicalSortSingleValueArrayShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "InsertionSortTest#testSingleValue"
            ]
        },
        "GenericTree#depth": {
            "parameters": {
                "node": "Node",
                "dep": "int"
            },
            "name": "GenericTree#depth",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericTree#depthcaller",
                "GenericTree#depth"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericTree#depth",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "BSTRecursiveGeneric#insert": {
            "parameters": {
                "node": "Node\u003cT\u003e",
                "data": "T"
            },
            "name": "BSTRecursiveGeneric#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "PriorityQueue#insert"
            ]
        },
        "DistanceFormula#hammingDistance": {
            "parameters": {
                "b2": "int[]",
                "b1": "int[]"
            },
            "name": "DistanceFormula#hammingDistance",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "DistanceFormulaTest#hammingTest1",
                "DistanceFormulaTest#hammingTest2",
                "DistanceFormulaTest#hammingTest3"
            ],
            "children": [
                "FFTTest#abs",
                "Complex#abs"
            ]
        },
        "Kosaraju#findStronglyConnectedComponents": {
            "parameters": {
                "transposeGraph": "List\u003cList\u003cInteger\u003e\u003e",
                "v": "int"
            },
            "name": "Kosaraju#findStronglyConnectedComponents",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Kosaraju#kosaraju"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "QueueWithStack#isEmpty",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "Kosaraju#dfs2",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "LinkedListStack#pop",
                "MatrixUtil#add",
                "CircularQueue#isEmpty",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "DynamicArray#isEmpty",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "CursorLinkedList#free": {
            "parameters": {
                "index": "int"
            },
            "name": "CursorLinkedList#free",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "CursorLinkedList#remove"
            ],
            "children": []
        },
        "GenericHashMapUsingArrayList#put": {
            "parameters": {
                "value": "V",
                "key": "K"
            },
            "name": "GenericHashMapUsingArrayList#put",
            "recursive": "false",
            "inComing": 156,
            "outGoing": 0,
            "numberOfCalls": 156,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "BinaryToHexadecimal#binToHex",
                "null#null",
                "LFUCache#put",
                "LRUCache#put",
                "MRUCache#put",
                "AdjacencyList#addEdge",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "GenericHashMapUsingArray#reHash",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#delete",
                "LinearProbingHashMap#resize",
                "GenericHeap#add",
                "GenericHeap#swap",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#test",
                "VerticalOrderTraversal#verticalTraversal",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#TwoPointer",
                "TwoSumProblem#HashMap",
                "Trie#add",
                "CountWords#getDictionary",
                "CountingSort#sort",
                "Graph#addEdge",
                "Anagrams#approach4",
                "CheckAnagrams#isAnagrams",
                "Isomorphic#checkStrings",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#isFull",
                "CircularBufferTest#get",
                "CircularBufferTest#put",
                "CircularBufferTest#concurrentTest",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#putTest",
                "MapTest#getTest",
                "MapTest#deleteTest",
                "MapTest#containsTest",
                "MapTest#sizeTest",
                "MapTest#keysTest",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#reHash",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "HeapElement#hashCode",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHashMapUsingArrayList#reHash",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "FFTTest#abs",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "DynamicArray#add",
                "HeapElement#equals",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "Complex#abs",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "BSTRecursiveGeneric#inorderSort": {
            "parameters": {},
            "name": "BSTRecursiveGeneric#inorderSort",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList"
            ],
            "children": [
                "BSTRecursiveGeneric#inOrderSort"
            ]
        },
        "IntrospectiveSort#heapSort": {
            "parameters": {
                "a": "T[]",
                "high": "int",
                "low": "int"
            },
            "name": "IntrospectiveSort#heapSort",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MinPriorityQueue#main",
                "IntrospectiveSort#introSort"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "HeapSort#heapify",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "IntrospectiveSort#heapify",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "VerticalOrderTraversalTest#testVerticalTraversalCompleteTree": {
            "parameters": {},
            "name": "VerticalOrderTraversalTest#testVerticalTraversalCompleteTree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "VerticalOrderTraversal#verticalTraversal",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "NodeStack#setHead": {
            "parameters": {
                "ns": "NodeStack\u003c?\u003e"
            },
            "name": "NodeStack#setHead",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "SinglyLinkedList#main",
                "NodeStack#push",
                "NodeStack#pop"
            ],
            "children": []
        },
        "KosarajuTest#findStronglyConnectedComps": {
            "parameters": {},
            "name": "KosarajuTest#findStronglyConnectedComps",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "HeapElement#equals",
                "BSTRecursive#add",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "Kosaraju#kosaraju",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "SinglyLinkedListTest#createSampleList": {
            "parameters": {
                "length": "int"
            },
            "name": "SinglyLinkedListTest#createSampleList",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "SinglyLinkedListTest#detectLoop",
                "SinglyLinkedListTest#middle",
                "SinglyLinkedListTest#swap",
                "SinglyLinkedListTest#clear",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "BSTRecursive#add",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Verhoeff#checkAndPrint": {
            "parameters": {
                "input": "String"
            },
            "name": "Verhoeff#checkAndPrint",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Damm#main",
                "Verhoeff#main"
            ],
            "children": [
                "Verhoeff#verhoeffCheck"
            ]
        },
        "MinValue#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MinValue#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FindMinRecursion#min",
                "MinValue#min",
                "BucketSort#min"
            ]
        },
        "NewManShanksPrimeTest#testFive": {
            "parameters": {},
            "name": "NewManShanksPrimeTest#testFive",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "NewManShanksPrime#nthManShanksPrime"
            ]
        },
        "SubsetSum#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "SubsetSum#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Sum_Of_Subset#subsetSum",
                "SubsetSum#subsetSum"
            ]
        },
        "SimpleSubstitutionCipher#encode": {
            "parameters": {
                "cipherSmall": "String",
                "message": "String"
            },
            "name": "SimpleSubstitutionCipher#encode",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "CaesarTest#caesarEncryptTest",
                "SimpleSubCipherTest#simpleSubCipherEncryptTest",
                "SimpleSubstitutionCipherTest#testEncode",
                "SimpleSubstitutionCipherTest#testIsTextTheSameAfterEncodeAndDecode",
                "zigZagPatternTest#palindrome"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "CircularBuffer#put",
                "LFUCache#put",
                "UpperTest#toUpperCase",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "Deques#toString",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "HeapElement#toString",
                "Upper#toUpperCase",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "DynamicArray#toString",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Lower#toLowerCase",
                "GenericHeap#get",
                "Vector2#toString",
                "LowerTest#toLowerCase",
                "CursorLinkedList#append",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "Queue#toString",
                "CircleLinkedList#append",
                "LRUCache#put",
                "LinearProbingHashMap#put",
                "LinkedQueue#toString"
            ]
        },
        "TrieImp#insert": {
            "parameters": {
                "word": "String"
            },
            "name": "TrieImp#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": []
        },
        "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass": {
            "parameters": {},
            "name": "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "Blowfish#encrypt": {
            "parameters": {
                "plainText": "String",
                "key": "String"
            },
            "name": "Blowfish#encrypt",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HillCipher#hillCipher",
                "BlowfishTest#testEncrypt",
                "PolybiusTest#testEncrypt",
                "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption",
                "RSATest#testRSA",
                "VigenereTest#vigenereEncryptTest"
            ],
            "children": [
                "Blowfish#xor",
                "Blowfish#keyGenerate",
                "Blowfish#round"
            ]
        },
        "StrandSort#strandSort": {
            "parameters": {
                "list": "LinkedList\u003cE\u003e"
            },
            "name": "StrandSort#strandSort",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "MergeSort#merge",
                "Trie#add",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "StrandSort#merge",
                "Deques#peekLast",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "SimpleNode#hasNext",
                "Map#size",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "LinkedQueue#iterator",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "SkipList#size",
                "ListIterator#hasNext",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "MergeSortRecursive#merge",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "MatrixUtil#add",
                "DynamicArray#iterator",
                "DynamicArrayIterator#hasNext",
                "Bag#iterator",
                "FibonacciHeap#size",
                "TimSort#merge",
                "MergeSortedArrayList#merge",
                "Complex#add",
                "Deques#addLast",
                "MergeSortedSinglyLinkedList#merge",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "LeftistHeap#merge"
            ]
        },
        "BeadSort#sort": {
            "parameters": {
                "unsorted": "int[]"
            },
            "name": "BeadSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "SimpsonIntegration#f": {
            "parameters": {
                "x": "double"
            },
            "name": "SimpsonIntegration#f",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Blowfish#round",
                "SimpsonIntegration#simpsonsMethod"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "Blowfish#xor": {
            "parameters": {
                "a": "String",
                "b": "String"
            },
            "name": "Blowfish#xor",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "Blowfish#f",
                "Blowfish#keyGenerate",
                "Blowfish#round",
                "Blowfish#encrypt",
                "Blowfish#decrypt",
                "A5Cipher#encrypt"
            ],
            "children": [
                "Blowfish#hexToBin",
                "Blowfish#binToHex",
                "BinaryToHexadecimal#binToHex"
            ]
        },
        "ReverseString#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ReverseString#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ReverseString#reverse",
                "ReverseString#reverse2",
                "Rotation#reverse",
                "HeapElement#equals",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "ReverseStringRecursive#reverse",
                "LowestBasePalindrome#reverse"
            ]
        },
        "ColumnarTranspositionCipher#getColumn": {
            "parameters": {
                "column": "int",
                "rows": "int",
                "table": "Object[][]"
            },
            "name": "ColumnarTranspositionCipher#getColumn",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ColumnarTranspositionCipher#sortTable"
            ],
            "children": []
        },
        "WorstFitCPU#fitProcess": {
            "parameters": {
                "sizeOfProcesses": "int[]",
                "sizeOfBlocks": "int[]"
            },
            "name": "WorstFitCPU#fitProcess",
            "recursive": "false",
            "inComing": 21,
            "outGoing": 0,
            "numberOfCalls": 21,
            "parents": [
                "BestFitCPUTest#testFitForUseOfOneBlock",
                "BestFitCPUTest#testFitForEqualProcecesses",
                "BestFitCPUTest#testFitForNoEmptyBlockCell",
                "BestFitCPUTest#testFitForSameInputDifferentQuery",
                "BestFitCPUTest#testFitForMoreBlocksNoFit",
                "FirstFitCPUTest#testFitForUseOfOneBlock",
                "FirstFitCPUTest#testFitForEqualProcecesses",
                "FirstFitCPUTest#testFitForNoEmptyBlockCell",
                "FirstFitCPUTest#testFitForSameInputDifferentQuery",
                "FirstFitCPUTest#testFitForMoreBlocksNoFit",
                "NextFitCPUTest#testFitForUseOfOneBlock",
                "NextFitCPUTest#testFitForEqualProcecesses",
                "NextFitCPUTest#testFitForNoEmptyBlockCell",
                "NextFitCPUTest#testFitForSameInputDifferentQuery",
                "NextFitCPUTest#testFitForMoreBlocksNoFit",
                "WorstFitCPUTest#testFitForUseOfOneBlock",
                "WorstFitCPUTest#testFitForEqualProcecesses",
                "WorstFitCPUTest#testFitForNoEmptyBlockCell",
                "WorstFitCPUTest#testFitForSameInputDifferentQuery",
                "WorstFitCPUTest#testFitForMoreBlocksNoFit",
                "WorstFitCPUTest#testFitBadCase"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "WorstFitCPU#findWorstFit",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Fibonacci#fib": {
            "parameters": {
                "n": "int"
            },
            "name": "Fibonacci#fib",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Fibonacci#fib",
                "Fibonacci#main"
            ],
            "children": [
                "Fibonacci#fib",
                "Fibonacci#matrixMultiplication"
            ]
        },
        "CalculateMaxOfMinTest#testForOneElement": {
            "parameters": {},
            "name": "CalculateMaxOfMinTest#testForOneElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MaximumMinimumWindow#calculateMaxOfMin",
                "CalculateMaxOfMin#calculateMaxOfMin"
            ]
        },
        "VigenereTest#vigenereEncryptTest": {
            "parameters": {},
            "name": "VigenereTest#vigenereEncryptTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Blowfish#encrypt",
                "Vigenere#encrypt",
                "A5Cipher#encrypt",
                "HillCipher#encrypt",
                "RSA#encrypt",
                "Polybius#encrypt"
            ]
        },
        "FCFSScheduling#evaluateWaitingTime": {
            "parameters": {},
            "name": "FCFSScheduling#evaluateWaitingTime",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FCFSScheduling#scheduleProcesses"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "ProcessDetails#setWaitingTime",
                "ProcessDetails#getWaitingTime",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "ProcessDetails#getBurstTime",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "ClosestPair#setMinNum": {
            "parameters": {
                "minNum": "double"
            },
            "name": "ClosestPair#setMinNum",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "ClosestPair#closestPair",
                "ClosestPair#bruteForce"
            ],
            "children": []
        },
        "MatrixUtil#canMultiply": {
            "parameters": {
                "matrix2": "BigDecimal[][]",
                "matrix1": "BigDecimal[][]"
            },
            "name": "MatrixUtil#canMultiply",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MatrixUtil#multiply"
            ],
            "children": [
                "TrieImp#isValid",
                "MatrixUtil#isValid",
                "Solution#isValid",
                "ValidParentheses#isValid"
            ]
        },
        "SimpleSortTest#simpleSortEmptyArray": {
            "parameters": {},
            "name": "SimpleSortTest#simpleSortEmptyArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "PrintAMatrixInSpiralOrder#print": {
            "parameters": {
                "col": "int",
                "row": "int",
                "matrix": "int[][]"
            },
            "name": "PrintAMatrixInSpiralOrder#print",
            "recursive": "false",
            "inComing": 209,
            "outGoing": 0,
            "numberOfCalls": 209,
            "parents": [
                "MazeRecursion#mazeRecursion",
                "ColumnarTranspositionCipher#showTable",
                "ProductCipher#main",
                "AnyBaseToAnyBase#main",
                "BinaryToDecimal#main",
                "DecimalToOctal#main",
                "HexToOct#main",
                "HexaDecimalToDecimal#main",
                "OctalToDecimal#main",
                "OctalToHexadecimal#main",
                "BellmanFord#printPath",
                "BellmanFord#go",
                "BellmanFord#show",
                "null#null",
                "Cycle#printAll",
                "dijkstras#dijkstra",
                "FloydWarshall#floydwarshall",
                "AdjacencyList#printGraph",
                "KahnsAlgorithm#main",
                "MinPriorityQueue#print",
                "MinPriorityQueue#main",
                "CreateAndDetectLoop#printList",
                "CreateAndDetectLoop#main",
                "Link#displayLink",
                "SinglyLinkedList#print",
                "SinglyLinkedList#main",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NodeStack#main",
                "ReverseStack#main",
                "AVLTree#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "BSTRecursive#preOrder",
                "BSTRecursive#postOrder",
                "BSTRecursive#inOrder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursiveGeneric#inOrder",
                "BinaryTree#inOrder",
                "BinaryTree#preOrder",
                "BinaryTree#postOrder",
                "BinaryTree#bfs",
                "GenericTree#display_1",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "LevelOrderTraversalHelper#printGivenLevel",
                "Tree#printTopView",
                "RedBlackBST#printTree",
                "RedBlackBST#printTreepre",
                "RedBlackBST#deleteDemo",
                "Node#printInOrder",
                "Node#printPreOrder",
                "Node#printPostOrder",
                "Node#printLevelOrder",
                "Main#main",
                "BoundaryFill#printImageArray",
                "CoinChange#printAmount",
                "LevenshteinDistance#main",
                "MatrixChainMultiplication#main",
                "MatrixChainMultiplication#printOptimalParens",
                "MatrixChainMultiplication#printArray",
                "MatrixChainMultiplication#input",
                "OptimalJobScheduling#showResults",
                "Sum_Of_Subset#main",
                "LeonardoNumber#main",
                "MagicSquare#main",
                "PrimeCheck#main",
                "TrinomialTriangle#printTrinomial",
                "InverseOfMatrix#main",
                "MedianOfRunningArray#main",
                "PalindromePrime#functioning",
                "Sort012D#sort012",
                "ThreeSumProblem#main",
                "TwoSumProblem#main",
                "matrixTranspose#main",
                "BankersAlgorithm#checkSafeSystem",
                "FloydTriangle#main",
                "HappyNumbersSeq#main",
                "Krishnamurthy#main",
                "LowestBasePalindrome#main",
                "PageRank#main",
                "PasswordGen#main",
                "PerlinNoise#main",
                "Rotate_by_90_degree#printMatrix",
                "SkylineProblem#run",
                "SkylineProblem#print",
                "Sudoku#print",
                "Sudoku#main",
                "TowerOfHanoi#main",
                "LinearSearchThread#main",
                "SquareRootBinarySearch#main",
                "BitonicSort#printArray",
                "BogoSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#main",
                "CycleSort#main",
                "DNFSort#printArray",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "MergeSortNoExtraSpace#main",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "RadixSort#print",
                "RadixSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "StoogeSort#main",
                "SwapSort#main",
                "TreeSort#main",
                "LongestPalindromicSubstring#main",
                "SkipListTest#add",
                "SkipListTest#get",
                "SkipListTest#contains",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "SkipListTest#checkSortedOnLowestLayer",
                "TestPrintMatrixInSpiralOrder#testOne",
                "TestPrintMatrixInSpiralOrder#testTwo"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "SimpleSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "SimpleSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "PollardRhoTest#testPollardRhoForNumber239MustThrowException": {
            "parameters": {},
            "name": "PollardRhoTest#testPollardRhoForNumber239MustThrowException",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PollardRho#pollardRho"
            ]
        },
        "MonteCarloTreeSearch#monteCarloTreeSearch": {
            "parameters": {
                "rootNode": "Node"
            },
            "name": "MonteCarloTreeSearch#monteCarloTreeSearch",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MonteCarloTreeSearch#main"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "MonteCarloTreeSearch#printScores",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "MonteCarloTreeSearch#addChildNodes",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "MonteCarloTreeSearch#getWinnerNode",
                "Bag#size",
                "CursorLinkedList#indexOf",
                "StackArrayList#size",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "FibonacciHeap#size",
                "MonteCarloTreeSearch#simulateRandomPlay",
                "MonteCarloTreeSearch#getPromisingNode"
            ]
        },
        "PerlinNoise#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PerlinNoise#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "PerlinNoise#generatePerlinNoise",
                "MinPriorityQueue#print",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "BufferedReader#close",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "Damm#dammCheck": {
            "parameters": {
                "digits": "String"
            },
            "name": "Damm#dammCheck",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Damm#checkAndPrint"
            ],
            "children": [
                "Damm#checkInput",
                "Verhoeff#checkInput",
                "Damm#toIntArray",
                "Verhoeff#toIntArray"
            ]
        },
        "ShellSortTest#ShellSortSingleStringArray": {
            "parameters": {},
            "name": "ShellSortTest#ShellSortSingleStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "StackArray#pop": {
            "parameters": {},
            "name": "StackArray#pop",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "Kosaraju#findStronglyConnectedComponents",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "InorderTraversal#iterativeInorder",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PalindromeSinglyLinkedList#isPalindrome",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StackPostfixNotation#postfixEvaluate"
            ],
            "children": [
                "StackArray#resize",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "LinkedListStack#pop",
                "CircularQueue#isEmpty",
                "LinearProbingHashMap#resize",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "FibonacciHeap#countersRep": {
            "parameters": {},
            "name": "FibonacciHeap#countersRep",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "FibonacciHeap#empty",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "Floor#floor",
                "FibonacciHeap#size"
            ]
        },
        "BloomFilter#insert": {
            "parameters": {
                "key": "T"
            },
            "name": "BloomFilter#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "Hash#compute",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "FibonacciHeap#size"
            ]
        },
        "TrieImp#isValid": {
            "parameters": {
                "word": "String"
            },
            "name": "TrieImp#isValid",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "TrieImp#main",
                "MatrixUtil#hasEqualSizes",
                "MatrixUtil#canMultiply",
                "Solution#longestPalindrome",
                "ValidParenthesesTest#testOne",
                "ValidParenthesesTest#testTwo",
                "ValidParenthesesTest#testThree"
            ],
            "children": []
        },
        "MergeSort#merge": {
            "parameters": {
                "arr": "T[]",
                "left": "int",
                "mid": "int",
                "right": "int"
            },
            "name": "MergeSort#merge",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "LeftistHeap#merge",
                "LeftistHeap#insert",
                "LeftistHeap#extract_min",
                "MergeSortedArrayList#main",
                "MergeSortedSinglyLinkedList#main",
                "LazySegmentTree#buildTree",
                "LazySegmentTree#updateRange",
                "LazySegmentTree#getRange",
                "MergeSort#doSort",
                "MergeSortRecursive#mergeSort",
                "MergeSortRecursive#merge",
                "StrandSort#strandSort",
                "TimSort#sort"
            ],
            "children": [
                "SortUtils#less",
                "HeapSort#less"
            ]
        },
        "BellmanFord#addEdge": {
            "parameters": {
                "x": "int",
                "y": "int",
                "z": "int"
            },
            "name": "BellmanFord#addEdge",
            "recursive": "false",
            "inComing": 73,
            "outGoing": 0,
            "numberOfCalls": 73,
            "parents": [
                "AllPathsFromSourceToTarget#allPathsFromSourceToTarget",
                "A_Star#initializeGraph",
                "ConnectedComponent#main",
                "Graphs#main",
                "KahnsAlgorithm#main",
                "Kruskal#main",
                "Kruskal#kruskal",
                "MatrixGraphs#main",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest"
            ],
            "children": []
        },
        "PollardRho#pollardRho": {
            "parameters": {
                "number": "int"
            },
            "name": "PollardRho#pollardRho",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "PollardRhoTest#testPollardRhoForNumber315MustReturn5",
                "PollardRhoTest#testPollardRhoForNumber187MustReturn11",
                "PollardRhoTest#testPollardRhoForNumber239MustThrowException"
            ],
            "children": [
                "GCDRecursion#gcd",
                "FFTTest#abs",
                "GCD#gcd",
                "PollardRho#g",
                "Complex#abs"
            ]
        },
        "LFSR#clock": {
            "parameters": {},
            "name": "LFSR#clock",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "A5KeyStreamGenerator#getNextKeyStream",
                "CompositeLFSR#clock",
                "LFSR#initialize",
                "LFSRTest#clock"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LFSR#pushBit",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "LFSR#xorTappingBits"
            ]
        },
        "SinglyLinkedList#toString": {
            "parameters": {},
            "name": "SinglyLinkedList#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "Trie#add",
                "GenericHashMapUsingArrayList#toString",
                "Vector2#add",
                "Deques#toString",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Complex#add",
                "GenericHeap#add",
                "Queue#toString",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "LinkedQueue#toString",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "StandardScoreTest#test4": {
            "parameters": {},
            "name": "StandardScoreTest#test4",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StandardScore#zScore"
            ]
        },
        "QuickSelectTest#quickSelect30thPercentileOfManyElements": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelect30thPercentileOfManyElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "QuickSelectTest#getSortedCopyOfList",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "QuickSelect#select",
                "LFUCache#get",
                "QuickSelectTest#generateRandomIntegers"
            ]
        },
        "QueueWithStack#isOutStackEmpty": {
            "parameters": {},
            "name": "QueueWithStack#isOutStackEmpty",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "FibonacciHeap#size"
            ]
        },
        "StandardScoreTest#test2": {
            "parameters": {},
            "name": "StandardScoreTest#test2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StandardScore#zScore"
            ]
        },
        "LinkedListStack#push": {
            "parameters": {
                "x": "int"
            },
            "name": "LinkedListStack#push",
            "recursive": "false",
            "inComing": 58,
            "outGoing": 0,
            "numberOfCalls": 58,
            "parents": [
                "Kosaraju#dfs",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#push",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "InorderTraversal#iterativeInorder",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PalindromeSinglyLinkedList#isPalindrome",
                "QueueWithStack#insert",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StackPostfixNotation#postfixEvaluate"
            ],
            "children": []
        },
        "StandardScoreTest#test3": {
            "parameters": {},
            "name": "StandardScoreTest#test3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StandardScore#zScore"
            ]
        },
        "StandardScoreTest#test1": {
            "parameters": {},
            "name": "StandardScoreTest#test1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StandardScore#zScore"
            ]
        },
        "Verhoeff#addVerhoeffChecksum": {
            "parameters": {
                "initialDigits": "String"
            },
            "name": "Verhoeff#addVerhoeffChecksum",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Verhoeff#generateAndPrint"
            ],
            "children": [
                "Damm#checkInput",
                "Verhoeff#checkInput",
                "Damm#toIntArray",
                "Verhoeff#toIntArray"
            ]
        },
        "NewManShanksPrimeTest#testSix": {
            "parameters": {},
            "name": "NewManShanksPrimeTest#testSix",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "NewManShanksPrime#nthManShanksPrime"
            ]
        },
        "SinglyLinkedList#detectLoop": {
            "parameters": {},
            "name": "SinglyLinkedList#detectLoop",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "CreateAndDetectLoop#main",
                "SinglyLinkedListTest#detectLoop"
            ],
            "children": []
        },
        "LRUCacheTest#putAndGetIntegerValues": {
            "parameters": {},
            "name": "LRUCacheTest#putAndGetIntegerValues",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "ThreeSumProblem#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ThreeSumProblem#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#Hashmap",
                "ThreeSumProblem#TwoPointer",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "TwoSumProblem#BruteForce",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "TwoSumProblem#TwoPointer"
            ]
        },
        "AVLTree#rotateRight": {
            "parameters": {
                "a": "Node"
            },
            "name": "AVLTree#rotateRight",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "AVLTree#rebalance",
                "AVLTree#rotateLeftThenRight",
                "AVLTree#rotateRightThenLeft",
                "RedBlackBST#fixTree",
                "RedBlackBST#deleteFixup"
            ],
            "children": [
                "AVLTree#setBalance"
            ]
        },
        "MaximumMinimumWindow#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MaximumMinimumWindow#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MaximumMinimumWindow#calculateMaxOfMin",
                "HeapElement#equals",
                "CalculateMaxOfMin#calculateMaxOfMin"
            ]
        },
        "VigenereTest#vigenereDecryptTest": {
            "parameters": {},
            "name": "VigenereTest#vigenereDecryptTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RSA#decrypt",
                "HillCipher#decrypt",
                "Vigenere#decrypt",
                "Blowfish#decrypt",
                "Polybius#decrypt"
            ]
        },
        "Permutation#backtracking": {
            "parameters": {
                "arr": "T[]",
                "result": "List\u003cT[]\u003e",
                "index": "int"
            },
            "name": "Permutation#backtracking",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Combination#combination",
                "Combination#backtracking",
                "Permutation#permutation",
                "Permutation#backtracking"
            ],
            "children": [
                "FindKthNumber#swap",
                "Permutation#backtracking",
                "Trie#add",
                "Vector2#add",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "HeapSort#swap",
                "Complex#add",
                "BFPRT#swap",
                "Combination#backtracking",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "DualPivotQuickSort#swap",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "ZigzagTraversalTest#testZigzagTraversalDifferentHeight": {
            "parameters": {},
            "name": "ZigzagTraversalTest#testZigzagTraversalDifferentHeight",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "LevelOrderTraversal#traverse",
                "ZigzagTraversal#traverse",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "SJFSchedulingTest#schedulingOf_TwoProcesses": {
            "parameters": {},
            "name": "SJFSchedulingTest#schedulingOf_TwoProcesses",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "FCFSScheduling#scheduleProcesses",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "SJFSchedulingTest#initialisation0",
                "LFUCache#get",
                "SJFScheduling#scheduleProcesses"
            ]
        },
        "GnomeSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "GnomeSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "FindMin#findMin": {
            "parameters": {
                "array": "int[]"
            },
            "name": "FindMin#findMin",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "OptimalJobScheduling#runningCost",
                "FindMin#main",
                "FibonacciHeapTest#testHeap",
                "KDTreeTest#findMin",
                "FindMinTest#testFindMinValue",
                "FindMinTest#test1",
                "FindMinTest#test2"
            ],
            "children": []
        },
        "PrimeFactorization#pfactors": {
            "parameters": {
                "n": "int"
            },
            "name": "PrimeFactorization#pfactors",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SquareFreeInteger#isSquareFreeInteger",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "LinkedListStack#toString": {
            "parameters": {},
            "name": "LinkedListStack#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "CycleSort#replace",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "LinkOperations#delete": {
            "parameters": {
                "x": "int"
            },
            "name": "LinkOperations#delete",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "HashMap#deleteHash",
                "LinkedList#delete",
                "MinPriorityQueue#heapSort",
                "Link#main",
                "LinkOperations#removeDuplicates",
                "SinglyLinkedList#main",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "BSTRecursive#remove",
                "BSTRecursiveGeneric#delete",
                "BSTRecursiveGeneric#remove",
                "RedBlackBST#deleteDemo",
                "TrieImp#main",
                "MapTest#deleteTest",
                "MapTest#sizeTest",
                "KDTreeTest#delete"
            ],
            "children": [
                "SinglyLinkedList#deleteHead",
                "LinkOperations#deleteHead",
                "LinkOperations#deleteTail"
            ]
        },
        "SquareRootwithBabylonianMethodTest#testfor625": {
            "parameters": {},
            "name": "SquareRootwithBabylonianMethodTest#testfor625",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SquareRootWithBabylonianMethod#square_Root"
            ]
        },
        "HeightStrategy#height": {
            "parameters": {
                "expectedSize": "int"
            },
            "name": "HeightStrategy#height",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "null#null",
                "AVLSimple#insert",
                "AVLSimple#bf",
                "AVLSimple#rightRotate",
                "AVLSimple#leftRotate",
                "AVLTree#rebalance",
                "AVLTree#setBalance",
                "AVLTree#reheight",
                "GenericTree#heightcall",
                "GenericTree#height",
                "LevelOrderTraversalHelper#printLevelOrder",
                "LevelOrderTraversalHelper#height"
            ],
            "children": []
        },
        "LeastCommonMultipleTest#testForSecond": {
            "parameters": {},
            "name": "LeastCommonMultipleTest#testForSecond",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LeastCommonMultiple#lcm"
            ]
        },
        "Trie#add": {
            "parameters": {
                "str": "String"
            },
            "name": "Trie#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "ProcessDetails#setWaitingTime": {
            "parameters": {
                "waitingTime": "int"
            },
            "name": "ProcessDetails#setWaitingTime",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "FCFSScheduling#evaluateWaitingTime"
            ],
            "children": []
        },
        "FastInverseSqrtTests#testForThird": {
            "parameters": {},
            "name": "FastInverseSqrtTests#testForThird",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FastInverseSqrt#inverseSqrt"
            ]
        },
        "PascalTriangleTest#testForOne": {
            "parameters": {},
            "name": "PascalTriangleTest#testForOne",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PascalTriangle#pascal"
            ]
        },
        "HillCipher#validateDeterminant": {
            "parameters": {
                "keyMatrix": "int[][]",
                "n": "int"
            },
            "name": "HillCipher#validateDeterminant",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "HillCipher#encrypt",
                "HillCipher#decrypt"
            ],
            "children": [
                "DeterminantOfMatrix#determinant",
                "HillCipher#determinant"
            ]
        },
        "GenericHashMapUsingArrayList#toString": {
            "parameters": {},
            "name": "GenericHashMapUsingArrayList#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "MinHeap#getElementKey": {
            "parameters": {
                "elementIndex": "int"
            },
            "name": "MinHeap#getElementKey",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#deleteElement",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#deleteElement"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "HeapElement#getKey",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "HeapNode#getKey",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "Entry#getKey"
            ]
        },
        "MinimumPathSum#minimumPathSum": {
            "parameters": {
                "grid": "int[][]"
            },
            "name": "MinimumPathSum#minimumPathSum",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "MinimumPathSum#testRegular",
                "MinimumPathSum#testLessColumns",
                "MinimumPathSum#testLessRows",
                "MinimumPathSum#testOneRowOneColumn"
            ],
            "children": [
                "FindMinRecursion#min",
                "MinValue#min",
                "BucketSort#min"
            ]
        },
        "GnomeSort#sort": {
            "parameters": {
                "arr": "T[]"
            },
            "name": "GnomeSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "SortUtils#less",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "HeapSort#less",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "CountFriendsPairingTest#testForFourElements": {
            "parameters": {},
            "name": "CountFriendsPairingTest#testForFourElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CountFriendsPairing#countFriendsPairing"
            ]
        },
        "Sum_Of_Subset#subsetSum": {
            "parameters": {
                "arr": "int[]",
                "num": "int",
                "Key": "int"
            },
            "name": "Sum_Of_Subset#subsetSum",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "SubsetSum#main",
                "Sum_Of_Subset#main",
                "Sum_Of_Subset#subsetSum"
            ],
            "children": [
                "Sum_Of_Subset#subsetSum",
                "SubsetSum#subsetSum"
            ]
        },
        "FibonacciNumber#isFibonacciNumber": {
            "parameters": {
                "number": "int"
            },
            "name": "FibonacciNumber#isFibonacciNumber",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "FibonacciNumber#main"
            ],
            "children": [
                "PerfectSquare#isPerfectSquare",
                "FibonacciNumber#isPerfectSquare"
            ]
        },
        "WineProblem#WPRecursion": {
            "parameters": {
                "arr": "int[]",
                "ei": "int",
                "si": "int"
            },
            "name": "WineProblem#WPRecursion",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "WineProblem#WPRecursion",
                "WineProblem#main"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "WineProblem#WPRecursion",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "SieveOfEratosthenes#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "SieveOfEratosthenes#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "SieveOfEratosthenes#findPrimesTill",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "ProcessDetails#getWaitingTime": {
            "parameters": {},
            "name": "ProcessDetails#getWaitingTime",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "FCFSSchedulingTest#testingProcesses"
            ],
            "children": []
        },
        "HashMapCuckooHashing#findKeyInTable": {
            "parameters": {
                "key": "int"
            },
            "name": "HashMapCuckooHashing#findKeyInTable",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MainCuckooHashing#main",
                "HashMapCuckooHashingTest#getKeyIndex"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "HashMapCuckooHashing#hashFunction1",
                "HashMapCuckooHashing#hashFunction2",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "HeapElement#equals",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "PostOrderTraversalTest#testNullRoot": {
            "parameters": {},
            "name": "PostOrderTraversalTest#testNullRoot",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PostOrderTraversal#recursivePostOrder",
                "PostOrderTraversal#iterativePostOrder"
            ]
        },
        "AVLTree#rotateLeftThenRight": {
            "parameters": {
                "n": "Node"
            },
            "name": "AVLTree#rotateLeftThenRight",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "AVLTree#rebalance"
            ],
            "children": [
                "AVLTree#rotateRight",
                "RedBlackBST#rotateLeft",
                "RedBlackBST#rotateRight",
                "ArrayLeftRotation#rotateLeft",
                "AVLTree#rotateLeft"
            ]
        },
        "Searcher#run": {
            "parameters": {},
            "name": "Searcher#run",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SkylineProblem#main"
            ],
            "children": []
        },
        "SinglyLinkedList#search": {
            "parameters": {
                "key": "int"
            },
            "name": "SinglyLinkedList#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": []
        },
        "SquareRootWithNewtonRaphsonTestMethod#testfor2": {
            "parameters": {},
            "name": "SquareRootWithNewtonRaphsonTestMethod#testfor2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RootPrecision#squareRoot",
                "SquareRootBinarySearch#squareRoot",
                "SquareRootWithNewtonRaphsonMethod#squareRoot"
            ]
        },
        "LiouvilleLambdaFunction#liouvilleLambda": {
            "parameters": {
                "number": "int"
            },
            "name": "LiouvilleLambdaFunction#liouvilleLambda",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustThrowExceptionIfNumberIsZero",
                "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustThrowExceptionIfNumberIsNegative",
                "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustReturnNegativeOne",
                "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustReturnPositiveOne"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "PrimeFactorization#pfactors",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "FibonacciHeap#size"
            ]
        },
        "SquareRootWithNewtonRaphsonTestMethod#testfor1": {
            "parameters": {},
            "name": "SquareRootWithNewtonRaphsonTestMethod#testfor1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RootPrecision#squareRoot",
                "SquareRootBinarySearch#squareRoot",
                "SquareRootWithNewtonRaphsonMethod#squareRoot"
            ]
        },
        "Huffman#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Huffman#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "StackArrayList#peek",
                "Trie#add",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericArrayListQueue#peek",
                "BSTRecursiveGeneric#add",
                "LinkedQueue#peek",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "Map#size",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "CircularQueue#peek",
                "PriorityQueue#peek",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "StackArray#peek",
                "Deques#size",
                "NodeStack#size",
                "Huffman#printCode",
                "MatrixUtil#add",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "NodeStack#peek",
                "SkipListTest#add",
                "Bag#add",
                "LinkedListStack#peek",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "CalculateMaxOfMinTest#testForFiveElements": {
            "parameters": {},
            "name": "CalculateMaxOfMinTest#testForFiveElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MaximumMinimumWindow#calculateMaxOfMin",
                "CalculateMaxOfMin#calculateMaxOfMin"
            ]
        },
        "LeftistHeap#isEmpty": {
            "parameters": {},
            "name": "LeftistHeap#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "Blowfish#hexToBin": {
            "parameters": {
                "hex": "String"
            },
            "name": "Blowfish#hexToBin",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "Blowfish#xor",
                "Blowfish#f"
            ],
            "children": []
        },
        "RegexMatching#regexRecursion": {
            "parameters": {
                "strg": "int[][]",
                "svidx": "int",
                "pat": "String",
                "src": "String",
                "pvidx": "int"
            },
            "name": "RegexMatching#regexRecursion",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "RegexMatching#regexRecursion",
                "RegexMatching#main"
            ],
            "children": [
                "RegexMatching#regexRecursion"
            ]
        },
        "JosephusProblemTest#testJosephusProblem": {
            "parameters": {},
            "name": "JosephusProblemTest#testJosephusProblem",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "JosephusProblem#findTheWinner"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "KrishnamurthyNumber#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "KrishnamurthyNumber#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KrishnamurthyNumber#isKMurthy",
                "ParseInteger#parseInt"
            ]
        },
        "CountSinglyLinkedListRecursion#count": {
            "parameters": {},
            "name": "CountSinglyLinkedListRecursion#count",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "CountSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "MatrixChainMultiplication#main",
                "SieveOfEratosthenes#findPrimesTill",
                "UnionFind#main",
                "Task#sortByMergeSort",
                "Task1#sortByInsertionSort",
                "Task2#sortByHeapSort"
            ],
            "children": [
                "SinglyLinkedList#getHead",
                "NodeStack#getHead",
                "CountSinglyLinkedListRecursion#countRecursion"
            ]
        },
        "AVLSimple#insert": {
            "parameters": {
                "node": "Node",
                "item": "int"
            },
            "name": "AVLSimple#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "AVLSimple#bf",
                "DyanamicProgrammingKnapsack#max",
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "HeightStrategy#height",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "BernoulliHeightStrategy#height",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "FindMaxRecursion#max",
                "AVLSimple#rightRotate",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLSimple#leftRotate",
                "AVLTree#height",
                "MaxValue#max",
                "AVLTree#insert",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max",
                "GenericTree#height",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "PriorityQueue#insert",
                "AVLSimple#height",
                "LevelOrderTraversalHelper#height"
            ]
        },
        "Factorial#factorial": {
            "parameters": {
                "n": "int"
            },
            "name": "Factorial#factorial",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "Combinations#factorial",
                "Combinations#combinations",
                "Factorial#main",
                "FactorialRecursion#main",
                "FactorialRecursion#factorial",
                "FactorialTest#test"
            ],
            "children": []
        },
        "GenericTree#preordercall": {
            "parameters": {},
            "name": "GenericTree#preordercall",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BSTRecursiveGeneric#preorder",
                "BSTIterative#preorder",
                "BSTRecursive#preorder",
                "GenericTree#preorder"
            ]
        },
        "KaprekarNumbersTest#testFor1": {
            "parameters": {},
            "name": "KaprekarNumbersTest#testFor1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KaprekarNumbers#isKaprekarNumber"
            ]
        },
        "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates": {
            "parameters": {},
            "name": "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "ValidParenthesesTest#testThree": {
            "parameters": {},
            "name": "ValidParenthesesTest#testThree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TrieImp#isValid",
                "MatrixUtil#isValid",
                "Solution#isValid",
                "ValidParentheses#isValid"
            ]
        },
        "KaprekarNumbersTest#testFor3": {
            "parameters": {},
            "name": "KaprekarNumbersTest#testFor3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KaprekarNumbers#isKaprekarNumber"
            ]
        },
        "Area#surfaceAreaCube": {
            "parameters": {
                "sideLength": "double"
            },
            "name": "Area#surfaceAreaCube",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AreaTest#testSurfaceAreaCube",
                "AreaTest#testAllIllegalInput"
            ],
            "children": []
        },
        "PrimMST#minKey": {
            "parameters": {
                "key": "int[]",
                "mstSet": "Boolean[]"
            },
            "name": "PrimMST#minKey",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PrimMST#primMST"
            ],
            "children": []
        },
        "GCDRecursion#gcd": {
            "parameters": {
                "a": "int",
                "b": "int"
            },
            "name": "GCDRecursion#gcd",
            "recursive": "false",
            "inComing": 19,
            "outGoing": 0,
            "numberOfCalls": 19,
            "parents": [
                "RSA#generateKeys",
                "GCD#gcd",
                "GCD#main",
                "GCDRecursion#main",
                "GCDRecursion#gcd",
                "PollardRho#pollardRho",
                "GCDTest#test1",
                "GCDTest#test2",
                "GCDTest#test3",
                "GCDTest#test4",
                "GCDTest#test5",
                "GCDTest#test6",
                "GCDTest#test7"
            ],
            "children": [
                "GCDRecursion#gcd",
                "FFTTest#abs",
                "GCD#gcd",
                "Complex#abs"
            ]
        },
        "LinearCongruentialGenerator#nextNumber": {
            "parameters": {},
            "name": "LinearCongruentialGenerator#nextNumber",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "CollatzConjecture#collatzConjecture",
                "LinearCongruentialGenerator#main",
                "CollatzConjectureTest#nextNumberFromEvenNumber",
                "CollatzConjectureTest#nextNumberFromOddNumber"
            ],
            "children": []
        },
        "Searcher#getResult": {
            "parameters": {},
            "name": "Searcher#getResult",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "LinearSearchThread#main"
            ],
            "children": []
        },
        "BucketSort#hash": {
            "parameters": {
                "elem": "int",
                "min": "int",
                "numberOfBucket": "int"
            },
            "name": "BucketSort#hash",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "LinearProbingHashMap#put",
                "LinearProbingHashMap#get",
                "LinearProbingHashMap#delete",
                "BucketSort#bucketSort",
                "MapTest#hashTest"
            ],
            "children": []
        },
        "A5Cipher#resetCounter": {
            "parameters": {},
            "name": "A5Cipher#resetCounter",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "A5KeyStreamGenerator#reInitialize"
            ]
        },
        "CollatzConjecture#nextNumber": {
            "parameters": {
                "n": "int"
            },
            "name": "CollatzConjecture#nextNumber",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "CollatzConjecture#collatzConjecture",
                "LinearCongruentialGenerator#main",
                "CollatzConjectureTest#nextNumberFromEvenNumber",
                "CollatzConjectureTest#nextNumberFromOddNumber"
            ],
            "children": []
        },
        "AbsoluteMinTest#testGetMinValueWithNoArguments": {
            "parameters": {},
            "name": "AbsoluteMinTest#testGetMinValueWithNoArguments",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AbsoluteMin#getMinValue"
            ]
        },
        "Vector2#add": {
            "parameters": {
                "vector": "Vector2"
            },
            "name": "Vector2#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": []
        },
        "Queue#insert": {
            "parameters": {
                "x": "int"
            },
            "name": "Queue#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "StackArray#isFull",
                "PriorityQueue#isFull",
                "CircularQueue#isFull",
                "HashMapCuckooHashing#isFull",
                "MinPriorityQueue#isFull",
                "CircularBufferTest#isFull",
                "Queue#isFull",
                "CircularBuffer#isFull"
            ]
        },
        "PolybiusTest#testEncrypt": {
            "parameters": {},
            "name": "PolybiusTest#testEncrypt",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Blowfish#encrypt",
                "Vigenere#encrypt",
                "A5Cipher#encrypt",
                "HillCipher#encrypt",
                "RSA#encrypt",
                "Polybius#encrypt"
            ]
        },
        "ColorContrastRatio#getRelativeLuminance": {
            "parameters": {
                "color": "Color"
            },
            "name": "ColorContrastRatio#getRelativeLuminance",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "ColorContrastRatio#getContrastRatio",
                "ColorContrastRatio#test"
            ],
            "children": [
                "ColorContrastRatio#getColor"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "OddEvenSort#swap": {
            "parameters": {
                "arr": "int[]",
                "i": "int",
                "j": "int"
            },
            "name": "OddEvenSort#swap",
            "recursive": "false",
            "inComing": 55,
            "outGoing": 0,
            "numberOfCalls": 55,
            "parents": [
                "Permutation#backtracking",
                "GenericHeap#upHeapify",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "FFT#fftBitReversal",
                "FindKthNumber#partition",
                "BFPRT#partition",
                "BFPRT#insertionSort",
                "QuickSelect#partition",
                "QuickSelect#pivot",
                "BogoSort#nextPermutation",
                "BubbleSort#sort",
                "BubbleSortRecursion#bubbleSort",
                "CircleSort#doSort",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "DualPivotQuickSort#partition",
                "DutchNationalFlagSort#dutch_national_flag_sort",
                "GnomeSort#sort",
                "HeapSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "IntrospectiveSort#partition",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify",
                "OddEvenSort#oddEvenSort",
                "QuickSort#randomPartition",
                "QuickSort#partition",
                "SortUtils#flip",
                "WiggleSort#triColorSort"
            ],
            "children": []
        },
        "OddEvenSortTest#oddEvenSortEmptyArray": {
            "parameters": {},
            "name": "OddEvenSortTest#oddEvenSortEmptyArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OddEvenSort#oddEvenSort"
            ]
        },
        "CursorLinkedList#alloc": {
            "parameters": {},
            "name": "CursorLinkedList#alloc",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CursorLinkedList#append"
            ],
            "children": []
        },
        "LevelOrderTraversalHelper#printLevelOrder": {
            "parameters": {
                "root": "BinaryTree.Node"
            },
            "name": "LevelOrderTraversalHelper#printLevelOrder",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "TreeTraversal#main"
            ],
            "children": [
                "HeightStrategy#height",
                "BernoulliHeightStrategy#height",
                "AVLTree#height",
                "GenericTree#height",
                "LevelOrderTraversalHelper#printGivenLevel",
                "AVLSimple#height",
                "LevelOrderTraversalHelper#height"
            ]
        },
        "StackPostfixNotation#postfixEvaluate": {
            "parameters": {
                "exp": "String"
            },
            "name": "StackPostfixNotation#postfixEvaluate",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "StackPostfixNotation#main"
            ],
            "children": [
                "StackArray#pop",
                "LinkedListStack#push",
                "StackArray#push",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "SimpleNode#hasNext",
                "StackArrayList#push",
                "NodeStack#pop",
                "BufferedReader#close",
                "ListIterator#hasNext",
                "HeapElement#equals",
                "StackArrayList#pop",
                "NodeStack#push",
                "LinkedListStack#pop",
                "DynamicArrayIterator#hasNext"
            ]
        },
        "SimpleSubCipherTest#simpleSubCipherDecryptTest": {
            "parameters": {},
            "name": "SimpleSubCipherTest#simpleSubCipherDecryptTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Caesar#decode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#decode"
            ]
        },
        "Fibonacci#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Fibonacci#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Fibonacci#fib",
                "Fibonacci#matrixMultiplication",
                "BufferedReader#close"
            ]
        },
        "Damm#addDammChecksum": {
            "parameters": {
                "initialDigits": "String"
            },
            "name": "Damm#addDammChecksum",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Damm#generateAndPrint"
            ],
            "children": [
                "Damm#checkInput",
                "Verhoeff#checkInput",
                "Damm#toIntArray",
                "Verhoeff#toIntArray"
            ]
        },
        "BoundaryFill#getPixel": {
            "parameters": {
                "image": "int[][]",
                "x_co_ordinate": "int",
                "y_co_ordinate": "int"
            },
            "name": "BoundaryFill#getPixel",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "FloodFill#floodFill",
                "BoundaryFill#boundaryFill"
            ],
            "children": []
        },
        "CaesarTest#caesarBruteForce": {
            "parameters": {},
            "name": "CaesarTest#caesarBruteForce",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Caesar#bruteforce"
            ]
        },
        "RodCutting#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "RodCutting#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RodCutting#cutRod"
            ]
        },
        "FastInverseSqrtTests#testForEighth": {
            "parameters": {},
            "name": "FastInverseSqrtTests#testForEighth",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FastInverseSqrt#inverseSqrt"
            ]
        },
        "LRUCache#addNewEntry": {
            "parameters": {
                "newEntry": "Entry\u003cK,V\u003e"
            },
            "name": "LRUCache#addNewEntry",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "LRUCache#put",
                "MRUCache#put"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "Entry#setNextEntry",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "Entry#setPreEntry",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "HorspoolSearch#calcShiftValues": {
            "parameters": {
                "pattern": "String"
            },
            "name": "HorspoolSearch#calcShiftValues",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "HorspoolSearch#firstOccurrence"
            ],
            "children": []
        },
        "NodeStack#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "NodeStack#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StackArrayList#peek",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "StackArray#pop",
                "LinkedListStack#push",
                "SkipListTest#print",
                "dijkstras#print",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "MinPriorityQueue#print",
                "StackArray#push",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "StackArrayList#push",
                "CircularQueue#peek",
                "NodeStack#pop",
                "PriorityQueue#peek",
                "StackArrayList#pop",
                "StackArray#peek",
                "NodeStack#push",
                "LinkedListStack#pop",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "NodeStack#peek",
                "RadixSort#print",
                "LinkedListStack#peek"
            ]
        },
        "BoardPath#bpR": {
            "parameters": {
                "start": "int",
                "end": "int"
            },
            "name": "BoardPath#bpR",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BoardPath#bpR"
            ],
            "children": [
                "BoardPath#bpR"
            ]
        },
        "MaxHeap#extractMax": {
            "parameters": {},
            "name": "MaxHeap#extractMax",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MaxHeap#getElement"
            ],
            "children": [
                "MaxHeap#deleteElement",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MinHeap#deleteElement",
                "Heap#deleteElement"
            ]
        },
        "Pow#pow": {
            "parameters": {
                "a": "int",
                "b": "int"
            },
            "name": "Pow#pow",
            "recursive": "false",
            "inComing": 54,
            "outGoing": 0,
            "numberOfCalls": 54,
            "parents": [
                "PowerSum#power",
                "BinaryToDecimal#binaryToDecimal",
                "BinaryToHexadecimal#binToHex",
                "DecimalToBinary#conventionalConversion",
                "DecimalToBinary#bitwiseConversion",
                "DecimalToOctal#main",
                "HexToOct#decimal2octal",
                "null#null",
                "ClosestPair#closestPair",
                "ClosestPair#bruteForce",
                "Fibonacci#fibBinet",
                "Area#surfaceAreaCone",
                "Armstrong#isArmstrong",
                "AutomorphicNumber#isAutomorphic",
                "DistanceFormula#euclideanDistance",
                "DistanceFormula#minkowskiDistance",
                "DudeneyNumber#isDudeney",
                "FrizzyNumber#getNthFrizzy",
                "PerfectCube#isPerfectCube",
                "Pow#main",
                "PowRecursion#main",
                "PowRecursion#pow",
                "SimpsonIntegration#f",
                "StandardDeviation#stdDev",
                "ColorContrastRatio#getColor",
                "GuassLegendre#pi",
                "GuassLegendre#update",
                "LinearCongruentialGenerator#main",
                "MiniMaxAlgorithm#getRandomScores",
                "RabinKarp#searchPat",
                "RootPrecision#squareRoot"
            ],
            "children": []
        },
        "HarshadNumberTest#harshadNumber": {
            "parameters": {},
            "name": "HarshadNumberTest#harshadNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HarshadNumber#isHarshad"
            ]
        },
        "BSTRecursiveGeneric#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BSTRecursiveGeneric#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "BSTRecursive#remove",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "IterativeBinarySearch#find",
                "CircleLinkedList#remove",
                "BSTRecursive#inorder",
                "BSTIterative#inorder",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "BSTIterative#remove",
                "Queue#remove",
                "FibonacciSearch#find",
                "SkipList#remove",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "DynamicArray#add",
                "SaddlebackSearch#find",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "LowerBound#find",
                "BinarySearch#find",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "MatrixUtil#add",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "Complex#add",
                "JumpSearch#find",
                "BSTRecursiveGeneric#inorder",
                "BSTRecursive#find",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "TimSortTest#getSortAlgorithm": {
            "parameters": {},
            "name": "TimSortTest#getSortAlgorithm",
            "recursive": "false",
            "inComing": 16,
            "outGoing": 0,
            "numberOfCalls": 16,
            "parents": [
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
            ],
            "children": []
        },
        "Convolution#convolution": {
            "parameters": {
                "A": "double[]",
                "B": "double[]"
            },
            "name": "Convolution#convolution",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "ADTFractionTest#testToString": {
            "parameters": {},
            "name": "ADTFractionTest#testToString",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "AVLTree#delete": {
            "parameters": {
                "delKey": "int"
            },
            "name": "AVLTree#delete",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "HashMap#deleteHash",
                "LinkedList#delete",
                "MinPriorityQueue#heapSort",
                "Link#main",
                "LinkOperations#removeDuplicates",
                "SinglyLinkedList#main",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "BSTRecursive#remove",
                "BSTRecursiveGeneric#delete",
                "BSTRecursiveGeneric#remove",
                "RedBlackBST#deleteDemo",
                "TrieImp#main",
                "MapTest#deleteTest",
                "MapTest#sizeTest",
                "KDTreeTest#delete"
            ],
            "children": [
                "Map#delete",
                "AVLTree#rebalance",
                "LinkOperations#delete",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "FibonacciHeap#delete",
                "SinglyLinkedList#delete",
                "RedBlackBST#delete",
                "KDTreeTest#delete",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "BSTRecursiveGeneric#delete",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "BSTRecursiveGeneric#find": {
            "parameters": {
                "data": "T"
            },
            "name": "BSTRecursiveGeneric#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "DecimalToBinary#bitwiseConversion": {
            "parameters": {},
            "name": "DecimalToBinary#bitwiseConversion",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "DecimalToBinary#main"
            ],
            "children": [
                "Pow#pow",
                "BufferedReader#close",
                "PowRecursion#pow"
            ]
        },
        "CursorLinkedList#printList": {
            "parameters": {},
            "name": "CursorLinkedList#printList",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CreateAndDetectLoop#main"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "BinaryToOctal#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BinaryToOctal#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BinaryToOctal#convertBinaryToOctal",
                "BufferedReader#close"
            ]
        },
        "CheckIfBinaryTreeBalanced#buildUnbalancedTree": {
            "parameters": {},
            "name": "CheckIfBinaryTreeBalanced#buildUnbalancedTree",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CheckIfBinaryTreeBalanced#main"
            ],
            "children": []
        },
        "NodeStack#setNext": {
            "parameters": {
                "next": "NodeStack\u003c?\u003e"
            },
            "name": "NodeStack#setNext",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "LinkedList#insert",
                "LinkedList#delete",
                "FibonacciHeap#insert",
                "FibonacciHeap#deleteMin",
                "FibonacciHeap#meld",
                "FibonacciHeap#cut",
                "FibonacciHeap#fromBuckets",
                "FibonacciHeap#link",
                "SkipList#add",
                "SkipList#remove",
                "NodeStack#push",
                "NodeStack#pop"
            ],
            "children": []
        },
        "PostOrderTraversal#recursivePostOrder": {
            "parameters": {
                "result": "List\u003cInteger\u003e",
                "root": "BinaryTree.Node"
            },
            "name": "PostOrderTraversal#recursivePostOrder",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "PostOrderTraversal#recursivePostOrder",
                "PostOrderTraversalTest#testNullRoot",
                "PostOrderTraversalTest#testPostOrder",
                "PostOrderTraversalTest#testPostOrderNonBalanced"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "PostOrderTraversal#recursivePostOrder",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn": {
            "parameters": {},
            "name": "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString",
                "BinarySearch2dArray#BinarySearch"
            ]
        },
        "PerfectBinarySearch#binarySearch": {
            "parameters": {
                "arr": "int[]",
                "target": "int"
            },
            "name": "PerfectBinarySearch#binarySearch",
            "recursive": "false",
            "inComing": 14,
            "outGoing": 0,
            "numberOfCalls": 14,
            "parents": [
                "BinarySearch#main",
                "BinarySearch2dArray#BinarySearch",
                "ExponentialSearch#main",
                "ExponentialSearch#find",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "PerfectBinarySearch#main",
                "TernarySearch#main"
            ],
            "children": []
        },
        "LazySegmentTreeTest#get": {
            "parameters": {},
            "name": "LazySegmentTreeTest#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "LazySegmentTree#getRange"
            ]
        },
        "AESEncryption#bytesToHex": {
            "parameters": {
                "bytes": "byte[]"
            },
            "name": "AESEncryption#bytesToHex",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AESEncryption#main"
            ],
            "children": []
        },
        "Trieac#isLastNode": {
            "parameters": {
                "root": "TrieNode"
            },
            "name": "Trieac#isLastNode",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Trieac#suggestionsRec",
                "Trieac#printAutoSuggestions"
            ],
            "children": []
        },
        "Map#get": {
            "parameters": {
                "key": "Key"
            },
            "name": "Map#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": []
        },
        "CollatzConjectureTest#sequenceOfNotNaturalFirstNumber": {
            "parameters": {},
            "name": "CollatzConjectureTest#sequenceOfNotNaturalFirstNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CollatzConjectureTest#collatzConjecture",
                "CollatzConjecture#collatzConjecture"
            ]
        },
        "TopologicalSort#calculateInDegree": {
            "parameters": {},
            "name": "TopologicalSort#calculateInDegree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "AdjacencyList#getVertices",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "AdjacencyList#getAdjacents",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "DynamicArray#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "DynamicArray#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DynamicArray#stream",
                "PriorityQueue#getSize",
                "Trie#add",
                "Vector2#add",
                "BSTRecursive#remove",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircleLinkedList#remove",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "DynamicArray#getSize",
                "BSTIterative#remove",
                "Queue#remove",
                "LinkedListStack#getSize",
                "SkipList#remove",
                "DynamicArray#add",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "CircleLinkedList#getSize",
                "MatrixUtil#add",
                "Complex#add",
                "QueueWithStack#remove",
                "NodeStack#getSize",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "Queue#getSize",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "FirstFitCPU#findFirstFit": {
            "parameters": {
                "processSize": "int",
                "blockSizes": "int[]"
            },
            "name": "FirstFitCPU#findFirstFit",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FirstFitCPU#fitProcess"
            ],
            "children": []
        },
        "SortAlgorithm#sort": {
            "parameters": {
                "unsorted": "List\u003cT\u003e"
            },
            "name": "SortAlgorithm#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "LinearProbingHashMap#size",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "GenericHeap#size",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "Map#size",
                "TreeSort#sort",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "SkipList#size",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "StackArray#size",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Deques#size",
                "NodeStack#size",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "FibonacciHeap#size",
                "BitonicSort#sort"
            ]
        },
        "ValidParenthesesTest#testTwo": {
            "parameters": {},
            "name": "ValidParenthesesTest#testTwo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TrieImp#isValid",
                "MatrixUtil#isValid",
                "Solution#isValid",
                "ValidParentheses#isValid"
            ]
        },
        "MiniMaxAlgorithm#log2": {
            "parameters": {
                "n": "int"
            },
            "name": "MiniMaxAlgorithm#log2",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "null#null",
                "MiniMaxAlgorithm#log2",
                "MiniMaxAlgorithm#setScores"
            ],
            "children": [
                "MiniMaxAlgorithm#log2"
            ]
        },
        "FloodFillTest#testForImageTwo": {
            "parameters": {},
            "name": "FloodFillTest#testForImageTwo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FloodFill#floodFill"
            ]
        },
        "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower": {
            "parameters": {},
            "name": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "HeapElement#hashCode": {
            "parameters": {},
            "name": "HeapElement#hashCode",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "GenericHashMapUsingArray#hashFunction",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "Map#hash",
                "HeapElement#hashCode",
                "Vertex#hashCode",
                "ADTFractionTest#testEqualsAndHashCode"
            ],
            "children": [
                "HeapElement#hashCode"
            ]
        },
        "FibonacciHeap#deleteMin": {
            "parameters": {},
            "name": "FibonacciHeap#deleteMin",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "FibonacciHeap#delete",
                "FibonacciHeapTest#testHeap"
            ],
            "children": [
                "FibonacciHeap#empty",
                "NodeStack#getNext",
                "NodeStack#setNext",
                "HeapNode#getNext",
                "FibonacciHeap#successiveLink",
                "HeapNode#setNext"
            ]
        },
        "QuickSelectTest#quickSelectMinimumOfTwoElements": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectMinimumOfTwoElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "QuickSelect#select"
            ]
        },
        "GenericHashMapUsingArray#initBuckets": {
            "parameters": {
                "N": "int"
            },
            "name": "GenericHashMapUsingArray#initBuckets",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "null#null",
                "GenericHashMapUsingArray#reHash"
            ],
            "children": []
        },
        "RgbHsvConversion#approximatelyEqualHsv": {
            "parameters": {
                "hsv2": "double[]",
                "hsv1": "double[]"
            },
            "name": "RgbHsvConversion#approximatelyEqualHsv",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "RgbHsvConversion#main"
            ],
            "children": [
                "FFTTest#abs",
                "Complex#abs"
            ]
        },
        "StrassenMatrixMultiplication#split": {
            "parameters": {
                "P": "int[][]",
                "C": "int[][]",
                "jB": "int",
                "iB": "int"
            },
            "name": "StrassenMatrixMultiplication#split",
            "recursive": "false",
            "inComing": 17,
            "outGoing": 0,
            "numberOfCalls": 17,
            "parents": [
                "BipartiteGrapfDFS#main",
                "StrassenMatrixMultiplication#multiply",
                "LongestCommonSubsequence#getLCS",
                "MatrixChainMultiplication#input",
                "Conway#generateNextElement",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "SkylineProblem#run"
            ],
            "children": []
        },
        "KadaneAlogrithmTest#testForOneElement": {
            "parameters": {},
            "name": "KadaneAlogrithmTest#testForOneElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KadaneAlgorithm#max_Sum"
            ]
        },
        "NewManShanksPrimeTest#testEight": {
            "parameters": {},
            "name": "NewManShanksPrimeTest#testEight",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "NewManShanksPrime#nthManShanksPrime"
            ]
        },
        "DualPivotQuickSort#partition": {
            "parameters": {
                "array": "T[]",
                "left": "int",
                "right": "int"
            },
            "name": "DualPivotQuickSort#partition",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "FindKthNumber#findKthMax",
                "BFPRT#bfprt",
                "QuickSelect#selectIndex",
                "DualPivotQuickSort#dualPivotQuicksort",
                "IntrospectiveSort#introSort",
                "QuickSort#randomPartition"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "HexToOct#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "HexToOct#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BufferedReader#close",
                "HexToOct#decimal2octal",
                "HexToOct#hex2decimal",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "BSTIterative#find": {
            "parameters": {
                "data": "int"
            },
            "name": "BSTIterative#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": []
        },
        "CountChar#CountCharacters": {
            "parameters": {
                "str": "String"
            },
            "name": "CountChar#CountCharacters",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CountCharTest#testCountCharacters"
            ],
            "children": []
        },
        "CeilInBinarySearchTreeTest#testKeyAbsentLeftMostNodeIsCeil": {
            "parameters": {},
            "name": "CeilInBinarySearchTreeTest#testKeyAbsentLeftMostNodeIsCeil",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "CeilInBinarySearchTree#getCeil",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "CocktailShakerSortTest#cocktailShakerSortStringArray": {
            "parameters": {},
            "name": "CocktailShakerSortTest#cocktailShakerSortStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "BSTIterative#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BSTIterative#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "BSTRecursive#remove",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "IterativeBinarySearch#find",
                "CircleLinkedList#remove",
                "BSTRecursive#inorder",
                "BSTIterative#inorder",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "BSTIterative#remove",
                "Queue#remove",
                "FibonacciSearch#find",
                "SkipList#remove",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "DynamicArray#add",
                "SaddlebackSearch#find",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "LowerBound#find",
                "BinarySearch#find",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "MatrixUtil#add",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "Complex#add",
                "JumpSearch#find",
                "BSTRecursiveGeneric#inorder",
                "BSTRecursive#find",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "AbsoluteValue#getAbsValue": {
            "parameters": {
                "number": "int"
            },
            "name": "AbsoluteValue#getAbsValue",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "AbsoluteValueTest#testGetAbsValue"
            ],
            "children": []
        },
        "Caesar#isSmallLatinLetter": {
            "parameters": {
                "c": "char"
            },
            "name": "Caesar#isSmallLatinLetter",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Caesar#encode",
                "Caesar#decode"
            ],
            "children": []
        },
        "IntrospectiveSortTest#allSameTest": {
            "parameters": {},
            "name": "IntrospectiveSortTest#allSameTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "BankersAlgorithm#calculateNeed": {
            "parameters": {
                "totalResources": "int",
                "needArray": "int[][]",
                "totalProcess": "int",
                "maxArray": "int[][]",
                "allocationArray": "int[][]"
            },
            "name": "BankersAlgorithm#calculateNeed",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BankersAlgorithm#checkSafeSystem"
            ],
            "children": []
        },
        "RodCutting#cutRod": {
            "parameters": {
                "price": "int[]",
                "n": "int"
            },
            "name": "RodCutting#cutRod",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "RodCutting#main"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "CharacterSameTest#isAllCharactersSame": {
            "parameters": {},
            "name": "CharacterSameTest#isAllCharactersSame",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "CharactersSame#main",
                "CharacterSameTest#isAllCharactersSame"
            ],
            "children": [
                "CharacterSameTest#isAllCharactersSame",
                "CharactersSame#isAllCharactersSame"
            ]
        },
        "MergeSort#sort": {
            "parameters": {
                "unsorted": "T[]"
            },
            "name": "MergeSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "QuickSort#doSort",
                "MergeSort#doSort",
                "CircleSort#doSort"
            ]
        },
        "DistanceFormulaTest#euclideanTest4": {
            "parameters": {},
            "name": "DistanceFormulaTest#euclideanTest4",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DistanceFormula#euclideanDistance"
            ]
        },
        "MonteCarloTreeSearch#printScores": {
            "parameters": {
                "rootNode": "Node"
            },
            "name": "MonteCarloTreeSearch#printScores",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MonteCarloTreeSearch#monteCarloTreeSearch"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "Area#surfaceAreaSphere": {
            "parameters": {
                "radius": "double"
            },
            "name": "Area#surfaceAreaSphere",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AreaTest#testSurfaceAreaSphere",
                "AreaTest#testAllIllegalInput"
            ],
            "children": []
        },
        "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings": {
            "parameters": {},
            "name": "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "FibonacciHeap#size",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "JosephusProblem#findTheWinner": {
            "parameters": {
                "k": "int",
                "n": "int"
            },
            "name": "JosephusProblem#findTheWinner",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "JosephusProblemTest#testJosephusProblem"
            ],
            "children": [
                "JosephusProblem#winner"
            ]
        },
        "DistanceFormulaTest#euclideanTest1": {
            "parameters": {},
            "name": "DistanceFormulaTest#euclideanTest1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DistanceFormula#euclideanDistance"
            ]
        },
        "RegexMatching#regexBU": {
            "parameters": {
                "pat": "String",
                "src": "String"
            },
            "name": "RegexMatching#regexBU",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "RegexMatching#main"
            ],
            "children": []
        },
        "DistanceFormulaTest#euclideanTest2": {
            "parameters": {},
            "name": "DistanceFormulaTest#euclideanTest2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DistanceFormula#euclideanDistance"
            ]
        },
        "SJFScheduling#findShortestJob": {
            "parameters": {
                "ReadyProcesses": "ArrayList\u003cProcessDetails\u003e"
            },
            "name": "SJFScheduling#findShortestJob",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SJFScheduling#scheduleProcesses"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SinglyLinkedList#isEmpty",
                "MRUCache#get",
                "LFSR#get",
                "LeftistHeap#isEmpty",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularBufferTest#get",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "GenericHeap#get",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "ProcessDetails#getBurstTime",
                "StackArray#size",
                "CircularBufferTest#isEmpty",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "CircularQueue#isEmpty",
                "LFUCache#get",
                "FibonacciHeap#size",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "DistanceFormulaTest#euclideanTest3": {
            "parameters": {},
            "name": "DistanceFormulaTest#euclideanTest3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DistanceFormula#euclideanDistance"
            ]
        },
        "HowManyTimesRotated#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "HowManyTimesRotated#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BufferedReader#close",
                "HowManyTimesRotated#rotated"
            ]
        },
        "ADTFractionTest#testValue": {
            "parameters": {},
            "name": "ADTFractionTest#testValue",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "SlowSortTest#slowSortSingleIntegerElementArray": {
            "parameters": {},
            "name": "SlowSortTest#slowSortSingleIntegerElementArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "MRUCacheTest#nullKeysAndValues": {
            "parameters": {},
            "name": "MRUCacheTest#nullKeysAndValues",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "SlowSortTest#slowSortDuplicateStringArray": {
            "parameters": {},
            "name": "SlowSortTest#slowSortDuplicateStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "HillCipher#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "HillCipher#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HillCipher#hillCipher"
            ]
        },
        "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound": {
            "parameters": {},
            "name": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "SameTreesCheckTest#testTreesWithDifferentStructure": {
            "parameters": {},
            "name": "SameTreesCheckTest#testTreesWithDifferentStructure",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "SameTreesCheck#check",
                "DuplicateBrackets#check",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "TarjansAlgorithm#stronglyConnectedComponents": {
            "parameters": {
                "V": "int",
                "graph": "List\u003cList\u003cInteger\u003e\u003e"
            },
            "name": "TarjansAlgorithm#stronglyConnectedComponents",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes"
            ],
            "children": [
                "TarjansAlgorithm#stronglyConnCompsUtil"
            ]
        },
        "BinaryTree#findSuccessor": {
            "parameters": {
                "n": "Node"
            },
            "name": "BinaryTree#findSuccessor",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower": {
            "parameters": {},
            "name": "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString",
                "BinarySearch2dArray#BinarySearch"
            ]
        },
        "BinaryToHexadecimalTest#testBinaryToHexadecimal": {
            "parameters": {},
            "name": "BinaryToHexadecimalTest#testBinaryToHexadecimal",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Blowfish#binToHex",
                "BinaryToHexadecimal#binToHex"
            ]
        },
        "MinHeap#swap": {
            "parameters": {
                "index1": "int",
                "index2": "int"
            },
            "name": "MinHeap#swap",
            "recursive": "false",
            "inComing": 55,
            "outGoing": 0,
            "numberOfCalls": 55,
            "parents": [
                "Permutation#backtracking",
                "GenericHeap#upHeapify",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "FFT#fftBitReversal",
                "FindKthNumber#partition",
                "BFPRT#partition",
                "BFPRT#insertionSort",
                "QuickSelect#partition",
                "QuickSelect#pivot",
                "BogoSort#nextPermutation",
                "BubbleSort#sort",
                "BubbleSortRecursion#bubbleSort",
                "CircleSort#doSort",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "DualPivotQuickSort#partition",
                "DutchNationalFlagSort#dutch_national_flag_sort",
                "GnomeSort#sort",
                "HeapSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "IntrospectiveSort#partition",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify",
                "OddEvenSort#oddEvenSort",
                "QuickSort#randomPartition",
                "QuickSort#partition",
                "SortUtils#flip",
                "WiggleSort#triColorSort"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "InverseOfMatrix#gaussian": {
            "parameters": {
                "a": "double[][]",
                "index": "int[]"
            },
            "name": "InverseOfMatrix#gaussian",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "InverseOfMatrix#invert",
                "GaussianTest#passTest1"
            ],
            "children": [
                "FFTTest#abs",
                "Complex#abs"
            ]
        },
        "BreadthFirstSearch#search": {
            "parameters": {
                "node": "Node",
                "name": "String"
            },
            "name": "BreadthFirstSearch#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "FibonacciHeap#empty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "HeapElement#equals",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "NewManShanksPrimeTest#testSeven": {
            "parameters": {},
            "name": "NewManShanksPrimeTest#testSeven",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "NewManShanksPrime#nthManShanksPrime"
            ]
        },
        "MazeRecursion#setWay2": {
            "parameters": {
                "i": "int",
                "j": "int",
                "map": "int[][]"
            },
            "name": "MazeRecursion#setWay2",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "MazeRecursion#mazeRecursion",
                "MazeRecursion#setWay2",
                "MazeRecursionTest#testMaze"
            ],
            "children": [
                "MazeRecursion#setWay2"
            ]
        },
        "ConwayTest#testGenerateNextElementWith1A1Z3E1R1T3G1F1D2E1S1C": {
            "parameters": {},
            "name": "ConwayTest#testGenerateNextElementWith1A1Z3E1R1T3G1F1D2E1S1C",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Conway#generateNextElement"
            ]
        },
        "SimpleSortTest#simpleSortSingleStringArray": {
            "parameters": {},
            "name": "SimpleSortTest#simpleSortSingleStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "SinglyLinkedList#deleteDuplicates": {
            "parameters": {},
            "name": "SinglyLinkedList#deleteDuplicates",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SinglyLinkedList#main"
            ],
            "children": []
        },
        "LongestPalindromicSubstring#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LongestPalindromicSubstring#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Solution#longestPalindrome",
                "LongestPalindromicSubsequence#LPS",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "WorstFitCPUTest#testFitForMoreBlocksNoFit": {
            "parameters": {},
            "name": "WorstFitCPUTest#testFitForMoreBlocksNoFit",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "SkipListTest#print": {
            "parameters": {
                "skipList": "SkipList\u003c?\u003e"
            },
            "name": "SkipListTest#print",
            "recursive": "false",
            "inComing": 209,
            "outGoing": 0,
            "numberOfCalls": 209,
            "parents": [
                "MazeRecursion#mazeRecursion",
                "ColumnarTranspositionCipher#showTable",
                "ProductCipher#main",
                "AnyBaseToAnyBase#main",
                "BinaryToDecimal#main",
                "DecimalToOctal#main",
                "HexToOct#main",
                "HexaDecimalToDecimal#main",
                "OctalToDecimal#main",
                "OctalToHexadecimal#main",
                "BellmanFord#printPath",
                "BellmanFord#go",
                "BellmanFord#show",
                "null#null",
                "Cycle#printAll",
                "dijkstras#dijkstra",
                "FloydWarshall#floydwarshall",
                "AdjacencyList#printGraph",
                "KahnsAlgorithm#main",
                "MinPriorityQueue#print",
                "MinPriorityQueue#main",
                "CreateAndDetectLoop#printList",
                "CreateAndDetectLoop#main",
                "Link#displayLink",
                "SinglyLinkedList#print",
                "SinglyLinkedList#main",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NodeStack#main",
                "ReverseStack#main",
                "AVLTree#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "BSTRecursive#preOrder",
                "BSTRecursive#postOrder",
                "BSTRecursive#inOrder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursiveGeneric#inOrder",
                "BinaryTree#inOrder",
                "BinaryTree#preOrder",
                "BinaryTree#postOrder",
                "BinaryTree#bfs",
                "GenericTree#display_1",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "LevelOrderTraversalHelper#printGivenLevel",
                "Tree#printTopView",
                "RedBlackBST#printTree",
                "RedBlackBST#printTreepre",
                "RedBlackBST#deleteDemo",
                "Node#printInOrder",
                "Node#printPreOrder",
                "Node#printPostOrder",
                "Node#printLevelOrder",
                "Main#main",
                "BoundaryFill#printImageArray",
                "CoinChange#printAmount",
                "LevenshteinDistance#main",
                "MatrixChainMultiplication#main",
                "MatrixChainMultiplication#printOptimalParens",
                "MatrixChainMultiplication#printArray",
                "MatrixChainMultiplication#input",
                "OptimalJobScheduling#showResults",
                "Sum_Of_Subset#main",
                "LeonardoNumber#main",
                "MagicSquare#main",
                "PrimeCheck#main",
                "TrinomialTriangle#printTrinomial",
                "InverseOfMatrix#main",
                "MedianOfRunningArray#main",
                "PalindromePrime#functioning",
                "Sort012D#sort012",
                "ThreeSumProblem#main",
                "TwoSumProblem#main",
                "matrixTranspose#main",
                "BankersAlgorithm#checkSafeSystem",
                "FloydTriangle#main",
                "HappyNumbersSeq#main",
                "Krishnamurthy#main",
                "LowestBasePalindrome#main",
                "PageRank#main",
                "PasswordGen#main",
                "PerlinNoise#main",
                "Rotate_by_90_degree#printMatrix",
                "SkylineProblem#run",
                "SkylineProblem#print",
                "Sudoku#print",
                "Sudoku#main",
                "TowerOfHanoi#main",
                "LinearSearchThread#main",
                "SquareRootBinarySearch#main",
                "BitonicSort#printArray",
                "BogoSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#main",
                "CycleSort#main",
                "DNFSort#printArray",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "MergeSortNoExtraSpace#main",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "RadixSort#print",
                "RadixSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "StoogeSort#main",
                "SwapSort#main",
                "TreeSort#main",
                "LongestPalindromicSubstring#main",
                "SkipListTest#add",
                "SkipListTest#get",
                "SkipListTest#contains",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "SkipListTest#checkSortedOnLowestLayer",
                "TestPrintMatrixInSpiralOrder#testOne",
                "TestPrintMatrixInSpiralOrder#testTwo"
            ],
            "children": []
        },
        "Volume#volumeHemisphere": {
            "parameters": {
                "radius": "double"
            },
            "name": "Volume#volumeHemisphere",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "VolumeTest#volume"
            ],
            "children": []
        },
        "longestNonRepeativeSubstringTest#palindrome": {
            "parameters": {},
            "name": "longestNonRepeativeSubstringTest#palindrome",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "longestNonRepeativeSubstring#lengthOfLongestSubstring"
            ]
        },
        "HashMapCuckooHashingTest#createHashMapCuckooHashing": {
            "parameters": {},
            "name": "HashMapCuckooHashingTest#createHashMapCuckooHashing",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DynamicArray#stream"
            ]
        },
        "BoardPath#bpIS": {
            "parameters": {
                "strg": "int[]",
                "end": "int",
                "curr": "int"
            },
            "name": "BoardPath#bpIS",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "CircleSort#sort": {
            "parameters": {
                "array": "T[]"
            },
            "name": "CircleSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "QuickSort#doSort",
                "MergeSort#doSort",
                "CircleSort#doSort"
            ]
        },
        "SortUtilsRandomGeneratorTest#generateArray": {
            "parameters": {},
            "name": "SortUtilsRandomGeneratorTest#generateArray",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "FindKthNumber#main",
                "InsertionSort#main",
                "InsertionSortTest#testWithRandomArray",
                "SortUtilsRandomGeneratorTest#generateArray",
                "SortUtilsRandomGeneratorTest#generateArrayEmpty",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
            ],
            "children": [
                "MatrixUtil#assertThat",
                "SortUtilsRandomGeneratorTest#generateArray",
                "FindKthNumber#generateArray",
                "FibonacciJavaStreams#assertThat",
                "SortUtilsRandomGenerator#generateArray",
                "DepthFirstSearch#assertThat"
            ]
        },
        "Combinations#combinations": {
            "parameters": {
                "k": "int",
                "n": "int"
            },
            "name": "Combinations#combinations",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "CombinationsTest#testCombination"
            ],
            "children": [
                "Combinations#factorial",
                "Factorial#factorial",
                "FactorialRecursion#factorial"
            ]
        },
        "LinearProbingHashMapTest#getMap": {
            "parameters": {},
            "name": "LinearProbingHashMapTest#getMap",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "MapTest#putTest",
                "MapTest#getTest",
                "MapTest#deleteTest",
                "MapTest#containsTest",
                "MapTest#sizeTest",
                "MapTest#keysTest",
                "MapTest#hashTest"
            ],
            "children": []
        },
        "PerfectSquareTest#TestPerfectSquareifisnotcorrect": {
            "parameters": {},
            "name": "PerfectSquareTest#TestPerfectSquareifisnotcorrect",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PerfectSquare#isPerfectSquare",
                "FibonacciNumber#isPerfectSquare"
            ]
        },
        "TrinomialTriangle#TrinomialValue": {
            "parameters": {
                "k": "int",
                "n": "int"
            },
            "name": "TrinomialTriangle#TrinomialValue",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "TrinomialTriangle#TrinomialValue",
                "TrinomialTriangle#printTrinomial"
            ],
            "children": [
                "TrinomialTriangle#TrinomialValue"
            ]
        },
        "PalindromeSinglyLinkedList#isPalindrome": {
            "parameters": {
                "linkedList": "SinglyLinkedList"
            },
            "name": "PalindromeSinglyLinkedList#isPalindrome",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "PalindromeNumber#main",
                "PalindromeSinglyLinkedList#main",
                "PalindromeTest#palindrome"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "StackArray#pop",
                "LinkedListStack#push",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "StackArray#push",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "StackArrayList#push",
                "Bag#size",
                "StackArrayList#size",
                "NodeStack#pop",
                "SkipList#size",
                "StackArray#size",
                "StackArrayList#pop",
                "SinglyLinkedList#getNth",
                "NodeStack#push",
                "Deques#size",
                "LinkedListStack#pop",
                "NodeStack#size",
                "FibonacciHeap#size"
            ]
        },
        "GenericTree#display": {
            "parameters": {},
            "name": "GenericTree#display",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "HashMap#displayHashtable",
                "LinkedList#display",
                "Link#main",
                "AVLSimple#display"
            ],
            "children": [
                "GenericTree#display_1"
            ]
        },
        "BSTRecursiveGeneric#preorder": {
            "parameters": {},
            "name": "BSTRecursiveGeneric#preorder",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericTree#preordercall",
                "GenericTree#preorder"
            ],
            "children": [
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursive#preOrder"
            ]
        },
        "NthUglyNumber#getNthUglyNo": {
            "parameters": {
                "n": "int"
            },
            "name": "NthUglyNumber#getNthUglyNo",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "NthUglyNumber#main"
            ],
            "children": [
                "FindMinRecursion#min",
                "MinValue#min",
                "BucketSort#min"
            ]
        },
        "LinearProbingHashMap#size": {
            "parameters": {},
            "name": "LinearProbingHashMap#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": []
        },
        "BinaryToDecimal#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BinaryToDecimal#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BufferedReader#close",
                "BinaryToDecimal#binaryToDecimal",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "KnightsTour#printResult": {
            "parameters": {},
            "name": "KnightsTour#printResult",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "KnightsTour#main"
            ],
            "children": []
        },
        "FibonacciNumber#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "FibonacciNumber#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciNumber#isFibonacciNumber"
            ]
        },
        "AllPathsFromSourceToTargetTest#testForFourthcase": {
            "parameters": {},
            "name": "AllPathsFromSourceToTargetTest#testForFourthcase",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AllPathsFromSourceToTarget#allPathsFromSourceToTarget"
            ]
        },
        "DistanceFormulaTest#manhattanTest3": {
            "parameters": {},
            "name": "DistanceFormulaTest#manhattanTest3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DistanceFormula#manhattanDistance"
            ]
        },
        "WordBoggle#explore": {
            "parameters": {
                "trieNode": "TrieNode",
                "visited": "boolean[][]",
                "finalWords": "Set\u003cString\u003e",
                "i": "int",
                "j": "int",
                "board": "char[][]"
            },
            "name": "WordBoggle#explore",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "WordBoggle#boggleBoard",
                "WordBoggle#explore"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "WordBoggle#explore",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "BSTRecursive#add",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "WordBoggle#getNeighbors",
                "Complex#add",
                "GenericHeap#add",
                "GenericHashMapUsingArray#containsKey",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "AmicableNumber#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "AmicableNumber#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AmicableNumber#findAllInRange"
            ]
        },
        "GenericTree#removeleaves": {
            "parameters": {
                "node": "Node"
            },
            "name": "GenericTree#removeleaves",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericTree#removeleavescall",
                "GenericTree#removeleaves"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "GenericTree#removeleaves",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#remove",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "Complex#add",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "FastInverseSqrtTests#testForSeventh": {
            "parameters": {},
            "name": "FastInverseSqrtTests#testForSeventh",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FastInverseSqrt#inverseSqrt"
            ]
        },
        "Task2#count": {
            "parameters": {
                "head": "Node"
            },
            "name": "Task2#count",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "CountSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "MatrixChainMultiplication#main",
                "SieveOfEratosthenes#findPrimesTill",
                "UnionFind#main",
                "Task#sortByMergeSort",
                "Task1#sortByInsertionSort",
                "Task2#sortByHeapSort"
            ],
            "children": []
        },
        "HeapNode#getNext": {
            "parameters": {},
            "name": "HeapNode#getNext",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "LinkedList#findEnd",
                "LinkedList#findKey",
                "LinkedList#delete",
                "LinkedList#display",
                "FibonacciHeap#deleteMin"
            ],
            "children": []
        },
        "LongDivisionTest#testTwo": {
            "parameters": {},
            "name": "LongDivisionTest#testTwo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LongDivision#divide",
                "Complex#divide"
            ]
        },
        "BufferedReader#refill": {
            "parameters": {},
            "name": "BufferedReader#refill",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "BufferedReader#read",
                "BufferedReader#readBlock"
            ],
            "children": [
                "BufferedReader#justRefill"
            ]
        },
        "BellmanFord#getEdgeArray": {
            "parameters": {},
            "name": "BellmanFord#getEdgeArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "StackArray#isFull": {
            "parameters": {},
            "name": "StackArray#isFull",
            "recursive": "false",
            "inComing": 18,
            "outGoing": 0,
            "numberOfCalls": 18,
            "parents": [
                "CircularBuffer#put",
                "HashMapCuckooHashing#insertKey2HashTable",
                "MinPriorityQueue#insert",
                "CircularQueue#enQueue",
                "CircularQueue#main",
                "PriorityQueue#insert",
                "Queue#insert",
                "Queues#main",
                "StackArray#main",
                "StackArray#push",
                "CircularBufferTest#isFull",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": []
        },
        "BSTRecursive#remove": {
            "parameters": {
                "data": "int"
            },
            "name": "BSTRecursive#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": [
                "Map#delete",
                "LinkOperations#delete",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "FibonacciHeap#delete",
                "SinglyLinkedList#delete",
                "RedBlackBST#delete",
                "KDTreeTest#delete",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "BSTRecursiveGeneric#delete",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "CircleSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CircleSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "MergeSortedArrayList#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MergeSortedArrayList#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MergeSort#merge",
                "Trie#add",
                "Vector2#add",
                "StrandSort#merge",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MergeSortRecursive#merge",
                "MatrixUtil#add",
                "TimSort#merge",
                "MergeSortedArrayList#merge",
                "Complex#add",
                "MergeSortedSinglyLinkedList#merge",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "LeftistHeap#merge"
            ]
        },
        "InsertionSort#sort": {
            "parameters": {
                "hi": "int",
                "lo": "int",
                "array": "T[]"
            },
            "name": "InsertionSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "FindKthNumber#swap",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "OddEvenSort#swap",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "MinHeap#swap",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "SinglyLinkedListTest#swap",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "GenericHeap#swap",
                "PancakeSort#sort",
                "MaxHeap#swap",
                "TreeSort#sort",
                "Permutation#swap",
                "SortUtils#swap",
                "SortUtils#less",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "IntrospectiveSort#swap",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "HeapSort#swap",
                "HeapSort#less",
                "PigeonholeSort#sort",
                "BFPRT#swap",
                "DualPivotQuickSort#swap",
                "BitonicSort#sort"
            ]
        },
        "HappyNumbersSeq#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "HappyNumbersSeq#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HappyNumbersSeq#sumSquares",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "HappyNumbersSeq#isSad",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "SkylineProblem#findSkyline": {
            "parameters": {
                "start": "int",
                "end": "int"
            },
            "name": "SkylineProblem#findSkyline",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "SkylineProblem#run",
                "SkylineProblem#findSkyline"
            ],
            "children": [
                "SkylineProblem#mergeSkyline",
                "Trie#add",
                "Vector2#add",
                "SkylineProblem#findSkyline",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Intersection#intersection": {
            "parameters": {
                "arr2": "int[]",
                "arr1": "int[]"
            },
            "name": "Intersection#intersection",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "BSTRecursive#add",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Complex#add",
                "Map#put",
                "GenericHeap#add",
                "GenericHashMapUsingArray#containsKey",
                "SkylineProblem#add",
                "LRUCache#put",
                "SkipListTest#add",
                "Bag#add",
                "LinearProbingHashMap#put",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "UniquePathsTests#testForThreeElements": {
            "parameters": {},
            "name": "UniquePathsTests#testForThreeElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "UniquePaths#uniquePaths"
            ]
        },
        "MedianOfRunningArray#insert": {
            "parameters": {
                "e": "Integer"
            },
            "name": "MedianOfRunningArray#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Trie#add",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "Map#size",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "MatrixUtil#add",
                "FibonacciHeap#size",
                "Complex#add",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "AVLTree#printBalance": {
            "parameters": {
                "n": "Node"
            },
            "name": "AVLTree#printBalance",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "AVLTree#printBalance",
                "AVLTree#main"
            ],
            "children": [
                "AVLTree#printBalance"
            ]
        },
        "HamiltonianCycleTest#testFindHamiltonianCycleShouldReturnHamiltonianCycle": {
            "parameters": {},
            "name": "HamiltonianCycleTest#testFindHamiltonianCycleShouldReturnHamiltonianCycle",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HamiltonianCycle#findHamiltonianCycle"
            ]
        },
        "LowestBasePalindrome#lowestBasePalindrome": {
            "parameters": {
                "num": "int"
            },
            "name": "LowestBasePalindrome#lowestBasePalindrome",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "LowestBasePalindrome#main"
            ],
            "children": [
                "ReverseString#reverse",
                "Rotation#reverse",
                "HeapElement#equals",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "ReverseStringRecursive#reverse",
                "LowestBasePalindrome#reverse"
            ]
        },
        "NextFit#fitProcess": {
            "parameters": {
                "sizeOfProcesses": "int[]",
                "sizeOfBlocks": "int[]"
            },
            "name": "NextFit#fitProcess",
            "recursive": "false",
            "inComing": 21,
            "outGoing": 0,
            "numberOfCalls": 21,
            "parents": [
                "BestFitCPUTest#testFitForUseOfOneBlock",
                "BestFitCPUTest#testFitForEqualProcecesses",
                "BestFitCPUTest#testFitForNoEmptyBlockCell",
                "BestFitCPUTest#testFitForSameInputDifferentQuery",
                "BestFitCPUTest#testFitForMoreBlocksNoFit",
                "FirstFitCPUTest#testFitForUseOfOneBlock",
                "FirstFitCPUTest#testFitForEqualProcecesses",
                "FirstFitCPUTest#testFitForNoEmptyBlockCell",
                "FirstFitCPUTest#testFitForSameInputDifferentQuery",
                "FirstFitCPUTest#testFitForMoreBlocksNoFit",
                "NextFitCPUTest#testFitForUseOfOneBlock",
                "NextFitCPUTest#testFitForEqualProcecesses",
                "NextFitCPUTest#testFitForNoEmptyBlockCell",
                "NextFitCPUTest#testFitForSameInputDifferentQuery",
                "NextFitCPUTest#testFitForMoreBlocksNoFit",
                "WorstFitCPUTest#testFitForUseOfOneBlock",
                "WorstFitCPUTest#testFitForEqualProcecesses",
                "WorstFitCPUTest#testFitForNoEmptyBlockCell",
                "WorstFitCPUTest#testFitForSameInputDifferentQuery",
                "WorstFitCPUTest#testFitForMoreBlocksNoFit",
                "WorstFitCPUTest#testFitBadCase"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "NextFit#findNextFit",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "PriorityQueue#isFull": {
            "parameters": {},
            "name": "PriorityQueue#isFull",
            "recursive": "false",
            "inComing": 18,
            "outGoing": 0,
            "numberOfCalls": 18,
            "parents": [
                "CircularBuffer#put",
                "HashMapCuckooHashing#insertKey2HashTable",
                "MinPriorityQueue#insert",
                "CircularQueue#enQueue",
                "CircularQueue#main",
                "PriorityQueue#insert",
                "Queue#insert",
                "Queues#main",
                "StackArray#main",
                "StackArray#push",
                "CircularBufferTest#isFull",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": []
        },
        "LRUCache#moveNodeToLast": {
            "parameters": {
                "entry": "Entry\u003cK,V\u003e"
            },
            "name": "LRUCache#moveNodeToLast",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "LRUCache#get",
                "LRUCache#put"
            ],
            "children": [
                "Entry#setNextEntry",
                "Entry#getPreEntry",
                "Entry#setPreEntry",
                "Entry#getNextEntry"
            ]
        },
        "QuickSelect#pivot": {
            "parameters": {
                "left": "int",
                "right": "int",
                "list": "List\u003cT\u003e"
            },
            "name": "QuickSelect#pivot",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "QuickSelect#selectIndex"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "QuickSelect#partition5",
                "IntrospectiveSort#swap",
                "QuickSelect#selectIndex",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "NewManShanksPrimeTest#testOne": {
            "parameters": {},
            "name": "NewManShanksPrimeTest#testOne",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "NewManShanksPrime#nthManShanksPrime"
            ]
        },
        "LinkOperations#clearList": {
            "parameters": {},
            "name": "LinkOperations#clearList",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Link#main"
            ],
            "children": []
        },
        "HexaDecimalToDecimalTest#testhexaDecimalToDecimal": {
            "parameters": {},
            "name": "HexaDecimalToDecimalTest#testhexaDecimalToDecimal",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HexaDecimalToDecimal#getHexaToDec"
            ]
        },
        "FFTTest#divideWithScalarTest": {
            "parameters": {},
            "name": "FFTTest#divideWithScalarTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Complex#getImaginary",
                "LongDivision#divide",
                "Complex#divide",
                "Complex#getReal"
            ]
        },
        "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle": {
            "parameters": {},
            "name": "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString",
                "BinarySearch2dArray#BinarySearch"
            ]
        },
        "BernoulliHeightStrategy#height": {
            "parameters": {
                "expectedSize": "int"
            },
            "name": "BernoulliHeightStrategy#height",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "null#null",
                "AVLSimple#insert",
                "AVLSimple#bf",
                "AVLSimple#rightRotate",
                "AVLSimple#leftRotate",
                "AVLTree#rebalance",
                "AVLTree#setBalance",
                "AVLTree#reheight",
                "GenericTree#heightcall",
                "GenericTree#height",
                "LevelOrderTraversalHelper#printLevelOrder",
                "LevelOrderTraversalHelper#height"
            ],
            "children": [
                "Blowfish#round"
            ]
        },
        "SlowSortTest#slowSortIntegerArray": {
            "parameters": {},
            "name": "SlowSortTest#slowSortIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "Vertex#removeAdjacentVertex": {
            "parameters": {
                "to": "E"
            },
            "name": "Vertex#removeAdjacentVertex",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "CircularBuffer#get",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#remove",
                "SkipList#size",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove"
            ]
        },
        "DoublyLinkedList#displayBackwards": {
            "parameters": {},
            "name": "DoublyLinkedList#displayBackwards",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "Link#main"
            ],
            "children": [
                "Link#displayLink"
            ]
        },
        "NumberOfDigits#numberOfDigitsRecursion": {
            "parameters": {
                "number": "int"
            },
            "name": "NumberOfDigits#numberOfDigitsRecursion",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "NumberOfDigits#main",
                "NumberOfDigits#numberOfDigitsRecursion"
            ],
            "children": [
                "NumberOfDigits#numberOfDigitsRecursion"
            ]
        },
        "CountWords#wordCount": {
            "parameters": {
                "s": "String"
            },
            "name": "CountWords#wordCount",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "StrassenMatrixMultiplication#split",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "BinaryTree#inOrder": {
            "parameters": {
                "localRoot": "Node"
            },
            "name": "BinaryTree#inOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "BSTRecursiveGeneric#inOrder",
                "MinPriorityQueue#print",
                "BSTRecursive#inOrder",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "TreeRandomNode#inOrder",
                "RadixSort#print"
            ]
        },
        "SelectionSortTest#emptyArrTest": {
            "parameters": {},
            "name": "SelectionSortTest#emptyArrTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "DynamicArray#get": {
            "parameters": {
                "index": "int"
            },
            "name": "DynamicArray#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "MinHeap#getElement",
                "DynamicArray#getElement",
                "MaxHeap#getElement",
                "Heap#getElement"
            ]
        },
        "EggDroppingTest#hasMultipleEggSingleFloor": {
            "parameters": {},
            "name": "EggDroppingTest#hasMultipleEggSingleFloor",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "EggDropping#minTrials"
            ]
        },
        "PathAndDistance#getEstimated": {
            "parameters": {},
            "name": "PathAndDistance#getEstimated",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "A_Star#aStar"
            ],
            "children": []
        },
        "HashMapCuckooHashing#displayHashtable": {
            "parameters": {},
            "name": "HashMapCuckooHashing#displayHashtable",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Main#main",
                "MainCuckooHashing#main"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "HeapElement#equals",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "Edge#getFrom": {
            "parameters": {},
            "name": "Edge#getFrom",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "ProductCipher#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ProductCipher#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "SkipListTest#print",
                "dijkstras#print",
                "Deques#toString",
                "MinPriorityQueue#print",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "BufferedReader#close",
                "Vector2#toString",
                "CursorLinkedList#append",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "NodeStack#print",
                "SortUtils#print",
                "Queue#toString",
                "CircleLinkedList#append",
                "RadixSort#print",
                "LinkedQueue#toString"
            ]
        },
        "BSTIterative#preorder": {
            "parameters": {},
            "name": "BSTIterative#preorder",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericTree#preordercall",
                "GenericTree#preorder"
            ],
            "children": [
                "FibonacciHeap#empty",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "StackArray#pop",
                "LinkedListStack#push",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "StackArray#push",
                "StackArrayList#push",
                "NodeStack#pop",
                "StackArrayList#pop",
                "NodeStack#push",
                "LinkedListStack#pop",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "RotationTest#testRotation": {
            "parameters": {},
            "name": "RotationTest#testRotation",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Rotation#rotation"
            ]
        },
        "SubsetCountTest#singleSubsetSO": {
            "parameters": {},
            "name": "SubsetCountTest#singleSubsetSO",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SubsetCount#getCountSO"
            ]
        },
        "Area#surfaceAreaCircle": {
            "parameters": {
                "radius": "double"
            },
            "name": "Area#surfaceAreaCircle",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AreaTest#testSurfaceAreaCircle",
                "AreaTest#testAllIllegalInput"
            ],
            "children": []
        },
        "PythagoreanTripleTest#Testpythagoreantriple": {
            "parameters": {},
            "name": "PythagoreanTripleTest#Testpythagoreantriple",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PythagoreanTriple#isPythagTriple"
            ]
        },
        "InsertionSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "InsertionSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "InsertionSort#measureApproxExecTime",
                "SortUtilsRandomGeneratorTest#generateArray",
                "FindKthNumber#generateArray",
                "SortUtilsRandomGenerator#generateArray"
            ]
        },
        "InorderTraversalTest#testRecursiveInorderNonBalanced": {
            "parameters": {},
            "name": "InorderTraversalTest#testRecursiveInorderNonBalanced",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "SumOfDigitsTest#testNegative": {
            "parameters": {},
            "name": "SumOfDigitsTest#testNegative",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SumOfDigits#sumOfDigits",
                "SumOfDigits#sumOfDigitsRecursion",
                "SumOfDigits#sumOfDigitsFast"
            ]
        },
        "BernoulliHeightStrategy#nodeHeight": {
            "parameters": {
                "heightCap": "int"
            },
            "name": "BernoulliHeightStrategy#nodeHeight",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SkipList#add"
            ],
            "children": []
        },
        "ReverseStack#reverseStack": {
            "parameters": {
                "stack": "Stack\u003cInteger\u003e"
            },
            "name": "ReverseStack#reverseStack",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "ReverseStack#main",
                "ReverseStack#reverseStack"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LeftistHeap#isEmpty",
                "ReverseStack#reverseStack",
                "QueueWithStack#isEmpty",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "LinkedListStack#pop",
                "CircularQueue#isEmpty",
                "ReverseStack#insertAtBottom",
                "NodeStack#peek",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "PriorityQueue#isEmpty"
            ]
        },
        "BufferedReader#available": {
            "parameters": {},
            "name": "BufferedReader#available",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "null#null",
                "BufferedReader#available",
                "BufferedReader#peek",
                "BufferedReaderTest#testPeeks",
                "BufferedReaderTest#testMixes",
                "BufferedReaderTest#testBlockPractical"
            ],
            "children": [
                "BufferedReader#available",
                "BufferedReader#needsRefill"
            ]
        },
        "CocktailShakerSortTest#cocktailShakerSortIntegerArray": {
            "parameters": {},
            "name": "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "InsertionSortTest#setUp": {
            "parameters": {},
            "name": "InsertionSortTest#setUp",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "dijkstras#print": {
            "parameters": {
                "dist": "int[]"
            },
            "name": "dijkstras#print",
            "recursive": "false",
            "inComing": 209,
            "outGoing": 0,
            "numberOfCalls": 209,
            "parents": [
                "MazeRecursion#mazeRecursion",
                "ColumnarTranspositionCipher#showTable",
                "ProductCipher#main",
                "AnyBaseToAnyBase#main",
                "BinaryToDecimal#main",
                "DecimalToOctal#main",
                "HexToOct#main",
                "HexaDecimalToDecimal#main",
                "OctalToDecimal#main",
                "OctalToHexadecimal#main",
                "BellmanFord#printPath",
                "BellmanFord#go",
                "BellmanFord#show",
                "null#null",
                "Cycle#printAll",
                "dijkstras#dijkstra",
                "FloydWarshall#floydwarshall",
                "AdjacencyList#printGraph",
                "KahnsAlgorithm#main",
                "MinPriorityQueue#print",
                "MinPriorityQueue#main",
                "CreateAndDetectLoop#printList",
                "CreateAndDetectLoop#main",
                "Link#displayLink",
                "SinglyLinkedList#print",
                "SinglyLinkedList#main",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NodeStack#main",
                "ReverseStack#main",
                "AVLTree#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "BSTRecursive#preOrder",
                "BSTRecursive#postOrder",
                "BSTRecursive#inOrder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursiveGeneric#inOrder",
                "BinaryTree#inOrder",
                "BinaryTree#preOrder",
                "BinaryTree#postOrder",
                "BinaryTree#bfs",
                "GenericTree#display_1",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "LevelOrderTraversalHelper#printGivenLevel",
                "Tree#printTopView",
                "RedBlackBST#printTree",
                "RedBlackBST#printTreepre",
                "RedBlackBST#deleteDemo",
                "Node#printInOrder",
                "Node#printPreOrder",
                "Node#printPostOrder",
                "Node#printLevelOrder",
                "Main#main",
                "BoundaryFill#printImageArray",
                "CoinChange#printAmount",
                "LevenshteinDistance#main",
                "MatrixChainMultiplication#main",
                "MatrixChainMultiplication#printOptimalParens",
                "MatrixChainMultiplication#printArray",
                "MatrixChainMultiplication#input",
                "OptimalJobScheduling#showResults",
                "Sum_Of_Subset#main",
                "LeonardoNumber#main",
                "MagicSquare#main",
                "PrimeCheck#main",
                "TrinomialTriangle#printTrinomial",
                "InverseOfMatrix#main",
                "MedianOfRunningArray#main",
                "PalindromePrime#functioning",
                "Sort012D#sort012",
                "ThreeSumProblem#main",
                "TwoSumProblem#main",
                "matrixTranspose#main",
                "BankersAlgorithm#checkSafeSystem",
                "FloydTriangle#main",
                "HappyNumbersSeq#main",
                "Krishnamurthy#main",
                "LowestBasePalindrome#main",
                "PageRank#main",
                "PasswordGen#main",
                "PerlinNoise#main",
                "Rotate_by_90_degree#printMatrix",
                "SkylineProblem#run",
                "SkylineProblem#print",
                "Sudoku#print",
                "Sudoku#main",
                "TowerOfHanoi#main",
                "LinearSearchThread#main",
                "SquareRootBinarySearch#main",
                "BitonicSort#printArray",
                "BogoSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#main",
                "CycleSort#main",
                "DNFSort#printArray",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "MergeSortNoExtraSpace#main",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "RadixSort#print",
                "RadixSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "StoogeSort#main",
                "SwapSort#main",
                "TreeSort#main",
                "LongestPalindromicSubstring#main",
                "SkipListTest#add",
                "SkipListTest#get",
                "SkipListTest#contains",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "SkipListTest#checkSortedOnLowestLayer",
                "TestPrintMatrixInSpiralOrder#testOne",
                "TestPrintMatrixInSpiralOrder#testTwo"
            ],
            "children": []
        },
        "Deques#toString": {
            "parameters": {},
            "name": "Deques#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": []
        },
        "Complex#getImaginary": {
            "parameters": {},
            "name": "Complex#getImaginary",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "FFTTest#getImaginaryTest",
                "FFTTest#multiplyWithComplexTest",
                "FFTTest#multiplyWithScalarTest",
                "FFTTest#conjugateTest",
                "FFTTest#divideWithComplexTest",
                "FFTTest#divideWithScalarTest",
                "FFTTest#fft"
            ],
            "children": []
        },
        "MobiusFunctionTest#testMobiusForZero": {
            "parameters": {},
            "name": "MobiusFunctionTest#testMobiusForZero",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MobiusFunction#mobius"
            ]
        },
        "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList": {
            "parameters": {},
            "name": "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "PrimeFactorization#pfactors",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "InsertionSortTest#insertionSortClassicalWithIntegerArrayShouldPass": {
            "parameters": {},
            "name": "InsertionSortTest#insertionSortClassicalWithIntegerArrayShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "InsertionSortTest#testIntegerArray"
            ]
        },
        "IntrospectiveSort#partition": {
            "parameters": {
                "a": "T[]",
                "high": "int",
                "low": "int"
            },
            "name": "IntrospectiveSort#partition",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "FindKthNumber#findKthMax",
                "BFPRT#bfprt",
                "QuickSelect#selectIndex",
                "DualPivotQuickSort#dualPivotQuicksort",
                "IntrospectiveSort#introSort",
                "QuickSort#randomPartition"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "LinearSearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LinearSearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "RomanNumeralUtil#generate",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "LinearSearch#find": {
            "parameters": {
                "array": "T[]",
                "value": "T"
            },
            "name": "LinearSearch#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": []
        },
        "DualPivotQuickSort#sort": {
            "parameters": {
                "array": "T[]"
            },
            "name": "DualPivotQuickSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "DualPivotQuickSort#dualPivotQuicksort"
            ]
        },
        "LinkedQueue#size": {
            "parameters": {},
            "name": "LinkedQueue#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": []
        },
        "StringMatchFiniteAutomata#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "StringMatchFiniteAutomata#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RabinKarp#searchPat",
                "StringMatchFiniteAutomata#searchPat",
                "BufferedReader#close"
            ]
        },
        "CRCAlgorithm#getWrongMessNotCaught": {
            "parameters": {},
            "name": "CRCAlgorithm#getWrongMessNotCaught",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "CircularQueue#isFull": {
            "parameters": {},
            "name": "CircularQueue#isFull",
            "recursive": "false",
            "inComing": 18,
            "outGoing": 0,
            "numberOfCalls": 18,
            "parents": [
                "CircularBuffer#put",
                "HashMapCuckooHashing#insertKey2HashTable",
                "MinPriorityQueue#insert",
                "CircularQueue#enQueue",
                "CircularQueue#main",
                "PriorityQueue#insert",
                "Queue#insert",
                "Queues#main",
                "StackArray#main",
                "StackArray#push",
                "CircularBufferTest#isFull",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": []
        },
        "QueueWithStack#isEmpty": {
            "parameters": {},
            "name": "QueueWithStack#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "A5KeyStreamGenerator#reInitializeRegisters": {
            "parameters": {},
            "name": "A5KeyStreamGenerator#reInitializeRegisters",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "A5KeyStreamGenerator#getNextKeyStream"
            ],
            "children": [
                "A5KeyStreamGenerator#initialize",
                "A5KeyStreamGenerator#incrementFrameCounter",
                "LFSR#initialize",
                "BaseLFSR#initialize",
                "LFSRTest#initialize"
            ]
        },
        "Complex#subtract": {
            "parameters": {
                "z": "Complex"
            },
            "name": "Complex#subtract",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "RSA#generateKeys",
                "FFT#fft",
                "FibonacciJavaStreams#calculate",
                "MatrixUtil#main",
                "KochSnowflake#IterationStep",
                "FFTTest#subtractTest"
            ],
            "children": []
        },
        "QueueWithStack#isInStackEmpty": {
            "parameters": {},
            "name": "QueueWithStack#isInStackEmpty",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "QueueUsingTwoStacks#main"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "FibonacciHeap#size"
            ]
        },
        "DecimalToAnyBase#reVal": {
            "parameters": {
                "num": "int"
            },
            "name": "DecimalToAnyBase#reVal",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "DecimalToAnyBase#convertToAnyBase"
            ],
            "children": []
        },
        "SinglyLinkedListTest#swap": {
            "parameters": {},
            "name": "SinglyLinkedListTest#swap",
            "recursive": "false",
            "inComing": 55,
            "outGoing": 0,
            "numberOfCalls": 55,
            "parents": [
                "Permutation#backtracking",
                "GenericHeap#upHeapify",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "FFT#fftBitReversal",
                "FindKthNumber#partition",
                "BFPRT#partition",
                "BFPRT#insertionSort",
                "QuickSelect#partition",
                "QuickSelect#pivot",
                "BogoSort#nextPermutation",
                "BubbleSort#sort",
                "BubbleSortRecursion#bubbleSort",
                "CircleSort#doSort",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "DualPivotQuickSort#partition",
                "DutchNationalFlagSort#dutch_national_flag_sort",
                "GnomeSort#sort",
                "HeapSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "IntrospectiveSort#partition",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify",
                "OddEvenSort#oddEvenSort",
                "QuickSort#randomPartition",
                "QuickSort#partition",
                "SortUtils#flip",
                "WiggleSort#triColorSort"
            ],
            "children": [
                "SinglyLinkedListTest#createSampleList",
                "SinglyLinkedList#getHead",
                "SinglyLinkedList#swapNodes",
                "SinglyLinkedList#getNth",
                "NodeStack#getHead"
            ]
        },
        "SimpleTreeNode#getLeftNode": {
            "parameters": {},
            "name": "SimpleTreeNode#getLeftNode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "BellmanFord#show": {
            "parameters": {
                "arr": "Edge[]",
                "end": "int",
                "source": "int"
            },
            "name": "BellmanFord#show",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BellmanFord#printPath",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "OptimalJobScheduling#runningCost": {
            "parameters": {
                "process": "int",
                "machine": "int"
            },
            "name": "OptimalJobScheduling#runningCost",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "OptimalJobScheduling#calculateCost"
            ],
            "children": [
                "FindMin#findMin",
                "KDTreeTest#findMin",
                "FibonacciHeap#findMin",
                "OptimalJobScheduling#findMin"
            ]
        },
        "SinglyLinkedList#size": {
            "parameters": {},
            "name": "SinglyLinkedList#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": []
        },
        "MaxHeap#getElementKey": {
            "parameters": {
                "elementIndex": "int"
            },
            "name": "MaxHeap#getElementKey",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#deleteElement",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#deleteElement"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "HeapElement#getKey",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "HeapNode#getKey",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "Entry#getKey"
            ]
        },
        "DepthFirstSearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "DepthFirstSearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "MatrixUtil#assertThat",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "FibonacciJavaStreams#assertThat",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "DepthFirstSearch#assertThat",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "FindKthNumber#partition": {
            "parameters": {
                "start": "int",
                "end": "int",
                "nums": "int[]"
            },
            "name": "FindKthNumber#partition",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "FindKthNumber#findKthMax",
                "BFPRT#bfprt",
                "QuickSelect#selectIndex",
                "DualPivotQuickSort#dualPivotQuicksort",
                "IntrospectiveSort#introSort",
                "QuickSort#randomPartition"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "VectorCrossProduct#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "VectorCrossProduct#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "VectorCrossProduct#test",
                "CreateBinaryTreeFromInorderPreorder#test",
                "FactorialTest#test",
                "ColorContrastRatio#test",
                "CreateBSTFromSortedArray#test",
                "VampireNumber#test"
            ]
        },
        "DualPivotQuickSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "DualPivotQuickSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "DNFSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "DNFSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Sort012D#sort012",
                "BitonicSort#printArray",
                "DNFSort#printArray",
                "MatrixChainMultiplication#printArray",
                "DNFSort#sort012"
            ]
        },
        "HowManyTimesRotatedTest#testHowManyTimesRotated": {
            "parameters": {},
            "name": "HowManyTimesRotatedTest#testHowManyTimesRotated",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HowManyTimesRotated#rotated"
            ]
        },
        "ReverseNumber#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ReverseNumber#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "BoundaryFill#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BoundaryFill#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BoundaryFill#printImageArray",
                "BoundaryFill#boundaryFill"
            ]
        },
        "MedianOfRunningArray#median": {
            "parameters": {},
            "name": "MedianOfRunningArray#median",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "Median#main",
                "MedianOfRunningArray#main"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "StackArrayList#peek",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "GenericHeap#size",
                "Map#size",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "CircularQueue#peek",
                "PriorityQueue#peek",
                "SkipList#size",
                "StackArray#size",
                "StackArray#peek",
                "Deques#size",
                "NodeStack#size",
                "FibonacciHeap#size",
                "NodeStack#peek",
                "LinkedListStack#peek"
            ]
        },
        "FibonacciHeap#successiveLink": {
            "parameters": {
                "curr": "HeapNode"
            },
            "name": "FibonacciHeap#successiveLink",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FibonacciHeap#deleteMin"
            ],
            "children": [
                "FibonacciHeap#fromBuckets",
                "FibonacciHeap#toBuckets"
            ]
        },
        "MRUCacheTest#overCapacity": {
            "parameters": {},
            "name": "MRUCacheTest#overCapacity",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass": {
            "parameters": {},
            "name": "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "KnapsackMemoizationTest#Test2": {
            "parameters": {},
            "name": "KnapsackMemoizationTest#Test2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DyanamicProgrammingKnapsack#knapSack",
                "KnapsackMemoization#knapSack",
                "Knapsack#knapSack",
                "BruteForceKnapsack#knapSack"
            ]
        },
        "BipartiteGrapfDFS#bipartite": {
            "parameters": {
                "node": "int",
                "color": "int[]",
                "V": "int",
                "adj": "ArrayList\u003cArrayList\u003cInteger\u003e\u003e"
            },
            "name": "BipartiteGrapfDFS#bipartite",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#isBipartite"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "BipartiteGrapfDFS#bipartite",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "KnapsackMemoizationTest#Test1": {
            "parameters": {},
            "name": "KnapsackMemoizationTest#Test1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DyanamicProgrammingKnapsack#knapSack",
                "KnapsackMemoization#knapSack",
                "Knapsack#knapSack",
                "BruteForceKnapsack#knapSack"
            ]
        },
        "KnapsackMemoizationTest#Test3": {
            "parameters": {},
            "name": "KnapsackMemoizationTest#Test3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DyanamicProgrammingKnapsack#knapSack",
                "KnapsackMemoization#knapSack",
                "Knapsack#knapSack",
                "BruteForceKnapsack#knapSack"
            ]
        },
        "SquareRootWithNewtonRaphsonTestMethod#testfor625": {
            "parameters": {},
            "name": "SquareRootWithNewtonRaphsonTestMethod#testfor625",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RootPrecision#squareRoot",
                "SquareRootBinarySearch#squareRoot",
                "SquareRootWithNewtonRaphsonMethod#squareRoot"
            ]
        },
        "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass": {
            "parameters": {},
            "name": "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "PageRank#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PageRank#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "PageRank#calc",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "SimpleSubstitutionCipherTest#testEncode": {
            "parameters": {},
            "name": "SimpleSubstitutionCipherTest#testEncode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "zigZagPattern#encode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubCipher#encode",
                "Caesar#encode"
            ]
        },
        "Floor#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Floor#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Floor#floor"
            ]
        },
        "CatalanNumber#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CatalanNumber#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CatalanNumber#findNthCatalan",
                "BufferedReader#close"
            ]
        },
        "AnyBaseToDecimal#valOfChar": {
            "parameters": {
                "c": "char"
            },
            "name": "AnyBaseToDecimal#valOfChar",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AnyBaseToDecimal#convertToDecimal"
            ],
            "children": []
        },
        "CheckAnagrams#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CheckAnagrams#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CheckAnagrams#isAnagrams"
            ]
        },
        "StackPostfixNotation#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "StackPostfixNotation#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StackPostfixNotation#postfixEvaluate",
                "BufferedReader#close"
            ]
        },
        "FindMin#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "FindMin#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DynamicArray#stream",
                "FindMin#findMin",
                "FindMinRecursion#min",
                "MinValue#min",
                "KDTreeTest#findMin",
                "FibonacciHeap#findMin",
                "BucketSort#min",
                "OptimalJobScheduling#findMin"
            ]
        },
        "BubbleSort#sort": {
            "parameters": {
                "array": "T[]"
            },
            "name": "BubbleSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "SortUtils#greater",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "PriorityQueuesTest#testPQExtra": {
            "parameters": {},
            "name": "PriorityQueuesTest#testPQExtra",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "PriorityQueue#getSize",
                "SinglyLinkedList#isEmpty",
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "LeftistHeap#isEmpty",
                "AVLSimple#insert",
                "Queue#insert",
                "StackArray#isFull",
                "BSTRecursive#remove",
                "MedianOfRunningArray#insert",
                "PriorityQueue#isFull",
                "CircularQueue#isFull",
                "QueueWithStack#isEmpty",
                "PriorityQueue#remove",
                "HashMapCuckooHashing#isFull",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "CircleLinkedList#remove",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "BSTRecursiveGeneric#remove",
                "BufferedReader#peek",
                "CursorLinkedList#remove",
                "RedBlackBST#insert",
                "DynamicArray#getSize",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "MinPriorityQueue#insert",
                "CircularQueue#peek",
                "BSTIterative#remove",
                "Queue#remove",
                "LeftistHeap#insert",
                "LinkedListStack#getSize",
                "LinkedList#insert",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "PriorityQueue#peek",
                "SkipList#remove",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "AVLTree#insert",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "ListIterator#remove",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "GenericHashMapUsingArray#remove",
                "MinPriorityQueue#isFull",
                "CircularBufferTest#isFull",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "CircleLinkedList#getSize",
                "SinglyLinkedList#insert",
                "CircularQueue#isEmpty",
                "QueueWithStack#insert",
                "QueueWithStack#remove",
                "Queue#isFull",
                "BSTRecursive#insert",
                "NodeStack#getSize",
                "Trieac#insert",
                "NodeStack#peek",
                "GenericHashMapUsingArrayList#remove",
                "PriorityQueue#insert",
                "Queue#getSize",
                "DynamicArray#isEmpty",
                "CircularBuffer#isFull",
                "LinkedListStack#peek",
                "GenericHeap#remove",
                "PriorityQueue#isEmpty"
            ]
        },
        "IterativeTernarySearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "IterativeTernarySearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "PerfectBinarySearch#binarySearch",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "RomanNumeralUtil#generate",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BinarySearch2dArray#binarySearch",
                "BSTRecursive#find"
            ]
        },
        "MergeSort#doSort": {
            "parameters": {
                "arr": "T[]",
                "left": "int",
                "right": "int"
            },
            "name": "MergeSort#doSort",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "CircleSort#sort",
                "CircleSort#doSort",
                "MergeSort#sort",
                "MergeSort#doSort",
                "QuickSort#sort",
                "QuickSort#doSort"
            ],
            "children": [
                "QuickSort#doSort",
                "MergeSort#merge",
                "MergeSort#doSort",
                "StrandSort#merge",
                "CircleSort#doSort",
                "MergeSortRecursive#merge",
                "TimSort#merge",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "LeftistHeap#merge"
            ]
        },
        "ArrayLeftRotationTest#testForZeroStep": {
            "parameters": {},
            "name": "ArrayLeftRotationTest#testForZeroStep",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RedBlackBST#rotateLeft",
                "ArrayLeftRotation#rotateLeft",
                "AVLTree#rotateLeft"
            ]
        },
        "VectorCrossProduct#dotProduct": {
            "parameters": {
                "b": "VectorCrossProduct"
            },
            "name": "VectorCrossProduct#dotProduct",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "VectorCrossProduct#test"
            ],
            "children": []
        },
        "IterativeTernarySearch#find": {
            "parameters": {
                "array": "T[]",
                "key": "T"
            },
            "name": "IterativeTernarySearch#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": []
        },
        "CheckIfBinaryTreeBalanced#isBalancedRecursive": {
            "parameters": {
                "node": "BTNode",
                "depth": "int",
                "isBalanced": "boolean[]"
            },
            "name": "CheckIfBinaryTreeBalanced#isBalancedRecursive",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "CheckIfBinaryTreeBalanced#isBalancedRecursive",
                "CheckIfBinaryTreeBalanced#main"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "CheckIfBinaryTreeBalanced#isBalancedRecursive",
                "FFTTest#abs",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max",
                "Complex#abs"
            ]
        },
        "BSTRecursiveGeneric#inOrder": {
            "parameters": {
                "node": "Node\u003cT\u003e"
            },
            "name": "BSTRecursiveGeneric#inOrder",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "BSTRecursive#inOrder",
                "BSTRecursive#inorder",
                "BSTRecursiveGeneric#inOrder",
                "BSTRecursiveGeneric#inorder",
                "BinaryTree#inOrder",
                "CreateBSTFromSortedArray#test",
                "CreateBinaryTreeFromInorderPreorder#test",
                "TreeRandomNode#inOrder",
                "TreeRandomNode#getRandom",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "BSTRecursiveGeneric#inOrder",
                "MinPriorityQueue#print",
                "BSTRecursive#inOrder",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "TreeRandomNode#inOrder",
                "RadixSort#print"
            ]
        },
        "AbsoluteMaxTest#testGetMaxValueWithNoArguments": {
            "parameters": {},
            "name": "AbsoluteMaxTest#testGetMaxValueWithNoArguments",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AbsoluteMax#getMaxValue"
            ]
        },
        "AllPathsFromSourceToTarget#allPathsFromSourceToTarget": {
            "parameters": {
                "a": "int[][]",
                "vertices": "int",
                "destination": "int",
                "source": "int"
            },
            "name": "AllPathsFromSourceToTarget#allPathsFromSourceToTarget",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "AllPathsFromSourceToTargetTest#testForFirstCase",
                "AllPathsFromSourceToTargetTest#testForSecondCase",
                "AllPathsFromSourceToTargetTest#testForThirdCase",
                "AllPathsFromSourceToTargetTest#testForFourthcase"
            ],
            "children": [
                "BellmanFord#addEdge",
                "AdjacencyList#addEdge",
                "AdjacencyMatrixGraph#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#addEdge",
                "AdjacencyListGraph#addEdge",
                "Kruskal#addEdge",
                "Graph#addEdge"
            ]
        },
        "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes": {
            "parameters": {},
            "name": "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "HeapElement#equals",
                "BSTRecursive#add",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "Kosaraju#kosaraju",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "HeapElement#getKey": {
            "parameters": {},
            "name": "HeapElement#getKey",
            "recursive": "false",
            "inComing": 30,
            "outGoing": 0,
            "numberOfCalls": 30,
            "parents": [
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "LinkedList#findKey",
                "LinkedList#delete",
                "LinkedList#display",
                "FibonacciHeap#delete",
                "FibonacciHeap#decreaseKey",
                "FibonacciHeap#updateMin",
                "FibonacciHeap#fromBuckets",
                "FibonacciHeap#link",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#getElementKey",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "Graph#dijkstra",
                "CountingSort#sort",
                "CountingSort#streamSort",
                "FibonacciHeapTest#testHeap"
            ],
            "children": []
        },
        "PriorityQueue#remove": {
            "parameters": {},
            "name": "PriorityQueue#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "MinPriorityQueue#sink",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "PriorityQueue#sink",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "LowestBasePalindrome#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LowestBasePalindrome#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "SkipListTest#print",
                "LowestBasePalindrome#lowestBasePalindrome",
                "dijkstras#print",
                "Deques#toString",
                "MinPriorityQueue#print",
                "HeapElement#toString",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "DynamicArray#toString",
                "AnyBaseToAnyBase#base2base",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "BufferedReader#close",
                "Vector2#toString",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "LowestBasePalindrome#base2base",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "NodeStack#print",
                "SortUtils#print",
                "Queue#toString",
                "RadixSort#print",
                "LinkedQueue#toString"
            ]
        },
        "BinaryTree#getRoot": {
            "parameters": {},
            "name": "BinaryTree#getRoot",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "QuickSelectTest#quickSelect70thPercentileOfManyElements": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelect70thPercentileOfManyElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "QuickSelectTest#getSortedCopyOfList",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "QuickSelect#select",
                "LFUCache#get",
                "QuickSelectTest#generateRandomIntegers"
            ]
        },
        "LongestCommonSubsequence#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LongestCommonSubsequence#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LongestCommonSubsequence#getLCS"
            ]
        },
        "LongestIncreasingSubsequence#upperBound": {
            "parameters": {
                "ar": "int[]",
                "r": "int",
                "l": "int",
                "key": "int"
            },
            "name": "LongestIncreasingSubsequence#upperBound",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LongestIncreasingSubsequence#LIS"
            ],
            "children": []
        },
        "BoardPath#endAlgo": {
            "parameters": {},
            "name": "BoardPath#endAlgo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "KahnsAlgorithm#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "KahnsAlgorithm#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "BellmanFord#addEdge",
                "SkipListTest#print",
                "dijkstras#print",
                "AdjacencyList#addEdge",
                "MinPriorityQueue#print",
                "AdjacencyMatrixGraph#addEdge",
                "AllPathsFromSourceToTarget#addEdge",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "AdjacencyListGraph#addEdge",
                "SortUtils#print",
                "Kruskal#addEdge",
                "Graph#addEdge",
                "RadixSort#print"
            ]
        },
        "Kruskal#kruskal": {
            "parameters": {
                "graph": "HashSet\u003cEdge\u003e[]"
            },
            "name": "Kruskal#kruskal",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Kruskal#main"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "BellmanFord#addEdge",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "AdjacencyList#addEdge",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "AdjacencyMatrixGraph#addEdge",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Map#contains",
                "Bag#contains",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "BloomFilter#contains",
                "GenericHeap#isEmpty",
                "AllPathsFromSourceToTarget#addEdge",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "SkipListTest#contains",
                "Deques#size",
                "LinearProbingHashMap#contains",
                "NodeStack#size",
                "SkipList#contains",
                "MatrixUtil#add",
                "CircularQueue#isEmpty",
                "FibonacciHeap#size",
                "Complex#add",
                "AdjacencyListGraph#addEdge",
                "GenericHeap#add",
                "Kruskal#addEdge",
                "SkylineProblem#add",
                "Graph#addEdge",
                "SkipListTest#add",
                "Bag#add",
                "DynamicArray#isEmpty",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "HashMapCuckooHashing#isFull": {
            "parameters": {},
            "name": "HashMapCuckooHashing#isFull",
            "recursive": "false",
            "inComing": 18,
            "outGoing": 0,
            "numberOfCalls": 18,
            "parents": [
                "CircularBuffer#put",
                "HashMapCuckooHashing#insertKey2HashTable",
                "MinPriorityQueue#insert",
                "CircularQueue#enQueue",
                "CircularQueue#main",
                "PriorityQueue#insert",
                "Queue#insert",
                "Queues#main",
                "StackArray#main",
                "StackArray#push",
                "CircularBufferTest#isFull",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "HeapElement#equals"
            ]
        },
        "AreaTest#testSurfaceAreaTriangleRectangle": {
            "parameters": {},
            "name": "AreaTest#testSurfaceAreaTriangleRectangle",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Area#surfaceAreaTriangleRectangle"
            ]
        },
        "AnytoAny#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "AnytoAny#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BufferedReader#close"
            ]
        },
        "FibonacciHeap#decreaseKey": {
            "parameters": {
                "x": "HeapNode",
                "delta": "int"
            },
            "name": "FibonacciHeap#decreaseKey",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FibonacciHeap#delete"
            ],
            "children": [
                "FibonacciHeap#updateMin",
                "HeapElement#getKey",
                "FibonacciHeap#cascadingCuts",
                "HeapNode#getKey",
                "FibonacciHeap#cut",
                "HeapNode#isRoot",
                "Entry#getKey"
            ]
        },
        "StrandSort#merge": {
            "parameters": {
                "left": "LinkedList\u003cE\u003e",
                "right": "LinkedList\u003cE\u003e"
            },
            "name": "StrandSort#merge",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "LeftistHeap#merge",
                "LeftistHeap#insert",
                "LeftistHeap#extract_min",
                "MergeSortedArrayList#main",
                "MergeSortedSinglyLinkedList#main",
                "LazySegmentTree#buildTree",
                "LazySegmentTree#updateRange",
                "LazySegmentTree#getRange",
                "MergeSort#doSort",
                "MergeSortRecursive#mergeSort",
                "MergeSortRecursive#merge",
                "StrandSort#strandSort",
                "TimSort#sort"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "BSTRecursive#remove",
                "QueueWithStack#isEmpty",
                "PriorityQueue#remove",
                "GenericArrayListQueue#peek",
                "BSTRecursiveGeneric#add",
                "LinkedQueue#peek",
                "StrassenMatrixMultiplication#add",
                "CircleLinkedList#remove",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "BSTRecursiveGeneric#remove",
                "BufferedReader#peek",
                "CursorLinkedList#remove",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "BSTIterative#remove",
                "Queue#remove",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "PriorityQueue#peek",
                "SkipList#remove",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "BSTRecursive#add",
                "ListIterator#remove",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "MatrixUtil#add",
                "CircularQueue#isEmpty",
                "Complex#add",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "NodeStack#peek",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "InsertionSortTest#insertionSortSortEmptyArrayShouldPass": {
            "parameters": {},
            "name": "InsertionSortTest#insertionSortSortEmptyArrayShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "InsertionSortTest#testEmptyArray"
            ]
        },
        "Entry#setValue": {
            "parameters": {
                "value": "J"
            },
            "name": "Entry#setValue",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "LRUCache#put",
                "MRUCache#put"
            ],
            "children": []
        },
        "ZigzagTraversalTest#testRootNull": {
            "parameters": {},
            "name": "ZigzagTraversalTest#testRootNull",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LevelOrderTraversal#traverse",
                "ZigzagTraversal#traverse"
            ]
        },
        "GenericArrayListQueue#peek": {
            "parameters": {},
            "name": "GenericArrayListQueue#peek",
            "recursive": "false",
            "inComing": 76,
            "outGoing": 0,
            "numberOfCalls": 76,
            "parents": [
                "CircularQueue#main",
                "GenericArrayListQueue#main",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#postorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "VerticalOrderTraversal#verticalTraversal",
                "FordFulkerson#networkFlow",
                "BufferedReader#peek",
                "MedianOfRunningArray#median",
                "Huffman#main",
                "QueueWithStack#peekFront",
                "QueueWithStack#peekBack",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StrandSort#merge",
                "LinkedQueueTest#testQue",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BufferedReaderTest#testPeeks",
                "BufferedReaderTest#testMixes",
                "BufferedReaderTest#testBlockPractical"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "GenericArrayListQueue#hasElements"
            ]
        },
        "GenericHashMapUsingArray#put": {
            "parameters": {
                "value": "V",
                "key": "K"
            },
            "name": "GenericHashMapUsingArray#put",
            "recursive": "false",
            "inComing": 156,
            "outGoing": 0,
            "numberOfCalls": 156,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "BinaryToHexadecimal#binToHex",
                "null#null",
                "LFUCache#put",
                "LRUCache#put",
                "MRUCache#put",
                "AdjacencyList#addEdge",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "GenericHashMapUsingArray#reHash",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#delete",
                "LinearProbingHashMap#resize",
                "GenericHeap#add",
                "GenericHeap#swap",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#test",
                "VerticalOrderTraversal#verticalTraversal",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#TwoPointer",
                "TwoSumProblem#HashMap",
                "Trie#add",
                "CountWords#getDictionary",
                "CountingSort#sort",
                "Graph#addEdge",
                "Anagrams#approach4",
                "CheckAnagrams#isAnagrams",
                "Isomorphic#checkStrings",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#isFull",
                "CircularBufferTest#get",
                "CircularBufferTest#put",
                "CircularBufferTest#concurrentTest",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#putTest",
                "MapTest#getTest",
                "MapTest#deleteTest",
                "MapTest#containsTest",
                "MapTest#sizeTest",
                "MapTest#keysTest",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "GenericHashMapUsingArray#reHash",
                "Trie#add",
                "Vector2#add",
                "GenericHashMapUsingArrayList#reHash",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHashMapUsingArray#hashFunction",
                "DynamicArray#add",
                "HeapElement#equals",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Trieac#getNode": {
            "parameters": {},
            "name": "Trieac#getNode",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Trieac#insert",
                "Trieac#main"
            ],
            "children": []
        },
        "AliquotSumTest#testGetMaxValue": {
            "parameters": {},
            "name": "AliquotSumTest#testGetMaxValue",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AliquotSum#getAliquotSum",
                "AliquotSum#getAliquotValue"
            ]
        },
        "AdjacencyMatrixGraph#edgeDoesExist": {
            "parameters": {
                "from": "int",
                "to": "int"
            },
            "name": "AdjacencyMatrixGraph#edgeDoesExist",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AdjacencyMatrixGraph#adjacencyOfEdgeDoesExist",
                "AdjacencyMatrixGraph#vertexDoesExist"
            ]
        },
        "LongestIncreasingSubsequence#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LongestIncreasingSubsequence#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LongestIncreasingSubsequence#findLISLen",
                "BufferedReader#close",
                "LongestIncreasingSubsequence#LIS"
            ]
        },
        "QueueWithStack#peekBack": {
            "parameters": {},
            "name": "QueueWithStack#peekBack",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "QueueUsingTwoStacks#main"
            ],
            "children": [
                "StackArrayList#peek",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "CircularQueue#peek",
                "PriorityQueue#peek",
                "StackArray#peek",
                "NodeStack#peek",
                "LinkedListStack#peek"
            ]
        },
        "TopKWords#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "TopKWords#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Entry#getValue",
                "GenericHashMapUsingArray#size",
                "DutchNationalFlagSort#sort",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "TopologicalSort#sort",
                "MRUCache#get",
                "LFSR#get",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "LinearProbingHashMap#size",
                "InsertionSort#sort",
                "DynamicArray#get",
                "DualPivotQuickSort#sort",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CircularBuffer#get",
                "CombSort#sort",
                "GenericHeap#size",
                "IntrospectiveSort#sort",
                "GenericHashMapUsingArrayList#get",
                "PancakeSort#sort",
                "Map#size",
                "SkipListTest#get",
                "TreeSort#sort",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "CountWords#getDictionary",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "GenericHeap#get",
                "TimSort#sort",
                "BufferedReader#close",
                "SkipList#size",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "StackArray#size",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Deques#size",
                "NodeStack#size",
                "CocktailShakerSort#sort",
                "LinearProbingHashMap#get",
                "StoogeSort#sort",
                "LRUCache#get",
                "PigeonholeSort#sort",
                "LFUCache#get",
                "FibonacciHeap#size",
                "BitonicSort#sort"
            ]
        },
        "KMPSearchTest#KMPSearchTestMiddle": {
            "parameters": {},
            "name": "KMPSearchTest#KMPSearchTestMiddle",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KMPSearch#KMPSearch"
            ]
        },
        "KochSnowflake#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "KochSnowflake#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "KochSnowflake#GetKochSnowflake",
                "DynamicArray#add",
                "BSTRecursive#add",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "KochSnowflake#Iterate",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "ClosestPair#xQuickSort": {
            "parameters": {
                "a": "Location[]",
                "last": "int",
                "first": "int"
            },
            "name": "ClosestPair#xQuickSort",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "ClosestPair#xQuickSort",
                "ClosestPair#main"
            ],
            "children": [
                "ClosestPair#xQuickSort",
                "ClosestPair#xPartition"
            ]
        },
        "SortUtilsRandomGeneratorTest#generateArrayEmpty": {
            "parameters": {},
            "name": "SortUtilsRandomGeneratorTest#generateArrayEmpty",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MatrixUtil#assertThat",
                "SortUtilsRandomGeneratorTest#generateArray",
                "FindKthNumber#generateArray",
                "FibonacciJavaStreams#assertThat",
                "SortUtilsRandomGenerator#generateArray",
                "DepthFirstSearch#assertThat"
            ]
        },
        "GenericHashMapUsingArrayList#reHash": {
            "parameters": {},
            "name": "GenericHashMapUsingArrayList#reHash",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "Trie#add",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHashMapUsingArray#put",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "NodeStack#size",
                "CircularBufferTest#put",
                "MatrixUtil#add",
                "MRUCache#put",
                "FibonacciHeap#size",
                "Complex#add",
                "Map#put",
                "GenericHeap#add",
                "SkylineProblem#add",
                "LRUCache#put",
                "SkipListTest#add",
                "Bag#add",
                "LinearProbingHashMap#put",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "MapTest#putTest": {
            "parameters": {},
            "name": "MapTest#putTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "LinearProbingHashMapTest#getMap",
                "GenericHashMapUsingArray#put",
                "MapTest#getMap",
                "DynamicArray#put",
                "CircularBufferTest#put",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "Deques#peekLast": {
            "parameters": {},
            "name": "Deques#peekLast",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "StrandSort#strandSort"
            ],
            "children": []
        },
        "ValidBSTOrNotTest#testOneNode": {
            "parameters": {},
            "name": "ValidBSTOrNotTest#testOneNode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "ValidBSTOrNot#isBST",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "Entry#setKey": {
            "parameters": {
                "key": "I"
            },
            "name": "Entry#setKey",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "LRUCache#put",
                "MRUCache#put"
            ],
            "children": []
        },
        "CombinationsTest#testCombination": {
            "parameters": {},
            "name": "CombinationsTest#testCombination",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Combinations#combinations"
            ]
        },
        "PostOrderTraversal#iterativePostOrder": {
            "parameters": {
                "root": "BinaryTree.Node"
            },
            "name": "PostOrderTraversal#iterativePostOrder",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "PostOrderTraversalTest#testNullRoot",
                "PostOrderTraversalTest#testPostOrder",
                "PostOrderTraversalTest#testPostOrderNonBalanced"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LinkedListStack#push",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "StackArrayList#push",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "NodeStack#push",
                "LinkedListStack#pop",
                "CircularQueue#isEmpty",
                "Deques#addFirst",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "RadixSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "RadixSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RadixSort#radixsort",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "PageRank#calc": {
            "parameters": {
                "totalNodes": "double"
            },
            "name": "PageRank#calc",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PageRank#main"
            ],
            "children": []
        },
        "VampireNumber#splitIntoDigits": {
            "parameters": {
                "num": "int",
                "num2": "int"
            },
            "name": "VampireNumber#splitIntoDigits",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "VampireNumber#isVampireNumber"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "Trie#add",
                "GenericHashMapUsingArrayList#toString",
                "GnomeSort#sort",
                "Vector2#add",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "Deques#toString",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "BSTRecursiveGeneric#add",
                "SlowSort#sort",
                "StrassenMatrixMultiplication#add",
                "CombSort#sort",
                "HeapElement#toString",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "AdjacencyListGraph#toString",
                "TimSort#sort",
                "Vector2#toString",
                "QuickSort#sort",
                "DynamicArray#add",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "BSTRecursive#add",
                "MergeSortRecursive#sort",
                "CursorLinkedList#append",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "MatrixUtil#add",
                "LFSR#toString",
                "PigeonholeSort#sort",
                "GenericHashMapUsingArray#toString",
                "Complex#add",
                "GenericHeap#add",
                "Queue#toString",
                "CircleLinkedList#append",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "BitonicSort#sort",
                "SkipList#add",
                "LinkedQueue#toString",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "MiniMaxAlgorithm#miniMax": {
            "parameters": {
                "isMaximizer": "boolean",
                "depth": "int",
                "index": "int",
                "verbose": "boolean"
            },
            "name": "MiniMaxAlgorithm#miniMax",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "MiniMaxAlgorithm#main",
                "MiniMaxAlgorithm#miniMax"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "MiniMaxAlgorithm#miniMax",
                "FindMaxRecursion#max",
                "FindMinRecursion#min",
                "MaxValue#max",
                "MinValue#min",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max",
                "BucketSort#min"
            ]
        },
        "KnightsTour#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "KnightsTour#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KnightsTour#printResult",
                "KnightsTour#solve"
            ]
        },
        "Node#getNext": {
            "parameters": {},
            "name": "Node#getNext",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "Queue#peekRear": {
            "parameters": {},
            "name": "Queue#peekRear",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "LinkedQueue#main",
                "Queues#main",
                "LinkedQueueTest#testQue"
            ],
            "children": []
        },
        "SinglyLinkedList#getHead": {
            "parameters": {},
            "name": "SinglyLinkedList#getHead",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "CountSinglyLinkedListRecursion#count",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#merge",
                "SearchSinglyLinkedListRecursion#search",
                "SinglyLinkedListTest#middle",
                "SinglyLinkedListTest#swap"
            ],
            "children": []
        },
        "PostfixToInfix#isValidPostfixExpression": {
            "parameters": {
                "postfix": "String"
            },
            "name": "PostfixToInfix#isValidPostfixExpression",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PostfixToInfix#getPostfixToInfix"
            ],
            "children": [
                "PostfixToInfix#isOperator"
            ]
        },
        "SortUtilsTest#isSortedListTrue": {
            "parameters": {},
            "name": "SortUtilsTest#isSortedListTrue",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "SkylineAlgorithm#getPoints": {
            "parameters": {},
            "name": "SkylineAlgorithm#getPoints",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "CombSortTest#combSortIntegerArray": {
            "parameters": {},
            "name": "CombSortTest#combSortIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "FibonacciHeap#potential": {
            "parameters": {},
            "name": "FibonacciHeap#potential",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "LongestIncreasingSubsequence#binarySearchBetween": {
            "parameters": {
                "t": "int[]",
                "end": "int",
                "key": "int"
            },
            "name": "LongestIncreasingSubsequence#binarySearchBetween",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LongestIncreasingSubsequence#findLISLen"
            ],
            "children": []
        },
        "CheckAnagramsTest#CheckSameWordAnagrams": {
            "parameters": {},
            "name": "CheckAnagramsTest#CheckSameWordAnagrams",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CheckAnagrams#isAnagrams"
            ]
        },
        "BSTRecursiveGeneric#add": {
            "parameters": {
                "data": "T"
            },
            "name": "BSTRecursiveGeneric#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": [
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "PriorityQueue#insert"
            ]
        },
        "FactorialRecursion#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "FactorialRecursion#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Combinations#factorial",
                "Factorial#factorial",
                "FactorialRecursion#factorial"
            ]
        },
        "OddEvenSortTest#oddEvenSortNaturalNumberArray": {
            "parameters": {},
            "name": "OddEvenSortTest#oddEvenSortNaturalNumberArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OddEvenSort#oddEvenSort"
            ]
        },
        "SinglyLinkedList#checkBounds": {
            "parameters": {
                "high": "int",
                "low": "int",
                "position": "int"
            },
            "name": "SinglyLinkedList#checkBounds",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "SinglyLinkedList#insertNth",
                "SinglyLinkedList#deleteNth",
                "SinglyLinkedList#getNth"
            ],
            "children": []
        },
        "CountingSort#streamSort": {
            "parameters": {
                "list": "List\u003cT\u003e"
            },
            "name": "CountingSort#streamSort",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "CountingSort#main"
            ],
            "children": [
                "Entry#getValue",
                "DynamicArray#stream",
                "HeapElement#getKey",
                "HeapNode#getKey",
                "Entry#getKey"
            ]
        },
        "UniquePathsTests#testForEightElements": {
            "parameters": {},
            "name": "UniquePathsTests#testForEightElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "UniquePaths#uniquePaths2"
            ]
        },
        "SlowSortTest#slowSortStringArray": {
            "parameters": {},
            "name": "SlowSortTest#slowSortStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "LucasSeries#lucasSeriesIteration": {
            "parameters": {
                "n": "int"
            },
            "name": "LucasSeries#lucasSeriesIteration",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "LucasSeries#main"
            ],
            "children": []
        },
        "CombSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CombSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "SlowSort#sort": {
            "parameters": {
                "array": "T[]",
                "i": "int",
                "j": "int"
            },
            "name": "SlowSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "SortUtils#less",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "HeapSort#less",
                "PigeonholeSort#sort",
                "SortUtils#greaterOrEqual",
                "BitonicSort#sort"
            ]
        },
        "PerfectNumberTest#perfectNumber": {
            "parameters": {},
            "name": "PerfectNumberTest#perfectNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PerfectNumber#isPerfectNumber",
                "PerfectNumber#isPerfectNumber2"
            ]
        },
        "Fibonacci#matrixMultiplication": {
            "parameters": {
                "matrix2": "int[][]",
                "matrix1": "int[][]"
            },
            "name": "Fibonacci#matrixMultiplication",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "Fibonacci#fib",
                "Fibonacci#main"
            ],
            "children": []
        },
        "LinkOperations#removeDuplicates": {
            "parameters": {
                "l": "DoublyLinkedList"
            },
            "name": "LinkOperations#removeDuplicates",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Map#delete",
                "LinkOperations#delete",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "FibonacciHeap#delete",
                "SinglyLinkedList#delete",
                "RedBlackBST#delete",
                "KDTreeTest#delete",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "BSTRecursiveGeneric#delete",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "Perimeter#perimeterCircle": {
            "parameters": {
                "r": "float"
            },
            "name": "Perimeter#perimeterCircle",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "PerimeterTest#testcase5",
                "PerimeterTest#testcase6"
            ],
            "children": []
        },
        "AdjacencyList#addEdge": {
            "parameters": {
                "from": "E",
                "to": "E"
            },
            "name": "AdjacencyList#addEdge",
            "recursive": "false",
            "inComing": 73,
            "outGoing": 0,
            "numberOfCalls": 73,
            "parents": [
                "AllPathsFromSourceToTarget#allPathsFromSourceToTarget",
                "A_Star#initializeGraph",
                "ConnectedComponent#main",
                "Graphs#main",
                "KahnsAlgorithm#main",
                "Kruskal#main",
                "Kruskal#kruskal",
                "MatrixGraphs#main",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "BSTRecursive#add",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Complex#add",
                "Map#put",
                "GenericHeap#add",
                "GenericHashMapUsingArray#containsKey",
                "SkylineProblem#add",
                "LRUCache#put",
                "SkipListTest#add",
                "Bag#add",
                "LinearProbingHashMap#put",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "SinglyLinkedList#deleteHead": {
            "parameters": {},
            "name": "SinglyLinkedList#deleteHead",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "LinkOperations#delete",
                "LinkOperations#deleteNode",
                "SinglyLinkedList#main"
            ],
            "children": [
                "SinglyLinkedList#deleteNth",
                "SinglyLinkedListTest#deleteNth"
            ]
        },
        "LinkedQueue#peek": {
            "parameters": {
                "pos": "int"
            },
            "name": "LinkedQueue#peek",
            "recursive": "false",
            "inComing": 76,
            "outGoing": 0,
            "numberOfCalls": 76,
            "parents": [
                "CircularQueue#main",
                "GenericArrayListQueue#main",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#postorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "VerticalOrderTraversal#verticalTraversal",
                "FordFulkerson#networkFlow",
                "BufferedReader#peek",
                "MedianOfRunningArray#median",
                "Huffman#main",
                "QueueWithStack#peekFront",
                "QueueWithStack#peekBack",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StrandSort#merge",
                "LinkedQueueTest#testQue",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BufferedReaderTest#testPeeks",
                "BufferedReaderTest#testMixes",
                "BufferedReaderTest#testBlockPractical"
            ],
            "children": []
        },
        "HeapSort#heapify": {
            "parameters": {
                "unsorted": "T[]",
                "n": "int"
            },
            "name": "HeapSort#heapify",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "HeapSort#sort",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify"
            ],
            "children": [
                "HeapSort#siftDown"
            ]
        },
        "StrassenMatrixMultiplication#add": {
            "parameters": {
                "A": "int[][]",
                "B": "int[][]"
            },
            "name": "StrassenMatrixMultiplication#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": []
        },
        "MapTest#containsTest": {
            "parameters": {},
            "name": "MapTest#containsTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "LinearProbingHashMapTest#getMap",
                "GenericHashMapUsingArray#put",
                "MapTest#getMap",
                "DynamicArray#put",
                "Map#contains",
                "Bag#contains",
                "BloomFilter#contains",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "CircularBufferTest#put",
                "SkipList#contains",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "KMP#KMPmatcher": {
            "parameters": {
                "haystack": "String",
                "needle": "String"
            },
            "name": "KMP#KMPmatcher",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "KMP#main"
            ],
            "children": [
                "KMP#computePrefixFunction"
            ]
        },
        "QueueWithStack#peekFront": {
            "parameters": {},
            "name": "QueueWithStack#peekFront",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "LinkedQueue#main",
                "Queues#main",
                "QueueUsingTwoStacks#main"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LinkedListStack#push",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "StackArrayList#push",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "NodeStack#push",
                "LinkedListStack#pop",
                "CircularQueue#isEmpty",
                "NodeStack#peek",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "PriorityQueue#isEmpty"
            ]
        },
        "UniquePathsTests#testForSixElements": {
            "parameters": {},
            "name": "UniquePathsTests#testForSixElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "UniquePaths#uniquePaths2"
            ]
        },
        "MobiusFunctionTest#testMobiusForNegativeNumber": {
            "parameters": {},
            "name": "MobiusFunctionTest#testMobiusForNegativeNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MobiusFunction#mobius"
            ]
        },
        "PrimeCheck#fermatPrimeChecking": {
            "parameters": {
                "iteration": "int",
                "n": "int"
            },
            "name": "PrimeCheck#fermatPrimeChecking",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PrimeCheck#main"
            ],
            "children": [
                "PrimeCheck#modPow",
                "Floor#floor"
            ]
        },
        "CircularBuffer#get": {
            "parameters": {},
            "name": "CircularBuffer#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "CircularPointer#getAndIncrement",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "QueueUsingTwoStacks#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "QueueUsingTwoStacks#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "LeftistHeap#isEmpty",
                "AVLSimple#insert",
                "Queue#insert",
                "BSTRecursive#remove",
                "MedianOfRunningArray#insert",
                "QueueWithStack#isEmpty",
                "QueueWithStack#isInStackEmpty",
                "PriorityQueue#remove",
                "QueueWithStack#peekBack",
                "QueueWithStack#peekFront",
                "CircleLinkedList#remove",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "RedBlackBST#insert",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "MinPriorityQueue#insert",
                "BSTIterative#remove",
                "Queue#remove",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "SkipList#remove",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "AVLTree#insert",
                "GenericHeap#isEmpty",
                "Queue#peekFront",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "ListIterator#remove",
                "CircularBufferTest#isEmpty",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "LinkedQueue#peekFront",
                "DynamicArrayIterator#remove",
                "SinglyLinkedList#insert",
                "CircularQueue#isEmpty",
                "QueueWithStack#insert",
                "QueueWithStack#remove",
                "BSTRecursive#insert",
                "Trieac#insert",
                "GenericHashMapUsingArrayList#remove",
                "PriorityQueue#insert",
                "DynamicArray#isEmpty",
                "GenericHeap#remove",
                "PriorityQueue#isEmpty"
            ]
        },
        "CombSort#sort": {
            "parameters": {
                "arr": "T[]"
            },
            "name": "CombSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "SortUtils#less",
                "IntrospectiveSort#swap",
                "CombSort#nextGap",
                "HeapSort#swap",
                "HeapSort#less",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "PermutationTest#testMultipleElements": {
            "parameters": {},
            "name": "PermutationTest#testMultipleElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "Permutation#permutation",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "HeapElement#equals",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "SinglyLinkedList#swapNodes": {
            "parameters": {
                "valueSecond": "int",
                "valueFirst": "int"
            },
            "name": "SinglyLinkedList#swapNodes",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SinglyLinkedListTest#swap"
            ],
            "children": []
        },
        "PerlinNoise#generatePerlinNoise": {
            "parameters": {
                "seed": "long",
                "width": "int",
                "persistence": "float",
                "octaveCount": "int",
                "height": "int"
            },
            "name": "PerlinNoise#generatePerlinNoise",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PerlinNoise#main"
            ],
            "children": [
                "PerlinNoise#generatePerlinNoiseLayer"
            ]
        },
        "PowerOfTwoOrNot#checkIfPowerOfTwoOrNot": {
            "parameters": {
                "number": "int"
            },
            "name": "PowerOfTwoOrNot#checkIfPowerOfTwoOrNot",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "PowerOfTwoOrNot#main"
            ],
            "children": []
        },
        "BloomFilter#insertHash": {
            "parameters": {},
            "name": "BloomFilter#insertHash",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "null#null",
                "Main#main"
            ],
            "children": []
        },
        "ClosestPair#buildLocation": {
            "parameters": {
                "x": "double",
                "y": "double"
            },
            "name": "ClosestPair#buildLocation",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "ClosestPair#main"
            ],
            "children": []
        },
        "MinPriorityQueue#print": {
            "parameters": {},
            "name": "MinPriorityQueue#print",
            "recursive": "false",
            "inComing": 209,
            "outGoing": 0,
            "numberOfCalls": 209,
            "parents": [
                "MazeRecursion#mazeRecursion",
                "ColumnarTranspositionCipher#showTable",
                "ProductCipher#main",
                "AnyBaseToAnyBase#main",
                "BinaryToDecimal#main",
                "DecimalToOctal#main",
                "HexToOct#main",
                "HexaDecimalToDecimal#main",
                "OctalToDecimal#main",
                "OctalToHexadecimal#main",
                "BellmanFord#printPath",
                "BellmanFord#go",
                "BellmanFord#show",
                "null#null",
                "Cycle#printAll",
                "dijkstras#dijkstra",
                "FloydWarshall#floydwarshall",
                "AdjacencyList#printGraph",
                "KahnsAlgorithm#main",
                "MinPriorityQueue#print",
                "MinPriorityQueue#main",
                "CreateAndDetectLoop#printList",
                "CreateAndDetectLoop#main",
                "Link#displayLink",
                "SinglyLinkedList#print",
                "SinglyLinkedList#main",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NodeStack#main",
                "ReverseStack#main",
                "AVLTree#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "BSTRecursive#preOrder",
                "BSTRecursive#postOrder",
                "BSTRecursive#inOrder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursiveGeneric#inOrder",
                "BinaryTree#inOrder",
                "BinaryTree#preOrder",
                "BinaryTree#postOrder",
                "BinaryTree#bfs",
                "GenericTree#display_1",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "LevelOrderTraversalHelper#printGivenLevel",
                "Tree#printTopView",
                "RedBlackBST#printTree",
                "RedBlackBST#printTreepre",
                "RedBlackBST#deleteDemo",
                "Node#printInOrder",
                "Node#printPreOrder",
                "Node#printPostOrder",
                "Node#printLevelOrder",
                "Main#main",
                "BoundaryFill#printImageArray",
                "CoinChange#printAmount",
                "LevenshteinDistance#main",
                "MatrixChainMultiplication#main",
                "MatrixChainMultiplication#printOptimalParens",
                "MatrixChainMultiplication#printArray",
                "MatrixChainMultiplication#input",
                "OptimalJobScheduling#showResults",
                "Sum_Of_Subset#main",
                "LeonardoNumber#main",
                "MagicSquare#main",
                "PrimeCheck#main",
                "TrinomialTriangle#printTrinomial",
                "InverseOfMatrix#main",
                "MedianOfRunningArray#main",
                "PalindromePrime#functioning",
                "Sort012D#sort012",
                "ThreeSumProblem#main",
                "TwoSumProblem#main",
                "matrixTranspose#main",
                "BankersAlgorithm#checkSafeSystem",
                "FloydTriangle#main",
                "HappyNumbersSeq#main",
                "Krishnamurthy#main",
                "LowestBasePalindrome#main",
                "PageRank#main",
                "PasswordGen#main",
                "PerlinNoise#main",
                "Rotate_by_90_degree#printMatrix",
                "SkylineProblem#run",
                "SkylineProblem#print",
                "Sudoku#print",
                "Sudoku#main",
                "TowerOfHanoi#main",
                "LinearSearchThread#main",
                "SquareRootBinarySearch#main",
                "BitonicSort#printArray",
                "BogoSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#main",
                "CycleSort#main",
                "DNFSort#printArray",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "MergeSortNoExtraSpace#main",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "RadixSort#print",
                "RadixSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "StoogeSort#main",
                "SwapSort#main",
                "TreeSort#main",
                "LongestPalindromicSubstring#main",
                "SkipListTest#add",
                "SkipListTest#get",
                "SkipListTest#contains",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "SkipListTest#checkSortedOnLowestLayer",
                "TestPrintMatrixInSpiralOrder#testOne",
                "TestPrintMatrixInSpiralOrder#testTwo"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "ClosestPair#yPartition": {
            "parameters": {
                "a": "Location[]",
                "last": "int",
                "first": "int"
            },
            "name": "ClosestPair#yPartition",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ClosestPair#yQuickSort"
            ],
            "children": []
        },
        "BoundaryFill#putPixel": {
            "parameters": {
                "image": "int[][]",
                "new_color": "int",
                "x_co_ordinate": "int",
                "y_co_ordinate": "int"
            },
            "name": "BoundaryFill#putPixel",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "FloodFill#floodFill",
                "BoundaryFill#boundaryFill"
            ],
            "children": []
        },
        "InfixToPostfix#precedence": {
            "parameters": {
                "operator": "char"
            },
            "name": "InfixToPostfix#precedence",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "InfixToPostfix#infix2PostFix"
            ],
            "children": []
        },
        "ReverseString#reverse": {
            "parameters": {
                "str": "String"
            },
            "name": "ReverseString#reverse",
            "recursive": "false",
            "inComing": 24,
            "outGoing": 0,
            "numberOfCalls": 24,
            "parents": [
                "DecimalToAnyBase#convertToAnyBase",
                "Link#main",
                "SkipList#toString",
                "FordFulkerson#networkFlow",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "KeithNumber#isKeith",
                "PalindromePrime#functioning",
                "CRC32#crc32",
                "LowestBasePalindrome#lowestBasePalindrome",
                "Palindrome#isPalindrome",
                "ReverseString#main",
                "ReverseString#reverse",
                "ReverseStringRecursive#reverse",
                "Rotation#rotation",
                "ReverseStringRecursiveTest#shouldAcceptWhenEmptyStringIsPassed",
                "ReverseStringRecursiveTest#shouldAcceptNotWhenWhenSingleCharacterIsPassed",
                "ReverseStringRecursiveTest#shouldAcceptWhenStringIsPassed",
                "ReverseStringTest#ReverseStringTest"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "ReverseString#reverse",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Rotation#reverse",
                "Vector2#toString",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "LFSR#toString",
                "ReverseStringRecursive#reverse",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LowestBasePalindrome#reverse",
                "LinkedQueue#toString"
            ]
        },
        "KMPSearch#computeLPSArray": {
            "parameters": {
                "pat": "String",
                "M": "int",
                "lps": "int[]"
            },
            "name": "KMPSearch#computeLPSArray",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "KMPSearch#KMPSearch"
            ],
            "children": []
        },
        "KadaneAlogrithmTest#testForSixElements": {
            "parameters": {},
            "name": "KadaneAlogrithmTest#testForSixElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KadaneAlgorithm#max_Sum"
            ]
        },
        "MatrixUtil#isValid": {
            "parameters": {
                "matrix": "BigDecimal[][]"
            },
            "name": "MatrixUtil#isValid",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "TrieImp#main",
                "MatrixUtil#hasEqualSizes",
                "MatrixUtil#canMultiply",
                "Solution#longestPalindrome",
                "ValidParenthesesTest#testOne",
                "ValidParenthesesTest#testTwo",
                "ValidParenthesesTest#testThree"
            ],
            "children": []
        },
        "HeapNode#mark": {
            "parameters": {},
            "name": "HeapNode#mark",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FibonacciHeap#cascadingCuts"
            ],
            "children": [
                "HeapNode#isRoot"
            ]
        },
        "NextFit#findNextFit": {
            "parameters": {
                "processSize": "int",
                "blockSizes": "int[]"
            },
            "name": "NextFit#findNextFit",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "NextFit#fitProcess"
            ],
            "children": []
        },
        "DynamicArrayIterator#forEachRemaining": {
            "parameters": {
                "action": "Consumer\u003c? super E\u003e"
            },
            "name": "DynamicArrayIterator#forEachRemaining",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MinHeap#getElement",
                "DynamicArray#getElement",
                "MaxHeap#getElement",
                "Heap#getElement"
            ]
        },
        "Deques#pollFirst": {
            "parameters": {},
            "name": "Deques#pollFirst",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Deques#main",
                "Graph#dijkstra"
            ],
            "children": []
        },
        "DutchNationalFlagSortTest#DNFSTestOddMidGiven": {
            "parameters": {},
            "name": "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "StringMatchFiniteAutomata#computeFA": {
            "parameters": {
                "pat": "String",
                "FA": "int[][]",
                "m": "int"
            },
            "name": "StringMatchFiniteAutomata#computeFA",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "StringMatchFiniteAutomata#searchPat"
            ],
            "children": [
                "StringMatchFiniteAutomata#getNextState"
            ]
        },
        "AllPathsFromSourceToTargetTest#testForThirdCase": {
            "parameters": {},
            "name": "AllPathsFromSourceToTargetTest#testForThirdCase",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AllPathsFromSourceToTarget#allPathsFromSourceToTarget"
            ]
        },
        "GenericHeap#size": {
            "parameters": {},
            "name": "GenericHeap#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "FibonacciHeap#size"
            ]
        },
        "ArrayLeftRotationTest#testForLowerSizeStep": {
            "parameters": {},
            "name": "ArrayLeftRotationTest#testForLowerSizeStep",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RedBlackBST#rotateLeft",
                "ArrayLeftRotation#rotateLeft",
                "AVLTree#rotateLeft"
            ]
        },
        "UniquePaths#uniquePaths": {
            "parameters": {
                "ans": "int",
                "m": "int",
                "n": "int"
            },
            "name": "UniquePaths#uniquePaths",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "UniquePathsTests#testForOneElement",
                "UniquePathsTests#testForTwoElements",
                "UniquePathsTests#testForThreeElements",
                "UniquePathsTests#testForFourElements"
            ],
            "children": []
        },
        "Sudoku#solveSudoku": {
            "parameters": {
                "board": "int[][]",
                "n": "int"
            },
            "name": "Sudoku#solveSudoku",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Sudoku#solveSudoku",
                "Sudoku#main"
            ],
            "children": [
                "Sudoku#solveSudoku",
                "Sudoku#isSafe"
            ]
        },
        "HeapElement#toString": {
            "parameters": {},
            "name": "HeapElement#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "LinkOperations#deleteHead": {
            "parameters": {},
            "name": "LinkOperations#deleteHead",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "LinkOperations#delete",
                "LinkOperations#deleteNode",
                "SinglyLinkedList#main"
            ],
            "children": []
        },
        "HillCipher#decrypt": {
            "parameters": {
                "message": "String"
            },
            "name": "HillCipher#decrypt",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HillCipher#hillCipher",
                "BlowfishTest#testDecrypt",
                "PolybiusTest#testDecrypt",
                "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption",
                "RSATest#testRSA",
                "VigenereTest#vigenereDecryptTest"
            ],
            "children": [
                "UpperTest#toUpperCase",
                "HillCipher#validateDeterminant",
                "Upper#toUpperCase"
            ]
        },
        "LinkedList#display": {
            "parameters": {
                "n": "Node"
            },
            "name": "LinkedList#display",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "HashMap#displayHashtable",
                "LinkedList#display",
                "Link#main",
                "AVLSimple#display"
            ],
            "children": [
                "NodeStack#getNext",
                "GenericTree#display",
                "HeapNode#getNext",
                "HeapElement#getKey",
                "LinkedList#display",
                "AVLSimple#display",
                "GenericHeap#display",
                "HeapNode#getKey",
                "DoublyLinkedList#display",
                "Entry#getKey"
            ]
        },
        "ReverseString#reverse2": {
            "parameters": {
                "str": "String"
            },
            "name": "ReverseString#reverse2",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "ReverseString#main",
                "ReverseStringTest#ReverseStringTest"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "HammingDistance#getHammingDistanceBetweenBits": {
            "parameters": {
                "receiverBits": "String",
                "senderBits": "String"
            },
            "name": "HammingDistance#getHammingDistanceBetweenBits",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "BSTRecursive#add",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "LeastCommonMultiple#lcm": {
            "parameters": {
                "num1": "int",
                "num2": "int"
            },
            "name": "LeastCommonMultiple#lcm",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "LeastCommonMultiple#main",
                "LeastCommonMultipleTest#testForFirst",
                "LeastCommonMultipleTest#testForSecond"
            ],
            "children": []
        },
        "KochSnowflake#GetImage": {
            "parameters": {
                "imageWidth": "int",
                "vectors": "ArrayList\u003cVector2\u003e",
                "imageHeight": "int"
            },
            "name": "KochSnowflake#GetImage",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "KochSnowflake#GetKochSnowflake"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest2x2": {
            "parameters": {},
            "name": "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest2x2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Vector2#multiply",
                "Complex#multiply",
                "MatrixUtil#multiply",
                "StrassenMatrixMultiplication#multiply"
            ]
        },
        "Kosaraju#dfs": {
            "parameters": {
                "node": "int",
                "vis": "int[]",
                "list": "List\u003cList\u003cInteger\u003e\u003e"
            },
            "name": "Kosaraju#dfs",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "Cycle#start",
                "Cycle#dfs",
                "Kosaraju#sortEdgesByLowestFinishTime",
                "Kosaraju#dfs",
                "LCA#main",
                "LCA#dfs"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LinkedListStack#push",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "Kosaraju#dfs",
                "GenericHashMapUsingArrayList#get",
                "StackArray#push",
                "SkipListTest#get",
                "StackArrayList#push",
                "SkipList#get",
                "LCA#dfs",
                "CircularBufferTest#get",
                "Cycle#dfs",
                "GenericHeap#get",
                "NodeStack#push",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper": {
            "parameters": {},
            "name": "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString",
                "BinarySearch2dArray#BinarySearch"
            ]
        },
        "Upper#toUpperCase": {
            "parameters": {
                "s": "String"
            },
            "name": "Upper#toUpperCase",
            "recursive": "false",
            "inComing": 20,
            "outGoing": 0,
            "numberOfCalls": 20,
            "parents": [
                "HillCipher#encrypt",
                "HillCipher#decrypt",
                "HillCipher#hillCipher",
                "Polybius#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "HexToOct#hex2decimal",
                "HexaDecimalToDecimal#getHexaToDec",
                "RomanToInteger#romanToInt",
                "CRC16#crc16",
                "Upper#main",
                "Upper#toUpperCase",
                "UpperTest#toUpperCase"
            ],
            "children": [
                "UpperTest#toUpperCase",
                "Upper#toUpperCase",
                "HeapElement#equals"
            ]
        },
        "KnightsTour#orphanDetected": {
            "parameters": {
                "count": "int",
                "column": "int",
                "row": "int"
            },
            "name": "KnightsTour#orphanDetected",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "KnightsTour#solve"
            ],
            "children": [
                "KnightsTour#countNeighbors",
                "KnightsTour#neighbors"
            ]
        },
        "BSTRecursive#inOrder": {
            "parameters": {
                "node": "Node"
            },
            "name": "BSTRecursive#inOrder",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "BSTRecursive#inOrder",
                "BSTRecursive#inorder",
                "BSTRecursiveGeneric#inOrder",
                "BSTRecursiveGeneric#inorder",
                "BinaryTree#inOrder",
                "CreateBSTFromSortedArray#test",
                "CreateBinaryTreeFromInorderPreorder#test",
                "TreeRandomNode#inOrder",
                "TreeRandomNode#getRandom",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "BSTRecursiveGeneric#inOrder",
                "MinPriorityQueue#print",
                "BSTRecursive#inOrder",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "TreeRandomNode#inOrder",
                "RadixSort#print"
            ]
        },
        "GCDRecursion#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "GCDRecursion#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GCDRecursion#gcd",
                "GCD#gcd"
            ]
        },
        "LinkOperations#deleteNode": {
            "parameters": {
                "z": "Link"
            },
            "name": "LinkOperations#deleteNode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SinglyLinkedList#deleteHead",
                "LinkOperations#deleteHead",
                "LinkOperations#deleteTail"
            ]
        },
        "KnightsTour#solve": {
            "parameters": {
                "column": "int",
                "count": "int",
                "row": "int"
            },
            "name": "KnightsTour#solve",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "KnightsTour#main",
                "KnightsTour#solve"
            ],
            "children": [
                "Queue#isEmpty",
                "DutchNationalFlagSort#sort",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "TopologicalSort#sort",
                "SinglyLinkedList#isEmpty",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "LeftistHeap#isEmpty",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "QueueWithStack#isEmpty",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "KnightsTour#orphanDetected",
                "KnightsTour#solve",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "TreeSort#sort",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "HeapSort#sort",
                "MinPriorityQueue#isEmpty",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "SwapSort#sort",
                "CircularBufferTest#isEmpty",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "BitonicSort#sort",
                "KnightsTour#neighbors",
                "PriorityQueue#isEmpty"
            ]
        },
        "HammingDistanceTest#testHammingDistance": {
            "parameters": {},
            "name": "HammingDistanceTest#testHammingDistance",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HammingDistance#calculateHammingDistance"
            ]
        },
        "Map#hash": {
            "parameters": {
                "size": "int",
                "key": "Key"
            },
            "name": "Map#hash",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "LinearProbingHashMap#put",
                "LinearProbingHashMap#get",
                "LinearProbingHashMap#delete",
                "BucketSort#bucketSort",
                "MapTest#hashTest"
            ],
            "children": [
                "HeapElement#hashCode"
            ]
        },
        "JugglerSequence#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "JugglerSequence#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "JugglerSequence#jugglerSequence"
            ]
        },
        "GenericHashMapUsingArrayList#containsKey": {
            "parameters": {
                "key": "K"
            },
            "name": "GenericHashMapUsingArrayList#containsKey",
            "recursive": "false",
            "inComing": 28,
            "outGoing": 0,
            "numberOfCalls": 28,
            "parents": [
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "AdjacencyList#addEdge",
                "TopologicalSort#calculateInDegree",
                "Intersection#intersection",
                "VerticalOrderTraversal#verticalTraversal",
                "Fibonacci#fibMemo",
                "Mode#mode",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "CountWords#getDictionary",
                "CheckAnagrams#isAnagrams",
                "Isomorphic#checkStrings",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "CRCAlgorithm#getWrongMessCaught": {
            "parameters": {},
            "name": "CRCAlgorithm#getWrongMessCaught",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "FFTTest#abs": {
            "parameters": {},
            "name": "FFTTest#abs",
            "recursive": "false",
            "inComing": 35,
            "outGoing": 0,
            "numberOfCalls": 35,
            "parents": [
                "NQueens#isPlacedCorrectly",
                "RgbHsvConversion#hsvToRgb",
                "RgbHsvConversion#approximatelyEqualHsv",
                "GenericHashMapUsingArray#hashFunction",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "CheckIfBinaryTreeBalanced#isBalancedRecursive",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "ClosestPair#closestPair",
                "AbsoluteMax#getMaxValue",
                "AbsoluteMin#getMinValue",
                "DistanceFormula#manhattanDistance",
                "DistanceFormula#hammingDistance",
                "DistanceFormula#minkowskiDistance",
                "Complex#divide",
                "GCD#gcd",
                "GCDRecursion#gcd",
                "NumberOfDigits#numberOfDigitsFast",
                "PerfectCube#isPerfectCube",
                "PollardRho#pollardRho",
                "SquareRootWithNewtonRaphsonMethod#squareRoot",
                "InverseOfMatrix#gaussian",
                "AbsoluteValueTest#testGetAbsValue",
                "FFTTest#abs"
            ],
            "children": [
                "FFTTest#abs",
                "Complex#abs"
            ]
        },
        "FFTTest#multiplyWithComplexTest": {
            "parameters": {},
            "name": "FFTTest#multiplyWithComplexTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Complex#getImaginary",
                "Vector2#multiply",
                "Complex#multiply",
                "MatrixUtil#multiply",
                "StrassenMatrixMultiplication#multiply",
                "Complex#getReal"
            ]
        },
        "LinearProbingHashMap#increment": {
            "parameters": {
                "i": "int"
            },
            "name": "LinearProbingHashMap#increment",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "A5KeyStreamGenerator#incrementFrameCounter",
                "LinearProbingHashMap#put",
                "LinearProbingHashMap#get",
                "LinearProbingHashMap#delete"
            ],
            "children": []
        },
        "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "IterativeBinarySearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "IterativeBinarySearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "PerfectBinarySearch#binarySearch",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "RomanNumeralUtil#generate",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BinarySearch2dArray#binarySearch",
                "BSTRecursive#find"
            ]
        },
        "PostfixToInfix#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PostfixToInfix#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapElement#equals",
                "PostfixToInfix#getPostfixToInfix"
            ]
        },
        "IterativeBinarySearch#find": {
            "parameters": {
                "array": "T[]",
                "key": "T"
            },
            "name": "IterativeBinarySearch#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": []
        },
        "AffineCipher#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "AffineCipher#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AffineCipher#decryptCipher",
                "AffineCipher#encryptMessage"
            ]
        },
        "GenericTree#levelorder": {
            "parameters": {},
            "name": "GenericTree#levelorder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SinglyLinkedList#isEmpty",
                "MRUCache#get",
                "LFSR#get",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "LeftistHeap#isEmpty",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SkipListTest#print",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "dijkstras#print",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "MinPriorityQueue#print",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularBufferTest#get",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "GenericHeap#get",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "CircularBufferTest#isEmpty",
                "Deques#size",
                "Sudoku#print",
                "NodeStack#size",
                "SinglyLinkedList#print",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "CircularQueue#isEmpty",
                "LFUCache#get",
                "NodeStack#print",
                "FibonacciHeap#size",
                "Deques#addLast",
                "SortUtils#print",
                "RadixSort#print",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "App#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "App#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MergeSortRecursive#mergeSort"
            ]
        },
        "AdjacencyList#getAdjacents": {
            "parameters": {
                "v": "E"
            },
            "name": "AdjacencyList#getAdjacents",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "BlowfishTest#testDecrypt": {
            "parameters": {},
            "name": "BlowfishTest#testDecrypt",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RSA#decrypt",
                "HillCipher#decrypt",
                "Vigenere#decrypt",
                "Blowfish#decrypt",
                "Polybius#decrypt"
            ]
        },
        "LevenshteinDistance#calculateLevenshteinDistance": {
            "parameters": {
                "str1": "String",
                "str2": "String"
            },
            "name": "LevenshteinDistance#calculateLevenshteinDistance",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "LevenshteinDistance#main",
                "LevenshteinDistanceTests#levenshteinDistanceTest"
            ],
            "children": [
                "LevenshteinDistance#minimum"
            ]
        },
        "SearchSinglyLinkedListRecursion#searchRecursion": {
            "parameters": {
                "node": "Node",
                "key": "int"
            },
            "name": "SearchSinglyLinkedListRecursion#searchRecursion",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "SearchSinglyLinkedListRecursion#searchRecursion",
                "SearchSinglyLinkedListRecursion#search"
            ],
            "children": [
                "SearchSinglyLinkedListRecursion#searchRecursion"
            ]
        },
        "NthUglyNumber#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "NthUglyNumber#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "NthUglyNumber#getNthUglyNo"
            ]
        },
        "NQueens#getSolution": {
            "parameters": {
                "boardSize": "int",
                "solutions": "List\u003cList\u003cString\u003e\u003e",
                "columns": "int[]",
                "columnIndex": "int"
            },
            "name": "NQueens#getSolution",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "NQueens#placeQueens",
                "NQueens#getSolution"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "Trie#add",
                "GenericHashMapUsingArrayList#toString",
                "Vector2#add",
                "Deques#toString",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "HeapElement#toString",
                "NQueens#getSolution",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "DynamicArray#add",
                "NQueens#isPlacedCorrectly",
                "BSTRecursive#add",
                "CursorLinkedList#append",
                "MatrixUtil#add",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Complex#add",
                "GenericHeap#add",
                "Queue#toString",
                "CircleLinkedList#append",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "LinkedQueue#toString",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "FFTTest#addTest": {
            "parameters": {},
            "name": "FFTTest#addTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "Complex#getReal",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "IntrospectiveSort#sort": {
            "parameters": {
                "a": "T[]"
            },
            "name": "IntrospectiveSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "IntrospectiveSort#introSort"
            ]
        },
        "Graph#getNeighbours": {
            "parameters": {
                "from": "int"
            },
            "name": "Graph#getNeighbours",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "FindKthNumber#generateArray": {
            "parameters": {
                "capacity": "int"
            },
            "name": "FindKthNumber#generateArray",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "FindKthNumber#main",
                "InsertionSort#main",
                "InsertionSortTest#testWithRandomArray",
                "SortUtilsRandomGeneratorTest#generateArray",
                "SortUtilsRandomGeneratorTest#generateArrayEmpty",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
            ],
            "children": []
        },
        "BoardPath#bpRS": {
            "parameters": {
                "strg": "int[]",
                "end": "int",
                "curr": "int"
            },
            "name": "BoardPath#bpRS",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BoardPath#bpRS"
            ],
            "children": [
                "BoardPath#bpRS"
            ]
        },
        "CircleLinkedList#remove": {
            "parameters": {
                "pos": "int"
            },
            "name": "CircleLinkedList#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": []
        },
        "GenericRoot#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "GenericRoot#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericRoot#genericRoot"
            ]
        },
        "OctalToDecimalTest#testOctalToDecimal": {
            "parameters": {},
            "name": "OctalToDecimalTest#testOctalToDecimal",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OctalToDecimal#convertOctalToDecimal"
            ]
        },
        "AdjacencyMatrixGraph#breadthFirstOrder": {
            "parameters": {
                "startVertex": "int"
            },
            "name": "AdjacencyMatrixGraph#breadthFirstOrder",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MatrixGraphs#main"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "QueueWithStack#isEmpty",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "MatrixUtil#add",
                "CircularQueue#isEmpty",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "DynamicArray#isEmpty",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "ProcessDetails#setTurnAroundTimeTime": {
            "parameters": {
                "turnAroundTime": "int"
            },
            "name": "ProcessDetails#setTurnAroundTimeTime",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FCFSScheduling#evaluateTurnAroundTime"
            ],
            "children": []
        },
        "QuickSelectTest#quickSelectMinimumOfManyElements": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectMinimumOfManyElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DynamicArray#stream",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "FindMinRecursion#min",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "MinValue#min",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "QuickSelect#select",
                "LFUCache#get",
                "QuickSelectTest#generateRandomIntegers",
                "BucketSort#min"
            ]
        },
        "SumOfDigitsTest#testPositive": {
            "parameters": {},
            "name": "SumOfDigitsTest#testPositive",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SumOfDigits#sumOfDigits",
                "SumOfDigits#sumOfDigitsRecursion",
                "SumOfDigits#sumOfDigitsFast"
            ]
        },
        "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide": {
            "parameters": {},
            "name": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "SortUtilsTest#isSortedListFalse": {
            "parameters": {},
            "name": "SortUtilsTest#isSortedListFalse",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "FFTTest#getImaginaryTest": {
            "parameters": {},
            "name": "FFTTest#getImaginaryTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Complex#getImaginary"
            ]
        },
        "HammingDistanceTest#initialize": {
            "parameters": {},
            "name": "HammingDistanceTest#initialize",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "ProcessDetails#setProcessId": {
            "parameters": {
                "processId": "String"
            },
            "name": "ProcessDetails#setProcessId",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "BSTRecursive#inorder": {
            "parameters": {},
            "name": "BSTRecursive#inorder",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main"
            ],
            "children": [
                "BSTRecursiveGeneric#inOrder",
                "BSTRecursive#inOrder",
                "TreeRandomNode#inOrder"
            ]
        },
        "PowerSumTest#testNumberZeroAndPowerZero": {
            "parameters": {},
            "name": "PowerSumTest#testNumberZeroAndPowerZero",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PowerSum#powSum"
            ]
        },
        "DeterminantOfMatrix#determinant": {
            "parameters": {
                "a": "int[][]",
                "n": "int"
            },
            "name": "DeterminantOfMatrix#determinant",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "HillCipher#determinant",
                "HillCipher#validateDeterminant",
                "DeterminantOfMatrix#determinant",
                "DeterminantOfMatrix#main"
            ],
            "children": [
                "DeterminantOfMatrix#determinant",
                "HillCipher#determinant"
            ]
        },
        "MyComparator#compare": {
            "parameters": {
                "x": "HuffmanNode",
                "y": "HuffmanNode"
            },
            "name": "MyComparator#compare",
            "recursive": "false",
            "inComing": 14,
            "outGoing": 0,
            "numberOfCalls": 14,
            "parents": [
                "XComparator#compare",
                "PowRecursion#main",
                "SumOfArithmeticSeries#main",
                "Vertex#compareTo",
                "LinkListSort#isSorted"
            ],
            "children": []
        },
        "SinglyLinkedListTest#clear": {
            "parameters": {},
            "name": "SinglyLinkedListTest#clear",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "A5KeyStreamGenerator#initialize",
                "LFSR#initialize",
                "SinglyLinkedList#main",
                "LinkedQueue#main",
                "ConvolutionFFT#convolutionFFT",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear"
            ],
            "children": [
                "SinglyLinkedList#clear",
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "SinglyLinkedListTest#createSampleList",
                "LeftistHeap#isEmpty",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "SinglyLinkedListTest#clear",
                "LinkedQueue#clear",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "LeftistHeap#clear",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "CircularBufferTest#isEmpty",
                "Deques#size",
                "NodeStack#size",
                "CircularQueue#isEmpty",
                "FibonacciHeap#size",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "DisjointSets#MakeSet": {
            "parameters": {
                "x": "T"
            },
            "name": "DisjointSets#MakeSet",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "FloodFill#putPixel": {
            "parameters": {
                "image": "int[][]",
                "x": "int",
                "newColor": "int",
                "y": "int"
            },
            "name": "FloodFill#putPixel",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "FloodFill#floodFill",
                "BoundaryFill#boundaryFill"
            ],
            "children": []
        },
        "Cycle#printAll": {
            "parameters": {},
            "name": "Cycle#printAll",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Cycles#main"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SkipListTest#print",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "dijkstras#print",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "MinPriorityQueue#print",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "Sudoku#print",
                "NodeStack#size",
                "SinglyLinkedList#print",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "NodeStack#print",
                "FibonacciHeap#size",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "ShortestSuperSequence#shortestSuperSequence": {
            "parameters": {
                "X": "String",
                "Y": "String"
            },
            "name": "ShortestSuperSequence#shortestSuperSequence",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ShortestSuperSequence#main"
            ],
            "children": [
                "ShortestSuperSequence#lcs"
            ]
        },
        "BSTIterative#inorder": {
            "parameters": {},
            "name": "BSTIterative#inorder",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main"
            ],
            "children": [
                "FibonacciHeap#empty",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "StackArray#pop",
                "LinkedListStack#push",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "StackArray#push",
                "StackArrayList#push",
                "NodeStack#pop",
                "StackArrayList#pop",
                "NodeStack#push",
                "LinkedListStack#pop",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "StringCompression#appendCount": {
            "parameters": {
                "res": "String",
                "ch": "char",
                "count": "int"
            },
            "name": "StringCompression#appendCount",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "StringCompression#compress"
            ],
            "children": []
        },
        "LevelOrderTraversalTest#testSingleNodeTree": {
            "parameters": {},
            "name": "LevelOrderTraversalTest#testSingleNodeTree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "LevelOrderTraversal#traverse",
                "ZigzagTraversal#traverse",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "BogoSortTest#bogoSortDuplicateIntegerArray": {
            "parameters": {},
            "name": "BogoSortTest#bogoSortDuplicateIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "PancakeSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PancakeSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "GenericHeap#swap": {
            "parameters": {
                "i": "int",
                "j": "int"
            },
            "name": "GenericHeap#swap",
            "recursive": "false",
            "inComing": 55,
            "outGoing": 0,
            "numberOfCalls": 55,
            "parents": [
                "Permutation#backtracking",
                "GenericHeap#upHeapify",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "FFT#fftBitReversal",
                "FindKthNumber#partition",
                "BFPRT#partition",
                "BFPRT#insertionSort",
                "QuickSelect#partition",
                "QuickSelect#pivot",
                "BogoSort#nextPermutation",
                "BubbleSort#sort",
                "BubbleSortRecursion#bubbleSort",
                "CircleSort#doSort",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "DualPivotQuickSort#partition",
                "DutchNationalFlagSort#dutch_national_flag_sort",
                "GnomeSort#sort",
                "HeapSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "IntrospectiveSort#partition",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify",
                "OddEvenSort#oddEvenSort",
                "QuickSort#randomPartition",
                "QuickSort#partition",
                "SortUtils#flip",
                "WiggleSort#triColorSort"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "Area#surfaceAreaCone": {
            "parameters": {
                "radius": "double",
                "height": "double"
            },
            "name": "Area#surfaceAreaCone",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AreaTest#surfaceAreaCone",
                "AreaTest#testAllIllegalInput"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "Cycles#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Cycles#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Cycle#printAll",
                "Cycle#start"
            ]
        },
        "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes": {
            "parameters": {},
            "name": "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "TarjansAlgorithm#stronglyConnectedComponents",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "HeapElement#equals",
                "BSTRecursive#add",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "GenericHashMapUsingArrayList#get": {
            "parameters": {
                "key": "K"
            },
            "name": "GenericHashMapUsingArrayList#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "HeapElement#hashCode",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "FFTTest#abs",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "HeapElement#equals",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "Complex#abs"
            ]
        },
        "HeapElement#getInfo": {
            "parameters": {},
            "name": "HeapElement#getInfo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "Node#insert": {
            "parameters": {
                "value": "int"
            },
            "name": "Node#insert",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "PriorityQueue#insert"
            ]
        },
        "LinkedQueue#clear": {
            "parameters": {},
            "name": "LinkedQueue#clear",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "A5KeyStreamGenerator#initialize",
                "LFSR#initialize",
                "SinglyLinkedList#main",
                "LinkedQueue#main",
                "ConvolutionFFT#convolutionFFT",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear"
            ],
            "children": [
                "LinkedQueue#dequeue"
            ]
        },
        "CircleSort#doSort": {
            "parameters": {
                "array": "T[]",
                "left": "int",
                "right": "int"
            },
            "name": "CircleSort#doSort",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "CircleSort#sort",
                "CircleSort#doSort",
                "MergeSort#sort",
                "MergeSort#doSort",
                "QuickSort#sort",
                "QuickSort#doSort"
            ],
            "children": [
                "QuickSort#doSort",
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "MergeSort#doSort",
                "GenericHeap#swap",
                "CircleSort#doSort",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "SimpleSubstitutionCipherTest#testDecode": {
            "parameters": {},
            "name": "SimpleSubstitutionCipherTest#testDecode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Caesar#decode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#decode"
            ]
        },
        "BufferedReader#needsRefill": {
            "parameters": {},
            "name": "BufferedReader#needsRefill",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "BufferedReader#read",
                "BufferedReader#available"
            ],
            "children": []
        },
        "HexaDecimalToBinary#completeDigits": {
            "parameters": {
                "binNum": "String"
            },
            "name": "HexaDecimalToBinary#completeDigits",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "HexaDecimalToBinary#convert"
            ],
            "children": []
        },
        "QuickSelectTest#getSortedCopyOfList": {
            "parameters": {
                "list": "List\u003cT\u003e"
            },
            "name": "QuickSelectTest#getSortedCopyOfList",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters"
            ],
            "children": [
                "DynamicArray#stream"
            ]
        },
        "Deques#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Deques#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "Deques#pollFirst",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "Deques#pollLast",
                "NodeStack#size",
                "FibonacciHeap#size",
                "Deques#addLast",
                "Deques#addFirst"
            ]
        },
        "StackArray#push": {
            "parameters": {
                "value": "int"
            },
            "name": "StackArray#push",
            "recursive": "false",
            "inComing": 58,
            "outGoing": 0,
            "numberOfCalls": 58,
            "parents": [
                "Kosaraju#dfs",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#push",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "InorderTraversal#iterativeInorder",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PalindromeSinglyLinkedList#isPalindrome",
                "QueueWithStack#insert",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StackPostfixNotation#postfixEvaluate"
            ],
            "children": [
                "StackArray#resize",
                "LinkedListStack#push",
                "StackArray#isFull",
                "PriorityQueue#isFull",
                "CircularQueue#isFull",
                "HashMapCuckooHashing#isFull",
                "StackArray#push",
                "StackArrayList#push",
                "NodeStack#push",
                "MinPriorityQueue#isFull",
                "CircularBufferTest#isFull",
                "Queue#isFull",
                "LinearProbingHashMap#resize",
                "CircularBuffer#isFull"
            ]
        },
        "DynamicArrayIterator#next": {
            "parameters": {},
            "name": "DynamicArrayIterator#next",
            "recursive": "false",
            "inComing": 32,
            "outGoing": 0,
            "numberOfCalls": 32,
            "parents": [
                "AnyBaseToAnyBase#main",
                "OctalToHexadecimal#main",
                "TurkishToLatinConversion#main",
                "Bag#contains",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "SkipList#add",
                "SkipList#get",
                "SkipList#remove",
                "SkipList#contains",
                "SkipList#toString",
                "TrieImp#main",
                "LowestBasePalindrome#main",
                "PerlinNoise#main",
                "ReturnSubsequence#main",
                "SkylineProblem#run",
                "SkylineProblem#print",
                "StackPostfixNotation#postfixEvaluate",
                "StrandSort#strandSort",
                "ArrayCombinationTest#testLengthOne",
                "CombinationTest#testLengthOne"
            ],
            "children": [
                "MinHeap#getElement",
                "DynamicArray#getElement",
                "MaxHeap#getElement",
                "Heap#getElement"
            ]
        },
        "ListIterator#next": {
            "parameters": {},
            "name": "ListIterator#next",
            "recursive": "false",
            "inComing": 32,
            "outGoing": 0,
            "numberOfCalls": 32,
            "parents": [
                "AnyBaseToAnyBase#main",
                "OctalToHexadecimal#main",
                "TurkishToLatinConversion#main",
                "Bag#contains",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "SkipList#add",
                "SkipList#get",
                "SkipList#remove",
                "SkipList#contains",
                "SkipList#toString",
                "TrieImp#main",
                "LowestBasePalindrome#main",
                "PerlinNoise#main",
                "ReturnSubsequence#main",
                "SkylineProblem#run",
                "SkylineProblem#print",
                "StackPostfixNotation#postfixEvaluate",
                "StrandSort#strandSort",
                "ArrayCombinationTest#testLengthOne",
                "CombinationTest#testLengthOne"
            ],
            "children": [
                "SimpleNode#hasNext",
                "ListIterator#hasNext",
                "DynamicArrayIterator#hasNext"
            ]
        },
        "SegmentTree#constructTree": {
            "parameters": {
                "arr": "int[]",
                "start": "int",
                "index": "int",
                "end": "int"
            },
            "name": "SegmentTree#constructTree",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "null#null",
                "SegmentTree#constructTree"
            ],
            "children": [
                "SegmentTree#constructTree"
            ]
        },
        "QuickSelectTest#quickSelectMaximumOfOneElement": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectMaximumOfOneElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "QuickSelect#select"
            ]
        },
        "HashMap#insertHash": {
            "parameters": {
                "key": "int"
            },
            "name": "HashMap#insertHash",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "null#null",
                "Main#main"
            ],
            "children": [
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "HashMap#hashing",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "PriorityQueue#insert"
            ]
        },
        "SlowSortTest#slowSortStringSymbolArray": {
            "parameters": {},
            "name": "SlowSortTest#slowSortStringSymbolArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "Upper#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Upper#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "UpperTest#toUpperCase",
                "Upper#toUpperCase",
                "HeapElement#equals"
            ]
        },
        "MiniMaxAlgorithm#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MiniMaxAlgorithm#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "MiniMaxAlgorithm#miniMax",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "MiniMaxAlgorithm#getScores",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "PancakeSort#sort": {
            "parameters": {
                "array": "T[]"
            },
            "name": "PancakeSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "SortUtils#flip",
                "SortUtils#less",
                "HeapSort#less"
            ]
        },
        "WiggleSortTest#WiggleTestNumbersEvenDuplicates": {
            "parameters": {},
            "name": "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "BucketSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BucketSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BucketSort#bucketSort"
            ]
        },
        "GenericTree#depthcaller": {
            "parameters": {
                "dep": "int"
            },
            "name": "GenericTree#depthcaller",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#depth"
            ]
        },
        "NodeStack#setPrevious": {
            "parameters": {
                "previous": "NodeStack\u003c?\u003e"
            },
            "name": "NodeStack#setPrevious",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "SkipList#add",
                "SkipList#remove",
                "NodeStack#push"
            ],
            "children": []
        },
        "Node#printInOrder": {
            "parameters": {},
            "name": "Node#printInOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "SquareRootWithBabylonianMethod#square_Root": {
            "parameters": {
                "num": "float"
            },
            "name": "SquareRootWithBabylonianMethod#square_Root",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "SquareRootwithBabylonianMethodTest#testfor4",
                "SquareRootwithBabylonianMethodTest#testfor1",
                "SquareRootwithBabylonianMethodTest#testfor2",
                "SquareRootwithBabylonianMethodTest#testfor625"
            ],
            "children": []
        },
        "EggDropping#minTrials": {
            "parameters": {
                "m": "int",
                "n": "int"
            },
            "name": "EggDropping#minTrials",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "EggDropping#main",
                "EggDroppingTest#hasMultipleEggSingleFloor",
                "EggDroppingTest#hasSingleEggSingleFloor",
                "EggDroppingTest#hasSingleEggMultipleFloor",
                "EggDroppingTest#hasMultipleEggMultipleFloor"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "TrieImp#search": {
            "parameters": {
                "word": "String"
            },
            "name": "TrieImp#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": []
        },
        "HeapSort#siftDown": {
            "parameters": {
                "unsorted": "T[]",
                "k": "int",
                "n": "int"
            },
            "name": "HeapSort#siftDown",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "HeapSort#sort",
                "HeapSort#heapify"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "SortUtils#less",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "HeapSort#less",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "LinkedQueue#isEmpty": {
            "parameters": {},
            "name": "LinkedQueue#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "MonteCarloTreeSearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MonteCarloTreeSearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MonteCarloTreeSearch#monteCarloTreeSearch"
            ]
        },
        "VectorCrossProduct#crossProduct": {
            "parameters": {
                "b": "VectorCrossProduct"
            },
            "name": "VectorCrossProduct#crossProduct",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "VectorCrossProduct#test"
            ],
            "children": []
        },
        "AverageTest#testAverage_int_5": {
            "parameters": {},
            "name": "AverageTest#testAverage_int_5",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Average#average"
            ]
        },
        "BellmanFord#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BellmanFord#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BellmanFord#go"
            ]
        },
        "Fibonacci#fibMemo": {
            "parameters": {
                "n": "int"
            },
            "name": "Fibonacci#fibMemo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "Vertex#toString": {
            "parameters": {},
            "name": "Vertex#toString",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "TreeNode#setParent": {
            "parameters": {
                "parentNode": "TreeNode\u003cE\u003e"
            },
            "name": "TreeNode#setParent",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeNode#getDepth"
            ]
        },
        "TwoPointers#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "TwoPointers#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TwoPointers#isPairedSum"
            ]
        },
        "PalindromeSinglyLinkedList#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PalindromeSinglyLinkedList#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PalindromeSinglyLinkedList#isPalindrome",
                "Palindrome#isPalindrome",
                "SinglyLinkedList#insertHead",
                "LinkOperations#insertHead",
                "SinglyLinkedList#insertNth",
                "PalindromeNumber#isPalindrome"
            ]
        },
        "Main#nearestRightKey": {
            "parameters": {
                "root": "NRKTree",
                "x0": "int"
            },
            "name": "Main#nearestRightKey",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "Main#main",
                "Main#nearestRightKey"
            ],
            "children": [
                "Main#nearestRightKey"
            ]
        },
        "BSTRecursiveGeneric#preOrder": {
            "parameters": {
                "node": "Node\u003cT\u003e"
            },
            "name": "BSTRecursiveGeneric#preOrder",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "BSTRecursive#preOrder",
                "BSTRecursive#preorder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#preorder",
                "BinaryTree#preOrder",
                "CreateBSTFromSortedArray#test",
                "CreateBinaryTreeFromInorderPreorder#test",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursive#preOrder",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "FibonacciHeap#cascadingCuts": {
            "parameters": {
                "curr": "HeapNode"
            },
            "name": "FibonacciHeap#cascadingCuts",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "FibonacciHeap#decreaseKey",
                "FibonacciHeap#cascadingCuts"
            ],
            "children": [
                "HeapNode#mark",
                "FibonacciHeap#cascadingCuts",
                "HeapNode#isMarked",
                "FibonacciHeap#cut",
                "HeapNode#isRoot"
            ]
        },
        "RomanNumeralUtil#generate": {
            "parameters": {
                "number": "int"
            },
            "name": "RomanNumeralUtil#generate",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "BinarySearch#main",
                "ExponentialSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "TernarySearch#main",
                "UpperBound#main",
                "AbsoluteValueTest#testGetAbsValue"
            ],
            "children": []
        },
        "Task#count": {
            "parameters": {
                "head": "Node"
            },
            "name": "Task#count",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "CountSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "MatrixChainMultiplication#main",
                "SieveOfEratosthenes#findPrimesTill",
                "UnionFind#main",
                "Task#sortByMergeSort",
                "Task1#sortByInsertionSort",
                "Task2#sortByHeapSort"
            ],
            "children": []
        },
        "SumOfDigits#sumOfDigits": {
            "parameters": {
                "number": "int"
            },
            "name": "SumOfDigits#sumOfDigits",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "SumOfDigits#main",
                "SumOfDigitsTest#testZero",
                "SumOfDigitsTest#testPositive",
                "SumOfDigitsTest#testNegative"
            ],
            "children": []
        },
        "DudeneyNumberTest#isDudeney": {
            "parameters": {},
            "name": "DudeneyNumberTest#isDudeney",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "DudeneyNumberTest#isDudeney"
            ],
            "children": [
                "DudeneyNumberTest#isDudeney",
                "DudeneyNumber#isDudeney"
            ]
        },
        "SimpleNode#hasNext": {
            "parameters": {},
            "name": "SimpleNode#hasNext",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "Bag#contains",
                "ListIterator#next",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "SkylineProblem#print",
                "StackPostfixNotation#postfixEvaluate",
                "StrandSort#strandSort",
                "MapTest#keysTest"
            ],
            "children": []
        },
        "MazeRecursionTest#testMaze": {
            "parameters": {},
            "name": "MazeRecursionTest#testMaze",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MazeRecursion#setWay2",
                "MazeRecursion#setWay"
            ]
        },
        "HeightStrategy#nodeHeight": {
            "parameters": {
                "heightCap": "int"
            },
            "name": "HeightStrategy#nodeHeight",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SkipList#add"
            ],
            "children": []
        },
        "NextFitCPUTest#testFitForMoreBlocksNoFit": {
            "parameters": {},
            "name": "NextFitCPUTest#testFitForMoreBlocksNoFit",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "MatrixChainRecursiveTopDownMemoisation#Memoized_Matrix_Chain": {
            "parameters": {
                "p": "int[]"
            },
            "name": "MatrixChainRecursiveTopDownMemoisation#Memoized_Matrix_Chain",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MatrixChainRecursiveTopDownMemoisation#main"
            ],
            "children": [
                "MatrixChainRecursiveTopDownMemoisation#Lookup_Chain"
            ]
        },
        "CeilInBinarySearchTreeTest#testRootNull": {
            "parameters": {},
            "name": "CeilInBinarySearchTreeTest#testRootNull",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CeilInBinarySearchTree#getCeil"
            ]
        },
        "IntegerToRoman#integerToRoman": {
            "parameters": {
                "num": "int"
            },
            "name": "IntegerToRoman#integerToRoman",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "IntegerToRoman#main",
                "IntegerToRomanTest#testIntegerToRoman"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass": {
            "parameters": {},
            "name": "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "FirstFitCPU#fitProcess": {
            "parameters": {
                "sizeOfProcesses": "int[]",
                "sizeOfBlocks": "int[]"
            },
            "name": "FirstFitCPU#fitProcess",
            "recursive": "false",
            "inComing": 21,
            "outGoing": 0,
            "numberOfCalls": 21,
            "parents": [
                "BestFitCPUTest#testFitForUseOfOneBlock",
                "BestFitCPUTest#testFitForEqualProcecesses",
                "BestFitCPUTest#testFitForNoEmptyBlockCell",
                "BestFitCPUTest#testFitForSameInputDifferentQuery",
                "BestFitCPUTest#testFitForMoreBlocksNoFit",
                "FirstFitCPUTest#testFitForUseOfOneBlock",
                "FirstFitCPUTest#testFitForEqualProcecesses",
                "FirstFitCPUTest#testFitForNoEmptyBlockCell",
                "FirstFitCPUTest#testFitForSameInputDifferentQuery",
                "FirstFitCPUTest#testFitForMoreBlocksNoFit",
                "NextFitCPUTest#testFitForUseOfOneBlock",
                "NextFitCPUTest#testFitForEqualProcecesses",
                "NextFitCPUTest#testFitForNoEmptyBlockCell",
                "NextFitCPUTest#testFitForSameInputDifferentQuery",
                "NextFitCPUTest#testFitForMoreBlocksNoFit",
                "WorstFitCPUTest#testFitForUseOfOneBlock",
                "WorstFitCPUTest#testFitForEqualProcecesses",
                "WorstFitCPUTest#testFitForNoEmptyBlockCell",
                "WorstFitCPUTest#testFitForSameInputDifferentQuery",
                "WorstFitCPUTest#testFitForMoreBlocksNoFit",
                "WorstFitCPUTest#testFitBadCase"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "FirstFitCPU#findFirstFit",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "ColumnarTranspositionCipher#tableBuilder": {
            "parameters": {
                "word": "String"
            },
            "name": "ColumnarTranspositionCipher#tableBuilder",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "ColumnarTranspositionCipher#encrpyter"
            ],
            "children": [
                "ColumnarTranspositionCipher#findElements",
                "ColumnarTranspositionCipher#numberOfRows"
            ]
        },
        "BFPRT#bfprt": {
            "parameters": {
                "arr": "int[]",
                "i": "int",
                "end": "int",
                "begin": "int"
            },
            "name": "BFPRT#bfprt",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "BFPRT#getMinKthByBFPRT",
                "BFPRT#bfprt",
                "BFPRT#medianOfMedians"
            ],
            "children": [
                "QuickSelect#partition",
                "DualPivotQuickSort#partition",
                "IntrospectiveSort#partition",
                "FindKthNumber#partition",
                "BFPRT#bfprt",
                "QuickSort#partition",
                "BFPRT#medianOfMedians",
                "BFPRT#partition"
            ]
        },
        "Alphabetical#isAlphabetical": {
            "parameters": {
                "s": "String"
            },
            "name": "Alphabetical#isAlphabetical",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "Alphabetical#main",
                "AlphabeticalTest#isAlphabetical"
            ],
            "children": [
                "Lower#toLowerCase",
                "LowerTest#toLowerCase"
            ]
        },
        "BrianKernighanAlgorithm#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BrianKernighanAlgorithm#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BrianKernighanAlgorithm#countSetBits",
                "BufferedReader#close"
            ]
        },
        "Median#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Median#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MedianOfRunningArray#median",
                "Median#median"
            ]
        },
        "BestFitCPU#findMaxElement": {
            "parameters": {
                "array": "int[]"
            },
            "name": "BestFitCPU#findMaxElement",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BestFitCPU#findBestFit"
            ],
            "children": []
        },
        "Pangram#isPangram": {
            "parameters": {
                "s": "String"
            },
            "name": "Pangram#isPangram",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "Pangram#main",
                "PangramTest#testPangram"
            ],
            "children": []
        },
        "VolumeTest#volume": {
            "parameters": {},
            "name": "VolumeTest#volume",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Volume#volumeHemisphere",
                "Volume#volumePyramid",
                "Volume#volumeCube",
                "Volume#volumeSphere",
                "Volume#volumeCylinder",
                "Volume#volumeCone",
                "Volume#volumePrism",
                "Volume#volumeCuboid"
            ]
        },
        "LinkedListStack#isEmpty": {
            "parameters": {},
            "name": "LinkedListStack#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "TreeSort#doTreeSortList": {
            "parameters": {
                "unsortedList": "List\u003cT\u003e"
            },
            "name": "TreeSort#doTreeSortList",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "TreeSort#sort"
            ],
            "children": [
                "BSTRecursiveGeneric#inorderSort",
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "LinkListSortTest#testForTwoElements": {
            "parameters": {},
            "name": "LinkListSortTest#testForTwoElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "MinHeap#extractMin": {
            "parameters": {},
            "name": "MinHeap#extractMin",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MinHeap#getElement"
            ],
            "children": [
                "MaxHeap#deleteElement",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MinHeap#deleteElement",
                "Heap#deleteElement"
            ]
        },
        "MedianOfRunningArray#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MedianOfRunningArray#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciHeap#insert",
                "SkylineProblem#print",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "PrintAMatrixInSpiralOrder#print",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "SkipListTest#print",
                "MedianOfRunningArray#insert",
                "dijkstras#print",
                "MedianOfRunningArray#median",
                "MinPriorityQueue#print",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "Median#median",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "NodeStack#print",
                "BSTRecursive#insert",
                "SortUtils#print",
                "Trieac#insert",
                "RadixSort#print",
                "PriorityQueue#insert"
            ]
        },
        "HashMapCuckooHashingTest#getKeyIndex": {
            "parameters": {},
            "name": "HashMapCuckooHashingTest#getKeyIndex",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HashMapCuckooHashing#findKeyInTable",
                "HashMapCuckooHashing#insertKey2HashTable"
            ]
        },
        "VerticalOrderTraversal#verticalTraversal": {
            "parameters": {
                "root": "BinaryTree.Node"
            },
            "name": "VerticalOrderTraversal#verticalTraversal",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "VerticalOrderTraversalTest#testRootNull",
                "VerticalOrderTraversalTest#testSingleNodeTree",
                "VerticalOrderTraversalTest#testVerticalTraversalCompleteTree",
                "VerticalOrderTraversalTest#testVerticalTraversalDifferentHeight"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DyanamicProgrammingKnapsack#max",
                "DoublyLinkedList#isEmpty",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SinglyLinkedList#isEmpty",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "QueueWithStack#isEmpty",
                "GenericArrayListQueue#peek",
                "GenericHashMapUsingArray#put",
                "BSTRecursiveGeneric#add",
                "LinkedQueue#peek",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "BufferedReader#peek",
                "SkipList#get",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "DynamicArray#put",
                "CircularQueue#peek",
                "FindMaxRecursion#max",
                "FindMinRecursion#min",
                "CircularBufferTest#get",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "GenericHeap#get",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "MaxValue#max",
                "HashMapCuckooHashing#isEmpty",
                "MinValue#min",
                "DynamicArray#add",
                "BruteForceKnapsack#max",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "GenericTree#max",
                "BucketSort#max",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "CircularQueue#isEmpty",
                "LFUCache#get",
                "MRUCache#put",
                "Complex#add",
                "Map#put",
                "GenericHeap#add",
                "GenericHashMapUsingArray#containsKey",
                "SkylineProblem#add",
                "NodeStack#peek",
                "LRUCache#put",
                "SkipListTest#add",
                "Bag#add",
                "BucketSort#min",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "LinearProbingHashMap#put",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "DuplicateBrackets#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "DuplicateBrackets#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BufferedReader#close",
                "SameTreesCheck#check",
                "DuplicateBrackets#check"
            ]
        },
        "WiggleSortTest#WiggleTestNumbersOdd": {
            "parameters": {},
            "name": "WiggleSortTest#WiggleTestNumbersOdd",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "BipartiteGrapfDFS#isBipartite": {
            "parameters": {
                "V": "int",
                "adj": "ArrayList\u003cArrayList\u003cInteger\u003e\u003e"
            },
            "name": "BipartiteGrapfDFS#isBipartite",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BipartiteGrapfDFS#main"
            ],
            "children": [
                "BipartiteGrapfDFS#bipartite"
            ]
        },
        "RangeInSortedArray#sortedRange": {
            "parameters": {
                "nums": "int[]",
                "key": "int"
            },
            "name": "RangeInSortedArray#sortedRange",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "RangeInSortedArray#main"
            ],
            "children": [
                "RangeInSortedArray#alteredBinSearchIter"
            ]
        },
        "HorspoolSearch#findFirst": {
            "parameters": {
                "pattern": "String",
                "text": "String"
            },
            "name": "HorspoolSearch#findFirst",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HorspoolSearch#firstOccurrence"
            ]
        },
        "BucketSortTest#bucketSortDuplicateIntegerArray": {
            "parameters": {},
            "name": "BucketSortTest#bucketSortDuplicateIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BucketSort#bucketSort"
            ]
        },
        "LFSRTest#getClockBit": {
            "parameters": {},
            "name": "LFSRTest#getClockBit",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "CompositeLFSR#clock",
                "CompositeLFSR#getMajorityBit",
                "LFSRTest#getClockBit"
            ],
            "children": [
                "A5KeyStreamGenerator#initialize",
                "LFSRTest#getClockBit",
                "LFSR#initialize",
                "BaseLFSR#initialize",
                "LFSRTest#initialize",
                "LFSR#getClockBit"
            ]
        },
        "LFUCacheTest#testLFUCacheWithStringValueShouldPass": {
            "parameters": {},
            "name": "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "InorderTraversalTest#testRecursiveInorder": {
            "parameters": {},
            "name": "InorderTraversalTest#testRecursiveInorder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "RangeInSortedArray#alteredBinSearchIter": {
            "parameters": {
                "left": "int",
                "range": "int[]",
                "right": "int",
                "goLeft": "boolean",
                "nums": "int[]",
                "key": "int"
            },
            "name": "RangeInSortedArray#alteredBinSearchIter",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "RangeInSortedArray#sortedRange"
            ],
            "children": []
        },
        "KeithNumber#isKeith": {
            "parameters": {
                "x": "int"
            },
            "name": "KeithNumber#isKeith",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "KeithNumber#main"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "ReverseString#reverse",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "Rotation#reverse",
                "DynamicArray#add",
                "BSTRecursive#add",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "ReverseStringRecursive#reverse",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "LowestBasePalindrome#reverse",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Node#checkLayer": {
            "parameters": {
                "layer": "int"
            },
            "name": "Node#checkLayer",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "Node#getSubNodes": {
            "parameters": {},
            "name": "Node#getSubNodes",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "DistanceFormulaTest#manhattantest1": {
            "parameters": {},
            "name": "DistanceFormulaTest#manhattantest1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DistanceFormula#manhattanDistance"
            ]
        },
        "Conway#generateNextElement": {
            "parameters": {
                "originalString": "String"
            },
            "name": "Conway#generateNextElement",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Conway#generateList",
                "ConwayTest#testGenerateNextElementWith1",
                "ConwayTest#testGenerateNextElementWith123456",
                "ConwayTest#testGenerateNextElementWith1A1Z3E1R1T3G1F1D2E1S1C"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "DynamicArray#stream",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "StrassenMatrixMultiplication#split",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "GCDTest#test2": {
            "parameters": {},
            "name": "GCDTest#test2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GCDRecursion#gcd",
                "GCD#gcd"
            ]
        },
        "GCDTest#test1": {
            "parameters": {},
            "name": "GCDTest#test1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GCDRecursion#gcd",
                "GCD#gcd"
            ]
        },
        "Vector2#multiply": {
            "parameters": {
                "scalar": "double"
            },
            "name": "Vector2#multiply",
            "recursive": "false",
            "inComing": 28,
            "outGoing": 0,
            "numberOfCalls": 28,
            "parents": [
                "RSA#generateKeys",
                "StrassenMatrixMultiplication#multiply",
                "AutomorphicNumber#isAutomorphic3",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "FFT#fft",
                "FFTBluestein#fftBluestein",
                "KaprekarNumbers#isKaprekarNumber",
                "MatrixUtil#multiply",
                "MatrixUtil#main",
                "KochSnowflake#IterationStep",
                "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest2x2",
                "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest4x4",
                "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTestNegetiveNumber4x4",
                "FFTTest#multiplyWithComplexTest",
                "FFTTest#multiplyWithScalarTest"
            ],
            "children": []
        },
        "GCDTest#test6": {
            "parameters": {},
            "name": "GCDTest#test6",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GCDRecursion#gcd",
                "GCD#gcd"
            ]
        },
        "MonteCarloTreeSearch#addChildNodes": {
            "parameters": {
                "node": "Node",
                "childCount": "int"
            },
            "name": "MonteCarloTreeSearch#addChildNodes",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MonteCarloTreeSearch#monteCarloTreeSearch"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "GCDTest#test5": {
            "parameters": {},
            "name": "GCDTest#test5",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GCDRecursion#gcd",
                "GCD#gcd"
            ]
        },
        "AbsoluteMaxTest#testGetMaxValue": {
            "parameters": {},
            "name": "AbsoluteMaxTest#testGetMaxValue",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AbsoluteMax#getMaxValue"
            ]
        },
        "GCDTest#test4": {
            "parameters": {},
            "name": "GCDTest#test4",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GCDRecursion#gcd",
                "GCD#gcd"
            ]
        },
        "MergeSortRecursive#mergeSort": {
            "parameters": {},
            "name": "MergeSortRecursive#mergeSort",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "App#main",
                "MergeSortRecursiveTest#testMergeSortRecursiveCase1",
                "MergeSortRecursiveTest#testMergeSortRecursiveCase2"
            ],
            "children": [
                "MergeSort#merge",
                "StrandSort#merge",
                "MergeSortRecursive#merge",
                "TimSort#merge",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "LeftistHeap#merge"
            ]
        },
        "GCDTest#test3": {
            "parameters": {},
            "name": "GCDTest#test3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GCDRecursion#gcd",
                "GCD#gcd"
            ]
        },
        "GCDTest#test7": {
            "parameters": {},
            "name": "GCDTest#test7",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GCDRecursion#gcd",
                "GCD#gcd"
            ]
        },
        "Map#size": {
            "parameters": {},
            "name": "Map#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": []
        },
        "MinPriorityQueue#peek": {
            "parameters": {},
            "name": "MinPriorityQueue#peek",
            "recursive": "false",
            "inComing": 76,
            "outGoing": 0,
            "numberOfCalls": 76,
            "parents": [
                "CircularQueue#main",
                "GenericArrayListQueue#main",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#postorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "VerticalOrderTraversal#verticalTraversal",
                "FordFulkerson#networkFlow",
                "BufferedReader#peek",
                "MedianOfRunningArray#median",
                "Huffman#main",
                "QueueWithStack#peekFront",
                "QueueWithStack#peekBack",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StrandSort#merge",
                "LinkedQueueTest#testQue",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BufferedReaderTest#testPeeks",
                "BufferedReaderTest#testMixes",
                "BufferedReaderTest#testBlockPractical"
            ],
            "children": []
        },
        "Graph#printAllPaths": {
            "parameters": {},
            "name": "Graph#printAllPaths",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BellmanFord#printPath"
            ]
        },
        "HashMapCuckooHashingTest#containsKey": {
            "parameters": {},
            "name": "HashMapCuckooHashingTest#containsKey",
            "recursive": "false",
            "inComing": 28,
            "outGoing": 0,
            "numberOfCalls": 28,
            "parents": [
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "AdjacencyList#addEdge",
                "TopologicalSort#calculateInDegree",
                "Intersection#intersection",
                "VerticalOrderTraversal#verticalTraversal",
                "Fibonacci#fibMemo",
                "Mode#mode",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "CountWords#getDictionary",
                "CheckAnagrams#isAnagrams",
                "Isomorphic#checkStrings",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString"
            ],
            "children": [
                "HashMapCuckooHashing#insertKey2HashTable",
                "HashMapCuckooHashing#checkTableContainsKey"
            ]
        },
        "SimpleSubCipher#encode": {
            "parameters": {
                "cipherSmall": "String",
                "message": "String"
            },
            "name": "SimpleSubCipher#encode",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "CaesarTest#caesarEncryptTest",
                "SimpleSubCipherTest#simpleSubCipherEncryptTest",
                "SimpleSubstitutionCipherTest#testEncode",
                "SimpleSubstitutionCipherTest#testIsTextTheSameAfterEncodeAndDecode",
                "zigZagPatternTest#palindrome"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "CircularBuffer#put",
                "LFUCache#put",
                "UpperTest#toUpperCase",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "Deques#toString",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "HeapElement#toString",
                "Upper#toUpperCase",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "DynamicArray#toString",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Lower#toLowerCase",
                "GenericHeap#get",
                "Vector2#toString",
                "LowerTest#toLowerCase",
                "CursorLinkedList#append",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "Queue#toString",
                "CircleLinkedList#append",
                "LRUCache#put",
                "LinearProbingHashMap#put",
                "LinkedQueue#toString"
            ]
        },
        "Vertex#addAdjacentVertex": {
            "parameters": {
                "to": "Vertex"
            },
            "name": "Vertex#addAdjacentVertex",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "TreeSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "TreeSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "SkipListTest#get": {
            "parameters": {},
            "name": "SkipListTest#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SkipListTest#print",
                "DynamicArray#get",
                "dijkstras#print",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "MinPriorityQueue#print",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "BSTRecursive#add",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "NodeStack#print",
                "Complex#add",
                "SortUtils#print",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "RadixSort#print",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "SimpleTreeNode#getRightNode": {
            "parameters": {},
            "name": "SimpleTreeNode#getRightNode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "WorstFitCPU#findWorstFit": {
            "parameters": {
                "processSize": "int",
                "blockSizes": "int[]"
            },
            "name": "WorstFitCPU#findWorstFit",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "WorstFitCPU#fitProcess"
            ],
            "children": []
        },
        "CursorLinkedList#removeByIndex": {
            "parameters": {
                "index": "int"
            },
            "name": "CursorLinkedList#removeByIndex",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "PriorityQueue#remove",
                "CircularBuffer#get",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "SkipList#get",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#remove",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "QueueWithStack#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove"
            ]
        },
        "BSTRecursiveGeneric#remove": {
            "parameters": {
                "data": "T"
            },
            "name": "BSTRecursiveGeneric#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": [
                "Map#delete",
                "LinkOperations#delete",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "FibonacciHeap#delete",
                "SinglyLinkedList#delete",
                "RedBlackBST#delete",
                "KDTreeTest#delete",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "BSTRecursiveGeneric#delete",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "KaprekarNumbers#kaprekarNumberInRange": {
            "parameters": {
                "start": "long",
                "end": "long"
            },
            "name": "KaprekarNumbers#kaprekarNumberInRange",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "KaprekarNumbersTest#testForRangeOfNumber"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "KaprekarNumbers#isKaprekarNumber",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "LargestRectangle#largestRectanglehistogram": {
            "parameters": {
                "heights": "int[]"
            },
            "name": "LargestRectangle#largestRectanglehistogram",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "LargestRectangle#main"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DyanamicProgrammingKnapsack#max",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "SinglyLinkedList#toString",
                "LinkedListStack#push",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "LeftistHeap#isEmpty",
                "Deques#toString",
                "QueueWithStack#isEmpty",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "HeapElement#toString",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "StackArrayList#push",
                "DynamicArray#toString",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "NodeStack#pop",
                "FindMaxRecursion#max",
                "CircleLinkedList#toString",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "MaxValue#max",
                "HashMapCuckooHashing#isEmpty",
                "BruteForceKnapsack#max",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "NodeStack#push",
                "GenericTree#max",
                "LinkedListStack#pop",
                "BucketSort#max",
                "LFSR#toString",
                "CircularQueue#isEmpty",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "NodeStack#peek",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "LinkedQueue#toString",
                "PriorityQueue#isEmpty"
            ]
        },
        "DecimalToHexaDecimal#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "DecimalToHexaDecimal#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DecimalToHexaDecimal#decToHex"
            ]
        },
        "SortUtils#flip": {
            "parameters": {
                "array": "T[]",
                "left": "int",
                "right": "int"
            },
            "name": "SortUtils#flip",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PancakeSort#sort"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "Kosaraju#createTransposeMatrix": {
            "parameters": {
                "v": "int",
                "list": "List\u003cList\u003cInteger\u003e\u003e"
            },
            "name": "Kosaraju#createTransposeMatrix",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Kosaraju#kosaraju"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "BSTRecursive#add",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "LinkListSortTest#testForFourElements": {
            "parameters": {},
            "name": "LinkListSortTest#testForFourElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "MaxHeap#swap": {
            "parameters": {
                "index1": "int",
                "index2": "int"
            },
            "name": "MaxHeap#swap",
            "recursive": "false",
            "inComing": 55,
            "outGoing": 0,
            "numberOfCalls": 55,
            "parents": [
                "Permutation#backtracking",
                "GenericHeap#upHeapify",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "FFT#fftBitReversal",
                "FindKthNumber#partition",
                "BFPRT#partition",
                "BFPRT#insertionSort",
                "QuickSelect#partition",
                "QuickSelect#pivot",
                "BogoSort#nextPermutation",
                "BubbleSort#sort",
                "BubbleSortRecursion#bubbleSort",
                "CircleSort#doSort",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "DualPivotQuickSort#partition",
                "DutchNationalFlagSort#dutch_national_flag_sort",
                "GnomeSort#sort",
                "HeapSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "IntrospectiveSort#partition",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify",
                "OddEvenSort#oddEvenSort",
                "QuickSort#randomPartition",
                "QuickSort#partition",
                "SortUtils#flip",
                "WiggleSort#triColorSort"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "Volume#volumePyramid": {
            "parameters": {
                "baseArea": "double",
                "height": "double"
            },
            "name": "Volume#volumePyramid",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "VolumeTest#volume"
            ],
            "children": []
        },
        "BufferedReader#peek": {
            "parameters": {
                "n": "int"
            },
            "name": "BufferedReader#peek",
            "recursive": "false",
            "inComing": 76,
            "outGoing": 0,
            "numberOfCalls": 76,
            "parents": [
                "CircularQueue#main",
                "GenericArrayListQueue#main",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#postorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "VerticalOrderTraversal#verticalTraversal",
                "FordFulkerson#networkFlow",
                "BufferedReader#peek",
                "MedianOfRunningArray#median",
                "Huffman#main",
                "QueueWithStack#peekFront",
                "QueueWithStack#peekBack",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StrandSort#merge",
                "LinkedQueueTest#testQue",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BufferedReaderTest#testPeeks",
                "BufferedReaderTest#testMixes",
                "BufferedReaderTest#testBlockPractical"
            ],
            "children": [
                "StackArrayList#peek",
                "BufferedReader#available",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "CircularQueue#peek",
                "BufferedReader#pushRefreshData",
                "PriorityQueue#peek",
                "StackArray#peek",
                "NodeStack#peek",
                "LinkedListStack#peek"
            ]
        },
        "MazeRecursion#setWay": {
            "parameters": {
                "i": "int",
                "j": "int",
                "map": "int[][]"
            },
            "name": "MazeRecursion#setWay",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "MazeRecursion#mazeRecursion",
                "MazeRecursion#setWay",
                "MazeRecursionTest#testMaze"
            ],
            "children": [
                "MazeRecursion#setWay"
            ]
        },
        "CRCAlgorithm#getCorrectMess": {
            "parameters": {},
            "name": "CRCAlgorithm#getCorrectMess",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CRCAlgorithmTest#test2"
            ],
            "children": []
        },
        "SimpleSubCipherTest#simpleSubCipherEncryptTest": {
            "parameters": {},
            "name": "SimpleSubCipherTest#simpleSubCipherEncryptTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "zigZagPattern#encode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubCipher#encode",
                "Caesar#encode"
            ]
        },
        "PerlinNoise#interpolate": {
            "parameters": {
                "a": "float",
                "b": "float",
                "alpha": "float"
            },
            "name": "PerlinNoise#interpolate",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "PerlinNoise#generatePerlinNoiseLayer"
            ],
            "children": []
        },
        "CursorLinkedList#remove": {
            "parameters": {
                "element": "T"
            },
            "name": "CursorLinkedList#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": [
                "CursorLinkedList#free",
                "HeapElement#equals"
            ]
        },
        "TreeSort#sort": {
            "parameters": {
                "unsortedList": "List\u003cT\u003e"
            },
            "name": "TreeSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "TreeSort#doTreeSortList",
                "TreeSort#doTreeSortArray"
            ]
        },
        "DistanceFormulaTest#manhattantest2": {
            "parameters": {},
            "name": "DistanceFormulaTest#manhattantest2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DistanceFormula#manhattanDistance"
            ]
        },
        "Kosaraju#sortEdgesByLowestFinishTime": {
            "parameters": {
                "v": "int",
                "list": "List\u003cList\u003cInteger\u003e\u003e"
            },
            "name": "Kosaraju#sortEdgesByLowestFinishTime",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Kosaraju#kosaraju"
            ],
            "children": [
                "Kosaraju#dfs",
                "LCA#dfs",
                "Cycle#dfs"
            ]
        },
        "BogoSortTest#bogoSortSingleIntegerArray": {
            "parameters": {},
            "name": "BogoSortTest#bogoSortSingleIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "Factorial#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Factorial#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Combinations#factorial",
                "Factorial#factorial",
                "FactorialRecursion#factorial"
            ]
        },
        "CheckIfBinaryTreeBalanced#buildBalancedTree": {
            "parameters": {},
            "name": "CheckIfBinaryTreeBalanced#buildBalancedTree",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CheckIfBinaryTreeBalanced#main"
            ],
            "children": []
        },
        "LongestCommonSubsequence#lcsString": {
            "parameters": {
                "str1": "String",
                "str2": "String",
                "lcsMatrix": "int[][]"
            },
            "name": "LongestCommonSubsequence#lcsString",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LongestCommonSubsequence#getLCS"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "ReverseString#reverse",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Rotation#reverse",
                "Vector2#toString",
                "PalindromePrime#reverse",
                "CursorLinkedList#append",
                "LinkOperations#reverse",
                "LFSR#toString",
                "ReverseStringRecursive#reverse",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LowestBasePalindrome#reverse",
                "LinkedQueue#toString"
            ]
        },
        "Damm#checkInput": {
            "parameters": {
                "input": "String"
            },
            "name": "Damm#checkInput",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Damm#dammCheck",
                "Damm#addDammChecksum",
                "Verhoeff#verhoeffCheck",
                "Verhoeff#addVerhoeffChecksum"
            ],
            "children": []
        },
        "CombinationTest#testNoElement": {
            "parameters": {},
            "name": "CombinationTest#testNoElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ArrayCombination#combination",
                "Combination#combination"
            ]
        },
        "CircularBufferTest#getSortedListFrom": {
            "parameters": {
                "atomicArray": "AtomicIntegerArray"
            },
            "name": "CircularBufferTest#getSortedListFrom",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CircularBufferTest#concurrentTest"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "TopologicalSort#sort",
                "MRUCache#get",
                "LFSR#get",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "Trie#add",
                "GnomeSort#sort",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DynamicArray#get",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "BSTRecursiveGeneric#add",
                "SlowSort#sort",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "GenericHashMapUsingArrayList#get",
                "PancakeSort#sort",
                "SkipListTest#get",
                "TreeSort#sort",
                "SkipList#get",
                "CircularBufferTest#get",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "GenericHeap#get",
                "TimSort#sort",
                "QuickSort#sort",
                "DynamicArray#add",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "BSTRecursive#add",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "LinearProbingHashMap#get",
                "StoogeSort#sort",
                "MatrixUtil#add",
                "LRUCache#get",
                "PigeonholeSort#sort",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "BitonicSort#sort",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "LowerBound#search": {
            "parameters": {
                "array": "T[]",
                "left": "int",
                "right": "int",
                "key": "T"
            },
            "name": "LowerBound#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "EggDroppingTest#hasSingleEggMultipleFloor": {
            "parameters": {},
            "name": "EggDroppingTest#hasSingleEggMultipleFloor",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "EggDropping#minTrials"
            ]
        },
        "FirstFitCPUTest#testFitForUseOfOneBlock": {
            "parameters": {},
            "name": "FirstFitCPUTest#testFitForUseOfOneBlock",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "AnyBaseToDecimal#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "AnyBaseToDecimal#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AnyBaseToDecimal#convertToDecimal"
            ]
        },
        "sortOrderAgnosticBinarySearchTest#testDescending": {
            "parameters": {},
            "name": "sortOrderAgnosticBinarySearchTest#testDescending",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "AliquotSum#getAliquotSum": {
            "parameters": {
                "n": "int"
            },
            "name": "AliquotSum#getAliquotSum",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "AliquotSumTest#testGetMaxValue"
            ],
            "children": []
        },
        "HashMapCuckooHashingTest#insertKey": {
            "parameters": {},
            "name": "HashMapCuckooHashingTest#insertKey",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "Main#BuildTree",
                "NRKTree#insertKey"
            ],
            "children": [
                "HashMapCuckooHashing#getNumberOfKeysInTable",
                "HashMapCuckooHashing#insertKey2HashTable"
            ]
        },
        "RedBlackBST#insert": {
            "parameters": {
                "node": "Node"
            },
            "name": "RedBlackBST#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "RedBlackBST#fixTree"
            ]
        },
        "HexaDecimalToBinary#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "HexaDecimalToBinary#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HexaDecimalToBinary#convert",
                "DecimalToAnyUsingStack#convert"
            ]
        },
        "GenericHashMapUsingArrayList#size": {
            "parameters": {},
            "name": "GenericHashMapUsingArrayList#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": []
        },
        "BestFitCPUTest#testFitForUseOfOneBlock": {
            "parameters": {},
            "name": "BestFitCPUTest#testFitForUseOfOneBlock",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "DutchNationalFlagSortTest#DNFSTestEvenStrings": {
            "parameters": {},
            "name": "DutchNationalFlagSortTest#DNFSTestEvenStrings",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "ArmstrongTest#testIsArmstrong": {
            "parameters": {},
            "name": "ArmstrongTest#testIsArmstrong",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MatrixUtil#assertThat",
                "Armstrong#isArmstrong",
                "FibonacciJavaStreams#assertThat",
                "DepthFirstSearch#assertThat"
            ]
        },
        "DigitalRootTest#testDigitalroot": {
            "parameters": {},
            "name": "DigitalRootTest#testDigitalroot",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DigitalRoot#digitalRoot"
            ]
        },
        "HamiltonianCycle#findHamiltonianCycle": {
            "parameters": {
                "graph": "int[][]"
            },
            "name": "HamiltonianCycle#findHamiltonianCycle",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "HamiltonianCycleTest#testFindHamiltonianCycleShouldReturnHamiltonianCycle",
                "HamiltonianCycleTest#testFindHamiltonianCycleShouldReturnInfinityArray"
            ],
            "children": [
                "HamiltonianCycle#isPathFound"
            ]
        },
        "AdjacencyMatrixGraph#addEdge": {
            "parameters": {
                "from": "int",
                "to": "int"
            },
            "name": "AdjacencyMatrixGraph#addEdge",
            "recursive": "false",
            "inComing": 73,
            "outGoing": 0,
            "numberOfCalls": 73,
            "parents": [
                "AllPathsFromSourceToTarget#allPathsFromSourceToTarget",
                "A_Star#initializeGraph",
                "ConnectedComponent#main",
                "Graphs#main",
                "KahnsAlgorithm#main",
                "Kruskal#main",
                "Kruskal#kruskal",
                "MatrixGraphs#main",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest"
            ],
            "children": [
                "AdjacencyMatrixGraph#adjacencyOfEdgeDoesExist",
                "AdjacencyMatrixGraph#adjacency",
                "AdjacencyMatrixGraph#numberOfEdges",
                "AdjacencyMatrixGraph#setNumberOfEdges",
                "AdjacencyMatrixGraph#vertexDoesExist"
            ]
        },
        "StackArrayList#push": {
            "parameters": {
                "value": "int"
            },
            "name": "StackArrayList#push",
            "recursive": "false",
            "inComing": 58,
            "outGoing": 0,
            "numberOfCalls": 58,
            "parents": [
                "Kosaraju#dfs",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#push",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "InorderTraversal#iterativeInorder",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PalindromeSinglyLinkedList#isPalindrome",
                "QueueWithStack#insert",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StackPostfixNotation#postfixEvaluate"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "IntrospectiveSortTest#StrandSortDuplicateTest": {
            "parameters": {},
            "name": "IntrospectiveSortTest#StrandSortDuplicateTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "Permutation#swap": {
            "parameters": {
                "arr": "T[]",
                "a": "int",
                "b": "int"
            },
            "name": "Permutation#swap",
            "recursive": "false",
            "inComing": 55,
            "outGoing": 0,
            "numberOfCalls": 55,
            "parents": [
                "Permutation#backtracking",
                "GenericHeap#upHeapify",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "FFT#fftBitReversal",
                "FindKthNumber#partition",
                "BFPRT#partition",
                "BFPRT#insertionSort",
                "QuickSelect#partition",
                "QuickSelect#pivot",
                "BogoSort#nextPermutation",
                "BubbleSort#sort",
                "BubbleSortRecursion#bubbleSort",
                "CircleSort#doSort",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "DualPivotQuickSort#partition",
                "DutchNationalFlagSort#dutch_national_flag_sort",
                "GnomeSort#sort",
                "HeapSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "IntrospectiveSort#partition",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify",
                "OddEvenSort#oddEvenSort",
                "QuickSort#randomPartition",
                "QuickSort#partition",
                "SortUtils#flip",
                "WiggleSort#triColorSort"
            ],
            "children": []
        },
        "FindKthNumber#findKthMax": {
            "parameters": {
                "k": "int",
                "nums": "int[]"
            },
            "name": "FindKthNumber#findKthMax",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "FindKthNumber#main"
            ],
            "children": [
                "QuickSelect#partition",
                "DualPivotQuickSort#partition",
                "IntrospectiveSort#partition",
                "FindKthNumber#partition",
                "QuickSort#partition",
                "BFPRT#partition"
            ]
        },
        "SortUtils#swap": {
            "parameters": {
                "array": "T[]",
                "idx": "int",
                "idy": "int"
            },
            "name": "SortUtils#swap",
            "recursive": "false",
            "inComing": 55,
            "outGoing": 0,
            "numberOfCalls": 55,
            "parents": [
                "Permutation#backtracking",
                "GenericHeap#upHeapify",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "FFT#fftBitReversal",
                "FindKthNumber#partition",
                "BFPRT#partition",
                "BFPRT#insertionSort",
                "QuickSelect#partition",
                "QuickSelect#pivot",
                "BogoSort#nextPermutation",
                "BubbleSort#sort",
                "BubbleSortRecursion#bubbleSort",
                "CircleSort#doSort",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "DualPivotQuickSort#partition",
                "DutchNationalFlagSort#dutch_national_flag_sort",
                "GnomeSort#sort",
                "HeapSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "IntrospectiveSort#partition",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify",
                "OddEvenSort#oddEvenSort",
                "QuickSort#randomPartition",
                "QuickSort#partition",
                "SortUtils#flip",
                "WiggleSort#triColorSort"
            ],
            "children": []
        },
        "countSetBitsTest#testSetBits": {
            "parameters": {},
            "name": "countSetBitsTest#testSetBits",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "countSetBits#countsetBits"
            ]
        },
        "ThreeSumProblem#BruteForce": {
            "parameters": {
                "nums": "int[]",
                "target": "int"
            },
            "name": "ThreeSumProblem#BruteForce",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "ThreeSumProblem#main",
                "TwoSumProblem#main"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "Trie#add",
                "GnomeSort#sort",
                "Vector2#add",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "BSTRecursiveGeneric#add",
                "SlowSort#sort",
                "StrassenMatrixMultiplication#add",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "DynamicArray#add",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "BSTRecursive#add",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "MatrixUtil#add",
                "PigeonholeSort#sort",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "BitonicSort#sort",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "NextFitCPUTest#testFitForEqualProcecesses": {
            "parameters": {},
            "name": "NextFitCPUTest#testFitForEqualProcecesses",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "SortUtils#less": {
            "parameters": {
                "v": "T",
                "w": "T"
            },
            "name": "SortUtils#less",
            "recursive": "false",
            "inComing": 24,
            "outGoing": 0,
            "numberOfCalls": 24,
            "parents": [
                "BogoSort#isSorted",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "CycleSort#sort",
                "GnomeSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "MergeSort#merge",
                "PancakeSort#sort",
                "QuickSort#partition",
                "ShellSort#sort",
                "SimpleSort#sort",
                "SlowSort#sort",
                "SortUtils#isSorted",
                "StoogeSort#sort",
                "SwapSort#getSmallerElementCount",
                "TimSort#merge"
            ],
            "children": []
        },
        "BeadSortTest#bogoSortDuplicateIntegerArray": {
            "parameters": {},
            "name": "BeadSortTest#bogoSortDuplicateIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "Alphabetical#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Alphabetical#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Alphabetical#isAlphabetical",
                "AlphabeticalTest#isAlphabetical",
                "AnagramsTest#isAlphabetical"
            ]
        },
        "ShortestSuperSequence#lcs": {
            "parameters": {
                "X": "String",
                "Y": "String",
                "m": "int",
                "n": "int"
            },
            "name": "ShortestSuperSequence#lcs",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ShortestSuperSequence#shortestSuperSequence"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "OctalToHexadecimal#octToDec": {
            "parameters": {
                "s": "String"
            },
            "name": "OctalToHexadecimal#octToDec",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "OctalToHexadecimal#main",
                "OctalToHexadecimalTest#testOctalToHexadecimal"
            ],
            "children": []
        },
        "LinkOperations#insertElementByIndex": {
            "parameters": {
                "x": "int",
                "index": "int",
                "doublyLinkedList": "DoublyLinkedList"
            },
            "name": "LinkOperations#insertElementByIndex",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Link#main"
            ],
            "children": [
                "LinkOperations#insertTail",
                "SinglyLinkedList#insertHead",
                "LinkOperations#insertHead"
            ]
        },
        "Pow#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Pow#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "ValidBSTOrNotTest#testRootNull": {
            "parameters": {},
            "name": "ValidBSTOrNotTest#testRootNull",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ValidBSTOrNot#isBST"
            ]
        },
        "BrianKernighanAlgorithm#countSetBits": {
            "parameters": {
                "num": "int"
            },
            "name": "BrianKernighanAlgorithm#countSetBits",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BrianKernighanAlgorithm#main"
            ],
            "children": []
        },
        "AdjacencyMatrixGraph#setNumberOfVertices": {
            "parameters": {
                "newNumberOfVertices": "int"
            },
            "name": "AdjacencyMatrixGraph#setNumberOfVertices",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "null#null"
            ],
            "children": []
        },
        "CRC16#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CRC16#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CRC16#crc16"
            ]
        },
        "MonteCarloTreeSearch#getWinnerNode": {
            "parameters": {
                "rootNode": "Node"
            },
            "name": "MonteCarloTreeSearch#getWinnerNode",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MonteCarloTreeSearch#monteCarloTreeSearch"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "LongestValidParentheses#getLongestValidParentheses": {
            "parameters": {
                "s": "String"
            },
            "name": "LongestValidParentheses#getLongestValidParentheses",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "DynamicArray#getSize": {
            "parameters": {},
            "name": "DynamicArray#getSize",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "DynamicArray#main",
                "NodeStack#push",
                "NodeStack#pop",
                "NodeStack#isEmpty",
                "NodeStack#size",
                "StackOfLinkedList#main",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": []
        },
        "Vigenere#decrypt": {
            "parameters": {
                "message": "String",
                "key": "String"
            },
            "name": "Vigenere#decrypt",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HillCipher#hillCipher",
                "BlowfishTest#testDecrypt",
                "PolybiusTest#testDecrypt",
                "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption",
                "RSATest#testRSA",
                "VigenereTest#vigenereDecryptTest"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "UpperTest#toUpperCase",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "Upper#toUpperCase",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Lower#toLowerCase",
                "Vector2#toString",
                "LowerTest#toLowerCase",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "TurkishToLatinConversion#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "TurkishToLatinConversion#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "BufferedReader#close",
                "TurkishToLatinConversion#convertTurkishToLatin"
            ]
        },
        "Vigenere#encrypt": {
            "parameters": {
                "message": "String",
                "key": "String"
            },
            "name": "Vigenere#encrypt",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HillCipher#hillCipher",
                "BlowfishTest#testEncrypt",
                "PolybiusTest#testEncrypt",
                "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption",
                "RSATest#testRSA",
                "VigenereTest#vigenereEncryptTest"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "UpperTest#toUpperCase",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "Upper#toUpperCase",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Lower#toLowerCase",
                "Vector2#toString",
                "LowerTest#toLowerCase",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "SimpleSubstitutionCipherTest#testIsTextTheSameAfterEncodeAndDecode": {
            "parameters": {},
            "name": "SimpleSubstitutionCipherTest#testIsTextTheSameAfterEncodeAndDecode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "zigZagPattern#encode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubCipher#encode",
                "Caesar#encode",
                "Caesar#decode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#decode"
            ]
        },
        "FastInverseSqrtTests#testForSixth": {
            "parameters": {},
            "name": "FastInverseSqrtTests#testForSixth",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FastInverseSqrt#inverseSqrt"
            ]
        },
        "DyanamicProgrammingKnapsack#knapSack": {
            "parameters": {
                "val": "int[]",
                "W": "int",
                "wt": "int[]",
                "n": "int"
            },
            "name": "DyanamicProgrammingKnapsack#knapSack",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "BruteForceKnapsack#knapSack",
                "BruteForceKnapsack#main",
                "DyanamicProgrammingKnapsack#main",
                "Knapsack#main",
                "KnapsackMemoizationTest#Test1",
                "KnapsackMemoizationTest#Test2",
                "KnapsackMemoizationTest#Test3"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "FenwickTree#update": {
            "parameters": {
                "val": "int",
                "i": "int"
            },
            "name": "FenwickTree#update",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "GuassLegendre#pi"
            ],
            "children": []
        },
        "RangeInSortedArray#getCountLessThan": {
            "parameters": {
                "nums": "int[]",
                "key": "int"
            },
            "name": "RangeInSortedArray#getCountLessThan",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RangeInSortedArray#getLessThan"
            ]
        },
        "LinkedQueue#iterator": {
            "parameters": {},
            "name": "LinkedQueue#iterator",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "Bag#contains",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "SkylineProblem#print",
                "StrandSort#strandSort",
                "ArrayCombinationTest#testLengthOne",
                "CombinationTest#testLengthOne",
                "MapTest#keysTest"
            ],
            "children": []
        },
        "GenericHashMapUsingArray#hashFunction": {
            "parameters": {
                "key": "K"
            },
            "name": "GenericHashMapUsingArray#hashFunction",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArray#get"
            ],
            "children": [
                "HeapElement#hashCode",
                "FFTTest#abs",
                "Complex#abs"
            ]
        },
        "FibonacciHeap#totalCuts": {
            "parameters": {},
            "name": "FibonacciHeap#totalCuts",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "OddEvenSort#oddEvenSort": {
            "parameters": {
                "arr": "int[]"
            },
            "name": "OddEvenSort#oddEvenSort",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "OddEvenSort#main",
                "OddEvenSortTest#oddEvenSortEmptyArray",
                "OddEvenSortTest#oddEvenSortNaturalNumberArray",
                "OddEvenSortTest#oddEvenSortIntegerArray"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "FloodFillTest#testForEmptyImage": {
            "parameters": {},
            "name": "FloodFillTest#testForEmptyImage",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FloodFill#floodFill"
            ]
        },
        "DynamicArray#toString": {
            "parameters": {},
            "name": "DynamicArray#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "DynamicArray#stream",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "ValidBSTOrNot#isBST": {
            "parameters": {
                "root": "BinaryTree.Node"
            },
            "name": "ValidBSTOrNot#isBST",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "ValidBSTOrNotTest#testRootNull",
                "ValidBSTOrNotTest#testOneNode",
                "ValidBSTOrNotTest#testBinaryTreeIsBST",
                "ValidBSTOrNotTest#testBinaryTreeWithDuplicatedNodesIsNotBST",
                "ValidBSTOrNotTest#testBinaryTreeIsNotBST"
            ],
            "children": [
                "ValidBSTOrNot#isBSTUtil"
            ]
        },
        "RabinKarp#searchPat": {
            "parameters": {
                "q": "int",
                "pattern": "String",
                "text": "String"
            },
            "name": "RabinKarp#searchPat",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "RabinKarp#main",
                "StringMatchFiniteAutomata#main"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "AmicableNumberTest#testAmicableNumber": {
            "parameters": {},
            "name": "AmicableNumberTest#testAmicableNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MatrixUtil#assertThat",
                "FibonacciJavaStreams#assertThat",
                "DepthFirstSearch#assertThat",
                "AmicableNumber#isAmicableNumber"
            ]
        },
        "Caesar#encode": {
            "parameters": {
                "shift": "int",
                "message": "String"
            },
            "name": "Caesar#encode",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "CaesarTest#caesarEncryptTest",
                "SimpleSubCipherTest#simpleSubCipherEncryptTest",
                "SimpleSubstitutionCipherTest#testEncode",
                "SimpleSubstitutionCipherTest#testIsTextTheSameAfterEncodeAndDecode",
                "zigZagPatternTest#palindrome"
            ],
            "children": [
                "Caesar#isCapitalLatinLetter",
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Caesar#isSmallLatinLetter",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "A5Cipher#encrypt": {
            "parameters": {
                "plainTextBits": "BitSet"
            },
            "name": "A5Cipher#encrypt",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HillCipher#hillCipher",
                "BlowfishTest#testEncrypt",
                "PolybiusTest#testEncrypt",
                "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption",
                "RSATest#testRSA",
                "VigenereTest#vigenereEncryptTest"
            ],
            "children": [
                "A5KeyStreamGenerator#getNextKeyStream",
                "Blowfish#xor"
            ]
        },
        "HammingDistanceTest#testNotEqualStringLengths": {
            "parameters": {},
            "name": "HammingDistanceTest#testNotEqualStringLengths",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HammingDistance#calculateHammingDistance"
            ]
        },
        "AdjacencyMatrixGraph#setAdjacency": {
            "parameters": {
                "newAdjacency": "int[][]"
            },
            "name": "AdjacencyMatrixGraph#setAdjacency",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "null#null"
            ],
            "children": []
        },
        "FFTTest#getRealtest": {
            "parameters": {},
            "name": "FFTTest#getRealtest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Complex#getReal"
            ]
        },
        "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustReturnPositiveOne": {
            "parameters": {},
            "name": "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustReturnPositiveOne",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LiouvilleLambdaFunction#liouvilleLambda"
            ]
        },
        "EulerMethod#eulerFull": {
            "parameters": {
                "xEnd": "double",
                "xStart": "double",
                "stepSize": "double",
                "yStart": "double",
                "differentialEquation": "BiFunction\u003cDouble,Double,Double\u003e"
            },
            "name": "EulerMethod#eulerFull",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "EulerMethod#main"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "EulerMethod#eulerStep",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "BSTRecursive#delete": {
            "parameters": {
                "node": "Node",
                "data": "int"
            },
            "name": "BSTRecursive#delete",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "HashMap#deleteHash",
                "LinkedList#delete",
                "MinPriorityQueue#heapSort",
                "Link#main",
                "LinkOperations#removeDuplicates",
                "SinglyLinkedList#main",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "BSTRecursive#remove",
                "BSTRecursiveGeneric#delete",
                "BSTRecursiveGeneric#remove",
                "RedBlackBST#deleteDemo",
                "TrieImp#main",
                "MapTest#deleteTest",
                "MapTest#sizeTest",
                "KDTreeTest#delete"
            ],
            "children": [
                "Map#delete",
                "LinkOperations#delete",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "FibonacciHeap#delete",
                "SinglyLinkedList#delete",
                "RedBlackBST#delete",
                "KDTreeTest#delete",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "BSTRecursiveGeneric#delete",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "CircularBufferTest#generateInt": {
            "parameters": {},
            "name": "CircularBufferTest#generateInt",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#isFull",
                "CircularBufferTest#put",
                "InsertionSortTest#testWithRandomArray",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
            ],
            "children": []
        },
        "OrderAgnosticBinarySearchTest#RightHalfDescOrder": {
            "parameters": {},
            "name": "OrderAgnosticBinarySearchTest#RightHalfDescOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OrderAgnosticBinarySearch#BinSearchAlgo"
            ]
        },
        "CheckTreeIsSymmetricTest#testRootNull": {
            "parameters": {},
            "name": "CheckTreeIsSymmetricTest#testRootNull",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CheckTreeIsSymmetric#isSymmetric"
            ]
        },
        "ADTFractionTest#testConstructorWithDenominatorEqualToZero": {
            "parameters": {},
            "name": "ADTFractionTest#testConstructorWithDenominatorEqualToZero",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "SkipList#get": {
            "parameters": {
                "index": "int"
            },
            "name": "SkipList#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "DynamicArrayIterator#next",
                "ListIterator#next"
            ]
        },
        "Bag#size": {
            "parameters": {},
            "name": "Bag#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": []
        },
        "AbsoluteMax#getMaxValue": {
            "parameters": {
                "numbers": "int"
            },
            "name": "AbsoluteMax#getMaxValue",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AbsoluteMaxTest#testGetMaxValue",
                "AbsoluteMaxTest#testGetMaxValueWithNoArguments"
            ],
            "children": [
                "DynamicArray#stream",
                "FFTTest#abs",
                "Complex#abs"
            ]
        },
        "Graph#printPath": {
            "parameters": {
                "endName": "String"
            },
            "name": "Graph#printPath",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BellmanFord#printPath",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "GenericHashMapUsingArray#containsKey"
            ]
        },
        "ADTFractionTest#testPlus": {
            "parameters": {},
            "name": "ADTFractionTest#testPlus",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "Vector2#subtract": {
            "parameters": {
                "vector": "Vector2"
            },
            "name": "Vector2#subtract",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "RSA#generateKeys",
                "FFT#fft",
                "FibonacciJavaStreams#calculate",
                "MatrixUtil#main",
                "KochSnowflake#IterationStep",
                "FFTTest#subtractTest"
            ],
            "children": []
        },
        "UpperBound#find": {
            "parameters": {
                "array": "T[]",
                "key": "T"
            },
            "name": "UpperBound#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "AESEncryption#getSecretEncryptionKey": {
            "parameters": {},
            "name": "AESEncryption#getSecretEncryptionKey",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "AESEncryption#main"
            ],
            "children": []
        },
        "KaprekarNumbersTest#testFor2223": {
            "parameters": {},
            "name": "KaprekarNumbersTest#testFor2223",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KaprekarNumbers#isKaprekarNumber"
            ]
        },
        "UpperBound#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "UpperBound#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "RomanNumeralUtil#generate",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "PrimeCheck#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PrimeCheck#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "PrimeCheck#fermatPrimeChecking",
                "MinPriorityQueue#print",
                "BufferedReader#close",
                "PrimeCheck#isPrime",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "LFSR#initialize": {
            "parameters": {
                "frameCounter": "BitSet",
                "sessionKey": "BitSet"
            },
            "name": "LFSR#initialize",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "null#null",
                "A5KeyStreamGenerator#initialize",
                "A5KeyStreamGenerator#reInitialize",
                "A5KeyStreamGenerator#reInitializeRegisters",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LFSRTest#getClockBit"
            ],
            "children": [
                "SinglyLinkedList#clear",
                "LFSR#clock",
                "SinglyLinkedListTest#clear",
                "LinkedQueue#clear",
                "LFSRTest#clock",
                "LeftistHeap#clear",
                "BaseLFSR#clock",
                "CompositeLFSR#clock"
            ]
        },
        "SimpleSortTest#simpleSortNonDuplicateStringArray": {
            "parameters": {},
            "name": "SimpleSortTest#simpleSortNonDuplicateStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "CursorLinkedList#indexOf": {
            "parameters": {
                "element": "T"
            },
            "name": "CursorLinkedList#indexOf",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "ColumnarTranspositionCipher#findElements",
                "HexToOct#hex2decimal",
                "HexaDecimalToDecimal#getHexaToDec",
                "KaprekarNumbers#isKaprekarNumber",
                "CRCAlgorithm#changeMess",
                "RemoveDuplicateFromString#removeDuplicate",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "Pangram#isPangram2"
            ],
            "children": [
                "HeapElement#equals"
            ]
        },
        "AVLTree#searchHelper": {
            "parameters": {
                "root": "Node",
                "key": "int"
            },
            "name": "AVLTree#searchHelper",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AVLTree#search",
                "AVLTree#searchHelper"
            ],
            "children": [
                "AVLTree#searchHelper"
            ]
        },
        "Krishnamurthy#fact": {
            "parameters": {
                "n": "int"
            },
            "name": "Krishnamurthy#fact",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Krishnamurthy#main"
            ],
            "children": []
        },
        "PostOrderTraversalTest#testPostOrder": {
            "parameters": {},
            "name": "PostOrderTraversalTest#testPostOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "PostOrderTraversal#recursivePostOrder",
                "PostOrderTraversal#iterativePostOrder",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "IntrospectiveSortTest#StrandSortNullTest": {
            "parameters": {},
            "name": "IntrospectiveSortTest#StrandSortNullTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "CheckVowels#hasVowels": {
            "parameters": {
                "input": "String"
            },
            "name": "CheckVowels#hasVowels",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "CheckVowelsTest#isVowel"
            ],
            "children": [
                "Map#contains",
                "Bag#contains",
                "Lower#toLowerCase",
                "BloomFilter#contains",
                "LowerTest#toLowerCase",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "SkipList#contains"
            ]
        },
        "CRCAlgorithm#divideMessageWithP": {
            "parameters": {
                "check": "boolean"
            },
            "name": "CRCAlgorithm#divideMessageWithP",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "CRCAlgorithmTest#test1",
                "CRCAlgorithmTest#test2"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SinglyLinkedList#isEmpty",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Map#contains",
                "BSTIterative#remove",
                "Queue#remove",
                "Bag#contains",
                "CircularBufferTest#get",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "GenericHeap#get",
                "SkipList#remove",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "BloomFilter#contains",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "BSTRecursive#add",
                "ListIterator#remove",
                "CircularBufferTest#isEmpty",
                "SkipListTest#contains",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "LinearProbingHashMap#contains",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "SkipList#contains",
                "MatrixUtil#add",
                "LRUCache#get",
                "CircularQueue#isEmpty",
                "LFUCache#get",
                "FibonacciHeap#size",
                "Complex#add",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "DynamicArray#isEmpty",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "FibonacciHeap#meld": {
            "parameters": {
                "heap2": "FibonacciHeap"
            },
            "name": "FibonacciHeap#meld",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciHeap#updateMin",
                "FibonacciHeap#empty",
                "NodeStack#setNext",
                "HeapNode#setNext"
            ]
        },
        "ColorContrastRatio#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ColorContrastRatio#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "VectorCrossProduct#test",
                "CreateBinaryTreeFromInorderPreorder#test",
                "FactorialTest#test",
                "ColorContrastRatio#test",
                "CreateBSTFromSortedArray#test",
                "VampireNumber#test"
            ]
        },
        "SortUtils#greater": {
            "parameters": {
                "v": "T",
                "w": "T"
            },
            "name": "SortUtils#greater",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "BubbleSort#sort",
                "BubbleSortRecursion#bubbleSort"
            ],
            "children": []
        },
        "SumOfDigits#sumOfDigitsRecursion": {
            "parameters": {
                "number": "int"
            },
            "name": "SumOfDigits#sumOfDigitsRecursion",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "SumOfDigits#main",
                "SumOfDigits#sumOfDigitsRecursion",
                "SumOfDigitsTest#testZero",
                "SumOfDigitsTest#testPositive",
                "SumOfDigitsTest#testNegative"
            ],
            "children": [
                "SumOfDigits#sumOfDigitsRecursion"
            ]
        },
        "GenericTree#postorder": {
            "parameters": {
                "node": "Node"
            },
            "name": "GenericTree#postorder",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericTree#postordercall",
                "GenericTree#postorder"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SkipListTest#print",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "dijkstras#print",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "MinPriorityQueue#print",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "GenericTree#postorder",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "BSTRecursiveGeneric#postorder",
                "BSTIterative#postorder",
                "StackArray#size",
                "Deques#size",
                "Sudoku#print",
                "NodeStack#size",
                "SinglyLinkedList#print",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "NodeStack#print",
                "FibonacciHeap#size",
                "SortUtils#print",
                "RadixSort#print",
                "BSTRecursive#postorder"
            ]
        },
        "CreateBinaryTreeFromInorderPreorder#test": {
            "parameters": {
                "inorder": "Integer[]",
                "preorder": "Integer[]"
            },
            "name": "CreateBinaryTreeFromInorderPreorder#test",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "CreateBSTFromSortedArray#main",
                "CreateBinaryTreeFromInorderPreorder#main",
                "VampireNumber#main",
                "VectorCrossProduct#main",
                "ColorContrastRatio#main"
            ],
            "children": [
                "TreeTestUtils#createTree",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "BSTRecursiveGeneric#inOrder",
                "GenericHashMapUsingArray#put",
                "BSTRecursive#inOrder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#postOrder",
                "DynamicArray#put",
                "BSTRecursive#preOrder",
                "CircularBufferTest#put",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "BSTRecursive#postOrder",
                "MRUCache#put",
                "Map#put",
                "TreeRandomNode#inOrder",
                "LazySegmentTree#getRoot",
                "LRUCache#put",
                "LinearProbingHashMap#put",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "MapTest#getMap": {
            "parameters": {},
            "name": "MapTest#getMap",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "MapTest#putTest",
                "MapTest#getTest",
                "MapTest#deleteTest",
                "MapTest#containsTest",
                "MapTest#sizeTest",
                "MapTest#keysTest",
                "MapTest#hashTest"
            ],
            "children": []
        },
        "ArrayCombination#combination": {
            "parameters": {
                "k": "int",
                "n": "int"
            },
            "name": "ArrayCombination#combination",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "ArrayCombination#combination",
                "ArrayCombinationTest#testNBeingZeroOrLess",
                "ArrayCombinationTest#testNoLengthElement",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testNoElement",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo"
            ],
            "children": [
                "ArrayCombination#combination",
                "Combination#combination"
            ]
        },
        "FFTTest#addFalseTest": {
            "parameters": {},
            "name": "FFTTest#addFalseTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "Complex#getReal",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "TestSearchInARowAndColWiseSortedMatrix#notFound": {
            "parameters": {},
            "name": "TestSearchInARowAndColWiseSortedMatrix#notFound",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "LongDivision#divide": {
            "parameters": {
                "divisor": "int",
                "dividend": "int"
            },
            "name": "LongDivision#divide",
            "recursive": "false",
            "inComing": 13,
            "outGoing": 0,
            "numberOfCalls": 13,
            "parents": [
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FFTTest#divideWithComplexTest",
                "FFTTest#divideWithScalarTest",
                "LongDivisionTest#testOne",
                "LongDivisionTest#testTwo",
                "LongDivisionTest#testThree",
                "LongDivisionTest#testNegativeDividend",
                "LongDivisionTest#testDividendLessThanDivisor",
                "LongDivisionTest#testDividendIsZero",
                "LongDivisionTest#testDivisionByZero"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "ParseInteger#parseInt",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "Task2#task": {
            "parameters": {
                "n": "int[]"
            },
            "name": "Task2#task",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Task#sortByMergeSort",
                "Task#task",
                "Task2#sortByHeapSort"
            ],
            "children": [
                "Task2#task1",
                "Task#task1"
            ]
        },
        "MapTest#deleteTest": {
            "parameters": {},
            "name": "MapTest#deleteTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "Map#delete",
                "GenericHashMapUsingArrayList#put",
                "LinkOperations#delete",
                "AVLTree#delete",
                "LinearProbingHashMapTest#getMap",
                "GenericHashMapUsingArray#put",
                "BSTRecursive#delete",
                "MapTest#getMap",
                "DynamicArray#put",
                "FibonacciHeap#delete",
                "SinglyLinkedList#delete",
                "RedBlackBST#delete",
                "CircularBufferTest#put",
                "KDTreeTest#delete",
                "MRUCache#put",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "Map#put",
                "LRUCache#put",
                "BSTRecursiveGeneric#delete",
                "LinearProbingHashMap#put",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "Graph#depthFirstSearch": {
            "parameters": {
                "visited": "ArrayList\u003cNode\u003e",
                "n": "Node"
            },
            "name": "Graph#depthFirstSearch",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "Map#contains",
                "Bag#contains",
                "DynamicArray#add",
                "BloomFilter#contains",
                "HeapElement#equals",
                "BSTRecursive#add",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "SkipList#contains",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "ShellSortTest#ShellSortEmptyArray": {
            "parameters": {},
            "name": "ShellSortTest#ShellSortEmptyArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "StackArrayList#size": {
            "parameters": {},
            "name": "StackArrayList#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "FibonacciHeap#size"
            ]
        },
        "DecimalToHexaDecimal#decToHex": {
            "parameters": {
                "dec": "int"
            },
            "name": "DecimalToHexaDecimal#decToHex",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "DecimalToHexaDecimal#main",
                "DecimalToHexaDecimalTest#testDecimalToHexaDecimal"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Lower#toLowerCase",
                "Vector2#toString",
                "LowerTest#toLowerCase",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "StringMatchFiniteAutomata#searchPat": {
            "parameters": {
                "pat": "String",
                "text": "String"
            },
            "name": "StringMatchFiniteAutomata#searchPat",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "RabinKarp#main",
                "StringMatchFiniteAutomata#main"
            ],
            "children": [
                "StringMatchFiniteAutomata#computeFA"
            ]
        },
        "CaesarTest#caesarEncryptTest": {
            "parameters": {},
            "name": "CaesarTest#caesarEncryptTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "zigZagPattern#encode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubCipher#encode",
                "Caesar#encode"
            ]
        },
        "AreaTest#testSurfaceAreaParallelogram": {
            "parameters": {},
            "name": "AreaTest#testSurfaceAreaParallelogram",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Area#surfaceAreaParallelogram"
            ]
        },
        "AdjacencyList#printGraph": {
            "parameters": {},
            "name": "AdjacencyList#printGraph",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SkipListTest#print",
                "DynamicArray#get",
                "dijkstras#print",
                "CircularBuffer#get",
                "MinPriorityQueue#print",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "BinaryToOctal#convertBinaryToOctal": {
            "parameters": {
                "binary": "int"
            },
            "name": "BinaryToOctal#convertBinaryToOctal",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "BinaryToOctal#main",
                "BinaryToOctalTest#testBinaryToOctal"
            ],
            "children": []
        },
        "LinkListSort#isSorted": {
            "parameters": {
                "p": "int[]",
                "option": "int"
            },
            "name": "LinkListSort#isSorted",
            "recursive": "false",
            "inComing": 32,
            "outGoing": 0,
            "numberOfCalls": 32,
            "parents": [
                "BogoSort#sort",
                "LinkListSortTest#testForOneElement",
                "LinkListSortTest#testForTwoElements",
                "LinkListSortTest#testForThreeElements",
                "LinkListSortTest#testForFourElements",
                "LinkListSortTest#testForFiveElements",
                "LinkListSortTest#testForSixElements",
                "LinkListSortTest#testForSevenElements",
                "LinkListSortTest#testForEightElements",
                "InsertionSortTest#testEmptyArray",
                "InsertionSortTest#testSingleValue",
                "InsertionSortTest#testIntegerArray",
                "InsertionSortTest#testWithNegativeValues",
                "InsertionSortTest#testWithDuplicates",
                "InsertionSortTest#testWithStringArray",
                "InsertionSortTest#testWithRandomArray",
                "SortUtilsTest#isSortedEmptyArray",
                "SortUtilsTest#isSortedWithSingleElement",
                "SortUtilsTest#isSortedArrayTrue",
                "SortUtilsTest#isSortedArrayFalse",
                "SortUtilsTest#isSortedListTrue",
                "SortUtilsTest#isSortedListFalse",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "MyComparator#compare",
                "PancakeSort#sort",
                "TreeSort#sort",
                "LinkListSort#compare",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "XComparator#compare",
                "Task2#sortByHeapSort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Task#sortByMergeSort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "Task1#sortByInsertionSort",
                "BitonicSort#sort"
            ]
        },
        "BipartiteGrapfDFS#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BipartiteGrapfDFS#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "StrassenMatrixMultiplication#split",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "BipartiteGrapfDFS#isBipartite",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "ParseInteger#parseInt",
                "BSTRecursive#add",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "DecimalToBinary#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "DecimalToBinary#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DecimalToBinary#bitwiseConversion",
                "DecimalToBinary#conventionalConversion"
            ]
        },
        "ArrayCombinationTest#testLengthTwo": {
            "parameters": {},
            "name": "ArrayCombinationTest#testLengthTwo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "ArrayCombination#combination",
                "Combination#combination",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "BubbleSortRecursion#bubbleSort": {
            "parameters": {
                "unsorted": "T[]",
                "len": "int"
            },
            "name": "BubbleSortRecursion#bubbleSort",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "BubbleSortRecursion#sort",
                "BubbleSortRecursion#bubbleSort"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "SortUtils#greater",
                "BubbleSortRecursion#bubbleSort",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "MinHeap#getElement": {
            "parameters": {},
            "name": "MinHeap#getElement",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "DynamicArray#get",
                "DynamicArray#remove",
                "DynamicArrayIterator#next",
                "DynamicArrayIterator#forEachRemaining",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "MinHeap#extractMin",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "BSTRecursiveGeneric#search": {
            "parameters": {
                "node": "Node\u003cT\u003e",
                "data": "T"
            },
            "name": "BSTRecursiveGeneric#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "CRC16Test#testCRC16": {
            "parameters": {},
            "name": "CRC16Test#testCRC16",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CRC16#crc16"
            ]
        },
        "HashMapCuckooHashing#getNumberOfKeysInTable": {
            "parameters": {},
            "name": "HashMapCuckooHashing#getNumberOfKeysInTable",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "HashMapCuckooHashingTest#insertKey",
                "HashMapCuckooHashingTest#removeKey",
                "HashMapCuckooHashingTest#removeNone",
                "HashMapCuckooHashingTest#reHashTableIncreasesTableSize"
            ],
            "children": []
        },
        "LinkListSortTest#testForFiveElements": {
            "parameters": {},
            "name": "LinkListSortTest#testForFiveElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "BankersAlgorithm#checkSafeSystem": {
            "parameters": {
                "totalResources": "int",
                "processes": "int[]",
                "totalProcess": "int",
                "availableArray": "int[]",
                "maxArray": "int[][]",
                "allocationArray": "int[][]"
            },
            "name": "BankersAlgorithm#checkSafeSystem",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BankersAlgorithm#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "BankersAlgorithm#calculateNeed",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "Trieac#suggestionsRec": {
            "parameters": {
                "root": "TrieNode",
                "currPrefix": "String"
            },
            "name": "Trieac#suggestionsRec",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Trieac#suggestionsRec",
                "Trieac#printAutoSuggestions"
            ],
            "children": [
                "Trieac#isLastNode",
                "Trieac#suggestionsRec"
            ]
        },
        "Graph#countGraphs": {
            "parameters": {},
            "name": "Graph#countGraphs",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "Map#contains",
                "Bag#contains",
                "DynamicArray#add",
                "BloomFilter#contains",
                "BSTRecursive#add",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "SkipList#contains",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "LazySegmentTree#getRange": {
            "parameters": {
                "left": "int",
                "right": "int"
            },
            "name": "LazySegmentTree#getRange",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "LazySegmentTree#getRange",
                "LazySegmentTreeTest#get",
                "LazySegmentTreeTest#updateAndGet"
            ],
            "children": [
                "Entry#getValue",
                "MergeSort#merge",
                "StrandSort#merge",
                "LazySegmentTree#getRange",
                "MergeSortRecursive#merge",
                "TimSort#merge",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "TowerOfHanoi#shift",
                "LeftistHeap#merge"
            ]
        },
        "QuickSortTest#getSortAlgorithm": {
            "parameters": {},
            "name": "QuickSortTest#getSortAlgorithm",
            "recursive": "false",
            "inComing": 16,
            "outGoing": 0,
            "numberOfCalls": 16,
            "parents": [
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
            ],
            "children": []
        },
        "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C": {
            "parameters": {},
            "name": "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Conway#generateList",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "FibbonaciSeries#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "FibbonaciSeries#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BufferedReader#close"
            ]
        },
        "FloydWarshall#floydwarshall": {
            "parameters": {
                "AdjacencyMatrix": "int[][]"
            },
            "name": "FloydWarshall#floydwarshall",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FloydWarshall#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "dijkstras#dijkstra": {
            "parameters": {
                "src": "int",
                "graph": "int[][]"
            },
            "name": "dijkstras#dijkstra",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "dijkstras#main",
                "Dijkstra#main",
                "Graph#dijkstra"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "dijkstras#minDist",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "Deques#isEmpty": {
            "parameters": {},
            "name": "Deques#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "IntrospectiveSortTest#StrandSortNegativeTest": {
            "parameters": {},
            "name": "IntrospectiveSortTest#StrandSortNegativeTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "AnyBaseToAnyBase#base2base": {
            "parameters": {
                "b2": "int",
                "n": "String",
                "b1": "int"
            },
            "name": "AnyBaseToAnyBase#base2base",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AnyBaseToAnyBase#main",
                "LowestBasePalindrome#main"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "Main#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Main#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "HashMapCuckooHashing#displayHashtable",
                "dijkstras#print",
                "BloomFilter#insertHash",
                "MinPriorityQueue#print",
                "HashMap#insertHash",
                "Main#nearestRightKey",
                "Main#BuildTree",
                "BufferedReader#close",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "HashMap#deleteHash",
                "RadixSort#print",
                "HashMap#displayHashtable"
            ]
        },
        "NodeStack#isEmpty": {
            "parameters": {},
            "name": "NodeStack#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": [
                "PriorityQueue#getSize",
                "DynamicArray#getSize",
                "LinkedListStack#getSize",
                "CircleLinkedList#getSize",
                "NodeStack#getSize",
                "Queue#getSize"
            ]
        },
        "BSTRecursiveGeneric#inOrderSort": {
            "parameters": {
                "node": "Node\u003cT\u003e",
                "sortedList": "List\u003cT\u003e"
            },
            "name": "BSTRecursiveGeneric#inOrderSort",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "BSTRecursiveGeneric#inOrderSort",
                "BSTRecursiveGeneric#inorderSort"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "BSTRecursiveGeneric#inOrderSort",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "FFT#reverseBits": {
            "parameters": {
                "log2N": "int",
                "num": "int"
            },
            "name": "FFT#reverseBits",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FFT#fftBitReversal"
            ],
            "children": []
        },
        "HillCipher#encrypt": {
            "parameters": {
                "message": "String"
            },
            "name": "HillCipher#encrypt",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HillCipher#hillCipher",
                "BlowfishTest#testEncrypt",
                "PolybiusTest#testEncrypt",
                "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption",
                "RSATest#testRSA",
                "VigenereTest#vigenereEncryptTest"
            ],
            "children": [
                "UpperTest#toUpperCase",
                "HillCipher#validateDeterminant",
                "Upper#toUpperCase"
            ]
        },
        "MinPriorityQueue#insert": {
            "parameters": {
                "key": "int"
            },
            "name": "MinPriorityQueue#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "StackArray#isFull",
                "PriorityQueue#isFull",
                "CircularQueue#isFull",
                "HashMapCuckooHashing#isFull",
                "MinPriorityQueue#isFull",
                "CircularBufferTest#isFull",
                "Queue#isFull",
                "CircularBuffer#isFull"
            ]
        },
        "OrderAgnosticBinarySearchTest#RightHalfAscOrder": {
            "parameters": {},
            "name": "OrderAgnosticBinarySearchTest#RightHalfAscOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OrderAgnosticBinarySearch#BinSearchAlgo"
            ]
        },
        "BSTRecursive#preorder": {
            "parameters": {},
            "name": "BSTRecursive#preorder",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericTree#preordercall",
                "GenericTree#preorder"
            ],
            "children": [
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursive#preOrder"
            ]
        },
        "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront": {
            "parameters": {},
            "name": "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "NonRepeatingElement#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "NonRepeatingElement#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BufferedReader#close"
            ]
        },
        "MiniMaxAlgorithm#setScores": {
            "parameters": {
                "scores": "int[]"
            },
            "name": "MiniMaxAlgorithm#setScores",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MiniMaxAlgorithm#log2"
            ]
        },
        "UnionFind#find": {
            "parameters": {
                "i": "int"
            },
            "name": "UnionFind#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "GCD#gcd": {
            "parameters": {
                "number": "int[]"
            },
            "name": "GCD#gcd",
            "recursive": "false",
            "inComing": 19,
            "outGoing": 0,
            "numberOfCalls": 19,
            "parents": [
                "RSA#generateKeys",
                "GCD#gcd",
                "GCD#main",
                "GCDRecursion#main",
                "GCDRecursion#gcd",
                "PollardRho#pollardRho",
                "GCDTest#test1",
                "GCDTest#test2",
                "GCDTest#test3",
                "GCDTest#test4",
                "GCDTest#test5",
                "GCDTest#test6",
                "GCDTest#test7"
            ],
            "children": [
                "GCDRecursion#gcd",
                "FFTTest#abs",
                "GCD#gcd",
                "Complex#abs"
            ]
        },
        "BSTRecursiveGeneric#postOrder": {
            "parameters": {
                "node": "Node\u003cT\u003e"
            },
            "name": "BSTRecursiveGeneric#postOrder",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "BSTRecursive#postOrder",
                "BSTRecursive#postorder",
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursiveGeneric#postorder",
                "BinaryTree#postOrder",
                "CreateBSTFromSortedArray#test",
                "CreateBinaryTreeFromInorderPreorder#test",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BSTRecursiveGeneric#postOrder",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "BSTRecursive#postOrder",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "MaximumMinimumWindow#calculateMaxOfMin": {
            "parameters": {
                "arr": "int[]",
                "n": "int"
            },
            "name": "MaximumMinimumWindow#calculateMaxOfMin",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "MaximumMinimumWindow#main",
                "CalculateMaxOfMinTest#testForOneElement",
                "CalculateMaxOfMinTest#testForTwoElements",
                "CalculateMaxOfMinTest#testForThreeElements",
                "CalculateMaxOfMinTest#testForFourElements",
                "CalculateMaxOfMinTest#testForFiveElements",
                "CalculateMaxOfMinTest#testForSixElements",
                "CalculateMaxOfMinTest#testForSevenElements"
            ],
            "children": [
                "StackArrayList#peek",
                "DyanamicProgrammingKnapsack#max",
                "FibonacciHeap#empty",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "StackArray#pop",
                "LinkedListStack#push",
                "SkipListTest#print",
                "dijkstras#print",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "MinPriorityQueue#print",
                "StackArray#push",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "StackArrayList#push",
                "CircularQueue#peek",
                "NodeStack#pop",
                "FindMaxRecursion#max",
                "PriorityQueue#peek",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "StackArrayList#pop",
                "StackArray#peek",
                "NodeStack#push",
                "GenericTree#max",
                "LinkedListStack#pop",
                "Sudoku#print",
                "BucketSort#max",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "NodeStack#peek",
                "RadixSort#print",
                "LinkedListStack#peek"
            ]
        },
        "LevelOrderTraversal#traverse": {
            "parameters": {
                "root": "BinaryTree.Node"
            },
            "name": "LevelOrderTraversal#traverse",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "LevelOrderTraversalTest#testRootNull",
                "LevelOrderTraversalTest#testSingleNodeTree",
                "LevelOrderTraversalTest#testLevelOrderTraversalCompleteTree",
                "LevelOrderTraversalTest#testLevelOrderTraversalDifferentHeight",
                "ZigzagTraversalTest#testRootNull",
                "ZigzagTraversalTest#testSingleNodeTree",
                "ZigzagTraversalTest#testZigzagTraversalCompleteTree",
                "ZigzagTraversalTest#testZigzagTraversalDifferentHeight"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "Deques#size",
                "NodeStack#size",
                "MatrixUtil#add",
                "CircularQueue#isEmpty",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "DynamicArray#isEmpty",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "CatalanNumber#findNthCatalan": {
            "parameters": {
                "n": "int"
            },
            "name": "CatalanNumber#findNthCatalan",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "CatalanNumber#main",
                "CatalanNumberTest#testCatalanNumber"
            ],
            "children": []
        },
        "TreeSortTest#treeSortStringArray": {
            "parameters": {},
            "name": "TreeSortTest#treeSortStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "ZigzagTraversalTest#testSingleNodeTree": {
            "parameters": {},
            "name": "ZigzagTraversalTest#testSingleNodeTree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "LevelOrderTraversal#traverse",
                "ZigzagTraversal#traverse",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "UnionFind#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "UnionFind#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "CountSinglyLinkedListRecursion#count",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "Task2#count",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "Task#count",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "UnionFind#count",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "Task1#count",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "UnionFind#union",
                "SinglyLinkedList#count",
                "BSTRecursive#find",
                "Matrix#count"
            ]
        },
        "HashMapCuckooHashing#deleteKeyFromHashTable": {
            "parameters": {
                "key": "int"
            },
            "name": "HashMapCuckooHashing#deleteKeyFromHashTable",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "MainCuckooHashing#main",
                "HashMapCuckooHashingTest#removeKey",
                "HashMapCuckooHashingTest#removeNone"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "HashMapCuckooHashing#hashFunction1",
                "HashMapCuckooHashing#hashFunction2",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "HeapElement#equals",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "Link#displayLink": {
            "parameters": {},
            "name": "Link#displayLink",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "DoublyLinkedList#display",
                "DoublyLinkedList#displayBackwards"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "AreaTest#testSurfaceAreaRectangle": {
            "parameters": {},
            "name": "AreaTest#testSurfaceAreaRectangle",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Area#surfaceAreaRectangle"
            ]
        },
        "Dijkstra#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Dijkstra#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BellmanFord#printPath",
                "dijkstras#dijkstra"
            ]
        },
        "CountFriendsPairingTest#testForTwoElements": {
            "parameters": {},
            "name": "CountFriendsPairingTest#testForTwoElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CountFriendsPairing#countFriendsPairing"
            ]
        },
        "RegexMatching#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "RegexMatching#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RegexMatching#regexRecursion",
                "RegexMatching#regexBU"
            ]
        },
        "IsomorphicTest#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "IsomorphicTest#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Isomorphic#checkStrings"
            ]
        },
        "HexaDecimalToDecimal#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "HexaDecimalToDecimal#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BufferedReader#close",
                "HexaDecimalToDecimal#getHexaToDec",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "RedBlackBST#rotateLeft": {
            "parameters": {
                "node": "Node"
            },
            "name": "RedBlackBST#rotateLeft",
            "recursive": "false",
            "inComing": 13,
            "outGoing": 0,
            "numberOfCalls": 13,
            "parents": [
                "AVLTree#rebalance",
                "AVLTree#rotateLeftThenRight",
                "AVLTree#rotateRightThenLeft",
                "RedBlackBST#fixTree",
                "RedBlackBST#deleteFixup",
                "ArrayLeftRotationTest#testForOneElement",
                "ArrayLeftRotationTest#testForZeroStep",
                "ArrayLeftRotationTest#testForEqualSizeStep",
                "ArrayLeftRotationTest#testForLowerSizeStep",
                "ArrayLeftRotationTest#testForHigherSizeStep"
            ],
            "children": []
        },
        "PowRecursion#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PowRecursion#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Pow#pow",
                "MyComparator#compare",
                "LinkListSort#compare",
                "XComparator#compare",
                "PowRecursion#pow"
            ]
        },
        "DynamicArray#put": {
            "parameters": {
                "index": "int",
                "element": "E"
            },
            "name": "DynamicArray#put",
            "recursive": "false",
            "inComing": 156,
            "outGoing": 0,
            "numberOfCalls": 156,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "BinaryToHexadecimal#binToHex",
                "null#null",
                "LFUCache#put",
                "LRUCache#put",
                "MRUCache#put",
                "AdjacencyList#addEdge",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "GenericHashMapUsingArray#reHash",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#delete",
                "LinearProbingHashMap#resize",
                "GenericHeap#add",
                "GenericHeap#swap",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#test",
                "VerticalOrderTraversal#verticalTraversal",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#TwoPointer",
                "TwoSumProblem#HashMap",
                "Trie#add",
                "CountWords#getDictionary",
                "CountingSort#sort",
                "Graph#addEdge",
                "Anagrams#approach4",
                "CheckAnagrams#isAnagrams",
                "Isomorphic#checkStrings",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#isFull",
                "CircularBufferTest#get",
                "CircularBufferTest#put",
                "CircularBufferTest#concurrentTest",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#putTest",
                "MapTest#getTest",
                "MapTest#deleteTest",
                "MapTest#containsTest",
                "MapTest#sizeTest",
                "MapTest#keysTest",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4"
            ],
            "children": []
        },
        "CircularQueue#peek": {
            "parameters": {},
            "name": "CircularQueue#peek",
            "recursive": "false",
            "inComing": 76,
            "outGoing": 0,
            "numberOfCalls": 76,
            "parents": [
                "CircularQueue#main",
                "GenericArrayListQueue#main",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#postorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "VerticalOrderTraversal#verticalTraversal",
                "FordFulkerson#networkFlow",
                "BufferedReader#peek",
                "MedianOfRunningArray#median",
                "Huffman#main",
                "QueueWithStack#peekFront",
                "QueueWithStack#peekBack",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StrandSort#merge",
                "LinkedQueueTest#testQue",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BufferedReaderTest#testPeeks",
                "BufferedReaderTest#testMixes",
                "BufferedReaderTest#testBlockPractical"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "Verhoeff#checkInput": {
            "parameters": {
                "input": "String"
            },
            "name": "Verhoeff#checkInput",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Damm#dammCheck",
                "Damm#addDammChecksum",
                "Verhoeff#verhoeffCheck",
                "Verhoeff#addVerhoeffChecksum"
            ],
            "children": []
        },
        "KMP#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "KMP#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KMP#KMPmatcher"
            ]
        },
        "InsertionSortTest#testEmptyArray": {
            "parameters": {
                "sortAlgorithm": "Function\u003cInteger[],Integer[]\u003e"
            },
            "name": "InsertionSortTest#testEmptyArray",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "InsertionSortTest#insertionSortSortEmptyArrayShouldPass"
            ],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "Ceil#ceil": {
            "parameters": {
                "number": "double"
            },
            "name": "Ceil#ceil",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "null#null",
                "DutchNationalFlagSort#sort",
                "WiggleSort#wiggleSort",
                "CeilTest#testCeil"
            ],
            "children": []
        },
        "LRUCache#evict": {
            "parameters": {},
            "name": "LRUCache#evict",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put"
            ],
            "children": [
                "Entry#setNextEntry",
                "Entry#setPreEntry",
                "Entry#getNextEntry"
            ]
        },
        "FactorialTest#test": {
            "parameters": {},
            "name": "FactorialTest#test",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "CreateBSTFromSortedArray#main",
                "CreateBinaryTreeFromInorderPreorder#main",
                "VampireNumber#main",
                "VectorCrossProduct#main",
                "ColorContrastRatio#main"
            ],
            "children": [
                "Combinations#factorial",
                "Factorial#factorial",
                "FactorialRecursion#factorial"
            ]
        },
        "Cycle#start": {
            "parameters": {},
            "name": "Cycle#start",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "Cycles#main",
                "LinearSearchThread#main"
            ],
            "children": [
                "Kosaraju#dfs",
                "LCA#dfs",
                "Cycle#dfs"
            ]
        },
        "Map#contains": {
            "parameters": {
                "key": "Key"
            },
            "name": "Map#contains",
            "recursive": "false",
            "inComing": 31,
            "outGoing": 0,
            "numberOfCalls": 31,
            "parents": [
                "AnyBaseToAnyBase#validForBase",
                "Bag#main",
                "A_Star#aStar",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Kruskal#kruskal",
                "LinearProbingHashMap#delete",
                "Tree#printTopView",
                "KaprekarNumbers#isKaprekarNumber",
                "CRCAlgorithm#divideMessageWithP",
                "HappyNumbersSeq#isSad",
                "UnionFind#count",
                "CheckVowels#hasVowels",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "MapTest#containsTest",
                "SkipListTest#contains",
                "KaprekarNumbersTest#testForRangeOfNumber",
                "SquareFreeIntegerTest#testIsSquareFreeInteger",
                "HammingDistanceTest#mismatchDataBits"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "CheckAnagramsTest#CheckFalseAnagrams": {
            "parameters": {},
            "name": "CheckAnagramsTest#CheckFalseAnagrams",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CheckAnagrams#isAnagrams"
            ]
        },
        "NodeStack#pop": {
            "parameters": {},
            "name": "NodeStack#pop",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "Kosaraju#findStronglyConnectedComponents",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "InorderTraversal#iterativeInorder",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PalindromeSinglyLinkedList#isPalindrome",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StackPostfixNotation#postfixEvaluate"
            ],
            "children": [
                "SinglyLinkedList#setHead",
                "PriorityQueue#getSize",
                "NodeStack#setHead",
                "NodeStack#setNext",
                "DynamicArray#getSize",
                "LinkedListStack#getSize",
                "NodeStack#getPrevious",
                "CircleLinkedList#getSize",
                "HeapNode#setNext",
                "NodeStack#getData",
                "NodeStack#getSize",
                "Queue#getSize",
                "NodeStack#setSize"
            ]
        },
        "TrieImp#sop": {
            "parameters": {
                "print": "String"
            },
            "name": "TrieImp#sop",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "TrieImp#main"
            ],
            "children": []
        },
        "Complex#multiply": {
            "parameters": {
                "n": "double"
            },
            "name": "Complex#multiply",
            "recursive": "false",
            "inComing": 28,
            "outGoing": 0,
            "numberOfCalls": 28,
            "parents": [
                "RSA#generateKeys",
                "StrassenMatrixMultiplication#multiply",
                "AutomorphicNumber#isAutomorphic3",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "FFT#fft",
                "FFTBluestein#fftBluestein",
                "KaprekarNumbers#isKaprekarNumber",
                "MatrixUtil#multiply",
                "MatrixUtil#main",
                "KochSnowflake#IterationStep",
                "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest2x2",
                "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest4x4",
                "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTestNegetiveNumber4x4",
                "FFTTest#multiplyWithComplexTest",
                "FFTTest#multiplyWithScalarTest"
            ],
            "children": []
        },
        "CountSinglyLinkedListRecursion#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CountSinglyLinkedListRecursion#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "CountSinglyLinkedListRecursion#count",
                "AVLSimple#insert",
                "Queue#insert",
                "Task2#count",
                "MedianOfRunningArray#insert",
                "Task#count",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "UnionFind#count",
                "AVLTree#insert",
                "Task1#count",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "SinglyLinkedList#count",
                "BSTRecursive#insert",
                "Trieac#insert",
                "Matrix#count",
                "PriorityQueue#insert"
            ]
        },
        "LFUCache#addNodeWithUpdatedFrequency": {
            "parameters": {
                "node": "Node"
            },
            "name": "LFUCache#addNodeWithUpdatedFrequency",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "LFUCache#get",
                "LFUCache#put"
            ],
            "children": []
        },
        "TarjansAlgorithmTest#findStronglyConnectedComps": {
            "parameters": {},
            "name": "TarjansAlgorithmTest#findStronglyConnectedComps",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "TarjansAlgorithm#stronglyConnectedComponents",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "HeapElement#equals",
                "BSTRecursive#add",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "NewManShanksPrimeTest#testTwo": {
            "parameters": {},
            "name": "NewManShanksPrimeTest#testTwo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "NewManShanksPrime#nthManShanksPrime"
            ]
        },
        "Entry#getPreEntry": {
            "parameters": {},
            "name": "Entry#getPreEntry",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "LRUCache#moveNodeToLast",
                "MRUCache#evict",
                "MRUCache#moveEntryToLast"
            ],
            "children": []
        },
        "MatrixSearchAlgorithm#find": {
            "parameters": {
                "matrix": "T[][]",
                "key": "T"
            },
            "name": "MatrixSearchAlgorithm#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": []
        },
        "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString": {
            "parameters": {},
            "name": "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "FibonacciHeap#size",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "Verhoeff#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Verhoeff#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Damm#checkAndPrint",
                "Verhoeff#checkAndPrint",
                "Damm#generateAndPrint",
                "Verhoeff#generateAndPrint"
            ]
        },
        "BSTIterative#remove": {
            "parameters": {
                "data": "int"
            },
            "name": "BSTIterative#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": []
        },
        "CheckAnagramsTest#CheckAnagrams": {
            "parameters": {},
            "name": "CheckAnagramsTest#CheckAnagrams",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CheckAnagrams#isAnagrams"
            ]
        },
        "CRCAlgorithm#getWrongMess": {
            "parameters": {},
            "name": "CRCAlgorithm#getWrongMess",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CRCAlgorithmTest#test1"
            ],
            "children": []
        },
        "Gaussian#valueOfGaussian": {
            "parameters": {
                "mat": "double[][]",
                "x": "double[][]",
                "mat_size": "int"
            },
            "name": "Gaussian#valueOfGaussian",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Gaussian#gaussian"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Median#median": {
            "parameters": {
                "values": "int[]"
            },
            "name": "Median#median",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "Median#main",
                "MedianOfRunningArray#main"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "LFSRTest#clock": {
            "parameters": {},
            "name": "LFSRTest#clock",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "A5KeyStreamGenerator#getNextKeyStream",
                "CompositeLFSR#clock",
                "LFSR#initialize",
                "LFSRTest#clock"
            ],
            "children": [
                "SkipList#toString",
                "A5KeyStreamGenerator#initialize",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "LFSR#clock",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "LFSR#initialize",
                "LFSRTest#clock",
                "BaseLFSR#initialize",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSRTest#initialize",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "BaseLFSR#clock",
                "CompositeLFSR#clock",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "AVLTree#rotateRightThenLeft": {
            "parameters": {
                "n": "Node"
            },
            "name": "AVLTree#rotateRightThenLeft",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "AVLTree#rebalance"
            ],
            "children": [
                "AVLTree#rotateRight",
                "RedBlackBST#rotateLeft",
                "RedBlackBST#rotateRight",
                "ArrayLeftRotation#rotateLeft",
                "AVLTree#rotateLeft"
            ]
        },
        "FibonacciHeap#delete": {
            "parameters": {
                "x": "HeapNode"
            },
            "name": "FibonacciHeap#delete",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "HashMap#deleteHash",
                "LinkedList#delete",
                "MinPriorityQueue#heapSort",
                "Link#main",
                "LinkOperations#removeDuplicates",
                "SinglyLinkedList#main",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "BSTRecursive#remove",
                "BSTRecursiveGeneric#delete",
                "BSTRecursiveGeneric#remove",
                "RedBlackBST#deleteDemo",
                "TrieImp#main",
                "MapTest#deleteTest",
                "MapTest#sizeTest",
                "KDTreeTest#delete"
            ],
            "children": [
                "FibonacciHeap#deleteMin",
                "HeapElement#getKey",
                "FibonacciHeap#decreaseKey",
                "HeapNode#getKey",
                "Entry#getKey"
            ]
        },
        "ConwayTest#testGenerateNextElementWith1": {
            "parameters": {},
            "name": "ConwayTest#testGenerateNextElementWith1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Conway#generateNextElement"
            ]
        },
        "RemoveDuplicateFromString#removeDuplicate": {
            "parameters": {
                "s": "String"
            },
            "name": "RemoveDuplicateFromString#removeDuplicate",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "RemoveDuplicateFromString#main"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "LeftistHeap#isEmpty",
                "Deques#toString",
                "QueueWithStack#isEmpty",
                "HeapElement#toString",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "DynamicArray#toString",
                "CursorLinkedList#indexOf",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircleLinkedList#toString",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CursorLinkedList#append",
                "LFSR#toString",
                "CircularQueue#isEmpty",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "DynamicArray#isEmpty",
                "LinkedQueue#toString",
                "PriorityQueue#isEmpty"
            ]
        },
        "StringMatchFiniteAutomata#getNextState": {
            "parameters": {
                "pat": "String",
                "x": "int",
                "state": "int",
                "m": "int"
            },
            "name": "StringMatchFiniteAutomata#getNextState",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "StringMatchFiniteAutomata#computeFA"
            ],
            "children": []
        },
        "AdjacencyMatrixGraph#adjacencyOfEdgeDoesExist": {
            "parameters": {
                "from": "int",
                "to": "int"
            },
            "name": "AdjacencyMatrixGraph#adjacencyOfEdgeDoesExist",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AdjacencyMatrixGraph#edgeDoesExist",
                "AdjacencyMatrixGraph#addEdge",
                "AdjacencyMatrixGraph#removeEdge"
            ],
            "children": [
                "AdjacencyMatrixGraph#adjacency"
            ]
        },
        "BFPRT#getMedian": {
            "parameters": {
                "arr": "int[]",
                "end": "int",
                "begin": "int"
            },
            "name": "BFPRT#getMedian",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BFPRT#medianOfMedians"
            ],
            "children": [
                "BFPRT#insertionSort",
                "IntrospectiveSort#insertionSort"
            ]
        },
        "SortUtilsTest#isSortedWithSingleElement": {
            "parameters": {},
            "name": "SortUtilsTest#isSortedWithSingleElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "SquareFreeIntegerTest#testIsSquareFreeIntegerThrowExceptionIfNumberIsZero": {
            "parameters": {},
            "name": "SquareFreeIntegerTest#testIsSquareFreeIntegerThrowExceptionIfNumberIsZero",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SquareFreeInteger#isSquareFreeInteger"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "FindMaxRecursion#max": {
            "parameters": {
                "len": "int",
                "array": "int[]"
            },
            "name": "FindMaxRecursion#max",
            "recursive": "false",
            "inComing": 54,
            "outGoing": 0,
            "numberOfCalls": 54,
            "parents": [
                "RgbHsvConversion#rgbToHsv",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "AVLSimple#insert",
                "AVLSimple#rightRotate",
                "AVLSimple#leftRotate",
                "AVLTree#reheight",
                "CheckIfBinaryTreeBalanced#isBalancedRecursive",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#maxcall",
                "GenericTree#max",
                "LevelOrderTraversalHelper#height",
                "VerticalOrderTraversal#verticalTraversal",
                "BruteForceKnapsack#knapSack",
                "DyanamicProgrammingKnapsack#knapSack",
                "EggDropping#minTrials",
                "KadaneAlgorithm#max_Sum",
                "Knapsack#knapSack",
                "KnapsackMemoization#knapSackRec",
                "LongestAlternatingSubsequence#AlternatingLength",
                "LongestValidParentheses#getLongestValidParentheses",
                "RodCutting#cutRod",
                "ShortestSuperSequence#lcs",
                "WineProblem#WPRecursion",
                "WineProblem#WPTD",
                "WineProblem#WPBU",
                "CircularConvolutionFFT#fftCircularConvolution",
                "Convolution#convolution",
                "FindMax#main",
                "FindMaxRecursion#main",
                "FindMaxRecursion#max",
                "MaxValue#main",
                "Mode#mode",
                "MinimizingLateness#main",
                "MiniMaxAlgorithm#miniMax",
                "MonteCarloTreeSearch#getWinnerNode",
                "BeadSort#sort",
                "BucketSort#bucketSort",
                "MergeSortNoExtraSpace#call_merge_sort",
                "QuickSelectTest#quickSelectMaximumOfManyElements"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "TwoPointers#isPairedSum": {
            "parameters": {
                "arr": "int[]",
                "key": "int"
            },
            "name": "TwoPointers#isPairedSum",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "TwoPointers#main"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "FindMinRecursion#min": {
            "parameters": {
                "len": "int",
                "array": "int[]"
            },
            "name": "FindMinRecursion#min",
            "recursive": "false",
            "inComing": 39,
            "outGoing": 0,
            "numberOfCalls": 39,
            "parents": [
                "RgbHsvConversion#rgbToHsv",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "MaxHeap#toggleDown",
                "MinHeap#toggleDown",
                "VerticalOrderTraversal#verticalTraversal",
                "ClosestPair#closestPair",
                "EditDistance#editDistance",
                "FordFulkerson#networkFlow",
                "MinimumPathSum#minimumPathSum",
                "MinimumSumPartition#getMin",
                "FindMin#main",
                "FindMinRecursion#main",
                "FindMinRecursion#min",
                "MinValue#main",
                "NthUglyNumber#getNthUglyNo",
                "BFPRT#medianOfMedians",
                "MiniMaxAlgorithm#miniMax",
                "ExponentialSearch#find",
                "FibonacciSearch#find",
                "JumpSearch#find",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "TimSort#sort",
                "QuickSelectTest#quickSelectMinimumOfManyElements"
            ],
            "children": [
                "FindMinRecursion#min",
                "MinValue#min",
                "BucketSort#min"
            ]
        },
        "AlphabeticalTest#isAlphabetical": {
            "parameters": {},
            "name": "AlphabeticalTest#isAlphabetical",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "Alphabetical#main",
                "AlphabeticalTest#isAlphabetical"
            ],
            "children": [
                "Alphabetical#isAlphabetical",
                "AlphabeticalTest#isAlphabetical",
                "AnagramsTest#isAlphabetical"
            ]
        },
        "WiggleSortTest#WiggleTestNumbersEven": {
            "parameters": {},
            "name": "WiggleSortTest#WiggleTestNumbersEven",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "GenericTree#display_1": {
            "parameters": {
                "parent": "Node"
            },
            "name": "GenericTree#display_1",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericTree#display",
                "GenericTree#display_1"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SkipListTest#print",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "dijkstras#print",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "MinPriorityQueue#print",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "GenericTree#display_1",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "Sudoku#print",
                "NodeStack#size",
                "SinglyLinkedList#print",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "NodeStack#print",
                "FibonacciHeap#size",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "KnightsTour#countNeighbors": {
            "parameters": {
                "column": "int",
                "row": "int"
            },
            "name": "KnightsTour#countNeighbors",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "KnightsTour#neighbors",
                "KnightsTour#orphanDetected"
            ],
            "children": []
        },
        "BaseLFSR#initialize": {
            "parameters": {
                "frameCounter": "BitSet",
                "sessionKey": "BitSet"
            },
            "name": "BaseLFSR#initialize",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "null#null",
                "A5KeyStreamGenerator#initialize",
                "A5KeyStreamGenerator#reInitialize",
                "A5KeyStreamGenerator#reInitializeRegisters",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LFSRTest#getClockBit"
            ],
            "children": []
        },
        "TwoSumProblem#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "TwoSumProblem#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "SkipListTest#print",
                "dijkstras#print",
                "Deques#toString",
                "MinPriorityQueue#print",
                "HeapElement#toString",
                "ThreeSumProblem#BruteForce",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "ThreeSumProblem#TwoPointer",
                "Sudoku#print",
                "TwoSumProblem#HashMap",
                "SinglyLinkedList#print",
                "LFSR#toString",
                "TwoSumProblem#BruteForce",
                "GenericHashMapUsingArray#toString",
                "NodeStack#print",
                "SortUtils#print",
                "Queue#toString",
                "RadixSort#print",
                "TwoSumProblem#TwoPointer",
                "LinkedQueue#toString"
            ]
        },
        "KaprekarNumbersTest#testFor297": {
            "parameters": {},
            "name": "KaprekarNumbersTest#testFor297",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KaprekarNumbers#isKaprekarNumber"
            ]
        },
        "LCA#dfs": {
            "parameters": {
                "p": "int",
                "parent": "int[]",
                "s": "int",
                "depth": "int[]",
                "adj": "ArrayList\u003cArrayList\u003cInteger\u003e\u003e"
            },
            "name": "LCA#dfs",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "Cycle#start",
                "Cycle#dfs",
                "Kosaraju#sortEdgesByLowestFinishTime",
                "Kosaraju#dfs",
                "LCA#main",
                "LCA#dfs"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "Kosaraju#dfs",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "LCA#dfs",
                "CircularBufferTest#get",
                "Cycle#dfs",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "FFTTest#fft": {
            "parameters": {},
            "name": "FFTTest#fft",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "ConvolutionFFT#convolutionFFT",
                "FFTTest#fft"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "Complex#getImaginary",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "FFTTest#fft",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "FFT#fft",
                "DynamicArray#add",
                "BSTRecursive#add",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "Complex#getReal",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "ArrayLeftRotationTest#testForEqualSizeStep": {
            "parameters": {},
            "name": "ArrayLeftRotationTest#testForEqualSizeStep",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RedBlackBST#rotateLeft",
                "ArrayLeftRotation#rotateLeft",
                "AVLTree#rotateLeft"
            ]
        },
        "AVLSimple#display": {
            "parameters": {
                "node": "Node"
            },
            "name": "AVLSimple#display",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "HashMap#displayHashtable",
                "LinkedList#display",
                "Link#main",
                "AVLSimple#display"
            ],
            "children": [
                "GenericTree#display",
                "LinkedList#display",
                "AVLSimple#display",
                "GenericHeap#display",
                "DoublyLinkedList#display"
            ]
        },
        "AllPathsFromSourceToTarget#initAdjList": {
            "parameters": {},
            "name": "AllPathsFromSourceToTarget#initAdjList",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "null#null"
            ],
            "children": []
        },
        "BucketSortTest#bucketSortNonDuplicateIntegerArray": {
            "parameters": {},
            "name": "BucketSortTest#bucketSortNonDuplicateIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BucketSort#bucketSort"
            ]
        },
        "ProcessDetails#setBurstTime": {
            "parameters": {
                "burstTime": "int"
            },
            "name": "ProcessDetails#setBurstTime",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "Armstrong#isArmstrong": {
            "parameters": {
                "number": "int"
            },
            "name": "Armstrong#isArmstrong",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "ArmstrongTest#testIsArmstrong",
                "TestArmstrong#testArmstrong"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "DynamicArray#newCapacity": {
            "parameters": {
                "capacity": "int"
            },
            "name": "DynamicArray#newCapacity",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "DynamicArray#add",
                "DynamicArray#remove"
            ],
            "children": []
        },
        "HamiltonianCycleTest#testFindHamiltonianCycleShouldReturnInfinityArray": {
            "parameters": {},
            "name": "HamiltonianCycleTest#testFindHamiltonianCycleShouldReturnInfinityArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HamiltonianCycle#findHamiltonianCycle"
            ]
        },
        "Main#BuildTree": {
            "parameters": {},
            "name": "Main#BuildTree",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Main#main"
            ],
            "children": [
                "HashMapCuckooHashingTest#insertKey",
                "NRKTree#insertKey"
            ]
        },
        "BlowfishTest#testEncrypt": {
            "parameters": {},
            "name": "BlowfishTest#testEncrypt",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Blowfish#encrypt",
                "Vigenere#encrypt",
                "A5Cipher#encrypt",
                "HillCipher#encrypt",
                "RSA#encrypt",
                "Polybius#encrypt"
            ]
        },
        "AllPathsFromSourceToTarget#storeAllPaths": {
            "parameters": {
                "s": "int",
                "d": "int"
            },
            "name": "AllPathsFromSourceToTarget#storeAllPaths",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "AllPathsFromSourceToTarget#allPathsFromSourceToTarget"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Mandelbrot#blackAndWhiteColorMap": {
            "parameters": {
                "distance": "double"
            },
            "name": "Mandelbrot#blackAndWhiteColorMap",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Mandelbrot#getImage"
            ],
            "children": []
        },
        "InverseOfMatrix#main": {
            "parameters": {
                "argv": "String[]"
            },
            "name": "InverseOfMatrix#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BufferedReader#close",
                "InverseOfMatrix#invert",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "BufferedReader#assertStreamOpen": {
            "parameters": {},
            "name": "BufferedReader#assertStreamOpen",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BufferedReader#justRefill"
            ],
            "children": []
        },
        "FloodFill#floodFill": {
            "parameters": {
                "oldColor": "int",
                "image": "int[][]",
                "x": "int",
                "newColor": "int",
                "y": "int"
            },
            "name": "FloodFill#floodFill",
            "recursive": "false",
            "inComing": 13,
            "outGoing": 0,
            "numberOfCalls": 13,
            "parents": [
                "FloodFill#floodFill",
                "FloodFillTest#testForEmptyImage",
                "FloodFillTest#testForSingleElementImage",
                "FloodFillTest#testForImageOne",
                "FloodFillTest#testForImageTwo",
                "FloodFillTest#testForImageThree"
            ],
            "children": [
                "BoundaryFill#getPixel",
                "BoundaryFill#putPixel",
                "FloodFill#putPixel",
                "FloodFill#floodFill",
                "FloodFill#getPixel"
            ]
        },
        "PrimMST#primMST": {
            "parameters": {
                "graph": "int[][]"
            },
            "name": "PrimMST#primMST",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PrimMST#main"
            ],
            "children": [
                "PrimMST#minKey",
                "PrimMST#printMST"
            ]
        },
        "SimpleSortTest#simpleSortDuplicateStringArray": {
            "parameters": {},
            "name": "SimpleSortTest#simpleSortDuplicateStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "IntrospectiveSortTest#StrandSortEmptyTest": {
            "parameters": {},
            "name": "IntrospectiveSortTest#StrandSortEmptyTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "PerfectSquare#isPerfectSquare": {
            "parameters": {
                "number": "int"
            },
            "name": "PerfectSquare#isPerfectSquare",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "FibonacciNumber#isFibonacciNumber",
                "PerfectSquare#main",
                "PerfectSquareTest#TestPerfectSquareifiscorrect",
                "PerfectSquareTest#TestPerfectSquareifisnotcorrect",
                "PerfectSquareTest#TestPerfectSquareifisNegativeNumber"
            ],
            "children": []
        },
        "CreateAndDetectLoop#createLoop": {
            "parameters": {
                "head": "Node",
                "k": "int"
            },
            "name": "CreateAndDetectLoop#createLoop",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CreateAndDetectLoop#main"
            ],
            "children": []
        },
        "AVLSimple#rightRotate": {
            "parameters": {
                "c": "Node"
            },
            "name": "AVLSimple#rightRotate",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AVLSimple#insert"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "HeightStrategy#height",
                "BernoulliHeightStrategy#height",
                "FindMaxRecursion#max",
                "AVLTree#height",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max",
                "GenericTree#height",
                "AVLSimple#height",
                "LevelOrderTraversalHelper#height"
            ]
        },
        "GCD#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "GCD#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GCDRecursion#gcd",
                "GCD#gcd"
            ]
        },
        "MatrixUtil#subtract": {
            "parameters": {
                "matrix2": "BigDecimal[][]",
                "matrix1": "BigDecimal[][]"
            },
            "name": "MatrixUtil#subtract",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "RSA#generateKeys",
                "FFT#fft",
                "FibonacciJavaStreams#calculate",
                "MatrixUtil#main",
                "KochSnowflake#IterationStep",
                "FFTTest#subtractTest"
            ],
            "children": [
                "MatrixUtil#operate"
            ]
        },
        "Blowfish#binToHex": {
            "parameters": {
                "binary": "String"
            },
            "name": "Blowfish#binToHex",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Blowfish#xor",
                "BinaryToHexadecimal#main",
                "BinaryToHexadecimalTest#testBinaryToHexadecimal"
            ],
            "children": []
        },
        "BubbleSortTest#bubbleSortIntegerArray": {
            "parameters": {},
            "name": "BubbleSortTest#bubbleSortIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "PowerSum#power": {
            "parameters": {
                "a": "int",
                "b": "int"
            },
            "name": "PowerSum#power",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "PowerSum#Sum",
                "BinaryExponentiationTest#testPower"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "Matrix#col": {
            "parameters": {},
            "name": "Matrix#col",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MatrixChainMultiplication#main"
            ],
            "children": []
        },
        "SortUtils#isSorted": {
            "parameters": {
                "list": "List\u003cT\u003e"
            },
            "name": "SortUtils#isSorted",
            "recursive": "false",
            "inComing": 32,
            "outGoing": 0,
            "numberOfCalls": 32,
            "parents": [
                "BogoSort#sort",
                "LinkListSortTest#testForOneElement",
                "LinkListSortTest#testForTwoElements",
                "LinkListSortTest#testForThreeElements",
                "LinkListSortTest#testForFourElements",
                "LinkListSortTest#testForFiveElements",
                "LinkListSortTest#testForSixElements",
                "LinkListSortTest#testForSevenElements",
                "LinkListSortTest#testForEightElements",
                "InsertionSortTest#testEmptyArray",
                "InsertionSortTest#testSingleValue",
                "InsertionSortTest#testIntegerArray",
                "InsertionSortTest#testWithNegativeValues",
                "InsertionSortTest#testWithDuplicates",
                "InsertionSortTest#testWithStringArray",
                "InsertionSortTest#testWithRandomArray",
                "SortUtilsTest#isSortedEmptyArray",
                "SortUtilsTest#isSortedWithSingleElement",
                "SortUtilsTest#isSortedArrayTrue",
                "SortUtilsTest#isSortedArrayFalse",
                "SortUtilsTest#isSortedListTrue",
                "SortUtilsTest#isSortedListFalse",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SortUtils#less",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "HeapSort#less",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "ColumnarTranspositionCipher#showTable": {
            "parameters": {},
            "name": "ColumnarTranspositionCipher#showTable",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ColumnarTranspositionCipher#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "Caesar#decode": {
            "parameters": {
                "encryptedMessage": "String",
                "shift": "int"
            },
            "name": "Caesar#decode",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "Caesar#bruteforce",
                "CaesarTest#caesarDecryptTest",
                "SimpleSubCipherTest#simpleSubCipherDecryptTest",
                "SimpleSubstitutionCipherTest#testDecode",
                "SimpleSubstitutionCipherTest#testIsTextTheSameAfterEncodeAndDecode"
            ],
            "children": [
                "Caesar#isCapitalLatinLetter",
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Caesar#isSmallLatinLetter",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "GenericTree#preorder": {
            "parameters": {
                "node": "Node"
            },
            "name": "GenericTree#preorder",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericTree#preordercall",
                "GenericTree#preorder"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SkipListTest#print",
                "BSTRecursiveGeneric#preorder",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "BSTIterative#preorder",
                "dijkstras#print",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "MinPriorityQueue#print",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "BSTRecursive#preorder",
                "GenericTree#preorder",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "Sudoku#print",
                "NodeStack#size",
                "SinglyLinkedList#print",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "NodeStack#print",
                "FibonacciHeap#size",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass": {
            "parameters": {},
            "name": "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "Queue#remove": {
            "parameters": {},
            "name": "Queue#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "Sparcity#sparcity": {
            "parameters": {
                "mat": "double[][]"
            },
            "name": "Sparcity#sparcity",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Sparcity#main"
            ],
            "children": []
        },
        "HashMapCuckooHashing#hashFunction1": {
            "parameters": {
                "key": "int"
            },
            "name": "HashMapCuckooHashing#hashFunction1",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HashMapCuckooHashing#insertKey2HashTable",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "HashMapCuckooHashing#checkTableContainsKey",
                "HashMapCuckooHashingTest#hashFunctionsAreDifferent"
            ],
            "children": []
        },
        "HashMapCuckooHashing#hashFunction2": {
            "parameters": {
                "key": "int"
            },
            "name": "HashMapCuckooHashing#hashFunction2",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HashMapCuckooHashing#insertKey2HashTable",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "HashMapCuckooHashing#checkTableContainsKey",
                "HashMapCuckooHashingTest#hashFunctionsAreDifferent"
            ],
            "children": []
        },
        "WiggleSort#triColorSort": {
            "parameters": {
                "sortThis": "T[]",
                "median": "T"
            },
            "name": "WiggleSort#triColorSort",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "WiggleSort#wiggleSort"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "WiggleSort#mapIndex",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "CircularBufferTest#setUp": {
            "parameters": {},
            "name": "CircularBufferTest#setUp",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "QuickSelectTest#quickSelectMinimumOfOneElement": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectMinimumOfOneElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "QuickSelect#select"
            ]
        },
        "HashMapCuckooHashing#reHashTableIncreasesTableSize": {
            "parameters": {},
            "name": "HashMapCuckooHashing#reHashTableIncreasesTableSize",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "HashMapCuckooHashing#insertKey2HashTable",
                "HashMapCuckooHashing#checkLoadFactor",
                "MainCuckooHashing#main",
                "HashMapCuckooHashingTest#reHashTableIncreasesTableSize"
            ],
            "children": [
                "HashMapCuckooHashing#insertKey2HashTable",
                "HeapElement#equals"
            ]
        },
        "DistanceFormula#minkowskiDistance": {
            "parameters": {
                "p": "int",
                "p1": "double[]",
                "p2": "double[]"
            },
            "name": "DistanceFormula#minkowskiDistance",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "DistanceFormulaTest#minkowskiTest1",
                "DistanceFormulaTest#minkowskiTest2",
                "DistanceFormulaTest#minkowskiTest3"
            ],
            "children": [
                "Pow#pow",
                "FFTTest#abs",
                "Complex#abs",
                "PowRecursion#pow"
            ]
        },
        "Bag#contains": {
            "parameters": {
                "element": "Element"
            },
            "name": "Bag#contains",
            "recursive": "false",
            "inComing": 31,
            "outGoing": 0,
            "numberOfCalls": 31,
            "parents": [
                "AnyBaseToAnyBase#validForBase",
                "Bag#main",
                "A_Star#aStar",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Kruskal#kruskal",
                "LinearProbingHashMap#delete",
                "Tree#printTopView",
                "KaprekarNumbers#isKaprekarNumber",
                "CRCAlgorithm#divideMessageWithP",
                "HappyNumbersSeq#isSad",
                "UnionFind#count",
                "CheckVowels#hasVowels",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "MapTest#containsTest",
                "SkipListTest#contains",
                "KaprekarNumbersTest#testForRangeOfNumber",
                "SquareFreeIntegerTest#testIsSquareFreeInteger",
                "HammingDistanceTest#mismatchDataBits"
            ],
            "children": [
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "SimpleNode#hasNext",
                "LinkedQueue#iterator",
                "ListIterator#hasNext",
                "HeapElement#equals",
                "DynamicArray#iterator",
                "DynamicArrayIterator#hasNext",
                "Bag#iterator"
            ]
        },
        "FCFSSchedulingTest#testingProcesses": {
            "parameters": {},
            "name": "FCFSSchedulingTest#testingProcesses",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ProcessDetails#getTurnAroundTimeTime",
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "ProcessDetails#getWaitingTime",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "ProcessDetails#getProcessId",
                "FCFSScheduling#scheduleProcesses",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "SJFScheduling#scheduleProcesses"
            ]
        },
        "CreateBinaryTreeFromInorderPreorder#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CreateBinaryTreeFromInorderPreorder#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "VectorCrossProduct#test",
                "CreateBinaryTreeFromInorderPreorder#test",
                "FactorialTest#test",
                "ColorContrastRatio#test",
                "CreateBSTFromSortedArray#test",
                "VampireNumber#test"
            ]
        },
        "Combination#combination": {
            "parameters": {
                "arr": "T[]",
                "n": "int"
            },
            "name": "Combination#combination",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "ArrayCombination#combination",
                "ArrayCombinationTest#testNBeingZeroOrLess",
                "ArrayCombinationTest#testNoLengthElement",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testNoElement",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "Permutation#backtracking",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "Combination#backtracking",
                "BitonicSort#sort"
            ]
        },
        "InorderTraversal#recursiveInorder": {
            "parameters": {
                "result": "List\u003cInteger\u003e",
                "root": "BinaryTree.Node"
            },
            "name": "InorderTraversal#recursiveInorder",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "InorderTraversal#recursiveInorder",
                "InorderTraversalTest#testNullRoot",
                "InorderTraversalTest#testRecursiveInorder",
                "InorderTraversalTest#testRecursiveInorderNonBalanced"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "InorderTraversal#recursiveInorder",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "NumberOfDigits#numberOfDigits": {
            "parameters": {
                "number": "int"
            },
            "name": "NumberOfDigits#numberOfDigits",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "NumberOfDigits#main"
            ],
            "children": []
        },
        "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow": {
            "parameters": {},
            "name": "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString",
                "BinarySearch2dArray#BinarySearch"
            ]
        },
        "LevelOrderTraversalTest#testRootNull": {
            "parameters": {},
            "name": "LevelOrderTraversalTest#testRootNull",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LevelOrderTraversal#traverse",
                "ZigzagTraversal#traverse"
            ]
        },
        "RedBlackBST#printTree": {
            "parameters": {
                "node": "Node"
            },
            "name": "RedBlackBST#printTree",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "RedBlackBST#printTree",
                "RedBlackBST#insertDemo",
                "RedBlackBST#deleteDemo"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "RedBlackBST#printTree",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "Krishnamurthy#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Krishnamurthy#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Krishnamurthy#fact",
                "BufferedReader#close",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "Node#getName": {
            "parameters": {},
            "name": "Node#getName",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "QuickSort#partition": {
            "parameters": {
                "array": "T[]",
                "left": "int",
                "right": "int"
            },
            "name": "QuickSort#partition",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "FindKthNumber#findKthMax",
                "BFPRT#bfprt",
                "QuickSelect#selectIndex",
                "DualPivotQuickSort#dualPivotQuicksort",
                "IntrospectiveSort#introSort",
                "QuickSort#randomPartition"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "SortUtils#less",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "HeapSort#less",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "MapTest#hashTest": {
            "parameters": {},
            "name": "MapTest#hashTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BucketSort#hash",
                "LinearProbingHashMapTest#getMap",
                "Map#hash",
                "MapTest#getMap"
            ]
        },
        "MyAtoiTest#testFive": {
            "parameters": {},
            "name": "MyAtoiTest#testFive",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MyAtoi#myAtoi"
            ]
        },
        "PathAndDistance#printSolution": {
            "parameters": {},
            "name": "PathAndDistance#printSolution",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "A_Star#main"
            ],
            "children": []
        },
        "BinaryTree#find": {
            "parameters": {
                "key": "int"
            },
            "name": "BinaryTree#find",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "BufferedReader#pushRefreshData": {
            "parameters": {},
            "name": "BufferedReader#pushRefreshData",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "BufferedReader#peek",
                "BufferedReader#readBlock"
            ],
            "children": [
                "BufferedReader#justRefill"
            ]
        },
        "Map#keys": {
            "parameters": {},
            "name": "Map#keys",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MapTest#keysTest"
            ],
            "children": []
        },
        "CoinChange#change": {
            "parameters": {
                "amount": "int",
                "coins": "int[]"
            },
            "name": "CoinChange#change",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CoinChange#main"
            ],
            "children": []
        },
        "SegmentTree#update": {
            "parameters": {
                "index": "int",
                "value": "int"
            },
            "name": "SegmentTree#update",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "GuassLegendre#pi"
            ],
            "children": [
                "SegmentTree#updateTree"
            ]
        },
        "MapTest#keysTest": {
            "parameters": {},
            "name": "MapTest#keysTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "LinearProbingHashMap#keys",
                "GenericHashMapUsingArrayList#put",
                "LinearProbingHashMapTest#getMap",
                "GenericHashMapUsingArray#put",
                "SimpleNode#hasNext",
                "LinkedQueue#iterator",
                "MapTest#getMap",
                "DynamicArray#put",
                "Map#keys",
                "ListIterator#hasNext",
                "CircularBufferTest#put",
                "DynamicArray#iterator",
                "DynamicArrayIterator#hasNext",
                "MRUCache#put",
                "Bag#iterator",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "LeftistHeap#insert": {
            "parameters": {
                "a": "int"
            },
            "name": "LeftistHeap#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "MergeSort#merge",
                "StrandSort#merge",
                "MergeSortRecursive#merge",
                "TimSort#merge",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "LeftistHeap#merge"
            ]
        },
        "Node#shift": {
            "parameters": {},
            "name": "Node#shift",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "ArrayCombinationTest#testNBeingZeroOrLess": {
            "parameters": {},
            "name": "ArrayCombinationTest#testNBeingZeroOrLess",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ArrayCombination#combination",
                "Combination#combination"
            ]
        },
        "FastInverseSqrtTests#testForFourth": {
            "parameters": {},
            "name": "FastInverseSqrtTests#testForFourth",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FastInverseSqrt#inverseSqrt"
            ]
        },
        "HamiltonianCycle#isPresent": {
            "parameters": {
                "vertex": "int"
            },
            "name": "HamiltonianCycle#isPresent",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "HamiltonianCycle#isPathFound",
                "FibonacciJavaStreams#main",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE"
            ],
            "children": []
        },
        "DynamicArray#getElement": {
            "parameters": {
                "index": "int"
            },
            "name": "DynamicArray#getElement",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "DynamicArray#get",
                "DynamicArray#remove",
                "DynamicArrayIterator#next",
                "DynamicArrayIterator#forEachRemaining",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement"
            ],
            "children": []
        },
        "BucketSortTest#bucketSortDuplicateIntegerArrayWithNegativeNum": {
            "parameters": {},
            "name": "BucketSortTest#bucketSortDuplicateIntegerArrayWithNegativeNum",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BucketSort#bucketSort"
            ]
        },
        "SubsetSum#subsetSum": {
            "parameters": {
                "arr": "int[]",
                "sum": "int"
            },
            "name": "SubsetSum#subsetSum",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "SubsetSum#main",
                "Sum_Of_Subset#main",
                "Sum_Of_Subset#subsetSum"
            ],
            "children": []
        },
        "DecimalToHexaDecimalTest#testDecimalToHexaDecimal": {
            "parameters": {},
            "name": "DecimalToHexaDecimalTest#testDecimalToHexaDecimal",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DecimalToHexaDecimal#decToHex"
            ]
        },
        "Utils#increment": {
            "parameters": {
                "size": "int",
                "bits": "BitSet"
            },
            "name": "Utils#increment",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "A5KeyStreamGenerator#incrementFrameCounter",
                "LinearProbingHashMap#put",
                "LinearProbingHashMap#get",
                "LinearProbingHashMap#delete"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "TopologicalSortTest#successTest": {
            "parameters": {},
            "name": "TopologicalSortTest#successTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "BellmanFord#addEdge",
                "Trie#add",
                "GnomeSort#sort",
                "Vector2#add",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "BSTRecursiveGeneric#add",
                "SlowSort#sort",
                "AdjacencyList#addEdge",
                "StrassenMatrixMultiplication#add",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "AdjacencyMatrixGraph#addEdge",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "DynamicArray#add",
                "CountingSort#sort",
                "BogoSort#sort",
                "AllPathsFromSourceToTarget#addEdge",
                "SwapSort#sort",
                "BSTRecursive#add",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "MatrixUtil#add",
                "PigeonholeSort#sort",
                "Complex#add",
                "AdjacencyListGraph#addEdge",
                "GenericHeap#add",
                "Kruskal#addEdge",
                "SkylineProblem#add",
                "Graph#addEdge",
                "SkipListTest#add",
                "Bag#add",
                "BitonicSort#sort",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "HexaDecimalToBinaryTest#testHexaDecimalToBinary": {
            "parameters": {},
            "name": "HexaDecimalToBinaryTest#testHexaDecimalToBinary",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HexaDecimalToBinary#convert",
                "DecimalToAnyUsingStack#convert"
            ]
        },
        "NextSmallerElement#findNextSmallerElements": {
            "parameters": {
                "array": "int[]"
            },
            "name": "NextSmallerElement#findNextSmallerElements",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "NextSmallerElement#main"
            ],
            "children": [
                "StackArrayList#peek",
                "FibonacciHeap#empty",
                "StackArray#pop",
                "LinkedListStack#push",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "StackArray#push",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "StackArrayList#push",
                "CircularQueue#peek",
                "NodeStack#pop",
                "PriorityQueue#peek",
                "StackArrayList#pop",
                "StackArray#peek",
                "NodeStack#push",
                "LinkedListStack#pop",
                "NodeStack#peek",
                "LinkedListStack#peek"
            ]
        },
        "longestNonRepeativeSubstring#lengthOfLongestSubstring": {
            "parameters": {
                "s": "String"
            },
            "name": "longestNonRepeativeSubstring#lengthOfLongestSubstring",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "longestNonRepeativeSubstringTest#palindrome"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "GenericHashMapUsingArray#put",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#containsKey",
                "CircleLinkedList#remove",
                "Map#size",
                "HashMapCuckooHashingTest#containsKey",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "SkipList#size",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "CircularBufferTest#put",
                "MRUCache#put",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "GenericHashMapUsingArrayList#remove",
                "LinearProbingHashMap#put",
                "GenericHeap#remove"
            ]
        },
        "BitonicSort#printArray": {
            "parameters": {
                "arr": "int[]"
            },
            "name": "BitonicSort#printArray",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "MatrixChainMultiplication#main",
                "BitonicSort#main",
                "DNFSort#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "ZigzagTraversal#traverse": {
            "parameters": {
                "root": "BinaryTree.Node"
            },
            "name": "ZigzagTraversal#traverse",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "LevelOrderTraversalTest#testRootNull",
                "LevelOrderTraversalTest#testSingleNodeTree",
                "LevelOrderTraversalTest#testLevelOrderTraversalCompleteTree",
                "LevelOrderTraversalTest#testLevelOrderTraversalDifferentHeight",
                "ZigzagTraversalTest#testRootNull",
                "ZigzagTraversalTest#testSingleNodeTree",
                "ZigzagTraversalTest#testZigzagTraversalCompleteTree",
                "ZigzagTraversalTest#testZigzagTraversalDifferentHeight"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "Deques#size",
                "NodeStack#size",
                "MatrixUtil#add",
                "CircularQueue#isEmpty",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "DynamicArray#isEmpty",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "InsertionSortTest#insertionSortClassicalForArrayWithNegativeValuesShouldPass": {
            "parameters": {},
            "name": "InsertionSortTest#insertionSortClassicalForArrayWithNegativeValuesShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "InsertionSortTest#testWithNegativeValues"
            ]
        },
        "LRUCacheTest#nullKeysAndValues": {
            "parameters": {},
            "name": "LRUCacheTest#nullKeysAndValues",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "OctalToDecimal#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "OctalToDecimal#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BufferedReader#close",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "OctalToDecimal#convertOctalToDecimal",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "CRCAlgorithmTest#test1": {
            "parameters": {},
            "name": "CRCAlgorithmTest#test1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CRCAlgorithm#divideMessageWithP",
                "CRCAlgorithm#getWrongMess",
                "CRCAlgorithm#changeMess"
            ]
        },
        "InfixToPostfix#infix2PostFix": {
            "parameters": {
                "infixExpression": "String"
            },
            "name": "InfixToPostfix#infix2PostFix",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "InfixToPostfix#main"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "SinglyLinkedList#toString",
                "LinkedListStack#push",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "LeftistHeap#isEmpty",
                "Deques#toString",
                "QueueWithStack#isEmpty",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "InfixToPostfix#precedence",
                "HeapElement#toString",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "StackArrayList#push",
                "DynamicArray#toString",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "NodeStack#pop",
                "CircleLinkedList#toString",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "BalancedBrackets#isBalanced",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "NodeStack#push",
                "LinkedListStack#pop",
                "CursorLinkedList#append",
                "LFSR#toString",
                "CircularQueue#isEmpty",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "NodeStack#peek",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "LinkedQueue#toString",
                "PriorityQueue#isEmpty"
            ]
        },
        "HammingDistanceTest#checkForSameBits": {
            "parameters": {},
            "name": "HammingDistanceTest#checkForSameBits",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MatrixUtil#assertThat",
                "FibonacciJavaStreams#assertThat",
                "DepthFirstSearch#assertThat"
            ]
        },
        "WorstFitCPUTest#testFitForUseOfOneBlock": {
            "parameters": {},
            "name": "WorstFitCPUTest#testFitForUseOfOneBlock",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "CRCAlgorithmTest#test2": {
            "parameters": {},
            "name": "CRCAlgorithmTest#test2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CRCAlgorithm#getCorrectMess",
                "CRCAlgorithm#divideMessageWithP",
                "CRCAlgorithm#changeMess"
            ]
        },
        "ClosestPair#bruteForce": {
            "parameters": {
                "arrayParam": "Location[]"
            },
            "name": "ClosestPair#bruteForce",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ClosestPair#closestPair"
            ],
            "children": [
                "ClosestPair#setMinNum",
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "StackOfLinkedList#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "StackOfLinkedList#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StackArrayList#peek",
                "PriorityQueue#getSize",
                "StackArray#pop",
                "LinkedListStack#push",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "StackArray#push",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "StackArrayList#push",
                "DynamicArray#getSize",
                "CircularQueue#peek",
                "NodeStack#pop",
                "LinkedListStack#getSize",
                "PriorityQueue#peek",
                "StackArrayList#pop",
                "StackArray#peek",
                "NodeStack#push",
                "LinkedListStack#pop",
                "CircleLinkedList#getSize",
                "NodeStack#getSize",
                "NodeStack#peek",
                "Queue#getSize",
                "LinkedListStack#peek"
            ]
        },
        "LeastCommonMultipleTest#testForFirst": {
            "parameters": {},
            "name": "LeastCommonMultipleTest#testForFirst",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LeastCommonMultiple#lcm"
            ]
        },
        "HashMapCuckooHashing#insertKey2HashTable": {
            "parameters": {
                "key": "int"
            },
            "name": "HashMapCuckooHashing#insertKey2HashTable",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "HashMapCuckooHashing#insertKey2HashTable",
                "HashMapCuckooHashing#reHashTableIncreasesTableSize",
                "MainCuckooHashing#main",
                "HashMapCuckooHashingTest#insertKey",
                "HashMapCuckooHashingTest#getKeyIndex",
                "HashMapCuckooHashingTest#containsKey",
                "HashMapCuckooHashingTest#removeKey",
                "HashMapCuckooHashingTest#hashFunctionsAreDifferent",
                "HashMapCuckooHashingTest#avoidInfiniteLoops"
            ],
            "children": [
                "HashMapCuckooHashing#checkLoadFactor",
                "StackArray#isFull",
                "PriorityQueue#isFull",
                "CircularQueue#isFull",
                "HashMapCuckooHashing#isFull",
                "HashMapCuckooHashing#hashFunction1",
                "HashMapCuckooHashing#hashFunction2",
                "HashMapCuckooHashing#reHashTableIncreasesTableSize",
                "HashMapCuckooHashing#insertKey2HashTable",
                "HeapElement#equals",
                "MinPriorityQueue#isFull",
                "CircularBufferTest#isFull",
                "Queue#isFull",
                "HashMapCuckooHashingTest#reHashTableIncreasesTableSize",
                "HashMapCuckooHashing#checkTableContainsKey",
                "CircularBuffer#isFull"
            ]
        },
        "ArrayLeftRotationTest#testForOneElement": {
            "parameters": {},
            "name": "ArrayLeftRotationTest#testForOneElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RedBlackBST#rotateLeft",
                "ArrayLeftRotation#rotateLeft",
                "AVLTree#rotateLeft"
            ]
        },
        "LinkListSort#compare": {
            "parameters": {
                "a": "int[]",
                "b": "int[]"
            },
            "name": "LinkListSort#compare",
            "recursive": "false",
            "inComing": 14,
            "outGoing": 0,
            "numberOfCalls": 14,
            "parents": [
                "XComparator#compare",
                "PowRecursion#main",
                "SumOfArithmeticSeries#main",
                "Vertex#compareTo",
                "LinkListSort#isSorted"
            ],
            "children": []
        },
        "SinglyLinkedListTest#middle": {
            "parameters": {},
            "name": "SinglyLinkedListTest#middle",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "SinglyLinkedListTest#middle"
            ],
            "children": [
                "SinglyLinkedListTest#createSampleList",
                "SinglyLinkedList#getHead",
                "SinglyLinkedListTest#middle",
                "SinglyLinkedList#middle",
                "NodeStack#getHead"
            ]
        },
        "RadixSort#getMax": {
            "parameters": {
                "arr": "int[]",
                "n": "int"
            },
            "name": "RadixSort#getMax",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "RadixSort#radixsort"
            ],
            "children": []
        },
        "LinkedListStack#getSize": {
            "parameters": {},
            "name": "LinkedListStack#getSize",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "DynamicArray#main",
                "NodeStack#push",
                "NodeStack#pop",
                "NodeStack#isEmpty",
                "NodeStack#size",
                "StackOfLinkedList#main",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": []
        },
        "LongestIncreasingSubsequence#findLISLen": {
            "parameters": {
                "a": "int[]"
            },
            "name": "LongestIncreasingSubsequence#findLISLen",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LongestIncreasingSubsequence#main"
            ],
            "children": [
                "LongestIncreasingSubsequence#binarySearchBetween"
            ]
        },
        "CircularBufferTest#get": {
            "parameters": {},
            "name": "CircularBufferTest#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "RangeInSortedArray#getLessThan": {
            "parameters": {
                "left": "int",
                "right": "int",
                "nums": "int[]",
                "key": "int"
            },
            "name": "RangeInSortedArray#getLessThan",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "RangeInSortedArray#getCountLessThan"
            ],
            "children": []
        },
        "RedBlackBST#deleteFixup": {
            "parameters": {
                "x": "Node"
            },
            "name": "RedBlackBST#deleteFixup",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "RedBlackBST#delete"
            ],
            "children": [
                "AVLTree#rotateRight",
                "RedBlackBST#rotateLeft",
                "RedBlackBST#rotateRight",
                "ArrayLeftRotation#rotateLeft",
                "AVLTree#rotateLeft"
            ]
        },
        "Hash#compute": {
            "parameters": {
                "key": "T"
            },
            "name": "Hash#compute",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "BloomFilter#insert",
                "BloomFilter#contains"
            ],
            "children": [
                "Hash#asciiString"
            ]
        },
        "PriorityQueuesTest#testPQInsertion": {
            "parameters": {},
            "name": "PriorityQueuesTest#testPQInsertion",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StackArrayList#peek",
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "CircularQueue#peek",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "PriorityQueue#peek",
                "AVLTree#insert",
                "StackArray#peek",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "NodeStack#peek",
                "PriorityQueue#insert",
                "LinkedListStack#peek"
            ]
        },
        "CheckTreeIsSymmetricTest#testSingleNodeTree": {
            "parameters": {},
            "name": "CheckTreeIsSymmetricTest#testSingleNodeTree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "CheckTreeIsSymmetric#isSymmetric",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "FFTTest#multiplyWithScalarTest": {
            "parameters": {},
            "name": "FFTTest#multiplyWithScalarTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Complex#getImaginary",
                "Vector2#multiply",
                "Complex#multiply",
                "MatrixUtil#multiply",
                "StrassenMatrixMultiplication#multiply",
                "Complex#getReal"
            ]
        },
        "LinearSearchThread#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LinearSearchThread#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "Searcher#getResult",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Cycle#start",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "StrassenMatrixMultiplication#join",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "Node#setPrevious": {
            "parameters": {
                "node": "Node\u003cE\u003e",
                "layer": "int"
            },
            "name": "Node#setPrevious",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "EggDroppingTest#hasMultipleEggMultipleFloor": {
            "parameters": {},
            "name": "EggDroppingTest#hasMultipleEggMultipleFloor",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "EggDropping#minTrials"
            ]
        },
        "PiNilakantha#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PiNilakantha#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PiNilakantha#calculatePi"
            ]
        },
        "LinkOperations#insertOrdered": {
            "parameters": {
                "x": "int",
                "doublyLinkedList": "DoublyLinkedList"
            },
            "name": "LinkOperations#insertOrdered",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "Link#main"
            ],
            "children": [
                "LinkOperations#insertTail",
                "SinglyLinkedList#insertHead",
                "LinkOperations#insertHead"
            ]
        },
        "HappyNumbersSeq#isSad": {
            "parameters": {
                "n": "int"
            },
            "name": "HappyNumbersSeq#isSad",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "HappyNumbersSeq#main"
            ],
            "children": [
                "Map#contains",
                "Bag#contains",
                "BloomFilter#contains",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "SkipList#contains"
            ]
        },
        "KaprekarNumbersTest#testFor857143": {
            "parameters": {},
            "name": "KaprekarNumbersTest#testFor857143",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KaprekarNumbers#isKaprekarNumber"
            ]
        },
        "CircleLinkedList#toString": {
            "parameters": {},
            "name": "CircleLinkedList#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": []
        },
        "FibonacciNumber#isPerfectSquare": {
            "parameters": {
                "number": "int"
            },
            "name": "FibonacciNumber#isPerfectSquare",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "FibonacciNumber#isFibonacciNumber",
                "PerfectSquare#main",
                "PerfectSquareTest#TestPerfectSquareifiscorrect",
                "PerfectSquareTest#TestPerfectSquareifisnotcorrect",
                "PerfectSquareTest#TestPerfectSquareifisNegativeNumber"
            ],
            "children": []
        },
        "MRUCacheTest#putAndGetIntegerValues": {
            "parameters": {},
            "name": "MRUCacheTest#putAndGetIntegerValues",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "AESEncryption#decryptText": {
            "parameters": {
                "secKey": "SecretKey",
                "byteCipherText": "byte[]"
            },
            "name": "AESEncryption#decryptText",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "AESEncryption#main"
            ],
            "children": []
        },
        "MagicSquare#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MagicSquare#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "LinkedList#insert": {
            "parameters": {
                "key": "int"
            },
            "name": "LinkedList#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "NodeStack#setNext",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "LinkedList#findEnd",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "HeapNode#setNext",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "BinaryExponentiation#power": {
            "parameters": {
                "M": "long",
                "N": "long"
            },
            "name": "BinaryExponentiation#power",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "PowerSum#Sum",
                "BinaryExponentiationTest#testPower"
            ],
            "children": []
        },
        "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide": {
            "parameters": {},
            "name": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "HexToOctTest#testHexToOct": {
            "parameters": {},
            "name": "HexToOctTest#testHexToOct",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HexToOct#decimal2octal",
                "HexToOct#hex2decimal"
            ]
        },
        "AVLSimple#leftRotate": {
            "parameters": {
                "c": "Node"
            },
            "name": "AVLSimple#leftRotate",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AVLSimple#insert"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "HeightStrategy#height",
                "BernoulliHeightStrategy#height",
                "FindMaxRecursion#max",
                "AVLTree#height",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max",
                "GenericTree#height",
                "AVLSimple#height",
                "LevelOrderTraversalHelper#height"
            ]
        },
        "AdjacencyMatrixGraph#adjacency": {
            "parameters": {},
            "name": "AdjacencyMatrixGraph#adjacency",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "null#null",
                "AdjacencyMatrixGraph#adjacencyOfEdgeDoesExist",
                "AdjacencyMatrixGraph#addEdge",
                "AdjacencyMatrixGraph#removeEdge"
            ],
            "children": []
        },
        "Rotate_by_90_degree#printMatrix": {
            "parameters": {
                "arr": "int[][]"
            },
            "name": "Rotate_by_90_degree#printMatrix",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Rotate_by_90_degree#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "MinimumSumPartition#getMin": {
            "parameters": {
                "arr": "int[]",
                "sum": "int"
            },
            "name": "MinimumSumPartition#getMin",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MinimumSumPartition#subSet"
            ],
            "children": [
                "FindMinRecursion#min",
                "MinValue#min",
                "BucketSort#min"
            ]
        },
        "BFPRT#getMinKthByBFPRT": {
            "parameters": {
                "arr": "int[]",
                "k": "int"
            },
            "name": "BFPRT#getMinKthByBFPRT",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BFPRT#getMinKNumsByBFPRT"
            ],
            "children": [
                "BFPRT#bfprt",
                "BFPRT#copyArray"
            ]
        },
        "AnyBaseToAnyBase#validForBase": {
            "parameters": {
                "n": "String",
                "base": "int"
            },
            "name": "AnyBaseToAnyBase#validForBase",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "AnyBaseToAnyBase#main"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "Map#contains",
                "Bag#contains",
                "DynamicArray#add",
                "BloomFilter#contains",
                "BSTRecursive#add",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "SkipList#contains",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "RedBlackBST#fixTree": {
            "parameters": {
                "node": "Node"
            },
            "name": "RedBlackBST#fixTree",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "RedBlackBST#insert"
            ],
            "children": [
                "AVLTree#rotateRight",
                "RedBlackBST#rotateLeft",
                "RedBlackBST#rotateRight",
                "ArrayLeftRotation#rotateLeft",
                "AVLTree#rotateLeft"
            ]
        },
        "CountWords#getDictionary": {
            "parameters": {},
            "name": "CountWords#getDictionary",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "TopKWords#main"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "BufferedReader#close",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "BufferedReader#read",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "PascalTriangle#pascal": {
            "parameters": {
                "n": "int"
            },
            "name": "PascalTriangle#pascal",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "PascalTriangleTest#testForOne",
                "PascalTriangleTest#testForTwo",
                "PascalTriangleTest#testForFive",
                "PascalTriangleTest#testForEight"
            ],
            "children": []
        },
        "Bag#isEmpty": {
            "parameters": {},
            "name": "Bag#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "DistanceFormulaTest#hammingTest2": {
            "parameters": {},
            "name": "DistanceFormulaTest#hammingTest2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DistanceFormula#hammingDistance"
            ]
        },
        "DistanceFormulaTest#hammingTest1": {
            "parameters": {},
            "name": "DistanceFormulaTest#hammingTest1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DistanceFormula#hammingDistance"
            ]
        },
        "ConnectedComponent#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ConnectedComponent#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BellmanFord#addEdge",
                "AdjacencyList#addEdge",
                "AdjacencyMatrixGraph#addEdge",
                "AllPathsFromSourceToTarget#addEdge",
                "AdjacencyListGraph#addEdge",
                "Kruskal#addEdge",
                "Graph#addEdge"
            ]
        },
        "ReverseStackUsingRecursion#insertAtEnd": {
            "parameters": {
                "temptop": "int"
            },
            "name": "ReverseStackUsingRecursion#insertAtEnd",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LinkedListStack#push",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "StackArrayList#push",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "NodeStack#pop",
                "Bag#isEmpty",
                "ReverseStackUsingRecursion#insertAtEnd",
                "MinPriorityQueue#isEmpty",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "NodeStack#push",
                "LinkedListStack#pop",
                "CircularQueue#isEmpty",
                "NodeStack#peek",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "PriorityQueue#isEmpty"
            ]
        },
        "LeftistHeapTest#testLeftistHeap": {
            "parameters": {},
            "name": "LeftistHeapTest#testLeftistHeap",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "SinglyLinkedList#clear",
                "UnionFind#toString",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "FibonacciHeap#insert",
                "LeftistHeap#in_order",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "LeftistHeap#isEmpty",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "Deques#toString",
                "QueueWithStack#isEmpty",
                "HeapElement#toString",
                "SinglyLinkedListTest#clear",
                "LinkedQueue#clear",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "RedBlackBST#insert",
                "DynamicArray#toString",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "CircleLinkedList#toString",
                "LinkedList#insert",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LeftistHeap#extract_min",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "LeftistHeap#clear",
                "AVLTree#insert",
                "HeapElement#equals",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "LFSR#toString",
                "SinglyLinkedList#insert",
                "CircularQueue#isEmpty",
                "GenericHashMapUsingArray#toString",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "Queue#toString",
                "PriorityQueue#insert",
                "DynamicArray#isEmpty",
                "LinkedQueue#toString",
                "PriorityQueue#isEmpty"
            ]
        },
        "FibonacciSearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "FibonacciSearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "NextFitCPUTest#testFitForNoEmptyBlockCell": {
            "parameters": {},
            "name": "NextFitCPUTest#testFitForNoEmptyBlockCell",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "FibonacciSearch#find": {
            "parameters": {
                "array": "T[]",
                "key": "T"
            },
            "name": "FibonacciSearch#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": [
                "FindMinRecursion#min",
                "MinValue#min",
                "BucketSort#min"
            ]
        },
        "DistanceFormulaTest#hammingTest3": {
            "parameters": {},
            "name": "DistanceFormulaTest#hammingTest3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DistanceFormula#hammingDistance"
            ]
        },
        "LFUCache#removeNode": {
            "parameters": {
                "node": "Node"
            },
            "name": "LFUCache#removeNode",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "LFUCache#get",
                "LFUCache#put"
            ],
            "children": []
        },
        "PerimeterTest#testcase4": {
            "parameters": {},
            "name": "PerimeterTest#testcase4",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Perimeter#perimeterRectangle"
            ]
        },
        "PerimeterTest#testcase5": {
            "parameters": {},
            "name": "PerimeterTest#testcase5",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Perimeter#perimeterCircle"
            ]
        },
        "PerimeterTest#testcase2": {
            "parameters": {},
            "name": "PerimeterTest#testcase2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Perimeter#perimeterRegularPolygon"
            ]
        },
        "PerimeterTest#testcase3": {
            "parameters": {},
            "name": "PerimeterTest#testcase3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Perimeter#perimeterRectangle"
            ]
        },
        "PerimeterTest#testcase1": {
            "parameters": {},
            "name": "PerimeterTest#testcase1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Perimeter#perimeterRegularPolygon"
            ]
        },
        "CatalanNumberTest#testCatalanNumber": {
            "parameters": {},
            "name": "CatalanNumberTest#testCatalanNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CatalanNumber#findNthCatalan"
            ]
        },
        "Volume#volumeCube": {
            "parameters": {
                "sideLength": "double"
            },
            "name": "Volume#volumeCube",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "VolumeTest#volume"
            ],
            "children": []
        },
        "CRCAlgorithm#generateRandomMess": {
            "parameters": {},
            "name": "CRCAlgorithm#generateRandomMess",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "CircularQueue#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CircularQueue#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "CircularQueue#deleteQueue",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "StackArray#isFull",
                "PriorityQueue#isFull",
                "CircularQueue#isFull",
                "QueueWithStack#isEmpty",
                "HashMapCuckooHashing#isFull",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularQueue#enQueue",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "MinPriorityQueue#isFull",
                "CircularBufferTest#isFull",
                "CircularQueue#isEmpty",
                "Queue#isFull",
                "NodeStack#peek",
                "DynamicArray#isEmpty",
                "CircularBuffer#isFull",
                "LinkedListStack#peek",
                "CircularQueue#deQueue",
                "PriorityQueue#isEmpty"
            ]
        },
        "Mandelbrot#colorCodedColorMap": {
            "parameters": {
                "distance": "double"
            },
            "name": "Mandelbrot#colorCodedColorMap",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Mandelbrot#getImage"
            ],
            "children": [
                "Floor#floor"
            ]
        },
        "HeapSort#sort": {
            "parameters": {
                "unsorted": "T[]"
            },
            "name": "HeapSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "HeapSort#heapify",
                "GenericHeap#swap",
                "HeapSort#siftDown",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "IntrospectiveSort#heapify",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "FibonacciJavaStreams#assertThat": {
            "parameters": {
                "actual": "Object",
                "expected": "Object"
            },
            "name": "FibonacciJavaStreams#assertThat",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "FibonacciJavaStreams#main",
                "MatrixUtil#main",
                "DepthFirstSearch#main",
                "AmicableNumberTest#testAmicableNumber",
                "ArmstrongTest#testIsArmstrong",
                "TestArmstrong#testArmstrong",
                "HammingDistanceTest#checkForDifferentBits",
                "HammingDistanceTest#checkForDifferentBitsLength",
                "HammingDistanceTest#checkForSameBits",
                "HammingDistanceTest#checkForLongDataBits",
                "HammingDistanceTest#mismatchDataBits",
                "HammingDistanceTest#checkForLongDataBitsSame",
                "SortUtilsRandomGeneratorTest#generateArray",
                "SortUtilsRandomGeneratorTest#generateArrayEmpty",
                "SortUtilsRandomGeneratorTest#generateDouble"
            ],
            "children": [
                "HeapElement#equals"
            ]
        },
        "StringCompressionTest#stringCompressionTest": {
            "parameters": {
                "input": "String",
                "expectedOutput": "String"
            },
            "name": "StringCompressionTest#stringCompressionTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StringCompression#compress"
            ]
        },
        "LRUCacheTest#overCapacity": {
            "parameters": {},
            "name": "LRUCacheTest#overCapacity",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "FloodFill#getPixel": {
            "parameters": {
                "image": "int[][]",
                "x": "int",
                "y": "int"
            },
            "name": "FloodFill#getPixel",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "FloodFill#floodFill",
                "BoundaryFill#boundaryFill"
            ],
            "children": []
        },
        "MinPriorityQueue#isEmpty": {
            "parameters": {},
            "name": "MinPriorityQueue#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "SinglyLinkedList#delete": {
            "parameters": {},
            "name": "SinglyLinkedList#delete",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "HashMap#deleteHash",
                "LinkedList#delete",
                "MinPriorityQueue#heapSort",
                "Link#main",
                "LinkOperations#removeDuplicates",
                "SinglyLinkedList#main",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "BSTRecursive#remove",
                "BSTRecursiveGeneric#delete",
                "BSTRecursiveGeneric#remove",
                "RedBlackBST#deleteDemo",
                "TrieImp#main",
                "MapTest#deleteTest",
                "MapTest#sizeTest",
                "KDTreeTest#delete"
            ],
            "children": [
                "SinglyLinkedList#deleteNth",
                "SinglyLinkedListTest#deleteNth"
            ]
        },
        "Sudoku#isSafe": {
            "parameters": {
                "col": "int",
                "num": "int",
                "row": "int",
                "board": "int[][]"
            },
            "name": "Sudoku#isSafe",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Sudoku#solveSudoku"
            ],
            "children": []
        },
        "MergeSortNoExtraSpace#implement_merge_sort": {
            "parameters": {
                "a": "int[]",
                "maxele": "int",
                "start": "int",
                "mid": "int",
                "end": "int"
            },
            "name": "MergeSortNoExtraSpace#implement_merge_sort",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MergeSortNoExtraSpace#merge_sort"
            ],
            "children": []
        },
        "CollatzConjectureTest#collatzConjecture": {
            "parameters": {},
            "name": "CollatzConjectureTest#collatzConjecture",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "CollatzConjectureTest#collatzConjecture",
                "CollatzConjectureTest#sequenceOfNotNaturalFirstNumber"
            ],
            "children": [
                "CollatzConjectureTest#collatzConjecture",
                "CollatzConjecture#collatzConjecture"
            ]
        },
        "SortUtilsRandomGenerator#generateArray": {
            "parameters": {
                "size": "int"
            },
            "name": "SortUtilsRandomGenerator#generateArray",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "FindKthNumber#main",
                "InsertionSort#main",
                "InsertionSortTest#testWithRandomArray",
                "SortUtilsRandomGeneratorTest#generateArray",
                "SortUtilsRandomGeneratorTest#generateArrayEmpty",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
            ],
            "children": [
                "SortUtilsRandomGenerator#generateDouble",
                "SortUtilsRandomGeneratorTest#generateDouble"
            ]
        },
        "LeftistHeap#extract_min": {
            "parameters": {},
            "name": "LeftistHeap#extract_min",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LeftistHeapTest#testLeftistHeap"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "MergeSort#merge",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "StrandSort#merge",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "MergeSortRecursive#merge",
                "CircularQueue#isEmpty",
                "TimSort#merge",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "DynamicArray#isEmpty",
                "LeftistHeap#merge",
                "PriorityQueue#isEmpty"
            ]
        },
        "CheckAnagramsTest#CheckDifferentCasesAnagram": {
            "parameters": {},
            "name": "CheckAnagramsTest#CheckDifferentCasesAnagram",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CheckAnagrams#isAnagrams"
            ]
        },
        "CycleSort#sort": {
            "parameters": {
                "arr": "T[]"
            },
            "name": "CycleSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "SortUtils#less",
                "CycleSort#replace",
                "HeapSort#less"
            ]
        },
        "SJFSchedulingTest#sort": {
            "parameters": {},
            "name": "SJFSchedulingTest#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "ProcessDetails#getProcessId",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "SJFSchedulingTest#initialisation1",
                "LFUCache#get",
                "SJFScheduling#sortByArrivalTime"
            ]
        },
        "SieveOfEratosthenes#findPrimesTill": {
            "parameters": {
                "n": "int"
            },
            "name": "SieveOfEratosthenes#findPrimesTill",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SieveOfEratosthenes#main"
            ],
            "children": [
                "DynamicArray#stream",
                "CountSinglyLinkedListRecursion#count",
                "Task2#count",
                "Task#count",
                "UnionFind#count",
                "Task1#count",
                "SinglyLinkedList#count",
                "Matrix#count"
            ]
        },
        "UnionFind#count": {
            "parameters": {},
            "name": "UnionFind#count",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "CountSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "MatrixChainMultiplication#main",
                "SieveOfEratosthenes#findPrimesTill",
                "UnionFind#main",
                "Task#sortByMergeSort",
                "Task1#sortByInsertionSort",
                "Task2#sortByHeapSort"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearProbingHashMap#size",
                "LinearSearch#find",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "IterativeTernarySearch#find",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "IterativeBinarySearch#find",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "UpperBound#find",
                "StackArrayList#size",
                "UnionFind#find",
                "Map#contains",
                "MatrixSearchAlgorithm#find",
                "Bag#contains",
                "FibonacciSearch#find",
                "SkipList#size",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "DynamicArray#add",
                "BloomFilter#contains",
                "SaddlebackSearch#find",
                "StackArray#size",
                "BSTRecursive#add",
                "SkipListTest#contains",
                "LowerBound#find",
                "Deques#size",
                "BinarySearch#find",
                "LinearProbingHashMap#contains",
                "NodeStack#size",
                "SkipList#contains",
                "MatrixUtil#add",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "FibonacciHeap#size",
                "Complex#add",
                "JumpSearch#find",
                "BSTRecursive#find",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "BucketSortTest#bucketSortNonDuplicateIntegerArrayWithNegativeNum": {
            "parameters": {},
            "name": "BucketSortTest#bucketSortNonDuplicateIntegerArrayWithNegativeNum",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BucketSort#bucketSort"
            ]
        },
        "StandardDeviation#stdDev": {
            "parameters": {
                "data": "double[]"
            },
            "name": "StandardDeviation#stdDev",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "StandardDeviationTest#test1",
                "StandardDeviationTest#test2",
                "StandardDeviationTest#test3",
                "StandardDeviationTest#test4"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "CycleSort#replace": {
            "parameters": {
                "arr": "T[]",
                "item": "T",
                "pos": "int"
            },
            "name": "CycleSort#replace",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Queue#toString",
                "LinkedListStack#toString",
                "CycleSort#sort"
            ],
            "children": []
        },
        "Cycle#dfs": {
            "parameters": {
                "temp": "ArrayList\u003cInteger\u003e",
                "start": "Integer",
                "curr": "Integer"
            },
            "name": "Cycle#dfs",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "Cycle#start",
                "Cycle#dfs",
                "Kosaraju#sortEdgesByLowestFinishTime",
                "Kosaraju#dfs",
                "LCA#main",
                "LCA#dfs"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Trie#add",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "Kosaraju#dfs",
                "CircleLinkedList#remove",
                "Map#size",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "LCA#dfs",
                "Queue#remove",
                "Cycle#dfs",
                "SkipList#remove",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "MatrixUtil#add",
                "FibonacciHeap#size",
                "Complex#add",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "CRC32#crc32": {
            "parameters": {
                "data": "byte[]"
            },
            "name": "CRC32#crc32",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "CRC32#main",
                "CRC32#crc32"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "ReverseString#reverse",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "CRC32#crc32",
                "GenericHeap#get",
                "Rotation#reverse",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "ReverseStringRecursive#reverse",
                "LFUCache#get",
                "LowestBasePalindrome#reverse"
            ]
        },
        "PerimeterTest#testcase8": {
            "parameters": {},
            "name": "PerimeterTest#testcase8",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Perimeter#perimeterIrregularPolygon"
            ]
        },
        "PerimeterTest#testcase6": {
            "parameters": {},
            "name": "PerimeterTest#testcase6",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Perimeter#perimeterCircle"
            ]
        },
        "PerimeterTest#testcase7": {
            "parameters": {},
            "name": "PerimeterTest#testcase7",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Perimeter#perimeterIrregularPolygon"
            ]
        },
        "KDTreeTest#pointOf": {
            "parameters": {
                "x": "int",
                "y": "int"
            },
            "name": "KDTreeTest#pointOf",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "KDTreeTest#delete",
                "KDTreeTest#findNearest"
            ],
            "children": []
        },
        "AnyBaseToDecimal#convertToDecimal": {
            "parameters": {
                "radix": "int",
                "s": "String"
            },
            "name": "AnyBaseToDecimal#convertToDecimal",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "AnyBaseToDecimal#main"
            ],
            "children": [
                "AnyBaseToDecimal#valOfChar"
            ]
        },
        "LongDivisionTest#testThree": {
            "parameters": {},
            "name": "LongDivisionTest#testThree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LongDivision#divide",
                "Complex#divide"
            ]
        },
        "PriorityQueue#swim": {
            "parameters": {
                "pos": "int"
            },
            "name": "PriorityQueue#swim",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PriorityQueue#insert"
            ],
            "children": []
        },
        "SelectionSort#sort": {
            "parameters": {
                "arr": "T[]"
            },
            "name": "SelectionSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": []
        },
        "WiggleSort#sort": {
            "parameters": {
                "unsorted": "T[]"
            },
            "name": "WiggleSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "WiggleSort#wiggleSort"
            ]
        },
        "WineProblem#WPBU": {
            "parameters": {
                "arr": "int[]"
            },
            "name": "WineProblem#WPBU",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "WineProblem#main"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "TernarySearch#ternarySearch": {
            "parameters": {
                "arr": "T[]",
                "start": "int",
                "end": "int",
                "key": "T"
            },
            "name": "TernarySearch#ternarySearch",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "TernarySearch#find",
                "TernarySearch#ternarySearch"
            ],
            "children": [
                "TernarySearch#ternarySearch"
            ]
        },
        "FFT#findLog2": {
            "parameters": {
                "N": "int"
            },
            "name": "FFT#findLog2",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FFT#fft"
            ],
            "children": []
        },
        "BestFitCPU#findBestFit": {
            "parameters": {
                "processSize": "int",
                "blockSizes": "int[]"
            },
            "name": "BestFitCPU#findBestFit",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BestFitCPU#fitProcess"
            ],
            "children": [
                "BestFitCPU#findMaxElement"
            ]
        },
        "BinomialCoefficientTest#testBinomialCoefficient": {
            "parameters": {},
            "name": "BinomialCoefficientTest#testBinomialCoefficient",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BinomialCoefficient#binomialCoefficient"
            ]
        },
        "DecimalToAnyUsingStack#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "DecimalToAnyUsingStack#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HexaDecimalToBinary#convert",
                "HeapElement#equals",
                "DecimalToAnyUsingStack#convert"
            ]
        },
        "PasswordGen#generatePassword": {
            "parameters": {
                "min_length": "int",
                "max_length": "int"
            },
            "name": "PasswordGen#generatePassword",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "PasswordGen#main",
                "PasswordGenTest#failGenerationWithSameMinMaxLengthTest",
                "PasswordGenTest#generateOneCharacterPassword",
                "PasswordGenTest#failGenerationWithMinLengthSmallerThanMaxLengthTest",
                "PasswordGenTest#generatePasswordNonEmptyTest"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "GenericHashMapUsingArray#size",
                "UnionFind#toString",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "Trie#add",
                "GenericHashMapUsingArrayList#toString",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "Deques#toString",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "HeapElement#toString",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "DynamicArray#toString",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "GenericHeap#get",
                "Vector2#toString",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "CursorLinkedList#append",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "LFUCache#get",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "Queue#toString",
                "CircleLinkedList#append",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "LinkedQueue#toString",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "BinaryTreeTest#test1": {
            "parameters": {},
            "name": "BinaryTreeTest#test1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "GenericHashMapUsingArrayList#put",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "GenericHashMapUsingArray#put",
                "IterativeBinarySearch#find",
                "UpperBound#find",
                "UnionFind#find",
                "DynamicArray#put",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "CircularBufferTest#put",
                "MRUCache#put",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "BinaryTreeTest#test2": {
            "parameters": {},
            "name": "BinaryTreeTest#test2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "BSTRecursive#remove",
                "PriorityQueue#remove",
                "GenericHashMapUsingArray#put",
                "CircleLinkedList#remove",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "DynamicArray#put",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "CircularBufferTest#put",
                "MRUCache#put",
                "QueueWithStack#remove",
                "Map#put",
                "LazySegmentTree#getRoot",
                "LRUCache#put",
                "GenericHashMapUsingArrayList#remove",
                "LinearProbingHashMap#put",
                "GenericHeap#remove"
            ]
        },
        "PangramTest#testPangram": {
            "parameters": {},
            "name": "PangramTest#testPangram",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Pangram#isPangram2",
                "Pangram#isPangram"
            ]
        },
        "BinaryTreeTest#test3": {
            "parameters": {},
            "name": "BinaryTreeTest#test3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "BSTRecursive#remove",
                "PriorityQueue#remove",
                "GenericHashMapUsingArray#put",
                "CircleLinkedList#remove",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "DynamicArray#put",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "CircularBufferTest#put",
                "MRUCache#put",
                "QueueWithStack#remove",
                "Map#put",
                "LRUCache#put",
                "GenericHashMapUsingArrayList#remove",
                "LinearProbingHashMap#put",
                "GenericHeap#remove"
            ]
        },
        "BinaryTreeTest#test4": {
            "parameters": {},
            "name": "BinaryTreeTest#test4",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "GenericHashMapUsingArrayList#put",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "BSTRecursive#remove",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "BSTRecursiveGeneric#inOrder",
                "PriorityQueue#remove",
                "GenericHashMapUsingArray#put",
                "BSTRecursive#inOrder",
                "IterativeBinarySearch#find",
                "CircleLinkedList#remove",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "UpperBound#find",
                "UnionFind#find",
                "BSTRecursiveGeneric#postOrder",
                "DynamicArray#put",
                "MatrixSearchAlgorithm#find",
                "BSTIterative#remove",
                "Queue#remove",
                "FibonacciSearch#find",
                "SkipList#remove",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "BSTRecursive#preOrder",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "LowerBound#find",
                "BinarySearch#find",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "CircularBufferTest#put",
                "BSTRecursive#postOrder",
                "MRUCache#put",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find",
                "QueueWithStack#remove",
                "Map#put",
                "TreeRandomNode#inOrder",
                "LazySegmentTree#getRoot",
                "LRUCache#put",
                "GenericHashMapUsingArrayList#remove",
                "LinearProbingHashMap#put",
                "GenericHeap#remove"
            ]
        },
        "FindMinTest#test2": {
            "parameters": {},
            "name": "FindMinTest#test2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FindMin#findMin",
                "KDTreeTest#findMin",
                "FibonacciHeap#findMin",
                "OptimalJobScheduling#findMin"
            ]
        },
        "InsertionSortTest#testWithDuplicates": {
            "parameters": {
                "sortAlgorithm": "Function\u003cInteger[],Integer[]\u003e"
            },
            "name": "InsertionSortTest#testWithDuplicates",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "InsertionSortTest#insertionSortClassicalForArrayWithDuplicateValuesShouldPass"
            ],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "ShortestSuperSequence#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ShortestSuperSequence#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ShortestSuperSequence#shortestSuperSequence"
            ]
        },
        "CycleSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CycleSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "QuickSelectTest#quickSelectMaximumOfTwoElements": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectMaximumOfTwoElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "QuickSelect#select"
            ]
        },
        "QuickSelectTest#quickSelect70thPercentileOf10Elements": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelect70thPercentileOf10Elements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "QuickSelectTest#getSortedCopyOfList",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "QuickSelect#select",
                "LFUCache#get",
                "QuickSelectTest#generateRandomIntegers"
            ]
        },
        "ColumnarTranspositionCipher#switchColumns": {
            "parameters": {
                "columnToSwitch": "Object[]",
                "firstColumnIndex": "int",
                "secondColumnIndex": "int",
                "table": "Object[][]"
            },
            "name": "ColumnarTranspositionCipher#switchColumns",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ColumnarTranspositionCipher#sortTable"
            ],
            "children": []
        },
        "ThreeSum#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ThreeSum#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "BufferedReader#close",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "QuickSelect#partition5": {
            "parameters": {
                "left": "int",
                "right": "int",
                "list": "List\u003cT\u003e"
            },
            "name": "QuickSelect#partition5",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "QuickSelect#pivot"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "FindMinTest#test1": {
            "parameters": {},
            "name": "FindMinTest#test1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FindMin#findMin",
                "KDTreeTest#findMin",
                "FibonacciHeap#findMin",
                "OptimalJobScheduling#findMin"
            ]
        },
        "GenericTree#removeleavescall": {
            "parameters": {},
            "name": "GenericTree#removeleavescall",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#removeleaves"
            ]
        },
        "GenericTree#findcall": {
            "parameters": {
                "info": "int"
            },
            "name": "GenericTree#findcall",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "AreaTest#surfaceAreaCone": {
            "parameters": {},
            "name": "AreaTest#surfaceAreaCone",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AreaTest#surfaceAreaCone",
                "AreaTest#testAllIllegalInput"
            ],
            "children": [
                "Area#surfaceAreaCone",
                "AreaTest#surfaceAreaCone"
            ]
        },
        "HashMapCuckooHashingTest#removeKey": {
            "parameters": {},
            "name": "HashMapCuckooHashingTest#removeKey",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HashMapCuckooHashing#getNumberOfKeysInTable",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#insertKey2HashTable"
            ]
        },
        "ConvolutionFFT#padding": {
            "parameters": {
                "x": "ArrayList\u003cFFT.Complex\u003e",
                "newSize": "int"
            },
            "name": "ConvolutionFFT#padding",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Trie#add",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "NodeStack#size",
                "MatrixUtil#add",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "OptimalJobScheduling#showResults": {
            "parameters": {},
            "name": "OptimalJobScheduling#showResults",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "OptimalJobScheduling#execute"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "DualPivotQuickSort#dualPivotQuicksort": {
            "parameters": {
                "array": "T[]",
                "left": "int",
                "right": "int"
            },
            "name": "DualPivotQuickSort#dualPivotQuicksort",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "DualPivotQuickSort#sort",
                "DualPivotQuickSort#dualPivotQuicksort"
            ],
            "children": [
                "QuickSelect#partition",
                "DualPivotQuickSort#partition",
                "IntrospectiveSort#partition",
                "FindKthNumber#partition",
                "QuickSort#partition",
                "DualPivotQuickSort#dualPivotQuicksort",
                "BFPRT#partition"
            ]
        },
        "AVLTree#search": {
            "parameters": {
                "key": "int"
            },
            "name": "AVLTree#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": [
                "AVLTree#searchHelper"
            ]
        },
        "AdjacencyListGraph#toString": {
            "parameters": {},
            "name": "AdjacencyListGraph#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "GenericArrayListQueue#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "GenericArrayListQueue#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StackArrayList#peek",
                "GenericArrayListQueue#pull",
                "Trie#add",
                "Vector2#add",
                "GenericArrayListQueue#peek",
                "BSTRecursiveGeneric#add",
                "LinkedQueue#peek",
                "StrassenMatrixMultiplication#add",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "CircularQueue#peek",
                "PriorityQueue#peek",
                "DynamicArray#add",
                "BSTRecursive#add",
                "StackArray#peek",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "NodeStack#peek",
                "SkipListTest#add",
                "Bag#add",
                "LinkedListStack#peek",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "MRUCache#moveEntryToLast": {
            "parameters": {
                "entry": "Entry\u003cK,V\u003e"
            },
            "name": "MRUCache#moveEntryToLast",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MRUCache#get",
                "MRUCache#put"
            ],
            "children": [
                "Entry#setNextEntry",
                "Entry#getPreEntry",
                "Entry#setPreEntry",
                "Entry#getNextEntry"
            ]
        },
        "BoardPath#startAlgo": {
            "parameters": {},
            "name": "BoardPath#startAlgo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "Lower#toLowerCase": {
            "parameters": {
                "s": "String"
            },
            "name": "Lower#toLowerCase",
            "recursive": "false",
            "inComing": 20,
            "outGoing": 0,
            "numberOfCalls": 20,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "DecimalToHexaDecimal#decToHex",
                "Alphabetical#isAlphabetical",
                "CheckAnagrams#isAnagrams",
                "CheckVowels#hasVowels",
                "HorspoolSearch#charEquals",
                "Lower#main",
                "Lower#toLowerCase",
                "Pangram#isPangram2",
                "LowerTest#toLowerCase"
            ],
            "children": [
                "Lower#toLowerCase",
                "LowerTest#toLowerCase"
            ]
        },
        "ColumnarTranspositionCipher#sortTable": {
            "parameters": {
                "table": "Object[][]"
            },
            "name": "ColumnarTranspositionCipher#sortTable",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "ColumnarTranspositionCipher#encrpyter"
            ],
            "children": [
                "ColumnarTranspositionCipher#getColumn",
                "ColumnarTranspositionCipher#switchColumns"
            ]
        },
        "PathAndDistance#getDistance": {
            "parameters": {},
            "name": "PathAndDistance#getDistance",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "A_Star#aStar",
                "Mandelbrot#getImage"
            ],
            "children": []
        },
        "IntrospectiveSort#swap": {
            "parameters": {
                "a": "T[]",
                "i": "int",
                "j": "int"
            },
            "name": "IntrospectiveSort#swap",
            "recursive": "false",
            "inComing": 55,
            "outGoing": 0,
            "numberOfCalls": 55,
            "parents": [
                "Permutation#backtracking",
                "GenericHeap#upHeapify",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "FFT#fftBitReversal",
                "FindKthNumber#partition",
                "BFPRT#partition",
                "BFPRT#insertionSort",
                "QuickSelect#partition",
                "QuickSelect#pivot",
                "BogoSort#nextPermutation",
                "BubbleSort#sort",
                "BubbleSortRecursion#bubbleSort",
                "CircleSort#doSort",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "DualPivotQuickSort#partition",
                "DutchNationalFlagSort#dutch_national_flag_sort",
                "GnomeSort#sort",
                "HeapSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "IntrospectiveSort#partition",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify",
                "OddEvenSort#oddEvenSort",
                "QuickSort#randomPartition",
                "QuickSort#partition",
                "SortUtils#flip",
                "WiggleSort#triColorSort"
            ],
            "children": []
        },
        "ThreeSumProblem#Hashmap": {
            "parameters": {
                "nums": "int[]",
                "target": "int"
            },
            "name": "ThreeSumProblem#Hashmap",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ThreeSumProblem#main"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "TopologicalSort#sort",
                "MRUCache#get",
                "LFSR#get",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "GenericHashMapUsingArrayList#put",
                "BeadSort#sort",
                "Trie#add",
                "GnomeSort#sort",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DynamicArray#get",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "GenericHashMapUsingArray#put",
                "BSTRecursiveGeneric#add",
                "SlowSort#sort",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "CombSort#sort",
                "GenericHashMapUsingArrayList#containsKey",
                "IntrospectiveSort#sort",
                "GenericHashMapUsingArrayList#get",
                "PancakeSort#sort",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "TreeSort#sort",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "GenericHeap#get",
                "TimSort#sort",
                "QuickSort#sort",
                "DynamicArray#add",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "BSTRecursive#add",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "StoogeSort#sort",
                "MatrixUtil#add",
                "LRUCache#get",
                "PigeonholeSort#sort",
                "LFUCache#get",
                "MRUCache#put",
                "Complex#add",
                "Map#put",
                "GenericHeap#add",
                "GenericHashMapUsingArray#containsKey",
                "SkylineProblem#add",
                "LRUCache#put",
                "SkipListTest#add",
                "Bag#add",
                "LinearProbingHashMap#put",
                "BitonicSort#sort",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "MergeSortNoExtraSpace#call_merge_sort": {
            "parameters": {
                "a": "int[]",
                "n": "int"
            },
            "name": "MergeSortNoExtraSpace#call_merge_sort",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MergeSortNoExtraSpace#main"
            ],
            "children": [
                "DynamicArray#stream",
                "DyanamicProgrammingKnapsack#max",
                "MergeSortNoExtraSpace#merge_sort",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "SelectionSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "SelectionSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "Node#getData": {
            "parameters": {},
            "name": "Node#getData",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "MatrixGraphs#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MatrixGraphs#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BellmanFord#addEdge",
                "AdjacencyList#addEdge",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "AdjacencyMatrixGraph#addEdge",
                "AllPathsFromSourceToTarget#addEdge",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyListGraph#addEdge",
                "Kruskal#addEdge",
                "Graph#addEdge"
            ]
        },
        "PrimMST#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PrimMST#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PrimMST#primMST"
            ]
        },
        "SinglyLinkedList#deleteNth": {
            "parameters": {
                "position": "int"
            },
            "name": "SinglyLinkedList#deleteNth",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "SinglyLinkedList#deleteHead",
                "SinglyLinkedList#delete",
                "SinglyLinkedList#main",
                "SinglyLinkedListTest#deleteNth"
            ],
            "children": [
                "SinglyLinkedList#checkBounds"
            ]
        },
        "KadaneAlogrithmTest#testForEightElements": {
            "parameters": {},
            "name": "KadaneAlogrithmTest#testForEightElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KadaneAlgorithm#max_Sum"
            ]
        },
        "DigitalRoot#digitalRoot": {
            "parameters": {
                "n": "int"
            },
            "name": "DigitalRoot#digitalRoot",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "DigitalRoot#digitalRoot",
                "DigitalRootTest#testDigitalroot"
            ],
            "children": [
                "DigitalRoot#digitalRoot",
                "DigitalRoot#single"
            ]
        },
        "GenericHeap#get": {
            "parameters": {},
            "name": "GenericHeap#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "TimSort#sort": {
            "parameters": {
                "a": "T[]"
            },
            "name": "TimSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "MergeSort#merge",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "StrandSort#merge",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "FindMinRecursion#min",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "MinValue#min",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "MergeSortRecursive#merge",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "TimSort#merge",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "BucketSort#min",
                "BitonicSort#sort",
                "LeftistHeap#merge"
            ]
        },
        "NodeStack#getPrevious": {
            "parameters": {},
            "name": "NodeStack#getPrevious",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "NodeStack#pop"
            ],
            "children": []
        },
        "ShellSortTest#ShellSortNonDuplicateIntegerArray": {
            "parameters": {},
            "name": "ShellSortTest#ShellSortNonDuplicateIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "Vector2#rotate": {
            "parameters": {
                "angleInDegrees": "double"
            },
            "name": "Vector2#rotate",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "KochSnowflake#IterationStep",
                "Rotate_by_90_degree#main"
            ],
            "children": []
        },
        "QuickSelect#selectIndex": {
            "parameters": {
                "left": "int",
                "right": "int",
                "list": "List\u003cT\u003e",
                "n": "int"
            },
            "name": "QuickSelect#selectIndex",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "QuickSelect#pivot"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "QuickSelect#partition",
                "DualPivotQuickSort#partition",
                "LinearProbingHashMap#size",
                "QuickSelect#pivot",
                "IntrospectiveSort#partition",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "FindKthNumber#partition",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "QuickSort#partition",
                "QuickSelect#selectIndex",
                "SkipList#size",
                "StackArray#size",
                "BFPRT#partition",
                "Deques#size",
                "NodeStack#size",
                "FibonacciHeap#size"
            ]
        },
        "HammingDistanceTest#mismatchDataBits": {
            "parameters": {},
            "name": "HammingDistanceTest#mismatchDataBits",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MatrixUtil#assertThat",
                "Map#contains",
                "Bag#contains",
                "FibonacciJavaStreams#assertThat",
                "BloomFilter#contains",
                "DepthFirstSearch#assertThat",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "SkipList#contains"
            ]
        },
        "MinimumPathSum#testOneRowOneColumn": {
            "parameters": {},
            "name": "MinimumPathSum#testOneRowOneColumn",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MinimumPathSum#minimumPathSum"
            ]
        },
        "BufferedReader#close": {
            "parameters": {},
            "name": "BufferedReader#close",
            "recursive": "false",
            "inComing": 61,
            "outGoing": 0,
            "numberOfCalls": 61,
            "parents": [
                "ProductCipher#main",
                "AnyBaseToAnyBase#main",
                "AnytoAny#main",
                "BinaryToDecimal#main",
                "BinaryToHexadecimal#main",
                "BinaryToOctal#main",
                "DecimalToAnyBase#main",
                "DecimalToBinary#conventionalConversion",
                "DecimalToBinary#bitwiseConversion",
                "DecimalToOctal#main",
                "HexToOct#main",
                "HexaDecimalToDecimal#main",
                "OctalToDecimal#main",
                "OctalToHexadecimal#main",
                "TurkishToLatinConversion#main",
                "BellmanFord#go",
                "null#null",
                "FloydWarshall#main",
                "Main#main",
                "MainCuckooHashing#main",
                "CreateAndDetectLoop#main",
                "DuplicateBrackets#main",
                "ReverseStack#main",
                "RedBlackBST#insertDemo",
                "RedBlackBST#deleteDemo",
                "CatalanNumber#main",
                "EditDistance#main",
                "Fibonacci#main",
                "LongestIncreasingSubsequence#main",
                "PalindromicPartitioning#main",
                "BufferedReader#close",
                "NonRepeatingElement#main",
                "PrimeCheck#main",
                "MinimizingLateness#main",
                "InverseOfMatrix#main",
                "PalindromePrime#main",
                "BankersAlgorithm#main",
                "BrianKernighanAlgorithm#main",
                "CountWords#main",
                "FibbonaciSeries#main",
                "FloydTriangle#main",
                "InsertDeleteInArray#main",
                "Krishnamurthy#main",
                "LowestBasePalindrome#main",
                "PerlinNoise#main",
                "RemoveDuplicateFromString#main",
                "ReturnSubsequence#main",
                "RootPrecision#main",
                "Rotate_by_90_degree#main",
                "SkylineProblem#run",
                "StackPostfixNotation#main",
                "StackPostfixNotation#postfixEvaluate",
                "StringMatchFiniteAutomata#main",
                "ThreeSum#main",
                "CountWords#getDictionary",
                "TopKWords#main",
                "TowerOfHanoi#main",
                "HowManyTimesRotated#main",
                "SaddlebackSearch#main"
            ],
            "children": [
                "BufferedReader#close"
            ]
        },
        "Solution#longestPalindrome": {
            "parameters": {
                "s": "String"
            },
            "name": "Solution#longestPalindrome",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LongestPalindromicSubstring#main"
            ],
            "children": [
                "TrieImp#isValid",
                "MatrixUtil#isValid",
                "Solution#isValid",
                "ValidParentheses#isValid"
            ]
        },
        "LongestPalindromicSubsequence#LPS": {
            "parameters": {
                "original": "String"
            },
            "name": "LongestPalindromicSubsequence#LPS",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "LongestPalindromicSubsequence#main",
                "LongestPalindromicSubstring#main"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "ReverseString#reverse",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Rotation#reverse",
                "Vector2#toString",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "LongestPalindromicSubsequence#recursiveLPS",
                "LFSR#toString",
                "ReverseStringRecursive#reverse",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LowestBasePalindrome#reverse",
                "LinkedQueue#toString"
            ]
        },
        "AdjacencyMatrixGraph#numberOfVertices": {
            "parameters": {},
            "name": "AdjacencyMatrixGraph#numberOfVertices",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "AdjacencyMatrixGraph#vertexDoesExist",
                "AdjacencyMatrixGraph#toString"
            ],
            "children": []
        },
        "SearchSinglyLinkedListRecursion#search": {
            "parameters": {
                "key": "int"
            },
            "name": "SearchSinglyLinkedListRecursion#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": [
                "SinglyLinkedList#getHead",
                "SearchSinglyLinkedListRecursion#searchRecursion",
                "NodeStack#getHead"
            ]
        },
        "Rotation#reverse": {
            "parameters": {
                "values": "char[]",
                "from": "int",
                "to": "int"
            },
            "name": "Rotation#reverse",
            "recursive": "false",
            "inComing": 24,
            "outGoing": 0,
            "numberOfCalls": 24,
            "parents": [
                "DecimalToAnyBase#convertToAnyBase",
                "Link#main",
                "SkipList#toString",
                "FordFulkerson#networkFlow",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "KeithNumber#isKeith",
                "PalindromePrime#functioning",
                "CRC32#crc32",
                "LowestBasePalindrome#lowestBasePalindrome",
                "Palindrome#isPalindrome",
                "ReverseString#main",
                "ReverseString#reverse",
                "ReverseStringRecursive#reverse",
                "Rotation#rotation",
                "ReverseStringRecursiveTest#shouldAcceptWhenEmptyStringIsPassed",
                "ReverseStringRecursiveTest#shouldAcceptNotWhenWhenSingleCharacterIsPassed",
                "ReverseStringRecursiveTest#shouldAcceptWhenStringIsPassed",
                "ReverseStringTest#ReverseStringTest"
            ],
            "children": []
        },
        "RedBlackBST#printTreepre": {
            "parameters": {
                "node": "Node"
            },
            "name": "RedBlackBST#printTreepre",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "RedBlackBST#printTreepre",
                "RedBlackBST#insertDemo",
                "RedBlackBST#deleteDemo"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "RedBlackBST#printTreepre",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "IntegerToRoman#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "IntegerToRoman#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "IntegerToRoman#integerToRoman"
            ]
        },
        "SegmentTree#getSumTree": {
            "parameters": {
                "q_start": "int",
                "seg_index": "int",
                "start": "int",
                "q_end": "int",
                "end": "int"
            },
            "name": "SegmentTree#getSumTree",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "SegmentTree#getSumTree",
                "SegmentTree#getSum"
            ],
            "children": [
                "SegmentTree#getSumTree"
            ]
        },
        "Vector2#toString": {
            "parameters": {},
            "name": "Vector2#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": []
        },
        "AverageTest#testAverage_double_12": {
            "parameters": {},
            "name": "AverageTest#testAverage_double_12",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Average#average"
            ]
        },
        "MinimumPathSum#testRegular": {
            "parameters": {},
            "name": "MinimumPathSum#testRegular",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MinimumPathSum#minimumPathSum"
            ]
        },
        "FCFSScheduling#evaluateTurnAroundTime": {
            "parameters": {},
            "name": "FCFSScheduling#evaluateTurnAroundTime",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FCFSScheduling#scheduleProcesses"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "ProcessDetails#getWaitingTime",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "ProcessDetails#setTurnAroundTimeTime",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "ProcessDetails#getBurstTime",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "KochSnowflake#GetKochSnowflake": {
            "parameters": {
                "imageWidth": "int",
                "steps": "int"
            },
            "name": "KochSnowflake#GetKochSnowflake",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "KochSnowflake#main"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "KochSnowflake#GetImage",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "KochSnowflake#Iterate",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "XComparator#compare": {
            "parameters": {
                "a": "Point",
                "b": "Point"
            },
            "name": "XComparator#compare",
            "recursive": "false",
            "inComing": 14,
            "outGoing": 0,
            "numberOfCalls": 14,
            "parents": [
                "XComparator#compare",
                "PowRecursion#main",
                "SumOfArithmeticSeries#main",
                "Vertex#compareTo",
                "LinkListSort#isSorted"
            ],
            "children": [
                "MyComparator#compare",
                "LinkListSort#compare",
                "XComparator#compare"
            ]
        },
        "PriorityQueue#peek": {
            "parameters": {},
            "name": "PriorityQueue#peek",
            "recursive": "false",
            "inComing": 76,
            "outGoing": 0,
            "numberOfCalls": 76,
            "parents": [
                "CircularQueue#main",
                "GenericArrayListQueue#main",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#postorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "VerticalOrderTraversal#verticalTraversal",
                "FordFulkerson#networkFlow",
                "BufferedReader#peek",
                "MedianOfRunningArray#median",
                "Huffman#main",
                "QueueWithStack#peekFront",
                "QueueWithStack#peekBack",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StrandSort#merge",
                "LinkedQueueTest#testQue",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BufferedReaderTest#testPeeks",
                "BufferedReaderTest#testMixes",
                "BufferedReaderTest#testBlockPractical"
            ],
            "children": []
        },
        "SearchSinglyLinkedListRecursion#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "SearchSinglyLinkedListRecursion#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "SinglyLinkedList#search",
                "AVLSimple#insert",
                "Queue#insert",
                "BreadthFirstSearch#search",
                "MedianOfRunningArray#insert",
                "TrieImp#search",
                "LowerBound#search",
                "RedBlackBST#insert",
                "BSTRecursiveGeneric#search",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "AVLTree#insert",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "BSTRecursive#insert",
                "SinglyLinkedListTest#search",
                "Trieac#insert",
                "BinarySearch#search",
                "PriorityQueue#insert",
                "UpperBound#search"
            ]
        },
        "TurkishToLatinConversion#convertTurkishToLatin": {
            "parameters": {
                "param": "String"
            },
            "name": "TurkishToLatinConversion#convertTurkishToLatin",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "TurkishToLatinConversion#main"
            ],
            "children": []
        },
        "Node#printPostOrder": {
            "parameters": {},
            "name": "Node#printPostOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "AVLTree#height": {
            "parameters": {
                "n": "Node"
            },
            "name": "AVLTree#height",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "null#null",
                "AVLSimple#insert",
                "AVLSimple#bf",
                "AVLSimple#rightRotate",
                "AVLSimple#leftRotate",
                "AVLTree#rebalance",
                "AVLTree#setBalance",
                "AVLTree#reheight",
                "GenericTree#heightcall",
                "GenericTree#height",
                "LevelOrderTraversalHelper#printLevelOrder",
                "LevelOrderTraversalHelper#height"
            ],
            "children": []
        },
        "TopologicalSortTest#failureTest": {
            "parameters": {},
            "name": "TopologicalSortTest#failureTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "BellmanFord#addEdge",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "AdjacencyList#addEdge",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "AdjacencyMatrixGraph#addEdge",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "AllPathsFromSourceToTarget#addEdge",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "AdjacencyListGraph#addEdge",
                "Kruskal#addEdge",
                "Graph#addEdge",
                "BitonicSort#sort"
            ]
        },
        "ColumnarTranspositionCipher#findElements": {
            "parameters": {},
            "name": "ColumnarTranspositionCipher#findElements",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ColumnarTranspositionCipher#tableBuilder"
            ],
            "children": [
                "CursorLinkedList#indexOf"
            ]
        },
        "SkipList#remove": {
            "parameters": {
                "e": "E"
            },
            "name": "SkipList#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": [
                "Entry#getValue",
                "NodeStack#setNext",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "NodeStack#setPrevious",
                "HeapElement#equals",
                "HeapNode#setNext"
            ]
        },
        "ThreeSumProblem#TwoPointer": {
            "parameters": {
                "nums": "int[]",
                "target": "int"
            },
            "name": "ThreeSumProblem#TwoPointer",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "ThreeSumProblem#main",
                "TwoSumProblem#main"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "Trie#add",
                "GnomeSort#sort",
                "Vector2#add",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "BSTRecursiveGeneric#add",
                "SlowSort#sort",
                "StrassenMatrixMultiplication#add",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "DynamicArray#add",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "BSTRecursive#add",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "MatrixUtil#add",
                "PigeonholeSort#sort",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "BitonicSort#sort",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "TwinPrime#getTwinPrime": {
            "parameters": {
                "inputNumber": "int"
            },
            "name": "TwinPrime#getTwinPrime",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "TwinPrimeTest#shouldReturn7",
                "TwinPrimeTest#shouldReturn5",
                "TwinPrimeTest#shouldReturnNegative1",
                "TwinPrimeTest#shouldReturn19"
            ],
            "children": [
                "PrimeCheck#isPrime"
            ]
        },
        "BufferedReaderTest#testPeeks": {
            "parameters": {},
            "name": "BufferedReaderTest#testPeeks",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StackArrayList#peek",
                "BufferedReader#available",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "CircularQueue#peek",
                "PriorityQueue#peek",
                "StackArray#peek",
                "BufferedReader#read",
                "NodeStack#peek",
                "LinkedListStack#peek"
            ]
        },
        "LinkedList#isEmpty": {
            "parameters": {},
            "name": "LinkedList#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "BufferedReaderTest#testBlockPractical": {
            "parameters": {},
            "name": "BufferedReaderTest#testBlockPractical",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StackArrayList#peek",
                "BufferedReader#available",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "CircularQueue#peek",
                "PriorityQueue#peek",
                "StackArray#peek",
                "BufferedReader#read",
                "BufferedReader#readBlock",
                "NodeStack#peek",
                "LinkedListStack#peek"
            ]
        },
        "MobiusFunctionTest#testMobiusFunction": {
            "parameters": {},
            "name": "MobiusFunctionTest#testMobiusFunction",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MobiusFunction#mobius"
            ]
        },
        "PowerSum#Sum": {
            "parameters": {
                "X": "int",
                "i": "int",
                "N": "int"
            },
            "name": "PowerSum#Sum",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "PowerSum#powSum",
                "PowerSum#Sum"
            ],
            "children": [
                "PowerSum#power",
                "BinaryExponentiation#power",
                "PowerSum#Sum"
            ]
        },
        "LevenshteinDistance#minimum": {
            "parameters": {
                "a": "int",
                "b": "int",
                "c": "int"
            },
            "name": "LevenshteinDistance#minimum",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LevenshteinDistance#calculateLevenshteinDistance"
            ],
            "children": []
        },
        "SkipList#size": {
            "parameters": {},
            "name": "SkipList#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": []
        },
        "SkipListTest#createSkipList": {
            "parameters": {},
            "name": "SkipListTest#createSkipList",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "SkipListTest#contains",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail"
            ],
            "children": [
                "DynamicArray#stream"
            ]
        },
        "DisjointSets#UnionSet": {
            "parameters": {
                "x": "Node\u003cT\u003e",
                "y": "Node\u003cT\u003e"
            },
            "name": "DisjointSets#UnionSet",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DisjointSets#FindSet"
            ]
        },
        "sortOrderAgnosticBinarySearch#find": {
            "parameters": {
                "arr": "int[]",
                "key": "int"
            },
            "name": "sortOrderAgnosticBinarySearch#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": []
        },
        "IIRFilter#setCoeffs": {
            "parameters": {
                "aCoeffs": "double[]",
                "bCoeffs": "double[]"
            },
            "name": "IIRFilter#setCoeffs",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "AllPathsFromSourceToTarget#storeAllPathsUtil": {
            "parameters": {
                "isVisited": "boolean[]",
                "d": "Integer",
                "u": "Integer",
                "localPathList": "List\u003cInteger\u003e"
            },
            "name": "AllPathsFromSourceToTarget#storeAllPathsUtil",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursive#remove",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircleLinkedList#remove",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "DynamicArray#add",
                "HeapElement#equals",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "MatrixUtil#add",
                "Complex#add",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "PerfectCubeTest#perfectCube": {
            "parameters": {},
            "name": "PerfectCubeTest#perfectCube",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PerfectCube#isPerfectCubeMathCbrt",
                "PerfectCube#isPerfectCube"
            ]
        },
        "BreadthFirstSearchTest#searchG": {
            "parameters": {},
            "name": "BreadthFirstSearchTest#searchG",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SinglyLinkedList#search",
                "LazySegmentTreeTest#get",
                "Map#get",
                "BreadthFirstSearch#search",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "TrieImp#search",
                "SkipListTest#get",
                "LowerBound#search",
                "SkipList#get",
                "BSTRecursiveGeneric#search",
                "HamiltonianCycle#isPresent",
                "CircularBufferTest#get",
                "AVLTree#search",
                "GenericHeap#get",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "BreadthFirstSearchTest#searchE": {
            "parameters": {},
            "name": "BreadthFirstSearchTest#searchE",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SinglyLinkedList#search",
                "LazySegmentTreeTest#get",
                "Map#get",
                "BreadthFirstSearch#search",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "TrieImp#search",
                "SkipListTest#get",
                "LowerBound#search",
                "SkipList#get",
                "BSTRecursiveGeneric#search",
                "HamiltonianCycle#isPresent",
                "CircularBufferTest#get",
                "AVLTree#search",
                "GenericHeap#get",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "PrimMST#printMST": {
            "parameters": {
                "parent": "int[]",
                "n": "int",
                "graph": "int[][]"
            },
            "name": "PrimMST#printMST",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PrimMST#primMST"
            ],
            "children": []
        },
        "Task2#sortByHeapSort": {
            "parameters": {
                "head": "Node"
            },
            "name": "Task2#sortByHeapSort",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LinkListSort#isSorted"
            ],
            "children": [
                "CountSinglyLinkedListRecursion#count",
                "Task2#count",
                "Task#count",
                "Task2#task",
                "UnionFind#count",
                "Task1#count",
                "SinglyLinkedList#count",
                "Matrix#count",
                "Task#task"
            ]
        },
        "SegmentTree#updateTree": {
            "parameters": {
                "seg_index": "int",
                "start": "int",
                "index": "int",
                "end": "int",
                "diff": "int"
            },
            "name": "SegmentTree#updateTree",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "SegmentTree#updateTree",
                "SegmentTree#update"
            ],
            "children": [
                "SegmentTree#updateTree"
            ]
        },
        "MaxValue#max": {
            "parameters": {
                "a": "int",
                "b": "int"
            },
            "name": "MaxValue#max",
            "recursive": "false",
            "inComing": 54,
            "outGoing": 0,
            "numberOfCalls": 54,
            "parents": [
                "RgbHsvConversion#rgbToHsv",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "AVLSimple#insert",
                "AVLSimple#rightRotate",
                "AVLSimple#leftRotate",
                "AVLTree#reheight",
                "CheckIfBinaryTreeBalanced#isBalancedRecursive",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#maxcall",
                "GenericTree#max",
                "LevelOrderTraversalHelper#height",
                "VerticalOrderTraversal#verticalTraversal",
                "BruteForceKnapsack#knapSack",
                "DyanamicProgrammingKnapsack#knapSack",
                "EggDropping#minTrials",
                "KadaneAlgorithm#max_Sum",
                "Knapsack#knapSack",
                "KnapsackMemoization#knapSackRec",
                "LongestAlternatingSubsequence#AlternatingLength",
                "LongestValidParentheses#getLongestValidParentheses",
                "RodCutting#cutRod",
                "ShortestSuperSequence#lcs",
                "WineProblem#WPRecursion",
                "WineProblem#WPTD",
                "WineProblem#WPBU",
                "CircularConvolutionFFT#fftCircularConvolution",
                "Convolution#convolution",
                "FindMax#main",
                "FindMaxRecursion#main",
                "FindMaxRecursion#max",
                "MaxValue#main",
                "Mode#mode",
                "MinimizingLateness#main",
                "MiniMaxAlgorithm#miniMax",
                "MonteCarloTreeSearch#getWinnerNode",
                "BeadSort#sort",
                "BucketSort#bucketSort",
                "MergeSortNoExtraSpace#call_merge_sort",
                "QuickSelectTest#quickSelectMaximumOfManyElements"
            ],
            "children": []
        },
        "PreOrderTraversal#recursivePreOrder": {
            "parameters": {
                "result": "List\u003cInteger\u003e",
                "root": "BinaryTree.Node"
            },
            "name": "PreOrderTraversal#recursivePreOrder",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "PreOrderTraversal#recursivePreOrder",
                "PreOrderTraversalTest#testNullRoot",
                "PreOrderTraversalTest#testRecursivePreOrder",
                "PreOrderTraversalTest#testRecursivePreOrderNonBalanced"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "PreOrderTraversal#recursivePreOrder",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "BreadthFirstSearchTest#searchI": {
            "parameters": {},
            "name": "BreadthFirstSearchTest#searchI",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SinglyLinkedList#search",
                "LazySegmentTreeTest#get",
                "Map#get",
                "BreadthFirstSearch#search",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "TrieImp#search",
                "SkipListTest#get",
                "LowerBound#search",
                "SkipList#get",
                "BSTRecursiveGeneric#search",
                "HamiltonianCycle#isPresent",
                "CircularBufferTest#get",
                "AVLTree#search",
                "GenericHeap#get",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "LargeTreeNode#isLeafNode": {
            "parameters": {},
            "name": "LargeTreeNode#isLeafNode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "FibonacciHeap#size"
            ]
        },
        "Node#getLeft": {
            "parameters": {},
            "name": "Node#getLeft",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "SinglyLinkedList#reverseList": {
            "parameters": {
                "node": "Node"
            },
            "name": "SinglyLinkedList#reverseList",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "StandardScore#zScore": {
            "parameters": {
                "mean": "double",
                "num": "double",
                "stdDev": "double"
            },
            "name": "StandardScore#zScore",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "StandardScoreTest#test1",
                "StandardScoreTest#test2",
                "StandardScoreTest#test3",
                "StandardScoreTest#test4"
            ],
            "children": []
        },
        "AreaTest#surfaceAreaHemisphere": {
            "parameters": {},
            "name": "AreaTest#surfaceAreaHemisphere",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AreaTest#surfaceAreaHemisphere",
                "AreaTest#testAllIllegalInput"
            ],
            "children": [
                "Area#surfaceAreaHemisphere",
                "AreaTest#surfaceAreaHemisphere"
            ]
        },
        "FFT#fft": {
            "parameters": {
                "inverse": "boolean",
                "x": "ArrayList\u003cComplex\u003e"
            },
            "name": "FFT#fft",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "ConvolutionFFT#convolutionFFT",
                "FFTTest#fft"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "Complex#subtract",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Vector2#multiply",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "Vector2#subtract",
                "StackArrayList#size",
                "Complex#multiply",
                "MatrixUtil#subtract",
                "CircularBufferTest#get",
                "FFT#findLog2",
                "GenericHeap#get",
                "SkipList#size",
                "DynamicArray#add",
                "MatrixUtil#multiply",
                "StackArray#size",
                "BSTRecursive#add",
                "FFT#fftBitReversal",
                "FFT#paddingPowerOfTwo",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "StrassenMatrixMultiplication#multiply",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "FFT#inverseFFT",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "RootPrecision#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "RootPrecision#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RootPrecision#squareRoot",
                "BufferedReader#close",
                "SquareRootBinarySearch#squareRoot",
                "SquareRootWithNewtonRaphsonMethod#squareRoot"
            ]
        },
        "PreOrderTraversalTest#testRecursivePreOrder": {
            "parameters": {},
            "name": "PreOrderTraversalTest#testRecursivePreOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "PreOrderTraversal#recursivePreOrder",
                "PreOrderTraversal#iterativePreOrder",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "MobiusFunction#mobius": {
            "parameters": {
                "number": "int"
            },
            "name": "MobiusFunction#mobius",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "MobiusFunctionTest#testMobiusForZero",
                "MobiusFunctionTest#testMobiusForNegativeNumber",
                "MobiusFunctionTest#testMobiusFunction"
            ],
            "children": [
                "PrimeCheck#isPrime"
            ]
        },
        "BitonicSort#bitonicSort": {
            "parameters": {
                "a": "int[]",
                "low": "int",
                "cnt": "int",
                "dir": "int"
            },
            "name": "BitonicSort#bitonicSort",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "BitonicSort#bitonicSort",
                "BitonicSort#sort"
            ],
            "children": [
                "BitonicSort#bitonicSort",
                "BitonicSort#bitonicMerge"
            ]
        },
        "RadixSort#countSort": {
            "parameters": {
                "arr": "int[]",
                "exp": "int",
                "n": "int"
            },
            "name": "RadixSort#countSort",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "RadixSort#radixsort"
            ],
            "children": []
        },
        "PerfectCube#isPerfectCube": {
            "parameters": {
                "number": "int"
            },
            "name": "PerfectCube#isPerfectCube",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "PerfectCubeTest#perfectCube"
            ],
            "children": [
                "Pow#pow",
                "FFTTest#abs",
                "Complex#abs",
                "PowRecursion#pow"
            ]
        },
        "AreaTest#testAllIllegalInput": {
            "parameters": {},
            "name": "AreaTest#testAllIllegalInput",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Area#surfaceAreaTrapezium",
                "Area#surfaceAreaSquare",
                "Area#surfaceAreaHemisphere",
                "Area#surfaceAreaParallelogram",
                "Area#surfaceAreaCylinder",
                "Area#surfaceAreaCube",
                "Area#surfaceAreaSphere",
                "Area#surfaceAreaCircle",
                "Area#surfaceAreaCone",
                "AreaTest#surfaceAreaCone",
                "AreaTest#surfaceAreaHemisphere",
                "Area#surfaceAreaRectangle",
                "Area#surfaceAreaTriangleRectangle"
            ]
        },
        "HashMapCuckooHashing#isEmpty": {
            "parameters": {},
            "name": "HashMapCuckooHashing#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "PrimeCheck#isPrime": {
            "parameters": {
                "n": "int"
            },
            "name": "PrimeCheck#isPrime",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "MobiusFunction#mobius",
                "PrimeCheck#main",
                "TwinPrime#getTwinPrime",
                "PrimeCheckTest#test1",
                "PrimeCheckTest#test2",
                "PrimeCheckTest#test3",
                "PrimeCheckTest#test4",
                "PrimeCheckTest#test5",
                "PrimeCheckTest#test6",
                "PrimeCheckTest#test7"
            ],
            "children": []
        },
        "BoyerMoore#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BoyerMoore#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BoyerMoore#findmajor"
            ]
        },
        "InterpolationSearch#find": {
            "parameters": {
                "array": "int[]",
                "key": "int"
            },
            "name": "InterpolationSearch#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": []
        },
        "Anagrams#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Anagrams#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Anagrams#approach2",
                "Anagrams#approach1",
                "Anagrams#approach4",
                "Anagrams#approach3"
            ]
        },
        "QuickSort#sort": {
            "parameters": {
                "array": "T[]"
            },
            "name": "QuickSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "QuickSort#doSort",
                "MergeSort#doSort",
                "CircleSort#doSort"
            ]
        },
        "NewManShanksPrimeTest#testThree": {
            "parameters": {},
            "name": "NewManShanksPrimeTest#testThree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "NewManShanksPrime#nthManShanksPrime"
            ]
        },
        "InterpolationSearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "InterpolationSearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "PerfectBinarySearch#binarySearch",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "RomanNumeralUtil#generate",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BinarySearch2dArray#binarySearch",
                "BSTRecursive#find"
            ]
        },
        "PreOrderTraversalTest#testRecursivePreOrderNonBalanced": {
            "parameters": {},
            "name": "PreOrderTraversalTest#testRecursivePreOrderNonBalanced",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "PreOrderTraversal#recursivePreOrder",
                "PreOrderTraversal#iterativePreOrder",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "KaprekarNumbersTest#testForRangeOfNumber": {
            "parameters": {},
            "name": "KaprekarNumbersTest#testForRangeOfNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KaprekarNumbers#kaprekarNumberInRange",
                "Map#contains",
                "Bag#contains",
                "BloomFilter#contains",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "SkipList#contains"
            ]
        },
        "MinPriorityQueue#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MinPriorityQueue#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciHeap#insert",
                "SkylineProblem#print",
                "BSTRecursiveGeneric#insert",
                "IntrospectiveSort#heapSort",
                "TrieImp#insert",
                "PrintAMatrixInSpiralOrder#print",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "SkipListTest#print",
                "MedianOfRunningArray#insert",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "MinPriorityQueue#heapSort",
                "NodeStack#print",
                "BSTRecursive#insert",
                "SortUtils#print",
                "Trieac#insert",
                "RadixSort#print",
                "PriorityQueue#insert"
            ]
        },
        "PasswordGenTest#generateOneCharacterPassword": {
            "parameters": {},
            "name": "PasswordGenTest#generateOneCharacterPassword",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PasswordGen#generatePassword"
            ]
        },
        "BSTRecursive#preOrder": {
            "parameters": {
                "node": "Node"
            },
            "name": "BSTRecursive#preOrder",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "BSTRecursive#preOrder",
                "BSTRecursive#preorder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#preorder",
                "BinaryTree#preOrder",
                "CreateBSTFromSortedArray#test",
                "CreateBinaryTreeFromInorderPreorder#test",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursive#preOrder",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "SinglyLinkedList#main": {
            "parameters": {
                "arg": "String[]"
            },
            "name": "SinglyLinkedList#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "SinglyLinkedList#clear",
                "GenericHashMapUsingArray#size",
                "UnionFind#toString",
                "Queue#isEmpty",
                "DepthFirstSearch#search",
                "Trieac#search",
                "StackArray#isEmpty",
                "SinglyLinkedList#setHead",
                "DoublyLinkedList#isEmpty",
                "Map#delete",
                "SinglyLinkedList#isEmpty",
                "FibonacciHeap#insert",
                "SkylineProblem#print",
                "BSTRecursiveGeneric#insert",
                "NodeStack#setHead",
                "TrieImp#insert",
                "PrintAMatrixInSpiralOrder#print",
                "BloomFilter#insert",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "LinkOperations#delete",
                "GenericHashMapUsingArrayList#toString",
                "SinglyLinkedList#search",
                "LeftistHeap#isEmpty",
                "CountSinglyLinkedListRecursion#count",
                "AVLSimple#insert",
                "Queue#insert",
                "AVLTree#delete",
                "BreadthFirstSearch#search",
                "SinglyLinkedList#deleteDuplicates",
                "SkipListTest#print",
                "LinearProbingHashMap#size",
                "Task2#count",
                "MedianOfRunningArray#insert",
                "dijkstras#print",
                "Deques#toString",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "SinglyLinkedList#deleteHead",
                "MinPriorityQueue#print",
                "GenericHeap#size",
                "HeapElement#toString",
                "LinkOperations#deleteHead",
                "SinglyLinkedListTest#clear",
                "LinkedQueue#clear",
                "TrieImp#search",
                "LinkedQueue#isEmpty",
                "Task#count",
                "LinkedListStack#isEmpty",
                "Map#size",
                "LowerBound#search",
                "RedBlackBST#insert",
                "GenericHashMapUsingArrayList#size",
                "DynamicArray#toString",
                "BSTRecursive#delete",
                "Bag#size",
                "StackArrayList#size",
                "BSTRecursiveGeneric#search",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "MinPriorityQueue#insert",
                "FibonacciHeap#delete",
                "LeftistHeap#insert",
                "CircleLinkedList#toString",
                "LinkedList#insert",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "SinglyLinkedList#delete",
                "UnionFind#count",
                "AVLTree#search",
                "AdjacencyListGraph#toString",
                "SinglyLinkedList#deleteNth",
                "SearchSinglyLinkedListRecursion#search",
                "Vector2#toString",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "LeftistHeap#clear",
                "AVLTree#insert",
                "HeapElement#equals",
                "SinglyLinkedListTest#deleteNth",
                "GenericHeap#isEmpty",
                "RabinKarpAlgorithm#search",
                "RedBlackBST#delete",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "Task1#count",
                "CircularBufferTest#isEmpty",
                "SinglyLinkedList#getNth",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "Deques#size",
                "SinglyLinkedList#insertHead",
                "Sudoku#print",
                "NodeStack#size",
                "SinglyLinkedList#print",
                "LFSR#toString",
                "SinglyLinkedList#insert",
                "CircularQueue#isEmpty",
                "GenericHashMapUsingArray#toString",
                "QueueWithStack#insert",
                "KDTreeTest#delete",
                "NodeStack#print",
                "FibonacciHeap#size",
                "LinkedList#delete",
                "BSTRecursive#search",
                "MinPriorityQueue#delete",
                "SinglyLinkedList#count",
                "SearchInARowAndColWiseSortedMatrix#search",
                "BSTRecursive#insert",
                "SortUtils#print",
                "SinglyLinkedListTest#search",
                "Trieac#insert",
                "Matrix#count",
                "BinarySearch#search",
                "Queue#toString",
                "LinkOperations#insertHead",
                "RadixSort#print",
                "PriorityQueue#insert",
                "BSTRecursiveGeneric#delete",
                "DynamicArray#isEmpty",
                "UpperBound#search",
                "LinearProbingHashMap#delete",
                "TrieImp#delete",
                "LinkedQueue#toString",
                "SinglyLinkedList#insertNth",
                "PriorityQueue#isEmpty"
            ]
        },
        "TarjansAlgorithm#stronglyConnCompsUtil": {
            "parameters": {
                "st": "Stack\u003cInteger\u003e",
                "insertionTime": "int[]",
                "u": "int",
                "isInStack": "boolean[]",
                "lowTime": "int[]",
                "graph": "List\u003cList\u003cInteger\u003e\u003e"
            },
            "name": "TarjansAlgorithm#stronglyConnCompsUtil",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "TarjansAlgorithm#stronglyConnectedComponents",
                "TarjansAlgorithm#stronglyConnCompsUtil"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "StackArray#pop",
                "LinkedListStack#push",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "StackArray#push",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "SimpleNode#hasNext",
                "SkipListTest#get",
                "StackArrayList#push",
                "LinkedQueue#iterator",
                "SkipList#get",
                "NodeStack#pop",
                "FindMinRecursion#min",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "ListIterator#hasNext",
                "MinValue#min",
                "DynamicArray#add",
                "StackArrayList#pop",
                "BSTRecursive#add",
                "NodeStack#push",
                "LinkedListStack#pop",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "DynamicArray#iterator",
                "LFUCache#get",
                "DynamicArrayIterator#hasNext",
                "Bag#iterator",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "BucketSort#min",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "GuassLegendre#update": {
            "parameters": {
                "p": "double",
                "a": "double",
                "b": "double",
                "t": "double"
            },
            "name": "GuassLegendre#update",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "GuassLegendre#pi"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "HexaDecimalToBinary#convert": {
            "parameters": {
                "numHex": "String"
            },
            "name": "HexaDecimalToBinary#convert",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "HexaDecimalToBinary#main",
                "DecimalToAnyUsingStack#main",
                "HexaDecimalToBinaryTest#testHexaDecimalToBinary"
            ],
            "children": [
                "HexaDecimalToBinary#completeDigits",
                "ParseInteger#parseInt"
            ]
        },
        "DNFSort#printArray": {
            "parameters": {
                "arr": "int[]",
                "arr_size": "int"
            },
            "name": "DNFSort#printArray",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "MatrixChainMultiplication#main",
                "BitonicSort#main",
                "DNFSort#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "ReverseStringRecursiveTest#shouldAcceptNotWhenWhenSingleCharacterIsPassed": {
            "parameters": {},
            "name": "ReverseStringRecursiveTest#shouldAcceptNotWhenWhenSingleCharacterIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ReverseString#reverse",
                "Rotation#reverse",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "ReverseStringRecursive#reverse",
                "LowestBasePalindrome#reverse"
            ]
        },
        "BSTRecursiveGeneric#postorder": {
            "parameters": {},
            "name": "BSTRecursiveGeneric#postorder",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericTree#postordercall",
                "GenericTree#postorder"
            ],
            "children": [
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursive#postOrder"
            ]
        },
        "LeftistHeap#clear": {
            "parameters": {},
            "name": "LeftistHeap#clear",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "A5KeyStreamGenerator#initialize",
                "LFSR#initialize",
                "SinglyLinkedList#main",
                "LinkedQueue#main",
                "ConvolutionFFT#convolutionFFT",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear"
            ],
            "children": []
        },
        "EulersFunction#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "EulersFunction#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "EulersFunction#getEuler"
            ]
        },
        "CircularBufferTest#concurrentTest": {
            "parameters": {},
            "name": "CircularBufferTest#concurrentTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "CircularBufferTest#getSortedListFrom",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "OptimalJobScheduling#execute",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "SubsetCount#getCount",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "CircularBufferTest#shutDownExecutorSafely",
                "LinearProbingHashMap#put"
            ]
        },
        "ColorContrastRatio#test": {
            "parameters": {},
            "name": "ColorContrastRatio#test",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "CreateBSTFromSortedArray#main",
                "CreateBinaryTreeFromInorderPreorder#main",
                "VampireNumber#main",
                "VectorCrossProduct#main",
                "ColorContrastRatio#main"
            ],
            "children": [
                "ColorContrastRatio#getContrastRatio",
                "ColorContrastRatio#getRelativeLuminance"
            ]
        },
        "BeadSortTest#beadSortSingleIntegerArray": {
            "parameters": {},
            "name": "BeadSortTest#beadSortSingleIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "MatrixChainRecursiveTopDownMemoisation#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MatrixChainRecursiveTopDownMemoisation#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MatrixChainRecursiveTopDownMemoisation#Memoized_Matrix_Chain"
            ]
        },
        "Node#previous": {
            "parameters": {
                "layer": "int"
            },
            "name": "Node#previous",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "PostOrderTraversalTest#testPostOrderNonBalanced": {
            "parameters": {},
            "name": "PostOrderTraversalTest#testPostOrderNonBalanced",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "PostOrderTraversal#recursivePostOrder",
                "PostOrderTraversal#iterativePostOrder",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "FirstFitCPUTest#testFitForEqualProcecesses": {
            "parameters": {},
            "name": "FirstFitCPUTest#testFitForEqualProcecesses",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "Task2#task1": {
            "parameters": {
                "i": "int",
                "k": "int",
                "n": "int[]"
            },
            "name": "Task2#task1",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Task#task",
                "Task2#task",
                "Task2#task1"
            ],
            "children": [
                "Task2#task1",
                "Task#task1"
            ]
        },
        "TernarySearch#find": {
            "parameters": {
                "arr": "T[]",
                "value": "T"
            },
            "name": "TernarySearch#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": [
                "TernarySearch#ternarySearch"
            ]
        },
        "TernarySearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "TernarySearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "PerfectBinarySearch#binarySearch",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "RomanNumeralUtil#generate",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BinarySearch2dArray#binarySearch",
                "BSTRecursive#find"
            ]
        },
        "LevelOrderTraversalTest#testLevelOrderTraversalCompleteTree": {
            "parameters": {},
            "name": "LevelOrderTraversalTest#testLevelOrderTraversalCompleteTree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "LevelOrderTraversal#traverse",
                "ZigzagTraversal#traverse",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "BSTIterative#postorder": {
            "parameters": {},
            "name": "BSTIterative#postorder",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericTree#postordercall",
                "GenericTree#postorder"
            ],
            "children": [
                "StackArrayList#peek",
                "FibonacciHeap#empty",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "StackArray#pop",
                "LinkedListStack#push",
                "SkipListTest#print",
                "dijkstras#print",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "MinPriorityQueue#print",
                "StackArray#push",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "StackArrayList#push",
                "CircularQueue#peek",
                "NodeStack#pop",
                "PriorityQueue#peek",
                "StackArrayList#pop",
                "StackArray#peek",
                "NodeStack#push",
                "LinkedListStack#pop",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "NodeStack#peek",
                "RadixSort#print",
                "LinkedListStack#peek"
            ]
        },
        "AVLTree#insert": {
            "parameters": {
                "key": "int"
            },
            "name": "AVLTree#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "AVLTree#rebalance"
            ]
        },
        "GenericHeap#display": {
            "parameters": {},
            "name": "GenericHeap#display",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "HashMap#displayHashtable",
                "LinkedList#display",
                "Link#main",
                "AVLSimple#display"
            ],
            "children": []
        },
        "CRC16#crc16": {
            "parameters": {
                "message": "String"
            },
            "name": "CRC16#crc16",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "CRC16#main",
                "CRC16Test#testCRC16"
            ],
            "children": [
                "UpperTest#toUpperCase",
                "Upper#toUpperCase"
            ]
        },
        "Volume#volumeSphere": {
            "parameters": {
                "radius": "double"
            },
            "name": "Volume#volumeSphere",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "VolumeTest#volume"
            ],
            "children": []
        },
        "BestFitCPU#fitProcess": {
            "parameters": {
                "sizeOfProcesses": "int[]",
                "sizeOfBlocks": "int[]"
            },
            "name": "BestFitCPU#fitProcess",
            "recursive": "false",
            "inComing": 21,
            "outGoing": 0,
            "numberOfCalls": 21,
            "parents": [
                "BestFitCPUTest#testFitForUseOfOneBlock",
                "BestFitCPUTest#testFitForEqualProcecesses",
                "BestFitCPUTest#testFitForNoEmptyBlockCell",
                "BestFitCPUTest#testFitForSameInputDifferentQuery",
                "BestFitCPUTest#testFitForMoreBlocksNoFit",
                "FirstFitCPUTest#testFitForUseOfOneBlock",
                "FirstFitCPUTest#testFitForEqualProcecesses",
                "FirstFitCPUTest#testFitForNoEmptyBlockCell",
                "FirstFitCPUTest#testFitForSameInputDifferentQuery",
                "FirstFitCPUTest#testFitForMoreBlocksNoFit",
                "NextFitCPUTest#testFitForUseOfOneBlock",
                "NextFitCPUTest#testFitForEqualProcecesses",
                "NextFitCPUTest#testFitForNoEmptyBlockCell",
                "NextFitCPUTest#testFitForSameInputDifferentQuery",
                "NextFitCPUTest#testFitForMoreBlocksNoFit",
                "WorstFitCPUTest#testFitForUseOfOneBlock",
                "WorstFitCPUTest#testFitForEqualProcecesses",
                "WorstFitCPUTest#testFitForNoEmptyBlockCell",
                "WorstFitCPUTest#testFitForSameInputDifferentQuery",
                "WorstFitCPUTest#testFitForMoreBlocksNoFit",
                "WorstFitCPUTest#testFitBadCase"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "BestFitCPU#findBestFit",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "ListIterator#hasNext": {
            "parameters": {},
            "name": "ListIterator#hasNext",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "Bag#contains",
                "ListIterator#next",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "SkylineProblem#print",
                "StackPostfixNotation#postfixEvaluate",
                "StrandSort#strandSort",
                "MapTest#keysTest"
            ],
            "children": []
        },
        "MinValue#min": {
            "parameters": {
                "a": "int",
                "b": "int"
            },
            "name": "MinValue#min",
            "recursive": "false",
            "inComing": 39,
            "outGoing": 0,
            "numberOfCalls": 39,
            "parents": [
                "RgbHsvConversion#rgbToHsv",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "MaxHeap#toggleDown",
                "MinHeap#toggleDown",
                "VerticalOrderTraversal#verticalTraversal",
                "ClosestPair#closestPair",
                "EditDistance#editDistance",
                "FordFulkerson#networkFlow",
                "MinimumPathSum#minimumPathSum",
                "MinimumSumPartition#getMin",
                "FindMin#main",
                "FindMinRecursion#main",
                "FindMinRecursion#min",
                "MinValue#main",
                "NthUglyNumber#getNthUglyNo",
                "BFPRT#medianOfMedians",
                "MiniMaxAlgorithm#miniMax",
                "ExponentialSearch#find",
                "FibonacciSearch#find",
                "JumpSearch#find",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "TimSort#sort",
                "QuickSelectTest#quickSelectMinimumOfManyElements"
            ],
            "children": []
        },
        "SameTreesCheckTest#testBothRootsAreNull": {
            "parameters": {},
            "name": "SameTreesCheckTest#testBothRootsAreNull",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SameTreesCheck#check",
                "DuplicateBrackets#check"
            ]
        },
        "QuickSelectTest#quickSelectMedianOfManyElements": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectMedianOfManyElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "QuickSelectTest#getSortedCopyOfList",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "QuickSelect#select",
                "LFUCache#get",
                "QuickSelectTest#generateRandomIntegers"
            ]
        },
        "DynamicArray#add": {
            "parameters": {
                "element": "E"
            },
            "name": "DynamicArray#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": [
                "DynamicArray#newCapacity"
            ]
        },
        "QuickSelectTest#generateRandomCharacters": {
            "parameters": {
                "n": "int"
            },
            "name": "QuickSelectTest#generateRandomCharacters",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "QuickSelectTest#quickSelectMedianOfManyCharacters"
            ],
            "children": []
        },
        "Volume#volumeCylinder": {
            "parameters": {
                "radius": "double",
                "height": "double"
            },
            "name": "Volume#volumeCylinder",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "VolumeTest#volume"
            ],
            "children": []
        },
        "EulerMethod#eulerStep": {
            "parameters": {
                "xCurrent": "double",
                "yCurrent": "double",
                "stepSize": "double",
                "differentialEquation": "BiFunction\u003cDouble,Double,Double\u003e"
            },
            "name": "EulerMethod#eulerStep",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "EulerMethod#eulerFull"
            ],
            "children": []
        },
        "BloomFilter#contains": {
            "parameters": {
                "key": "T"
            },
            "name": "BloomFilter#contains",
            "recursive": "false",
            "inComing": 31,
            "outGoing": 0,
            "numberOfCalls": 31,
            "parents": [
                "AnyBaseToAnyBase#validForBase",
                "Bag#main",
                "A_Star#aStar",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Kruskal#kruskal",
                "LinearProbingHashMap#delete",
                "Tree#printTopView",
                "KaprekarNumbers#isKaprekarNumber",
                "CRCAlgorithm#divideMessageWithP",
                "HappyNumbersSeq#isSad",
                "UnionFind#count",
                "CheckVowels#hasVowels",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "MapTest#containsTest",
                "SkipListTest#contains",
                "KaprekarNumbersTest#testForRangeOfNumber",
                "SquareFreeIntegerTest#testIsSquareFreeInteger",
                "HammingDistanceTest#mismatchDataBits"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "Hash#compute",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "LazySegmentTreeTest#updateAndGet": {
            "parameters": {},
            "name": "LazySegmentTreeTest#updateAndGet",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LazySegmentTree#getRange",
                "LazySegmentTree#updateRange"
            ]
        },
        "RgbHsvConversion#rgbToHsv": {
            "parameters": {
                "red": "int",
                "green": "int",
                "blue": "int"
            },
            "name": "RgbHsvConversion#rgbToHsv",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "RgbHsvConversion#main"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "FindMinRecursion#min",
                "MaxValue#max",
                "MinValue#min",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max",
                "BucketSort#min"
            ]
        },
        "ParseInteger#parseInt": {
            "parameters": {
                "s": "String"
            },
            "name": "ParseInteger#parseInt",
            "recursive": "false",
            "inComing": 30,
            "outGoing": 0,
            "numberOfCalls": 30,
            "parents": [
                "DecimalToAnyBase#main",
                "HexaDecimalToBinary#convert",
                "OctalToDecimal#convertOctalToDecimal",
                "BipartiteGrapfDFS#main",
                "MatrixChainMultiplication#main",
                "KrishnamurthyNumber#main",
                "LongDivision#divide",
                "ParseInteger#main",
                "MinimizingLateness#main",
                "SkylineProblem#run",
                "MyAtoi#myAtoi"
            ],
            "children": []
        },
        "Palindrome#isPalindrome": {
            "parameters": {
                "s": "String"
            },
            "name": "Palindrome#isPalindrome",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "PalindromeNumber#main",
                "PalindromeSinglyLinkedList#main",
                "PalindromeTest#palindrome"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "ReverseString#reverse",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Rotation#reverse",
                "Vector2#toString",
                "HeapElement#equals",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "LFSR#toString",
                "ReverseStringRecursive#reverse",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LowestBasePalindrome#reverse",
                "LinkedQueue#toString"
            ]
        },
        "MRUCache#checkCapacity": {
            "parameters": {
                "capacity": "int"
            },
            "name": "MRUCache#checkCapacity",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "LRUCache#setCapacity",
                "MRUCache#setCapacity"
            ],
            "children": []
        },
        "AreaTest#testSurfaceAreaTrapezium": {
            "parameters": {},
            "name": "AreaTest#testSurfaceAreaTrapezium",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Area#surfaceAreaTrapezium"
            ]
        },
        "TestSearchInARowAndColWiseSortedMatrix#searchItem": {
            "parameters": {},
            "name": "TestSearchInARowAndColWiseSortedMatrix#searchItem",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "FindMaxTest#testFindMaxValue": {
            "parameters": {},
            "name": "FindMaxTest#testFindMaxValue",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FindMax#findMax"
            ]
        },
        "BogoSortTest#bogoSortSingleStringArray": {
            "parameters": {},
            "name": "BogoSortTest#bogoSortSingleStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "TrinomialTriangle#main": {
            "parameters": {
                "argc": "String[]"
            },
            "name": "TrinomialTriangle#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TrinomialTriangle#printTrinomial"
            ]
        },
        "FibonacciJavaStreams#calculate": {
            "parameters": {
                "index": "BigDecimal"
            },
            "name": "FibonacciJavaStreams#calculate",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "FibonacciJavaStreams#main"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "FibonacciHeap#empty",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SinglyLinkedList#isEmpty",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "Complex#subtract",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "Vector2#subtract",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "MatrixUtil#subtract",
                "CircularBufferTest#get",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "GenericHeap#get",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "CircularQueue#isEmpty",
                "LFUCache#get",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "DynamicArray#isEmpty",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "QuickSort#randomPartition": {
            "parameters": {
                "array": "T[]",
                "left": "int",
                "right": "int"
            },
            "name": "QuickSort#randomPartition",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "QuickSort#doSort"
            ],
            "children": [
                "FindKthNumber#swap",
                "QuickSelect#partition",
                "OddEvenSort#swap",
                "DualPivotQuickSort#partition",
                "MinHeap#swap",
                "IntrospectiveSort#partition",
                "SinglyLinkedListTest#swap",
                "FindKthNumber#partition",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "QuickSort#partition",
                "IntrospectiveSort#swap",
                "BFPRT#partition",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "LinkedQueue#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LinkedQueue#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SinglyLinkedList#clear",
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "Queue#peekRear",
                "QueueWithStack#peekFront",
                "GenericHeap#size",
                "SinglyLinkedListTest#clear",
                "LinkedQueue#clear",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "LeftistHeap#clear",
                "GenericHeap#isEmpty",
                "LinkedQueue#enqueue",
                "Queue#peekFront",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "CircularBufferTest#isEmpty",
                "LinkedQueue#peekRear",
                "Deques#size",
                "LinkedQueue#peekFront",
                "NodeStack#size",
                "CircularQueue#isEmpty",
                "FibonacciHeap#size",
                "LinkedQueue#dequeue",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "HeapElement#equals": {
            "parameters": {
                "o": "Object"
            },
            "name": "HeapElement#equals",
            "recursive": "false",
            "inComing": 112,
            "outGoing": 0,
            "numberOfCalls": 112,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "RgbHsvConversion#main",
                "Bag#contains",
                "Graph#depthFirstSearch",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArray#get",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "HashMapCuckooHashing#insertKey2HashTable",
                "HashMapCuckooHashing#reHashTableIncreasesTableSize",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#displayHashtable",
                "HashMapCuckooHashing#findKeyInTable",
                "HashMapCuckooHashing#checkTableContainsKey",
                "HashMapCuckooHashing#isFull",
                "LinearProbingHashMap#put",
                "LinearProbingHashMap#get",
                "LinearProbingHashMap#delete",
                "HeapElement#equals",
                "CursorLinkedList#indexOf",
                "CursorLinkedList#remove",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#main",
                "SkipList#remove",
                "SkipList#contains",
                "DecimalToAnyUsingStack#main",
                "InfixToPostfix#main",
                "LargestRectangle#main",
                "MaximumMinimumWindow#main",
                "PostfixToInfix#main",
                "LongestCommonSubsequence#getLCS",
                "FibonacciJavaStreams#assertThat",
                "KaprekarNumbers#isKaprekarNumber",
                "Mode#main",
                "VampireNumber#isVampireNumber",
                "RangeInSortedArray#main",
                "WordBoggle#main",
                "Vertex#equals",
                "LowestBasePalindrome#lowestBasePalindrome",
                "StackPostfixNotation#postfixEvaluate",
                "BreadthFirstSearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#assertThat",
                "Anagrams#approach1",
                "Anagrams#approach4",
                "Lower#main",
                "Palindrome#isPalindrome",
                "ReverseString#main",
                "Rotation#main",
                "Upper#main",
                "Upper#toUpperCase",
                "WordLadder#ladderLength",
                "PermutationTest#testMultipleElements",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "LeftistHeapTest#testLeftistHeap",
                "ADTFractionTest#testEqualsAndHashCode",
                "LetterCombinationsOfPhoneNumberTest#letterCombinationsOfPhoneNumber"
            ],
            "children": [
                "HeapElement#equals"
            ]
        },
        "BruteForceKnapsack#max": {
            "parameters": {
                "a": "int",
                "b": "int"
            },
            "name": "BruteForceKnapsack#max",
            "recursive": "false",
            "inComing": 54,
            "outGoing": 0,
            "numberOfCalls": 54,
            "parents": [
                "RgbHsvConversion#rgbToHsv",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "AVLSimple#insert",
                "AVLSimple#rightRotate",
                "AVLSimple#leftRotate",
                "AVLTree#reheight",
                "CheckIfBinaryTreeBalanced#isBalancedRecursive",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#maxcall",
                "GenericTree#max",
                "LevelOrderTraversalHelper#height",
                "VerticalOrderTraversal#verticalTraversal",
                "BruteForceKnapsack#knapSack",
                "DyanamicProgrammingKnapsack#knapSack",
                "EggDropping#minTrials",
                "KadaneAlgorithm#max_Sum",
                "Knapsack#knapSack",
                "KnapsackMemoization#knapSackRec",
                "LongestAlternatingSubsequence#AlternatingLength",
                "LongestValidParentheses#getLongestValidParentheses",
                "RodCutting#cutRod",
                "ShortestSuperSequence#lcs",
                "WineProblem#WPRecursion",
                "WineProblem#WPTD",
                "WineProblem#WPBU",
                "CircularConvolutionFFT#fftCircularConvolution",
                "Convolution#convolution",
                "FindMax#main",
                "FindMaxRecursion#main",
                "FindMaxRecursion#max",
                "MaxValue#main",
                "Mode#mode",
                "MinimizingLateness#main",
                "MiniMaxAlgorithm#miniMax",
                "MonteCarloTreeSearch#getWinnerNode",
                "BeadSort#sort",
                "BucketSort#bucketSort",
                "MergeSortNoExtraSpace#call_merge_sort",
                "QuickSelectTest#quickSelectMaximumOfManyElements"
            ],
            "children": []
        },
        "LetterCombinationsOfPhoneNumber#generateNumberToCharMap": {
            "parameters": {},
            "name": "LetterCombinationsOfPhoneNumber#generateNumberToCharMap",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "LetterCombinationsOfPhoneNumber#printWords",
                "LetterCombinationsOfPhoneNumberTest#letterCombinationsOfPhoneNumber"
            ],
            "children": []
        },
        "LongDivisionTest#testDividendLessThanDivisor": {
            "parameters": {},
            "name": "LongDivisionTest#testDividendLessThanDivisor",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LongDivision#divide",
                "Complex#divide"
            ]
        },
        "LinkedList#findEnd": {
            "parameters": {
                "n": "Node"
            },
            "name": "LinkedList#findEnd",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LinkedList#insert"
            ],
            "children": [
                "NodeStack#getNext",
                "HeapNode#getNext"
            ]
        },
        "CountingSort#sort": {
            "parameters": {
                "list": "List\u003cT\u003e"
            },
            "name": "CountingSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "Entry#getValue",
                "GenericHashMapUsingArray#size",
                "DutchNationalFlagSort#sort",
                "CircularBuffer#put",
                "LFUCache#put",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "GenericHashMapUsingArrayList#put",
                "BeadSort#sort",
                "Trie#add",
                "GnomeSort#sort",
                "Vector2#add",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "LinearProbingHashMap#size",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BubbleSort#sort",
                "HeapElement#getKey",
                "GenericHashMapUsingArray#put",
                "BSTRecursiveGeneric#add",
                "SlowSort#sort",
                "StrassenMatrixMultiplication#add",
                "CombSort#sort",
                "GenericHeap#size",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "Map#size",
                "TreeSort#sort",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "SkipList#size",
                "QuickSort#sort",
                "DynamicArray#add",
                "CountingSort#sort",
                "BogoSort#sort",
                "StackArray#size",
                "SwapSort#sort",
                "BSTRecursive#add",
                "MergeSortRecursive#sort",
                "Deques#size",
                "HeapNode#getKey",
                "NodeStack#size",
                "CocktailShakerSort#sort",
                "CircularBufferTest#put",
                "StoogeSort#sort",
                "MatrixUtil#add",
                "PigeonholeSort#sort",
                "MRUCache#put",
                "FibonacciHeap#size",
                "Complex#add",
                "Map#put",
                "GenericHeap#add",
                "SkylineProblem#add",
                "LRUCache#put",
                "SkipListTest#add",
                "Bag#add",
                "Entry#getKey",
                "LinearProbingHashMap#put",
                "BitonicSort#sort",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "KnapsackMemoization#knapSackRec": {
            "parameters": {
                "val": "int[]",
                "W": "int",
                "dp": "int[][]",
                "wt": "int[]",
                "n": "int"
            },
            "name": "KnapsackMemoization#knapSackRec",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "KnapsackMemoization#knapSack",
                "KnapsackMemoization#knapSackRec"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "KnapsackMemoization#knapSackRec",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "StrassenMatrixMultiplication#sub": {
            "parameters": {
                "A": "int[][]",
                "B": "int[][]"
            },
            "name": "StrassenMatrixMultiplication#sub",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "StrassenMatrixMultiplication#multiply"
            ],
            "children": []
        },
        "OctalToHexadecimalTest#testOctalToHexadecimal": {
            "parameters": {},
            "name": "OctalToHexadecimalTest#testOctalToHexadecimal",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OctalToHexadecimal#octToDec",
                "OctalToHexadecimal#decimalToHex"
            ]
        },
        "NQueens#isPlacedCorrectly": {
            "parameters": {
                "columns": "int[]",
                "rowIndex": "int",
                "columnIndex": "int"
            },
            "name": "NQueens#isPlacedCorrectly",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "NQueens#getSolution"
            ],
            "children": [
                "FFTTest#abs",
                "Complex#abs"
            ]
        },
        "SegmentTree#getSum": {
            "parameters": {
                "start": "int",
                "end": "int"
            },
            "name": "SegmentTree#getSum",
            "recursive": "false",
            "inComing": 13,
            "outGoing": 0,
            "numberOfCalls": 13,
            "parents": [
                "MinimumSumPartition#subSet",
                "SumWithoutArithmeticOperators#getSum",
                "SumWithoutArithmeticOperatorsTest#addZerotoZero",
                "SumWithoutArithmeticOperatorsTest#addZerotoNumber",
                "SumWithoutArithmeticOperatorsTest#addOddtoEven",
                "SumWithoutArithmeticOperatorsTest#addEventoOdd",
                "SumWithoutArithmeticOperatorsTest#addRandoms"
            ],
            "children": [
                "SegmentTree#getSumTree"
            ]
        },
        "BogoSort#sort": {
            "parameters": {
                "array": "T[]"
            },
            "name": "BogoSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "BogoSort#nextPermutation",
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "UniquePathsTests#testForFiveElements": {
            "parameters": {},
            "name": "UniquePathsTests#testForFiveElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "UniquePaths#uniquePaths2"
            ]
        },
        "LFSR#pushBit": {
            "parameters": {
                "bit": "boolean"
            },
            "name": "LFSR#pushBit",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "LFSR#clock"
            ],
            "children": [
                "LFSR#rightShift"
            ]
        },
        "BalancedBrackets#isBalanced": {
            "parameters": {
                "brackets": "String"
            },
            "name": "BalancedBrackets#isBalanced",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "BalancedBrackets#main",
                "InfixToPostfix#infix2PostFix"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LinkedListStack#push",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "StackArrayList#push",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "BalancedBrackets#isPaired",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "NodeStack#push",
                "LinkedListStack#pop",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "FloydTriangle#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "FloydTriangle#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BufferedReader#close",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "AESEncryption#encryptText": {
            "parameters": {
                "secKey": "SecretKey",
                "plainText": "String"
            },
            "name": "AESEncryption#encryptText",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "AESEncryption#main"
            ],
            "children": []
        },
        "SubsetCountTest#hasMultipleSubsetSO": {
            "parameters": {},
            "name": "SubsetCountTest#hasMultipleSubsetSO",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SubsetCount#getCountSO"
            ]
        },
        "ShellSortTest#ShellSortSingleIntegerArray": {
            "parameters": {},
            "name": "ShellSortTest#ShellSortSingleIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "MinimumPathSum#testLessRows": {
            "parameters": {},
            "name": "MinimumPathSum#testLessRows",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MinimumPathSum#minimumPathSum"
            ]
        },
        "OptimalJobScheduling#execute": {
            "parameters": {},
            "name": "OptimalJobScheduling#execute",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "CircularBufferTest#concurrentTest",
                "OptimalJobSchedulingTest#testOptimalJobScheduling1",
                "OptimalJobSchedulingTest#testOptimalJobScheduling2",
                "OptimalJobSchedulingTest#testOptimalJobScheduling3"
            ],
            "children": [
                "OptimalJobScheduling#showResults",
                "OptimalJobScheduling#calculateCost"
            ]
        },
        "Anagrams#approach2": {
            "parameters": {
                "a": "String",
                "b": "String"
            },
            "name": "Anagrams#approach2",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "Anagrams#main",
                "AnagramsTest#isAlphabetical"
            ],
            "children": []
        },
        "ReverseStack#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ReverseStack#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "StackArray#pop",
                "LinkedListStack#push",
                "LeftistHeap#isEmpty",
                "SkipListTest#print",
                "ReverseStack#reverseStack",
                "dijkstras#print",
                "QueueWithStack#isEmpty",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "MinPriorityQueue#print",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "StackArrayList#push",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "BufferedReader#close",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "NodeStack#push",
                "LinkedListStack#pop",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "CircularQueue#isEmpty",
                "NodeStack#print",
                "SortUtils#print",
                "NodeStack#peek",
                "RadixSort#print",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "PriorityQueue#isEmpty"
            ]
        },
        "CountingSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CountingSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "CountingSort#streamSort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "Anagrams#approach1": {
            "parameters": {
                "s": "String",
                "t": "String"
            },
            "name": "Anagrams#approach1",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "Anagrams#main",
                "AnagramsTest#isAlphabetical"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "HeapElement#equals",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "PalindromicPartitioning#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PalindromicPartitioning#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PalindromicPartitioning#minimalpartitions",
                "BufferedReader#close"
            ]
        },
        "DepthFirstSearch#assertThat": {
            "parameters": {
                "actual": "Object",
                "expected": "Object"
            },
            "name": "DepthFirstSearch#assertThat",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "FibonacciJavaStreams#main",
                "MatrixUtil#main",
                "DepthFirstSearch#main",
                "AmicableNumberTest#testAmicableNumber",
                "ArmstrongTest#testIsArmstrong",
                "TestArmstrong#testArmstrong",
                "HammingDistanceTest#checkForDifferentBits",
                "HammingDistanceTest#checkForDifferentBitsLength",
                "HammingDistanceTest#checkForSameBits",
                "HammingDistanceTest#checkForLongDataBits",
                "HammingDistanceTest#mismatchDataBits",
                "HammingDistanceTest#checkForLongDataBitsSame",
                "SortUtilsRandomGeneratorTest#generateArray",
                "SortUtilsRandomGeneratorTest#generateArrayEmpty",
                "SortUtilsRandomGeneratorTest#generateDouble"
            ],
            "children": [
                "HeapElement#equals"
            ]
        },
        "Anagrams#approach4": {
            "parameters": {
                "s": "String",
                "t": "String"
            },
            "name": "Anagrams#approach4",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "Anagrams#main",
                "AnagramsTest#isAlphabetical"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArray#put",
                "DynamicArray#put",
                "HeapElement#equals",
                "CircularBufferTest#put",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "Anagrams#approach3": {
            "parameters": {
                "s": "String",
                "t": "String"
            },
            "name": "Anagrams#approach3",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "Anagrams#main",
                "AnagramsTest#isAlphabetical"
            ],
            "children": []
        },
        "BinaryToHexadecimal#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BinaryToHexadecimal#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Blowfish#binToHex",
                "BufferedReader#close",
                "BinaryToHexadecimal#binToHex"
            ]
        },
        "LFUCacheTest#testAddNodeWithUpdatedFrequency": {
            "parameters": {},
            "name": "LFUCacheTest#testAddNodeWithUpdatedFrequency",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "BogoSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BogoSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "BoundaryFill#printImageArray": {
            "parameters": {
                "image": "int[][]"
            },
            "name": "BoundaryFill#printImageArray",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BoundaryFill#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "MaxHeap#getElement": {
            "parameters": {},
            "name": "MaxHeap#getElement",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "DynamicArray#get",
                "DynamicArray#remove",
                "DynamicArrayIterator#next",
                "DynamicArrayIterator#forEachRemaining",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "MaxHeap#extractMax",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "Complex#divide": {
            "parameters": {
                "n": "double"
            },
            "name": "Complex#divide",
            "recursive": "false",
            "inComing": 13,
            "outGoing": 0,
            "numberOfCalls": 13,
            "parents": [
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FFTTest#divideWithComplexTest",
                "FFTTest#divideWithScalarTest",
                "LongDivisionTest#testOne",
                "LongDivisionTest#testTwo",
                "LongDivisionTest#testThree",
                "LongDivisionTest#testNegativeDividend",
                "LongDivisionTest#testDividendLessThanDivisor",
                "LongDivisionTest#testDividendIsZero",
                "LongDivisionTest#testDivisionByZero"
            ],
            "children": [
                "FFTTest#abs",
                "Complex#abs",
                "Blowfish#round"
            ]
        },
        "ADTFractionTest#testEqualsAndHashCode": {
            "parameters": {},
            "name": "ADTFractionTest#testEqualsAndHashCode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapElement#hashCode",
                "HeapElement#equals"
            ]
        },
        "FastInverseSqrtTests#testForsecond": {
            "parameters": {},
            "name": "FastInverseSqrtTests#testForsecond",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FastInverseSqrt#inverseSqrt"
            ]
        },
        "NextSmallerElement#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "NextSmallerElement#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "NextSmallerElement#findNextSmallerElements",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "InfixToPostfix#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "InfixToPostfix#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "InfixToPostfix#infix2PostFix",
                "HeapElement#equals"
            ]
        },
        "LazySegmentTreeTest#build": {
            "parameters": {},
            "name": "LazySegmentTreeTest#build",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Entry#getValue",
                "LazySegmentTree#getRoot"
            ]
        },
        "CircularPointer#getAndIncrement": {
            "parameters": {},
            "name": "CircularPointer#getAndIncrement",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "CircularBuffer#get",
                "CircularBuffer#put"
            ],
            "children": []
        },
        "HexToOct#decimal2octal": {
            "parameters": {
                "q": "int"
            },
            "name": "HexToOct#decimal2octal",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "HexToOct#main",
                "HexToOctTest#testHexToOct"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "TreeTraversal#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "TreeTraversal#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "LevelOrderTraversalHelper#printLevelOrder",
                "MedianOfRunningArray#insert",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "PriorityQueue#insert"
            ]
        },
        "MinHeap#toggleUp": {
            "parameters": {
                "elementIndex": "int"
            },
            "name": "MinHeap#toggleUp",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#insertElement",
                "MinHeap#deleteElement"
            ],
            "children": [
                "FindKthNumber#swap",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "MinHeap#getElementKey",
                "OddEvenSort#swap",
                "LazySegmentTreeTest#get",
                "Map#get",
                "MinHeap#swap",
                "DynamicArray#get",
                "SinglyLinkedListTest#swap",
                "MaxHeap#getElementKey",
                "HeapElement#getKey",
                "CircularBuffer#get",
                "GenericHeap#swap",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "SkipList#get",
                "CircularBufferTest#get",
                "IntrospectiveSort#swap",
                "GenericHeap#get",
                "HeapNode#getKey",
                "LinearProbingHashMap#get",
                "HeapSort#swap",
                "LRUCache#get",
                "LFUCache#get",
                "Floor#floor",
                "BFPRT#swap",
                "Entry#getKey",
                "DualPivotQuickSort#swap"
            ]
        },
        "PythagoreanTriple#isPythagTriple": {
            "parameters": {
                "a": "int",
                "b": "int",
                "c": "int"
            },
            "name": "PythagoreanTriple#isPythagTriple",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "PythagoreanTriple#main",
                "PythagoreanTripleTest#Testpythagoreantriple"
            ],
            "children": []
        },
        "Damm#generateAndPrint": {
            "parameters": {
                "input": "String"
            },
            "name": "Damm#generateAndPrint",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Damm#main",
                "Verhoeff#main"
            ],
            "children": [
                "Damm#addDammChecksum"
            ]
        },
        "Graphs#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Graphs#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BellmanFord#addEdge",
                "AdjacencyList#addEdge",
                "AdjacencyMatrixGraph#addEdge",
                "AllPathsFromSourceToTarget#addEdge",
                "AdjacencyListGraph#addEdge",
                "Kruskal#addEdge",
                "Graph#addEdge"
            ]
        },
        "SelectionSortTest#IntegerArrTest": {
            "parameters": {},
            "name": "SelectionSortTest#IntegerArrTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "KnapsackMemoization#knapSack": {
            "parameters": {
                "val": "int[]",
                "W": "int",
                "wt": "int[]",
                "N": "int"
            },
            "name": "KnapsackMemoization#knapSack",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "BruteForceKnapsack#knapSack",
                "BruteForceKnapsack#main",
                "DyanamicProgrammingKnapsack#main",
                "Knapsack#main",
                "KnapsackMemoizationTest#Test1",
                "KnapsackMemoizationTest#Test2",
                "KnapsackMemoizationTest#Test3"
            ],
            "children": [
                "KnapsackMemoization#knapSackRec"
            ]
        },
        "SinglyLinkedListTest#deleteNth": {
            "parameters": {},
            "name": "SinglyLinkedListTest#deleteNth",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "SinglyLinkedList#deleteHead",
                "SinglyLinkedList#delete",
                "SinglyLinkedList#main",
                "SinglyLinkedListTest#deleteNth"
            ],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedListTest#createSampleList",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SinglyLinkedList#deleteNth",
                "SearchSinglyLinkedListRecursion#search",
                "SinglyLinkedListTest#deleteNth",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "GenericHeap#isEmpty": {
            "parameters": {},
            "name": "GenericHeap#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "FibonacciHeap#size"
            ]
        },
        "GuassLegendre#pi": {
            "parameters": {
                "l": "int"
            },
            "name": "GuassLegendre#pi",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "GuassLegendre#main"
            ],
            "children": [
                "Pow#pow",
                "FenwickTree#update",
                "SegmentTree#update",
                "GuassLegendre#update",
                "LazySegmentTreeTest#update",
                "PowRecursion#pow"
            ]
        },
        "LinkedQueue#enqueue": {
            "parameters": {
                "data": "T"
            },
            "name": "LinkedQueue#enqueue",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "LinkedQueue#main",
                "LinkedQueueTest#testQue"
            ],
            "children": []
        },
        "KaprekarNumbersTest#testFor26": {
            "parameters": {},
            "name": "KaprekarNumbersTest#testFor26",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KaprekarNumbers#isKaprekarNumber"
            ]
        },
        "AllPathsFromSourceToTarget#addEdge": {
            "parameters": {
                "u": "int",
                "v": "int"
            },
            "name": "AllPathsFromSourceToTarget#addEdge",
            "recursive": "false",
            "inComing": 73,
            "outGoing": 0,
            "numberOfCalls": 73,
            "parents": [
                "AllPathsFromSourceToTarget#allPathsFromSourceToTarget",
                "A_Star#initializeGraph",
                "ConnectedComponent#main",
                "Graphs#main",
                "KahnsAlgorithm#main",
                "Kruskal#main",
                "Kruskal#kruskal",
                "MatrixGraphs#main",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "AutomorphicNumber#isAutomorphic3": {
            "parameters": {
                "s": "String"
            },
            "name": "AutomorphicNumber#isAutomorphic3",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "AutomorphicNumberTest#testAutomorphicNumber"
            ],
            "children": [
                "Vector2#multiply",
                "Complex#multiply",
                "MatrixUtil#multiply",
                "StrassenMatrixMultiplication#multiply"
            ]
        },
        "SortUtilsTest#isSortedArrayTrue": {
            "parameters": {},
            "name": "SortUtilsTest#isSortedArrayTrue",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "AutomorphicNumber#isAutomorphic2": {
            "parameters": {
                "n": "long"
            },
            "name": "AutomorphicNumber#isAutomorphic2",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AutomorphicNumberTest#testAutomorphicNumber"
            ],
            "children": []
        },
        "Vertex#hashCode": {
            "parameters": {},
            "name": "Vertex#hashCode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapElement#hashCode"
            ]
        },
        "StrandSortTest#StrandSortDuplicateTest": {
            "parameters": {},
            "name": "StrandSortTest#StrandSortDuplicateTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "StrandSort#strandSort",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "BinaryTree#postOrder": {
            "parameters": {
                "localRoot": "Node"
            },
            "name": "BinaryTree#postOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BSTRecursiveGeneric#postOrder",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "BSTRecursive#postOrder",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "CeilInBinarySearchTreeTest#testKeyAbsentRootIsCeil": {
            "parameters": {},
            "name": "CeilInBinarySearchTreeTest#testKeyAbsentRootIsCeil",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "CeilInBinarySearchTree#getCeil",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "TwinPrimeTest#shouldReturn5": {
            "parameters": {},
            "name": "TwinPrimeTest#shouldReturn5",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TwinPrime#getTwinPrime"
            ]
        },
        "TwinPrimeTest#shouldReturn7": {
            "parameters": {},
            "name": "TwinPrimeTest#shouldReturn7",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TwinPrime#getTwinPrime"
            ]
        },
        "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide": {
            "parameters": {},
            "name": "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString",
                "BinarySearch2dArray#BinarySearch"
            ]
        },
        "RabinKarpAlgorithm#search": {
            "parameters": {
                "txt": "String",
                "q": "int",
                "pat": "String"
            },
            "name": "RabinKarpAlgorithm#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": []
        },
        "UniquePathsTests#testForSevenElements": {
            "parameters": {},
            "name": "UniquePathsTests#testForSevenElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "UniquePaths#uniquePaths2"
            ]
        },
        "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle": {
            "parameters": {},
            "name": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "MinimumSumPartition#subSet": {
            "parameters": {
                "arr": "int[]"
            },
            "name": "MinimumSumPartition#subSet",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "MinimumSumPartition#main"
            ],
            "children": [
                "MinimumSumPartition#getSum",
                "MinimumSumPartition#getMin",
                "SegmentTree#getSum",
                "SumWithoutArithmeticOperators#getSum"
            ]
        },
        "RedBlackBST#delete": {
            "parameters": {
                "z": "Node"
            },
            "name": "RedBlackBST#delete",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "HashMap#deleteHash",
                "LinkedList#delete",
                "MinPriorityQueue#heapSort",
                "Link#main",
                "LinkOperations#removeDuplicates",
                "SinglyLinkedList#main",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "BSTRecursive#remove",
                "BSTRecursiveGeneric#delete",
                "BSTRecursiveGeneric#remove",
                "RedBlackBST#deleteDemo",
                "TrieImp#main",
                "MapTest#deleteTest",
                "MapTest#sizeTest",
                "KDTreeTest#delete"
            ],
            "children": [
                "RedBlackBST#deleteFixup",
                "RedBlackBST#treeMinimum",
                "RedBlackBST#transplant",
                "RedBlackBST#findNode"
            ]
        },
        "SimpleSubCipher#decode": {
            "parameters": {
                "cipherSmall": "String",
                "encryptedMessage": "String"
            },
            "name": "SimpleSubCipher#decode",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "Caesar#bruteforce",
                "CaesarTest#caesarDecryptTest",
                "SimpleSubCipherTest#simpleSubCipherDecryptTest",
                "SimpleSubstitutionCipherTest#testDecode",
                "SimpleSubstitutionCipherTest#testIsTextTheSameAfterEncodeAndDecode"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "CircularBuffer#put",
                "LFUCache#put",
                "UpperTest#toUpperCase",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "Deques#toString",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "HeapElement#toString",
                "Upper#toUpperCase",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "DynamicArray#toString",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Lower#toLowerCase",
                "GenericHeap#get",
                "Vector2#toString",
                "LowerTest#toLowerCase",
                "CursorLinkedList#append",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "Queue#toString",
                "CircleLinkedList#append",
                "LRUCache#put",
                "LinearProbingHashMap#put",
                "LinkedQueue#toString"
            ]
        },
        "LeonardoNumber#leonardoNumber": {
            "parameters": {
                "n": "int"
            },
            "name": "LeonardoNumber#leonardoNumber",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "LeonardoNumber#leonardoNumber",
                "LeonardoNumber#main"
            ],
            "children": [
                "LeonardoNumber#leonardoNumber"
            ]
        },
        "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound": {
            "parameters": {},
            "name": "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString",
                "BinarySearch2dArray#BinarySearch"
            ]
        },
        "BalancedBrackets#isPaired": {
            "parameters": {
                "rightBracket": "char",
                "leftBracket": "char"
            },
            "name": "BalancedBrackets#isPaired",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BalancedBrackets#isBalanced"
            ],
            "children": []
        },
        "CeilInBinarySearchTree#getCeil": {
            "parameters": {
                "root": "Node",
                "key": "int"
            },
            "name": "CeilInBinarySearchTree#getCeil",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "CeilInBinarySearchTree#getCeil",
                "CeilInBinarySearchTreeTest#testRootNull",
                "CeilInBinarySearchTreeTest#testKeyPresentRootIsCeil",
                "CeilInBinarySearchTreeTest#testKeyPresentLeafIsCeil",
                "CeilInBinarySearchTreeTest#testKeyAbsentRootIsCeil",
                "CeilInBinarySearchTreeTest#testKeyAbsentLeafIsCeil",
                "CeilInBinarySearchTreeTest#testKeyAbsentLeftMostNodeIsCeil",
                "CeilInBinarySearchTreeTest#testKeyAbsentCeilIsNull"
            ],
            "children": [
                "CeilInBinarySearchTree#getCeil"
            ]
        },
        "MinHeap#toggleDown": {
            "parameters": {
                "elementIndex": "int"
            },
            "name": "MinHeap#toggleDown",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "FindKthNumber#swap",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "MinHeap#getElementKey",
                "OddEvenSort#swap",
                "LazySegmentTreeTest#get",
                "Map#get",
                "MinHeap#swap",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedListTest#swap",
                "SinglyLinkedList#size",
                "MaxHeap#getElementKey",
                "HeapElement#getKey",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHeap#swap",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "MaxHeap#swap",
                "GenericHashMapUsingArrayList#size",
                "Permutation#swap",
                "SortUtils#swap",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "FindMinRecursion#min",
                "CircularBufferTest#get",
                "IntrospectiveSort#swap",
                "GenericHeap#get",
                "SkipList#size",
                "MinValue#min",
                "StackArray#size",
                "Deques#size",
                "HeapNode#getKey",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "HeapSort#swap",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "BFPRT#swap",
                "Entry#getKey",
                "BucketSort#min",
                "DualPivotQuickSort#swap"
            ]
        },
        "DP#findWays": {
            "parameters": {
                "x": "int",
                "m": "int",
                "n": "int"
            },
            "name": "DP#findWays",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "DP#main"
            ],
            "children": []
        },
        "Queue#peekFront": {
            "parameters": {},
            "name": "Queue#peekFront",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "LinkedQueue#main",
                "Queues#main",
                "QueueUsingTwoStacks#main"
            ],
            "children": []
        },
        "CalculateMaxOfMinTest#testForSixElements": {
            "parameters": {},
            "name": "CalculateMaxOfMinTest#testForSixElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MaximumMinimumWindow#calculateMaxOfMin",
                "CalculateMaxOfMin#calculateMaxOfMin"
            ]
        },
        "IntrospectiveSort#heapify": {
            "parameters": {
                "a": "T[]",
                "low": "int",
                "i": "int",
                "n": "int"
            },
            "name": "IntrospectiveSort#heapify",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "HeapSort#sort",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "HeapSort#heapify",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "IntrospectiveSort#heapify",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "SkylineProblem#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "SkylineProblem#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Searcher#run",
                "SkylineProblem#run"
            ]
        },
        "StackArrayList#isEmpty": {
            "parameters": {},
            "name": "StackArrayList#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle": {
            "parameters": {},
            "name": "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString",
                "BinarySearch2dArray#BinarySearch"
            ]
        },
        "BinaryPowTest#testBinPow": {
            "parameters": {},
            "name": "BinaryPowTest#testBinPow",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BinaryPow#binPow"
            ]
        },
        "EditDistance#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "EditDistance#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BufferedReader#close",
                "EditDistance#minDistance"
            ]
        },
        "KaprekarNumbersTest#testFor45": {
            "parameters": {},
            "name": "KaprekarNumbersTest#testFor45",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KaprekarNumbers#isKaprekarNumber"
            ]
        },
        "InsertionSortTest#testIntegerArray": {
            "parameters": {
                "sortAlgorithm": "Function\u003cInteger[],Integer[]\u003e"
            },
            "name": "InsertionSortTest#testIntegerArray",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "InsertionSortTest#insertionSortClassicalWithIntegerArrayShouldPass"
            ],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "QuickSelectTest#quickSelectMaximumOfThreeElements": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectMaximumOfThreeElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "QuickSelect#select"
            ]
        },
        "Kosaraju#dfs2": {
            "parameters": {
                "node": "int",
                "vis": "int[]",
                "list": "List\u003cList\u003cInteger\u003e\u003e"
            },
            "name": "Kosaraju#dfs2",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "Kosaraju#dfs2",
                "BSTRecursive#add",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "PermuteString#generatePermutation": {
            "parameters": {
                "str": "String",
                "start": "int",
                "end": "int"
            },
            "name": "PermuteString#generatePermutation",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "PermuteString#main",
                "PermuteString#generatePermutation"
            ],
            "children": [
                "PermuteString#swapString",
                "PermuteString#generatePermutation"
            ]
        },
        "Blowfish#decrypt": {
            "parameters": {
                "cipherText": "String",
                "key": "String"
            },
            "name": "Blowfish#decrypt",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HillCipher#hillCipher",
                "BlowfishTest#testDecrypt",
                "PolybiusTest#testDecrypt",
                "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption",
                "RSATest#testRSA",
                "VigenereTest#vigenereDecryptTest"
            ],
            "children": [
                "Blowfish#xor",
                "Blowfish#keyGenerate",
                "Blowfish#round"
            ]
        },
        "HashMap#hashing": {
            "parameters": {
                "key": "int"
            },
            "name": "HashMap#hashing",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "HashMap#insertHash",
                "HashMap#deleteHash"
            ],
            "children": []
        },
        "TowerOfHanoi#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "TowerOfHanoi#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BufferedReader#close",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "TowerOfHanoi#shift"
            ]
        },
        "HexaDecimalToDecimal#getHexaToDec": {
            "parameters": {
                "hex": "String"
            },
            "name": "HexaDecimalToDecimal#getHexaToDec",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "HexaDecimalToDecimal#main",
                "HexaDecimalToDecimalTest#testhexaDecimalToDecimal"
            ],
            "children": [
                "UpperTest#toUpperCase",
                "Upper#toUpperCase",
                "CursorLinkedList#indexOf"
            ]
        },
        "BinaryToHexadecimal#binToHex": {
            "parameters": {
                "binary": "int"
            },
            "name": "BinaryToHexadecimal#binToHex",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Blowfish#xor",
                "BinaryToHexadecimal#main",
                "BinaryToHexadecimalTest#testBinaryToHexadecimal"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "Pow#pow",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "PowRecursion#pow",
                "LinearProbingHashMap#put"
            ]
        },
        "VerticalOrderTraversalTest#testVerticalTraversalDifferentHeight": {
            "parameters": {},
            "name": "VerticalOrderTraversalTest#testVerticalTraversalDifferentHeight",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "VerticalOrderTraversal#verticalTraversal",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "BFPRT#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BFPRT#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "BFPRT#getMinKNumsByBFPRT",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "BucketSortTest#bucketSortSingleIntegerArray": {
            "parameters": {},
            "name": "BucketSortTest#bucketSortSingleIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BucketSort#bucketSort"
            ]
        },
        "AVLTree#reheight": {
            "parameters": {
                "node": "Node"
            },
            "name": "AVLTree#reheight",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "AVLTree#setBalance"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "HeightStrategy#height",
                "BernoulliHeightStrategy#height",
                "FindMaxRecursion#max",
                "AVLTree#height",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max",
                "GenericTree#height",
                "AVLSimple#height",
                "LevelOrderTraversalHelper#height"
            ]
        },
        "HexToOct#hex2decimal": {
            "parameters": {
                "s": "String"
            },
            "name": "HexToOct#hex2decimal",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "HexToOct#main",
                "HexToOctTest#testHexToOct"
            ],
            "children": [
                "UpperTest#toUpperCase",
                "Upper#toUpperCase",
                "CursorLinkedList#indexOf"
            ]
        },
        "CircularBuffer#isEmpty": {
            "parameters": {},
            "name": "CircularBuffer#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "AbsoluteMin#getMinValue": {
            "parameters": {
                "numbers": "int"
            },
            "name": "AbsoluteMin#getMinValue",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AbsoluteMinTest#testGetMinValue",
                "AbsoluteMinTest#testGetMinValueWithNoArguments"
            ],
            "children": [
                "DynamicArray#stream",
                "FFTTest#abs",
                "Complex#abs"
            ]
        },
        "OrderAgnosticBinarySearch#BinSearchAlgo": {
            "parameters": {
                "arr": "int[]",
                "start": "int",
                "end": "int",
                "target": "int"
            },
            "name": "OrderAgnosticBinarySearch#BinSearchAlgo",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "OrderAgnosticBinarySearchTest#ElementInMiddle",
                "OrderAgnosticBinarySearchTest#RightHalfDescOrder",
                "OrderAgnosticBinarySearchTest#LeftHalfDescOrder",
                "OrderAgnosticBinarySearchTest#RightHalfAscOrder",
                "OrderAgnosticBinarySearchTest#LeftHalfAscOrder",
                "OrderAgnosticBinarySearchTest#ElementNotFound"
            ],
            "children": []
        },
        "SumWithoutArithmeticOperatorsTest#addEventoOdd": {
            "parameters": {},
            "name": "SumWithoutArithmeticOperatorsTest#addEventoOdd",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MinimumSumPartition#getSum",
                "SegmentTree#getSum",
                "SumWithoutArithmeticOperators#getSum"
            ]
        },
        "sortOrderAgnosticBinarySearchTest#testAscending": {
            "parameters": {},
            "name": "sortOrderAgnosticBinarySearchTest#testAscending",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "SaddlebackSearch#find": {
            "parameters": {
                "arr": "int[][]",
                "col": "int",
                "row": "int",
                "key": "int"
            },
            "name": "SaddlebackSearch#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "BubbleSortTest#bubbleSortEmptyArray": {
            "parameters": {},
            "name": "BubbleSortTest#bubbleSortEmptyArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "ProcessDetails#getBurstTime": {
            "parameters": {},
            "name": "ProcessDetails#getBurstTime",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "SJFSchedulingTest#constructor"
            ],
            "children": []
        },
        "PolybiusTest#testDecrypt": {
            "parameters": {},
            "name": "PolybiusTest#testDecrypt",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RSA#decrypt",
                "HillCipher#decrypt",
                "Vigenere#decrypt",
                "Blowfish#decrypt",
                "Polybius#decrypt"
            ]
        },
        "BFPRT#medianOfMedians": {
            "parameters": {
                "arr": "int[]",
                "end": "int",
                "begin": "int"
            },
            "name": "BFPRT#medianOfMedians",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BFPRT#bfprt"
            ],
            "children": [
                "BFPRT#bfprt",
                "BFPRT#getMedian",
                "FindMinRecursion#min",
                "MinValue#min",
                "BucketSort#min"
            ]
        },
        "PermuteString#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PermuteString#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PermuteString#generatePermutation"
            ]
        },
        "Vertex#compareTo": {
            "parameters": {
                "other": "Vertex"
            },
            "name": "Vertex#compareTo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MyComparator#compare",
                "LinkListSort#compare",
                "XComparator#compare"
            ]
        },
        "SaddlebackSearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "SaddlebackSearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "BufferedReader#close",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "SimpleTreeNode#setRightNode": {
            "parameters": {
                "rightNode": "SimpleTreeNode\u003cE\u003e"
            },
            "name": "SimpleTreeNode#setRightNode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast": {
            "parameters": {},
            "name": "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "FCFSScheduling#scheduleProcesses",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "SJFSchedulingTest#initialisation2",
                "LFUCache#get",
                "SJFScheduling#scheduleProcesses"
            ]
        },
        "HowManyTimesRotated#rotated": {
            "parameters": {
                "a": "int[]"
            },
            "name": "HowManyTimesRotated#rotated",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "HowManyTimesRotated#main",
                "HowManyTimesRotatedTest#testHowManyTimesRotated"
            ],
            "children": []
        },
        "MyAtoi#myAtoi": {
            "parameters": {
                "s": "String"
            },
            "name": "MyAtoi#myAtoi",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "MyAtoiTest#testOne",
                "MyAtoiTest#testTwo",
                "MyAtoiTest#testThree",
                "MyAtoiTest#testFour",
                "MyAtoiTest#testFive",
                "MyAtoiTest#testSix",
                "MyAtoiTest#testSeven"
            ],
            "children": [
                "ParseInteger#parseInt"
            ]
        },
        "MatrixUtil#multiply": {
            "parameters": {
                "matrix2": "BigDecimal[][]",
                "matrix1": "BigDecimal[][]"
            },
            "name": "MatrixUtil#multiply",
            "recursive": "false",
            "inComing": 28,
            "outGoing": 0,
            "numberOfCalls": 28,
            "parents": [
                "RSA#generateKeys",
                "StrassenMatrixMultiplication#multiply",
                "AutomorphicNumber#isAutomorphic3",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "FFT#fft",
                "FFTBluestein#fftBluestein",
                "KaprekarNumbers#isKaprekarNumber",
                "MatrixUtil#multiply",
                "MatrixUtil#main",
                "KochSnowflake#IterationStep",
                "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest2x2",
                "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest4x4",
                "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTestNegetiveNumber4x4",
                "FFTTest#multiplyWithComplexTest",
                "FFTTest#multiplyWithScalarTest"
            ],
            "children": [
                "FibonacciHeap#empty",
                "MatrixUtil#canMultiply",
                "Vector2#multiply",
                "Complex#multiply",
                "MatrixUtil#multiply",
                "StrassenMatrixMultiplication#multiply"
            ]
        },
        "StackArray#size": {
            "parameters": {},
            "name": "StackArray#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": []
        },
        "PollardRhoTest#testPollardRhoForNumber187MustReturn11": {
            "parameters": {},
            "name": "PollardRhoTest#testPollardRhoForNumber187MustReturn11",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PollardRho#pollardRho"
            ]
        },
        "LetterCombinationsOfPhoneNumber#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LetterCombinationsOfPhoneNumber#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LetterCombinationsOfPhoneNumber#printWords"
            ]
        },
        "ArrayCombinationTest#testNoLengthElement": {
            "parameters": {},
            "name": "ArrayCombinationTest#testNoLengthElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ArrayCombination#combination",
                "Combination#combination"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "BFPRT#partition": {
            "parameters": {
                "arr": "int[]",
                "num": "int",
                "end": "int",
                "begin": "int"
            },
            "name": "BFPRT#partition",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "FindKthNumber#findKthMax",
                "BFPRT#bfprt",
                "QuickSelect#selectIndex",
                "DualPivotQuickSort#dualPivotQuicksort",
                "IntrospectiveSort#introSort",
                "QuickSort#randomPartition"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "StackArrayList#pop": {
            "parameters": {},
            "name": "StackArrayList#pop",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "Kosaraju#findStronglyConnectedComponents",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "InorderTraversal#iterativeInorder",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PalindromeSinglyLinkedList#isPalindrome",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StackPostfixNotation#postfixEvaluate"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "BSTIterative#remove",
                "Queue#remove",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "SkipList#remove",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "ListIterator#remove",
                "CircularBufferTest#isEmpty",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "CircularQueue#isEmpty",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "GenericHashMapUsingArrayList#remove",
                "DynamicArray#isEmpty",
                "GenericHeap#remove",
                "PriorityQueue#isEmpty"
            ]
        },
        "MRUCache#setCapacity": {
            "parameters": {
                "newCapacity": "int"
            },
            "name": "MRUCache#setCapacity",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "null#null"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "HeapElement#getKey",
                "PriorityQueue#remove",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "Map#size",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "LRUCache#evict",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "SkipList#size",
                "MRUCache#checkCapacity",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "MRUCache#evict",
                "Deques#size",
                "HeapNode#getKey",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "LRUCache#checkCapacity",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "Entry#getKey",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove"
            ]
        },
        "HamiltonianCycle#isPathFound": {
            "parameters": {
                "vertex": "int"
            },
            "name": "HamiltonianCycle#isPathFound",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "HamiltonianCycle#findHamiltonianCycle",
                "HamiltonianCycle#isPathFound"
            ],
            "children": [
                "HamiltonianCycle#isPresent",
                "HamiltonianCycle#isPathFound"
            ]
        },
        "LRUCache#setCapacity": {
            "parameters": {
                "newCapacity": "int"
            },
            "name": "LRUCache#setCapacity",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "null#null"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "HeapElement#getKey",
                "PriorityQueue#remove",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "Map#size",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "LRUCache#evict",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "SkipList#size",
                "MRUCache#checkCapacity",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "MRUCache#evict",
                "Deques#size",
                "HeapNode#getKey",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "LRUCache#checkCapacity",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "Entry#getKey",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove"
            ]
        },
        "WordLadder#ladderLength": {
            "parameters": {
                "endWord": "String",
                "wordList": "List\u003cString\u003e",
                "beginWord": "String"
            },
            "name": "WordLadder#ladderLength",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "WordLadderTest#testWordLadder"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Map#contains",
                "BSTIterative#remove",
                "Queue#remove",
                "Bag#contains",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "SkipList#remove",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "BloomFilter#contains",
                "HeapElement#equals",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "BSTRecursive#add",
                "ListIterator#remove",
                "CircularBufferTest#isEmpty",
                "SkipListTest#contains",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "LinearProbingHashMap#contains",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "SkipList#contains",
                "MatrixUtil#add",
                "CircularQueue#isEmpty",
                "FibonacciHeap#size",
                "Complex#add",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "DynamicArray#isEmpty",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "CharactersSame#isAllCharactersSame": {
            "parameters": {
                "s": "String"
            },
            "name": "CharactersSame#isAllCharactersSame",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "CharactersSame#main",
                "CharacterSameTest#isAllCharactersSame"
            ],
            "children": []
        },
        "KMPSearchTest#KMPSearchTest4": {
            "parameters": {},
            "name": "KMPSearchTest#KMPSearchTest4",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KMPSearch#KMPSearch"
            ]
        },
        "RemoveDuplicateFromString#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "RemoveDuplicateFromString#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RemoveDuplicateFromString#removeDuplicate",
                "BufferedReader#close"
            ]
        },
        "SwapSort#sort": {
            "parameters": {
                "array": "T[]"
            },
            "name": "SwapSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "SwapSort#getSmallerElementCount"
            ]
        },
        "Lower#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Lower#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Lower#toLowerCase",
                "HeapElement#equals",
                "LowerTest#toLowerCase"
            ]
        },
        "PasswordGenTest#failGenerationWithMinLengthSmallerThanMaxLengthTest": {
            "parameters": {},
            "name": "PasswordGenTest#failGenerationWithMinLengthSmallerThanMaxLengthTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PasswordGen#generatePassword"
            ]
        },
        "PasswordGenTest#generatePasswordNonEmptyTest": {
            "parameters": {},
            "name": "PasswordGenTest#generatePasswordNonEmptyTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PasswordGen#generatePassword"
            ]
        },
        "CircularQueue#enQueue": {
            "parameters": {
                "value": "int"
            },
            "name": "CircularQueue#enQueue",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "CircularQueue#main"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "StackArray#isFull",
                "PriorityQueue#isFull",
                "CircularQueue#isFull",
                "QueueWithStack#isEmpty",
                "HashMapCuckooHashing#isFull",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "MinPriorityQueue#isFull",
                "CircularBufferTest#isFull",
                "CircularQueue#isEmpty",
                "Queue#isFull",
                "DynamicArray#isEmpty",
                "CircularBuffer#isFull",
                "PriorityQueue#isEmpty"
            ]
        },
        "Solution#isValid": {
            "parameters": {
                "hi": "int",
                "s": "String",
                "lo": "int"
            },
            "name": "Solution#isValid",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "TrieImp#main",
                "MatrixUtil#hasEqualSizes",
                "MatrixUtil#canMultiply",
                "Solution#longestPalindrome",
                "ValidParenthesesTest#testOne",
                "ValidParenthesesTest#testTwo",
                "ValidParenthesesTest#testThree"
            ],
            "children": []
        },
        "OddEvenSortTest#oddEvenSortIntegerArray": {
            "parameters": {},
            "name": "OddEvenSortTest#oddEvenSortIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OddEvenSort#oddEvenSort"
            ]
        },
        "LowerTest#toLowerCase": {
            "parameters": {},
            "name": "LowerTest#toLowerCase",
            "recursive": "false",
            "inComing": 20,
            "outGoing": 0,
            "numberOfCalls": 20,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "DecimalToHexaDecimal#decToHex",
                "Alphabetical#isAlphabetical",
                "CheckAnagrams#isAnagrams",
                "CheckVowels#hasVowels",
                "HorspoolSearch#charEquals",
                "Lower#main",
                "Lower#toLowerCase",
                "Pangram#isPangram2",
                "LowerTest#toLowerCase"
            ],
            "children": [
                "Lower#toLowerCase",
                "LowerTest#toLowerCase"
            ]
        },
        "LongestAlternatingSubsequence#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LongestAlternatingSubsequence#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LongestAlternatingSubsequence#AlternatingLength"
            ]
        },
        "LFSRTest#initialize": {
            "parameters": {},
            "name": "LFSRTest#initialize",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "null#null",
                "A5KeyStreamGenerator#initialize",
                "A5KeyStreamGenerator#reInitialize",
                "A5KeyStreamGenerator#reInitializeRegisters",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LFSRTest#getClockBit"
            ],
            "children": [
                "SkipList#toString",
                "A5KeyStreamGenerator#initialize",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "LFSR#initialize",
                "BaseLFSR#initialize",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSRTest#initialize",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "ArrayCombinationTest#testLengthOne": {
            "parameters": {},
            "name": "ArrayCombinationTest#testLengthOne",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "SkipListTest#get",
                "LinkedQueue#iterator",
                "SkipList#get",
                "ArrayCombination#combination",
                "Combination#combination",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "DynamicArray#iterator",
                "LFUCache#get",
                "Bag#iterator"
            ]
        },
        "CheckIfBinaryTreeBalanced#isBalancedIterative": {
            "parameters": {
                "binaryTree": "BinaryTree"
            },
            "name": "CheckIfBinaryTreeBalanced#isBalancedIterative",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "CheckIfBinaryTreeBalanced#main"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DyanamicProgrammingKnapsack#max",
                "DoublyLinkedList#isEmpty",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SinglyLinkedList#isEmpty",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "StackArray#pop",
                "LinkedListStack#push",
                "LeftistHeap#isEmpty",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "QueueWithStack#isEmpty",
                "GenericArrayListQueue#peek",
                "GenericHashMapUsingArray#put",
                "LinkedQueue#peek",
                "CircularBuffer#get",
                "FFTTest#abs",
                "GenericHashMapUsingArrayList#get",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "SkipListTest#get",
                "BufferedReader#peek",
                "StackArrayList#push",
                "SkipList#get",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "DynamicArray#put",
                "CircularQueue#peek",
                "NodeStack#pop",
                "FindMaxRecursion#max",
                "CircularBufferTest#get",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "GenericHeap#get",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "MaxValue#max",
                "HashMapCuckooHashing#isEmpty",
                "BruteForceKnapsack#max",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "NodeStack#push",
                "GenericTree#max",
                "LinkedListStack#pop",
                "BucketSort#max",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "CircularQueue#isEmpty",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "Complex#abs",
                "NodeStack#peek",
                "LRUCache#put",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "LinearProbingHashMap#put",
                "PriorityQueue#isEmpty"
            ]
        },
        "BSTRecursive#add": {
            "parameters": {
                "data": "int"
            },
            "name": "BSTRecursive#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": [
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "PriorityQueue#insert"
            ]
        },
        "ListIterator#remove": {
            "parameters": {},
            "name": "ListIterator#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": []
        },
        "MiniMaxAlgorithm#getHeight": {
            "parameters": {},
            "name": "MiniMaxAlgorithm#getHeight",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "Task1#count": {
            "parameters": {
                "head": "Node"
            },
            "name": "Task1#count",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "CountSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "MatrixChainMultiplication#main",
                "SieveOfEratosthenes#findPrimesTill",
                "UnionFind#main",
                "Task#sortByMergeSort",
                "Task1#sortByInsertionSort",
                "Task2#sortByHeapSort"
            ],
            "children": []
        },
        "ArrayCombinationTest#testLengthFive": {
            "parameters": {},
            "name": "ArrayCombinationTest#testLengthFive",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "ArrayCombination#combination",
                "Combination#combination",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "CircularBufferTest#isEmpty": {
            "parameters": {},
            "name": "CircularBufferTest#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "CircularBuffer#put",
                "LFUCache#put",
                "SinglyLinkedList#isEmpty",
                "GenericHashMapUsingArrayList#put",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "GenericHashMapUsingArray#put",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "CircularBufferTest#generateInt",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "DynamicArray#put",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#put",
                "CircularQueue#isEmpty",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "DynamicArray#isEmpty",
                "SortUtilsRandomGenerator#generateInt",
                "LinearProbingHashMap#put",
                "PriorityQueue#isEmpty"
            ]
        },
        "BestFitCPUTest#testFitForEqualProcecesses": {
            "parameters": {},
            "name": "BestFitCPUTest#testFitForEqualProcecesses",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "A5KeyStreamGenerator#reInitialize": {
            "parameters": {},
            "name": "A5KeyStreamGenerator#reInitialize",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "A5Cipher#resetCounter"
            ],
            "children": [
                "A5KeyStreamGenerator#initialize",
                "LFSR#initialize",
                "BaseLFSR#initialize",
                "LFSRTest#initialize"
            ]
        },
        "FastInverseSqrt#inverseSqrt": {
            "parameters": {
                "number": "double"
            },
            "name": "FastInverseSqrt#inverseSqrt",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "FastInverseSqrtTests#testForOneElement",
                "FastInverseSqrtTests#testForsecond",
                "FastInverseSqrtTests#testForThird",
                "FastInverseSqrtTests#testForFourth",
                "FastInverseSqrtTests#testForFifth",
                "FastInverseSqrtTests#testForSixth",
                "FastInverseSqrtTests#testForSeventh",
                "FastInverseSqrtTests#testForEighth"
            ],
            "children": []
        },
        "LazySegmentTree#updateRange": {
            "parameters": {
                "left": "int",
                "diff": "int",
                "right": "int"
            },
            "name": "LazySegmentTree#updateRange",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "LazySegmentTree#updateRange",
                "LazySegmentTreeTest#update",
                "LazySegmentTreeTest#updateAndGet"
            ],
            "children": [
                "MergeSort#merge",
                "StrandSort#merge",
                "LazySegmentTree#updateRange",
                "MergeSortRecursive#merge",
                "TimSort#merge",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "TowerOfHanoi#shift",
                "LeftistHeap#merge"
            ]
        },
        "CollatzConjecture#collatzConjecture": {
            "parameters": {
                "firstNumber": "int"
            },
            "name": "CollatzConjecture#collatzConjecture",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "CollatzConjectureTest#collatzConjecture",
                "CollatzConjectureTest#sequenceOfNotNaturalFirstNumber"
            ],
            "children": [
                "Trie#add",
                "LinearCongruentialGenerator#nextNumber",
                "CollatzConjecture#nextNumber",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustReturnNegativeOne": {
            "parameters": {},
            "name": "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustReturnNegativeOne",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LiouvilleLambdaFunction#liouvilleLambda"
            ]
        },
        "FibonacciHeap#toBuckets": {
            "parameters": {
                "curr": "HeapNode"
            },
            "name": "FibonacciHeap#toBuckets",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FibonacciHeap#successiveLink"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "Floor#floor",
                "FibonacciHeap#size",
                "FibonacciHeap#link"
            ]
        },
        "PerfectSquare#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PerfectSquare#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PerfectSquare#isPerfectSquare",
                "FibonacciNumber#isPerfectSquare"
            ]
        },
        "WorstFitCPUTest#testFitForEqualProcecesses": {
            "parameters": {},
            "name": "WorstFitCPUTest#testFitForEqualProcecesses",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "zigZagPatternTest#palindrome": {
            "parameters": {},
            "name": "zigZagPatternTest#palindrome",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "zigZagPattern#encode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubCipher#encode",
                "Caesar#encode"
            ]
        },
        "MergeSortedSinglyLinkedList#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MergeSortedSinglyLinkedList#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "MergeSort#merge",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "Deques#toString",
                "StrandSort#merge",
                "HeapElement#toString",
                "RedBlackBST#insert",
                "DynamicArray#toString",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "CircleLinkedList#toString",
                "LinkedList#insert",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "AVLTree#insert",
                "HeapElement#equals",
                "MergeSortRecursive#merge",
                "LFSR#toString",
                "SinglyLinkedList#insert",
                "GenericHashMapUsingArray#toString",
                "QueueWithStack#insert",
                "TimSort#merge",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "BSTRecursive#insert",
                "Trieac#insert",
                "Queue#toString",
                "PriorityQueue#insert",
                "LinkedQueue#toString",
                "LeftistHeap#merge"
            ]
        },
        "RedBlackBST#treeMinimum": {
            "parameters": {
                "subTreeRoot": "Node"
            },
            "name": "RedBlackBST#treeMinimum",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "RedBlackBST#delete"
            ],
            "children": []
        },
        "DistanceFormula#euclideanDistance": {
            "parameters": {
                "y1": "double",
                "x1": "double",
                "y2": "double",
                "x2": "double"
            },
            "name": "DistanceFormula#euclideanDistance",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "DistanceFormulaTest#euclideanTest1",
                "DistanceFormulaTest#euclideanTest2",
                "DistanceFormulaTest#euclideanTest3",
                "DistanceFormulaTest#euclideanTest4"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "SkipListTest#contains": {
            "parameters": {},
            "name": "SkipListTest#contains",
            "recursive": "false",
            "inComing": 31,
            "outGoing": 0,
            "numberOfCalls": 31,
            "parents": [
                "AnyBaseToAnyBase#validForBase",
                "Bag#main",
                "A_Star#aStar",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Kruskal#kruskal",
                "LinearProbingHashMap#delete",
                "Tree#printTopView",
                "KaprekarNumbers#isKaprekarNumber",
                "CRCAlgorithm#divideMessageWithP",
                "HappyNumbersSeq#isSad",
                "UnionFind#count",
                "CheckVowels#hasVowels",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "MapTest#containsTest",
                "SkipListTest#contains",
                "KaprekarNumbersTest#testForRangeOfNumber",
                "SquareFreeIntegerTest#testIsSquareFreeInteger",
                "HammingDistanceTest#mismatchDataBits"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Map#contains",
                "Bag#contains",
                "SkipListTest#createSkipList",
                "BloomFilter#contains",
                "SkipListTest#contains",
                "Sudoku#print",
                "LinearProbingHashMap#contains",
                "SinglyLinkedList#print",
                "SkipList#contains",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "LinkedQueue#peekRear": {
            "parameters": {},
            "name": "LinkedQueue#peekRear",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "LinkedQueue#main",
                "Queues#main",
                "LinkedQueueTest#testQue"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "CoinChange#minimumCoins": {
            "parameters": {
                "amount": "int",
                "coins": "int[]"
            },
            "name": "CoinChange#minimumCoins",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CoinChange#main"
            ],
            "children": []
        },
        "InorderTraversalTest#testNullRoot": {
            "parameters": {},
            "name": "InorderTraversalTest#testNullRoot",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder"
            ]
        },
        "CombSort#nextGap": {
            "parameters": {
                "gap": "int"
            },
            "name": "CombSort#nextGap",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CombSort#sort"
            ],
            "children": []
        },
        "AverageTest#testAverage_double_20": {
            "parameters": {},
            "name": "AverageTest#testAverage_double_20",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Average#average"
            ]
        },
        "SortUtilsTest#isSortedEmptyArray": {
            "parameters": {},
            "name": "SortUtilsTest#isSortedEmptyArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "InsertDeleteInArray#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "InsertDeleteInArray#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BufferedReader#close"
            ]
        },
        "StackArray#peek": {
            "parameters": {},
            "name": "StackArray#peek",
            "recursive": "false",
            "inComing": 76,
            "outGoing": 0,
            "numberOfCalls": 76,
            "parents": [
                "CircularQueue#main",
                "GenericArrayListQueue#main",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#postorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "VerticalOrderTraversal#verticalTraversal",
                "FordFulkerson#networkFlow",
                "BufferedReader#peek",
                "MedianOfRunningArray#median",
                "Huffman#main",
                "QueueWithStack#peekFront",
                "QueueWithStack#peekBack",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StrandSort#merge",
                "LinkedQueueTest#testQue",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BufferedReaderTest#testPeeks",
                "BufferedReaderTest#testMixes",
                "BufferedReaderTest#testBlockPractical"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "GenericHashMapUsingArray#remove": {
            "parameters": {
                "key": "K"
            },
            "name": "GenericHashMapUsingArray#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": [
                "BSTRecursive#remove",
                "PriorityQueue#remove",
                "CircleLinkedList#remove",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArray#hashFunction",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "HeapElement#equals",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "QueueWithStack#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove"
            ]
        },
        "LowerBound#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LowerBound#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "RomanNumeralUtil#generate",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "MRUCache#evict": {
            "parameters": {},
            "name": "MRUCache#evict",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put"
            ],
            "children": [
                "Entry#setNextEntry",
                "Entry#getPreEntry"
            ]
        },
        "SinglyLinkedList#getNth": {
            "parameters": {
                "index": "int"
            },
            "name": "SinglyLinkedList#getNth",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "SinglyLinkedList#main",
                "PalindromeSinglyLinkedList#isPalindrome",
                "SinglyLinkedListTest#swap"
            ],
            "children": [
                "SinglyLinkedList#checkBounds"
            ]
        },
        "ProcessDetails#getProcessId": {
            "parameters": {},
            "name": "ProcessDetails#getProcessId",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "SJFScheduling#scheduleProcesses",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#sort"
            ],
            "children": []
        },
        "LowerBound#find": {
            "parameters": {
                "array": "T[]",
                "key": "T"
            },
            "name": "LowerBound#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "OptimalJobSchedulingTest#testOptimalJobScheduling3": {
            "parameters": {},
            "name": "OptimalJobSchedulingTest#testOptimalJobScheduling3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OptimalJobScheduling#getCost",
                "OptimalJobScheduling#execute"
            ]
        },
        "Knapsack#knapSack": {
            "parameters": {
                "val": "int[]",
                "W": "int",
                "wt": "int[]",
                "n": "int"
            },
            "name": "Knapsack#knapSack",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "BruteForceKnapsack#knapSack",
                "BruteForceKnapsack#main",
                "DyanamicProgrammingKnapsack#main",
                "Knapsack#main",
                "KnapsackMemoizationTest#Test1",
                "KnapsackMemoizationTest#Test2",
                "KnapsackMemoizationTest#Test3"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "RedBlackBST#insertDemo": {
            "parameters": {},
            "name": "RedBlackBST#insertDemo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "RedBlackBST#printTree",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "BufferedReader#close",
                "RedBlackBST#printTreepre",
                "AVLTree#insert",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "PriorityQueue#insert"
            ]
        },
        "NodeStack#push": {
            "parameters": {
                "item": "Item"
            },
            "name": "NodeStack#push",
            "recursive": "false",
            "inComing": 58,
            "outGoing": 0,
            "numberOfCalls": 58,
            "parents": [
                "Kosaraju#dfs",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#push",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "InorderTraversal#iterativeInorder",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PalindromeSinglyLinkedList#isPalindrome",
                "QueueWithStack#insert",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StackPostfixNotation#postfixEvaluate"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "SinglyLinkedList#setHead",
                "DoublyLinkedList#isEmpty",
                "PriorityQueue#getSize",
                "SinglyLinkedList#isEmpty",
                "NodeStack#setHead",
                "LeftistHeap#isEmpty",
                "NodeStack#setNext",
                "QueueWithStack#isEmpty",
                "NodeStack#setPrevious",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "DynamicArray#getSize",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "LinkedListStack#getSize",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircleLinkedList#getSize",
                "CircularQueue#isEmpty",
                "HeapNode#setNext",
                "NodeStack#getSize",
                "Queue#getSize",
                "DynamicArray#isEmpty",
                "NodeStack#setSize",
                "PriorityQueue#isEmpty"
            ]
        },
        "CountFriendsPairingTest#testForSevenElements": {
            "parameters": {},
            "name": "CountFriendsPairingTest#testForSevenElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CountFriendsPairing#countFriendsPairing"
            ]
        },
        "Polybius#decrypt": {
            "parameters": {
                "ciphertext": "String"
            },
            "name": "Polybius#decrypt",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HillCipher#hillCipher",
                "BlowfishTest#testDecrypt",
                "PolybiusTest#testDecrypt",
                "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption",
                "RSATest#testRSA",
                "VigenereTest#vigenereDecryptTest"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "MergeSortRecursive#sort": {
            "parameters": {
                "unsortedA": "List\u003cInteger\u003e",
                "unsortedB": "List\u003cInteger\u003e"
            },
            "name": "MergeSortRecursive#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "DutchNationalFlagSort#sort",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "TopologicalSort#sort",
                "MRUCache#get",
                "LFSR#get",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "Trie#add",
                "GnomeSort#sort",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "LinearProbingHashMap#size",
                "InsertionSort#sort",
                "DynamicArray#get",
                "DualPivotQuickSort#sort",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BubbleSort#sort",
                "BSTRecursiveGeneric#add",
                "SlowSort#sort",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "CombSort#sort",
                "GenericHeap#size",
                "IntrospectiveSort#sort",
                "GenericHashMapUsingArrayList#get",
                "PancakeSort#sort",
                "Map#size",
                "SkipListTest#get",
                "TreeSort#sort",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "GenericHeap#get",
                "TimSort#sort",
                "SkipList#size",
                "QuickSort#sort",
                "DynamicArray#add",
                "CountingSort#sort",
                "BogoSort#sort",
                "StackArray#size",
                "SwapSort#sort",
                "BSTRecursive#add",
                "MergeSortRecursive#sort",
                "Deques#size",
                "NodeStack#size",
                "CocktailShakerSort#sort",
                "LinearProbingHashMap#get",
                "StoogeSort#sort",
                "MatrixUtil#add",
                "LRUCache#get",
                "PigeonholeSort#sort",
                "LFUCache#get",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "BitonicSort#sort",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "OptimalJobSchedulingTest#testOptimalJobScheduling1": {
            "parameters": {},
            "name": "OptimalJobSchedulingTest#testOptimalJobScheduling1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OptimalJobScheduling#getCost",
                "OptimalJobScheduling#execute"
            ]
        },
        "AreaTest#testSurfaceAreaCircle": {
            "parameters": {},
            "name": "AreaTest#testSurfaceAreaCircle",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Area#surfaceAreaCircle"
            ]
        },
        "OptimalJobSchedulingTest#testOptimalJobScheduling2": {
            "parameters": {},
            "name": "OptimalJobSchedulingTest#testOptimalJobScheduling2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OptimalJobScheduling#getCost",
                "OptimalJobScheduling#execute"
            ]
        },
        "ClosestPair#yQuickSort": {
            "parameters": {
                "a": "Location[]",
                "last": "int",
                "first": "int"
            },
            "name": "ClosestPair#yQuickSort",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "ClosestPair#yQuickSort",
                "ClosestPair#closestPair"
            ],
            "children": [
                "ClosestPair#yPartition",
                "ClosestPair#yQuickSort"
            ]
        },
        "RowColumnWiseSorted2dArrayBinarySearch#search": {
            "parameters": {
                "matrix": "T[][]",
                "target": "T"
            },
            "name": "RowColumnWiseSorted2dArrayBinarySearch#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": []
        },
        "MinPriorityQueue#isFull": {
            "parameters": {},
            "name": "MinPriorityQueue#isFull",
            "recursive": "false",
            "inComing": 18,
            "outGoing": 0,
            "numberOfCalls": 18,
            "parents": [
                "CircularBuffer#put",
                "HashMapCuckooHashing#insertKey2HashTable",
                "MinPriorityQueue#insert",
                "CircularQueue#enQueue",
                "CircularQueue#main",
                "PriorityQueue#insert",
                "Queue#insert",
                "Queues#main",
                "StackArray#main",
                "StackArray#push",
                "CircularBufferTest#isFull",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": []
        },
        "PerfectBinarySearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PerfectBinarySearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PerfectBinarySearch#binarySearch",
                "BinarySearch2dArray#binarySearch"
            ]
        },
        "Verhoeff#generateAndPrint": {
            "parameters": {
                "input": "String"
            },
            "name": "Verhoeff#generateAndPrint",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Damm#main",
                "Verhoeff#main"
            ],
            "children": [
                "Verhoeff#addVerhoeffChecksum"
            ]
        },
        "SumOfArithmeticSeries#sumOfSeries": {
            "parameters": {
                "firstTerm": "double",
                "commonDiff": "double",
                "numOfTerms": "int"
            },
            "name": "SumOfArithmeticSeries#sumOfSeries",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "SumOfArithmeticSeries#main"
            ],
            "children": []
        },
        "WorstFitCPUTest#testFitForSameInputDifferentQuery": {
            "parameters": {},
            "name": "WorstFitCPUTest#testFitForSameInputDifferentQuery",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "Complex#conjugate": {
            "parameters": {},
            "name": "Complex#conjugate",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "FFTTest#conjugateTest"
            ],
            "children": []
        },
        "TopologicalSort#topSortOrder": {
            "parameters": {},
            "name": "TopologicalSort#topSortOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SinglyLinkedList#isEmpty",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "QueueWithStack#isEmpty",
                "GenericHashMapUsingArray#put",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "AdjacencyList#getAdjacents",
                "GenericHashMapUsingArrayList#get",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "SkipListTest#get",
                "SkipList#get",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "GenericHeap#get",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "CircularQueue#isEmpty",
                "LFUCache#get",
                "MRUCache#put",
                "Complex#add",
                "Map#put",
                "GenericHeap#add",
                "SkylineProblem#add",
                "LRUCache#put",
                "SkipListTest#add",
                "Bag#add",
                "DynamicArray#isEmpty",
                "LinearProbingHashMap#put",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "Gaussian#gaussianElimination": {
            "parameters": {
                "mat": "double[][]",
                "i": "int",
                "mat_size": "int"
            },
            "name": "Gaussian#gaussianElimination",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Gaussian#gaussian"
            ],
            "children": []
        },
        "HashMapCuckooHashingTest#removeNone": {
            "parameters": {},
            "name": "HashMapCuckooHashingTest#removeNone",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HashMapCuckooHashing#getNumberOfKeysInTable",
                "HashMapCuckooHashing#deleteKeyFromHashTable"
            ]
        },
        "KaprekarNumbers#isKaprekarNumber": {
            "parameters": {
                "num": "long"
            },
            "name": "KaprekarNumbers#isKaprekarNumber",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbersTest#testFor1",
                "KaprekarNumbersTest#testFor45",
                "KaprekarNumbersTest#testFor297",
                "KaprekarNumbersTest#testFor2223",
                "KaprekarNumbersTest#testFor857143",
                "KaprekarNumbersTest#testFor3",
                "KaprekarNumbersTest#testFor26",
                "KaprekarNumbersTest#testFor98"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "Trie#add",
                "GenericHashMapUsingArrayList#toString",
                "Vector2#add",
                "Deques#toString",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "HeapElement#toString",
                "Vector2#multiply",
                "DynamicArray#toString",
                "CursorLinkedList#indexOf",
                "Map#contains",
                "Complex#multiply",
                "Bag#contains",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "DynamicArray#add",
                "BloomFilter#contains",
                "HeapElement#equals",
                "MatrixUtil#multiply",
                "BSTRecursive#add",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "SkipList#contains",
                "MatrixUtil#add",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "StrassenMatrixMultiplication#multiply",
                "Complex#add",
                "GenericHeap#add",
                "Queue#toString",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "LinkedQueue#toString",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "ValidBSTOrNotTest#testBinaryTreeIsNotBST": {
            "parameters": {},
            "name": "ValidBSTOrNotTest#testBinaryTreeIsNotBST",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "ValidBSTOrNot#isBST",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "PascalTriangleTest#testForFive": {
            "parameters": {},
            "name": "PascalTriangleTest#testForFive",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PascalTriangle#pascal"
            ]
        },
        "MazeRecursion#mazeRecursion": {
            "parameters": {},
            "name": "MazeRecursion#mazeRecursion",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "MazeRecursion#setWay2",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "MazeRecursion#setWay",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "SumWithoutArithmeticOperatorsTest#addZerotoZero": {
            "parameters": {},
            "name": "SumWithoutArithmeticOperatorsTest#addZerotoZero",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MinimumSumPartition#getSum",
                "SegmentTree#getSum",
                "SumWithoutArithmeticOperators#getSum"
            ]
        },
        "AreaTest#testSurfaceAreaCylinder": {
            "parameters": {},
            "name": "AreaTest#testSurfaceAreaCylinder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Area#surfaceAreaCylinder"
            ]
        },
        "CircularBufferTest#isFull": {
            "parameters": {},
            "name": "CircularBufferTest#isFull",
            "recursive": "false",
            "inComing": 18,
            "outGoing": 0,
            "numberOfCalls": 18,
            "parents": [
                "CircularBuffer#put",
                "HashMapCuckooHashing#insertKey2HashTable",
                "MinPriorityQueue#insert",
                "CircularQueue#enQueue",
                "CircularQueue#main",
                "PriorityQueue#insert",
                "Queue#insert",
                "Queues#main",
                "StackArray#main",
                "StackArray#push",
                "CircularBufferTest#isFull",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "StackArray#isFull",
                "PriorityQueue#isFull",
                "CircularQueue#isFull",
                "HashMapCuckooHashing#isFull",
                "GenericHashMapUsingArray#put",
                "CircularBufferTest#generateInt",
                "DynamicArray#put",
                "MinPriorityQueue#isFull",
                "CircularBufferTest#isFull",
                "CircularBufferTest#put",
                "MRUCache#put",
                "Queue#isFull",
                "Map#put",
                "LRUCache#put",
                "CircularBuffer#isFull",
                "SortUtilsRandomGenerator#generateInt",
                "LinearProbingHashMap#put"
            ]
        },
        "LetterCombinationsOfPhoneNumber#printWords": {
            "parameters": {
                "numbers": "int[]"
            },
            "name": "LetterCombinationsOfPhoneNumber#printWords",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "LetterCombinationsOfPhoneNumber#printWords",
                "LetterCombinationsOfPhoneNumber#main",
                "LetterCombinationsOfPhoneNumberTest#letterCombinationsOfPhoneNumber"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "DynamicArray#stream",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LetterCombinationsOfPhoneNumber#generateNumberToCharMap",
                "LetterCombinationsOfPhoneNumber#printWords",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "ColorContrastRatio#getColorSRgb": {
            "parameters": {
                "color8Bit": "double"
            },
            "name": "ColorContrastRatio#getColorSRgb",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ColorContrastRatio#getColor"
            ],
            "children": []
        },
        "InverseOfMatrix#invert": {
            "parameters": {
                "a": "double[][]"
            },
            "name": "InverseOfMatrix#invert",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "InverseOfMatrix#main"
            ],
            "children": [
                "InverseOfMatrix#gaussian",
                "Gaussian#gaussian"
            ]
        },
        "InsertionSortTest#testWithRandomArray": {
            "parameters": {
                "sortAlgorithm": "Function\u003cDouble[],Double[]\u003e"
            },
            "name": "InsertionSortTest#testWithRandomArray",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "InsertionSortTest#insertionSortClassicalWithRandomArrayPass"
            ],
            "children": [
                "SortUtilsRandomGeneratorTest#generateArray",
                "FindKthNumber#generateArray",
                "CircularBufferTest#generateInt",
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "SortUtilsRandomGenerator#generateArray",
                "BogoSort#isSorted",
                "SortUtilsRandomGenerator#generateInt"
            ]
        },
        "CreateAndDetectLoop#detectLoop": {
            "parameters": {
                "head": "Node"
            },
            "name": "CreateAndDetectLoop#detectLoop",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "CreateAndDetectLoop#main",
                "SinglyLinkedListTest#detectLoop"
            ],
            "children": []
        },
        "HeronsFormula#Herons": {
            "parameters": {
                "s3": "int",
                "s1": "int",
                "s2": "int"
            },
            "name": "HeronsFormula#Herons",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "HeronsFormulaTest#test1",
                "HeronsFormulaTest#test2",
                "HeronsFormulaTest#test3",
                "HeronsFormulaTest#test4"
            ],
            "children": []
        },
        "JugglerSequence#jugglerSequence": {
            "parameters": {
                "inputNumber": "int"
            },
            "name": "JugglerSequence#jugglerSequence",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "JugglerSequence#main"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Floor#floor",
                "Complex#add",
                "StrassenMatrixMultiplication#join",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "SwapSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "SwapSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "BellmanFord#go": {
            "parameters": {},
            "name": "BellmanFord#go",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BellmanFord#main"
            ],
            "children": [
                "BellmanFord#printPath",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BufferedReader#close",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "FCFSScheduling#scheduleProcesses": {
            "parameters": {},
            "name": "FCFSScheduling#scheduleProcesses",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": [
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime"
            ]
        },
        "Caesar#bruteforce": {
            "parameters": {
                "encryptedMessage": "String"
            },
            "name": "Caesar#bruteforce",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CaesarTest#caesarBruteForce"
            ],
            "children": [
                "Caesar#decode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#decode"
            ]
        },
        "GenericHeap#downHeapify": {
            "parameters": {
                "pi": "int"
            },
            "name": "GenericHeap#downHeapify",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericHeap#remove",
                "GenericHeap#downHeapify"
            ],
            "children": [
                "GenericHeap#isLarger",
                "GenericHashMapUsingArray#size",
                "FindKthNumber#swap",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "OddEvenSort#swap",
                "LazySegmentTreeTest#get",
                "Map#get",
                "MinHeap#swap",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedListTest#swap",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHeap#swap",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "MaxHeap#swap",
                "GenericHashMapUsingArrayList#size",
                "Permutation#swap",
                "SortUtils#swap",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "IntrospectiveSort#swap",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "GenericHeap#downHeapify",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "HeapSort#swap",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "Node#next": {
            "parameters": {
                "layer": "int"
            },
            "name": "Node#next",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "LargeTreeNode#getChildNodes": {
            "parameters": {},
            "name": "LargeTreeNode#getChildNodes",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "GenericTree#max": {
            "parameters": {
                "maxi": "int",
                "roott": "Node"
            },
            "name": "GenericTree#max",
            "recursive": "false",
            "inComing": 54,
            "outGoing": 0,
            "numberOfCalls": 54,
            "parents": [
                "RgbHsvConversion#rgbToHsv",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "AVLSimple#insert",
                "AVLSimple#rightRotate",
                "AVLSimple#leftRotate",
                "AVLTree#reheight",
                "CheckIfBinaryTreeBalanced#isBalancedRecursive",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#maxcall",
                "GenericTree#max",
                "LevelOrderTraversalHelper#height",
                "VerticalOrderTraversal#verticalTraversal",
                "BruteForceKnapsack#knapSack",
                "DyanamicProgrammingKnapsack#knapSack",
                "EggDropping#minTrials",
                "KadaneAlgorithm#max_Sum",
                "Knapsack#knapSack",
                "KnapsackMemoization#knapSackRec",
                "LongestAlternatingSubsequence#AlternatingLength",
                "LongestValidParentheses#getLongestValidParentheses",
                "RodCutting#cutRod",
                "ShortestSuperSequence#lcs",
                "WineProblem#WPRecursion",
                "WineProblem#WPTD",
                "WineProblem#WPBU",
                "CircularConvolutionFFT#fftCircularConvolution",
                "Convolution#convolution",
                "FindMax#main",
                "FindMaxRecursion#main",
                "FindMaxRecursion#max",
                "MaxValue#main",
                "Mode#mode",
                "MinimizingLateness#main",
                "MiniMaxAlgorithm#miniMax",
                "MonteCarloTreeSearch#getWinnerNode",
                "BeadSort#sort",
                "BucketSort#bucketSort",
                "MergeSortNoExtraSpace#call_merge_sort",
                "QuickSelectTest#quickSelectMaximumOfManyElements"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "DyanamicProgrammingKnapsack#max",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "FindMaxRecursion#max",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "StackArray#size",
                "GenericTree#max",
                "Deques#size",
                "BucketSort#max",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "NextGraterElement#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "NextGraterElement#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "NextGraterElement#findNextGreaterElements",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "ReturnSubsequence#returnSubsequence": {
            "parameters": {
                "givenString": "String"
            },
            "name": "ReturnSubsequence#returnSubsequence",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "ReturnSubsequence#main",
                "ReturnSubsequence#returnSubsequence"
            ],
            "children": [
                "ReturnSubsequence#returnSubsequence"
            ]
        },
        "Area#surfaceAreaRectangle": {
            "parameters": {
                "length": "double",
                "width": "double"
            },
            "name": "Area#surfaceAreaRectangle",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AreaTest#testSurfaceAreaRectangle",
                "AreaTest#testAllIllegalInput"
            ],
            "children": []
        },
        "SelectionSortTest#StringArrTest": {
            "parameters": {},
            "name": "SelectionSortTest#StringArrTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "CountFriendsPairingTest#testForEightElements": {
            "parameters": {},
            "name": "CountFriendsPairingTest#testForEightElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CountFriendsPairing#countFriendsPairing"
            ]
        },
        "ShellSortTest#ShellSortDuplicateIntegerArray": {
            "parameters": {},
            "name": "ShellSortTest#ShellSortDuplicateIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "LCA#getLCA": {
            "parameters": {
                "parent": "int[]",
                "depth": "int[]",
                "v1": "int",
                "v2": "int"
            },
            "name": "LCA#getLCA",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LCA#main"
            ],
            "children": []
        },
        "LongestAlternatingSubsequence#AlternatingLength": {
            "parameters": {
                "arr": "int[]",
                "n": "int"
            },
            "name": "LongestAlternatingSubsequence#AlternatingLength",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LongestAlternatingSubsequence#main"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "PreOrderTraversalTest#testNullRoot": {
            "parameters": {},
            "name": "PreOrderTraversalTest#testNullRoot",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PreOrderTraversal#recursivePreOrder",
                "PreOrderTraversal#iterativePreOrder"
            ]
        },
        "PostfixToInfix#getPostfixToInfix": {
            "parameters": {
                "postfix": "String"
            },
            "name": "PostfixToInfix#getPostfixToInfix",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "PostfixToInfix#main"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "SinglyLinkedList#toString",
                "LinkedListStack#push",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "LeftistHeap#isEmpty",
                "Deques#toString",
                "QueueWithStack#isEmpty",
                "PostfixToInfix#isValidPostfixExpression",
                "HeapElement#toString",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "StackArrayList#push",
                "DynamicArray#toString",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "NodeStack#pop",
                "CircleLinkedList#toString",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "NodeStack#push",
                "LinkedListStack#pop",
                "CursorLinkedList#append",
                "PostfixToInfix#isOperator",
                "LFSR#toString",
                "CircularQueue#isEmpty",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "DynamicArray#isEmpty",
                "LinkedQueue#toString",
                "PriorityQueue#isEmpty"
            ]
        },
        "CheckTreeIsSymmetricTest#testNonSymmetricTree": {
            "parameters": {},
            "name": "CheckTreeIsSymmetricTest#testNonSymmetricTree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "CheckTreeIsSymmetric#isSymmetric",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "SkipListTest#checkSortedOnLowestLayer": {
            "parameters": {},
            "name": "SkipListTest#checkSortedOnLowestLayer",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DynamicArray#stream",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "CreateAndDetectLoop#printList": {
            "parameters": {
                "head": "Node"
            },
            "name": "CreateAndDetectLoop#printList",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CreateAndDetectLoop#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "PascalTriangleTest#testForEight": {
            "parameters": {},
            "name": "PascalTriangleTest#testForEight",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PascalTriangle#pascal"
            ]
        },
        "BinaryToOctalTest#testBinaryToOctal": {
            "parameters": {},
            "name": "BinaryToOctalTest#testBinaryToOctal",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BinaryToOctal#convertBinaryToOctal"
            ]
        },
        "BogoSort#isSorted": {
            "parameters": {
                "array": "T[]"
            },
            "name": "BogoSort#isSorted",
            "recursive": "false",
            "inComing": 32,
            "outGoing": 0,
            "numberOfCalls": 32,
            "parents": [
                "BogoSort#sort",
                "LinkListSortTest#testForOneElement",
                "LinkListSortTest#testForTwoElements",
                "LinkListSortTest#testForThreeElements",
                "LinkListSortTest#testForFourElements",
                "LinkListSortTest#testForFiveElements",
                "LinkListSortTest#testForSixElements",
                "LinkListSortTest#testForSevenElements",
                "LinkListSortTest#testForEightElements",
                "InsertionSortTest#testEmptyArray",
                "InsertionSortTest#testSingleValue",
                "InsertionSortTest#testIntegerArray",
                "InsertionSortTest#testWithNegativeValues",
                "InsertionSortTest#testWithDuplicates",
                "InsertionSortTest#testWithStringArray",
                "InsertionSortTest#testWithRandomArray",
                "SortUtilsTest#isSortedEmptyArray",
                "SortUtilsTest#isSortedWithSingleElement",
                "SortUtilsTest#isSortedArrayTrue",
                "SortUtilsTest#isSortedArrayFalse",
                "SortUtilsTest#isSortedListTrue",
                "SortUtilsTest#isSortedListFalse",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
            ],
            "children": [
                "SortUtils#less",
                "HeapSort#less"
            ]
        },
        "FFT#fftBitReversal": {
            "parameters": {
                "log2N": "int",
                "x": "ArrayList\u003cComplex\u003e",
                "N": "int"
            },
            "name": "FFT#fftBitReversal",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FFT#fft"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "FFT#reverseBits",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "SameTreesCheck#check": {
            "parameters": {
                "p": "BinaryTree.Node",
                "q": "BinaryTree.Node"
            },
            "name": "SameTreesCheck#check",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "DuplicateBrackets#main",
                "SameTreesCheckTest#testBothRootsAreNull",
                "SameTreesCheckTest#testOneRootIsNull",
                "SameTreesCheckTest#testSingleNodeTreesAreSame",
                "SameTreesCheckTest#testSameTreesIsSuccessful",
                "SameTreesCheckTest#testSameTreesFails",
                "SameTreesCheckTest#testTreesWithDifferentStructure"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "QueueWithStack#isEmpty",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "SameTreesCheck#equalNodes",
                "MatrixUtil#add",
                "CircularQueue#isEmpty",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "DynamicArray#isEmpty",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "ArrayLeftRotationTest#testForHigherSizeStep": {
            "parameters": {},
            "name": "ArrayLeftRotationTest#testForHigherSizeStep",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RedBlackBST#rotateLeft",
                "ArrayLeftRotation#rotateLeft",
                "AVLTree#rotateLeft"
            ]
        },
        "TreeSortTest#treeSortIntegerArray": {
            "parameters": {},
            "name": "TreeSortTest#treeSortIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "NewManShanksPrime#nthManShanksPrime": {
            "parameters": {
                "expected_answer": "int",
                "n": "int"
            },
            "name": "NewManShanksPrime#nthManShanksPrime",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "NewManShanksPrimeTest#testOne",
                "NewManShanksPrimeTest#testTwo",
                "NewManShanksPrimeTest#testThree",
                "NewManShanksPrimeTest#testFour",
                "NewManShanksPrimeTest#testFive",
                "NewManShanksPrimeTest#testSix",
                "NewManShanksPrimeTest#testSeven",
                "NewManShanksPrimeTest#testEight"
            ],
            "children": []
        },
        "FactorialRecursion#factorial": {
            "parameters": {
                "n": "int"
            },
            "name": "FactorialRecursion#factorial",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "Combinations#factorial",
                "Combinations#combinations",
                "Factorial#main",
                "FactorialRecursion#main",
                "FactorialRecursion#factorial",
                "FactorialTest#test"
            ],
            "children": [
                "Combinations#factorial",
                "Factorial#factorial",
                "FactorialRecursion#factorial"
            ]
        },
        "FindMinTest#testFindMinValue": {
            "parameters": {},
            "name": "FindMinTest#testFindMinValue",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FindMin#findMin",
                "KDTreeTest#findMin",
                "FibonacciHeap#findMin",
                "OptimalJobScheduling#findMin"
            ]
        },
        "CheckVowelsTest#isVowel": {
            "parameters": {},
            "name": "CheckVowelsTest#isVowel",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CheckVowels#hasVowels"
            ]
        },
        "TrinomialTriangle#printTrinomial": {
            "parameters": {
                "n": "int"
            },
            "name": "TrinomialTriangle#printTrinomial",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "TrinomialTriangle#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "TrinomialTriangle#TrinomialValue",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "FFT#paddingPowerOfTwo": {
            "parameters": {
                "x": "ArrayList\u003cComplex\u003e"
            },
            "name": "FFT#paddingPowerOfTwo",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FFT#fft"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Trie#add",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "NodeStack#size",
                "MatrixUtil#add",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "NQueens#placeQueens": {
            "parameters": {
                "queens": "int"
            },
            "name": "NQueens#placeQueens",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "NQueens#main"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "NQueens#getSolution",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "SkipListTest#removeFromHead": {
            "parameters": {},
            "name": "SkipListTest#removeFromHead",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SkipListTest#print",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "dijkstras#print",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "CircularBuffer#get",
                "MinPriorityQueue#print",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#remove",
                "SkipList#size",
                "SkipListTest#createSkipList",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "Sudoku#print",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "SinglyLinkedList#print",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "NodeStack#print",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "SortUtils#print",
                "RadixSort#print",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove"
            ]
        },
        "CeilInBinarySearchTreeTest#testKeyPresentLeafIsCeil": {
            "parameters": {},
            "name": "CeilInBinarySearchTreeTest#testKeyPresentLeafIsCeil",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "CeilInBinarySearchTree#getCeil",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "Deques#size": {
            "parameters": {},
            "name": "Deques#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": []
        },
        "RedBlackBST#transplant": {
            "parameters": {
                "with": "Node",
                "target": "Node"
            },
            "name": "RedBlackBST#transplant",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "RedBlackBST#delete"
            ],
            "children": []
        },
        "Deques#pollLast": {
            "parameters": {},
            "name": "Deques#pollLast",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Deques#main"
            ],
            "children": []
        },
        "SameTreesCheck#equalNodes": {
            "parameters": {
                "p": "BinaryTree.Node",
                "q": "BinaryTree.Node"
            },
            "name": "SameTreesCheck#equalNodes",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "SameTreesCheck#check"
            ],
            "children": []
        },
        "AllPathsFromSourceToTargetTest#testForSecondCase": {
            "parameters": {},
            "name": "AllPathsFromSourceToTargetTest#testForSecondCase",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AllPathsFromSourceToTarget#allPathsFromSourceToTarget"
            ]
        },
        "SquareRootwithBabylonianMethodTest#testfor2": {
            "parameters": {},
            "name": "SquareRootwithBabylonianMethodTest#testfor2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SquareRootWithBabylonianMethod#square_Root"
            ]
        },
        "SquareRootwithBabylonianMethodTest#testfor1": {
            "parameters": {},
            "name": "SquareRootwithBabylonianMethodTest#testfor1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SquareRootWithBabylonianMethod#square_Root"
            ]
        },
        "ClosestPair#setSecondCount": {
            "parameters": {
                "secondCount": "int"
            },
            "name": "ClosestPair#setSecondCount",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "ClosestPair#closestPair"
            ],
            "children": []
        },
        "SquareRootwithBabylonianMethodTest#testfor4": {
            "parameters": {},
            "name": "SquareRootwithBabylonianMethodTest#testfor4",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SquareRootWithBabylonianMethod#square_Root"
            ]
        },
        "PerfectNumber#isPerfectNumber": {
            "parameters": {
                "number": "int"
            },
            "name": "PerfectNumber#isPerfectNumber",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "PerfectNumberTest#perfectNumber"
            ],
            "children": []
        },
        "CalculateMaxOfMin#calculateMaxOfMin": {
            "parameters": {
                "a": "int[]"
            },
            "name": "CalculateMaxOfMin#calculateMaxOfMin",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "MaximumMinimumWindow#main",
                "CalculateMaxOfMinTest#testForOneElement",
                "CalculateMaxOfMinTest#testForTwoElements",
                "CalculateMaxOfMinTest#testForThreeElements",
                "CalculateMaxOfMinTest#testForFourElements",
                "CalculateMaxOfMinTest#testForFiveElements",
                "CalculateMaxOfMinTest#testForSixElements",
                "CalculateMaxOfMinTest#testForSevenElements"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "SimpleSubstitutionCipher#decode": {
            "parameters": {
                "cipherSmall": "String",
                "encryptedMessage": "String"
            },
            "name": "SimpleSubstitutionCipher#decode",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "Caesar#bruteforce",
                "CaesarTest#caesarDecryptTest",
                "SimpleSubCipherTest#simpleSubCipherDecryptTest",
                "SimpleSubstitutionCipherTest#testDecode",
                "SimpleSubstitutionCipherTest#testIsTextTheSameAfterEncodeAndDecode"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "CircularBuffer#put",
                "LFUCache#put",
                "UpperTest#toUpperCase",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "Deques#toString",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "HeapElement#toString",
                "Upper#toUpperCase",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "DynamicArray#toString",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Lower#toLowerCase",
                "GenericHeap#get",
                "Vector2#toString",
                "LowerTest#toLowerCase",
                "CursorLinkedList#append",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "Queue#toString",
                "CircleLinkedList#append",
                "LRUCache#put",
                "LinearProbingHashMap#put",
                "LinkedQueue#toString"
            ]
        },
        "SquareFreeIntegerTest#testIsSquareFreeInteger": {
            "parameters": {},
            "name": "SquareFreeIntegerTest#testIsSquareFreeInteger",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SquareFreeInteger#isSquareFreeInteger",
                "Map#contains",
                "Bag#contains",
                "BloomFilter#contains",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "SkipList#contains"
            ]
        },
        "LinkedListStack#pop": {
            "parameters": {},
            "name": "LinkedListStack#pop",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "Kosaraju#findStronglyConnectedComponents",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "InorderTraversal#iterativeInorder",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PalindromeSinglyLinkedList#isPalindrome",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StackPostfixNotation#postfixEvaluate"
            ],
            "children": []
        },
        "BufferedReaderTest#testMixes": {
            "parameters": {},
            "name": "BufferedReaderTest#testMixes",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StackArrayList#peek",
                "BufferedReader#available",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "CircularQueue#peek",
                "PriorityQueue#peek",
                "StackArray#peek",
                "BufferedReader#read",
                "NodeStack#peek",
                "LinkedListStack#peek"
            ]
        },
        "HeapNode#getKey": {
            "parameters": {},
            "name": "HeapNode#getKey",
            "recursive": "false",
            "inComing": 30,
            "outGoing": 0,
            "numberOfCalls": 30,
            "parents": [
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "LinkedList#findKey",
                "LinkedList#delete",
                "LinkedList#display",
                "FibonacciHeap#delete",
                "FibonacciHeap#decreaseKey",
                "FibonacciHeap#updateMin",
                "FibonacciHeap#fromBuckets",
                "FibonacciHeap#link",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#getElementKey",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "Graph#dijkstra",
                "CountingSort#sort",
                "CountingSort#streamSort",
                "FibonacciHeapTest#testHeap"
            ],
            "children": []
        },
        "LongDivisionTest#testNegativeDividend": {
            "parameters": {},
            "name": "LongDivisionTest#testNegativeDividend",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LongDivision#divide",
                "Complex#divide"
            ]
        },
        "Fibonacci#fibBotUp": {
            "parameters": {
                "n": "int"
            },
            "name": "Fibonacci#fibBotUp",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "ConwayTest#testGenerateWith123456": {
            "parameters": {},
            "name": "ConwayTest#testGenerateWith123456",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Conway#generateList",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "AreaTest#testSurfaceAreaCube": {
            "parameters": {},
            "name": "AreaTest#testSurfaceAreaCube",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Area#surfaceAreaCube"
            ]
        },
        "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger": {
            "parameters": {},
            "name": "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#containsKey",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#remove",
                "SkipList#size",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "GenericHashMapUsingArrayList#remove",
                "LinearProbingHashMap#put",
                "GenericHeap#remove"
            ]
        },
        "AdjacencyMatrixGraph#depthFirstOrder": {
            "parameters": {
                "visited": "boolean[]",
                "orderList": "List\u003cInteger\u003e",
                "currentVertex": "int"
            },
            "name": "AdjacencyMatrixGraph#depthFirstOrder",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "MatrixGraphs#main",
                "AdjacencyMatrixGraph#depthFirstOrder"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "MergeSortRecursive#merge": {
            "parameters": {
                "arr": "List\u003cInteger\u003e"
            },
            "name": "MergeSortRecursive#merge",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "LeftistHeap#merge",
                "LeftistHeap#insert",
                "LeftistHeap#extract_min",
                "MergeSortedArrayList#main",
                "MergeSortedSinglyLinkedList#main",
                "LazySegmentTree#buildTree",
                "LazySegmentTree#updateRange",
                "LazySegmentTree#getRange",
                "MergeSort#doSort",
                "MergeSortRecursive#mergeSort",
                "MergeSortRecursive#merge",
                "StrandSort#strandSort",
                "TimSort#sort"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "MergeSort#merge",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "LinearProbingHashMap#size",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BubbleSort#sort",
                "StrandSort#merge",
                "SlowSort#sort",
                "CombSort#sort",
                "GenericHeap#size",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "Map#size",
                "TreeSort#sort",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "SkipList#size",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "StackArray#size",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Deques#size",
                "MergeSortRecursive#merge",
                "NodeStack#size",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "FibonacciHeap#size",
                "TimSort#merge",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "BitonicSort#sort",
                "LeftistHeap#merge"
            ]
        },
        "GenericTree#heightcall": {
            "parameters": {},
            "name": "GenericTree#heightcall",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeightStrategy#height",
                "BernoulliHeightStrategy#height",
                "AVLTree#height",
                "GenericTree#height",
                "AVLSimple#height",
                "LevelOrderTraversalHelper#height"
            ]
        },
        "BufferedReader#justRefill": {
            "parameters": {},
            "name": "BufferedReader#justRefill",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "BufferedReader#pushRefreshData",
                "BufferedReader#refill"
            ],
            "children": [
                "BufferedReader#assertStreamOpen",
                "BufferedReader#read"
            ]
        },
        "ReverseStackUsingRecursion#reverseUsingRecursion": {
            "parameters": {
                "stack": "Stack\u003cInteger\u003e"
            },
            "name": "ReverseStackUsingRecursion#reverseUsingRecursion",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "NodeStack#pop",
                "Bag#isEmpty",
                "ReverseStackUsingRecursion#insertAtEnd",
                "MinPriorityQueue#isEmpty",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "LinkedListStack#pop",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "CircularQueue#isEmpty",
                "NodeStack#peek",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "PriorityQueue#isEmpty"
            ]
        },
        "Heap#insertElement": {
            "parameters": {
                "element": "HeapElement"
            },
            "name": "Heap#insertElement",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "null#null"
            ],
            "children": []
        },
        "HorspoolSearch#charEquals": {
            "parameters": {
                "caseSensitive": "boolean",
                "c1": "char",
                "c2": "char"
            },
            "name": "HorspoolSearch#charEquals",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "HorspoolSearch#firstOccurrence"
            ],
            "children": [
                "Lower#toLowerCase",
                "LowerTest#toLowerCase"
            ]
        },
        "PermutationTest#testSingleElement": {
            "parameters": {},
            "name": "PermutationTest#testSingleElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "Permutation#permutation",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "PalindromePrime#reverse": {
            "parameters": {
                "n": "int"
            },
            "name": "PalindromePrime#reverse",
            "recursive": "false",
            "inComing": 24,
            "outGoing": 0,
            "numberOfCalls": 24,
            "parents": [
                "DecimalToAnyBase#convertToAnyBase",
                "Link#main",
                "SkipList#toString",
                "FordFulkerson#networkFlow",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "KeithNumber#isKeith",
                "PalindromePrime#functioning",
                "CRC32#crc32",
                "LowestBasePalindrome#lowestBasePalindrome",
                "Palindrome#isPalindrome",
                "ReverseString#main",
                "ReverseString#reverse",
                "ReverseStringRecursive#reverse",
                "Rotation#rotation",
                "ReverseStringRecursiveTest#shouldAcceptWhenEmptyStringIsPassed",
                "ReverseStringRecursiveTest#shouldAcceptNotWhenWhenSingleCharacterIsPassed",
                "ReverseStringRecursiveTest#shouldAcceptWhenStringIsPassed",
                "ReverseStringTest#ReverseStringTest"
            ],
            "children": []
        },
        "CursorLinkedList#append": {
            "parameters": {
                "element": "T"
            },
            "name": "CursorLinkedList#append",
            "recursive": "false",
            "inComing": 91,
            "outGoing": 0,
            "numberOfCalls": 91,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "DecimalToAnyBase#convertToAnyBase",
                "IntegerToRoman#integerToRoman",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "CircleLinkedList#main",
                "SkipList#toString",
                "Queue#toString",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "FordFulkerson#networkFlow",
                "LongestCommonSubsequence#lcsString",
                "AmicableNumber#findAllInRange",
                "LongDivision#divide",
                "VampireNumber#test",
                "VampireNumber#splitIntoDigits",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate"
            ],
            "children": [
                "CursorLinkedList#alloc"
            ]
        },
        "Task#sortByMergeSort": {
            "parameters": {
                "head": "Node"
            },
            "name": "Task#sortByMergeSort",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LinkListSort#isSorted"
            ],
            "children": [
                "CountSinglyLinkedListRecursion#count",
                "Task2#count",
                "Task#count",
                "Task2#task",
                "UnionFind#count",
                "Task1#count",
                "SinglyLinkedList#count",
                "Matrix#count",
                "Task#task"
            ]
        },
        "PerfectSquareTest#TestPerfectSquareifisNegativeNumber": {
            "parameters": {},
            "name": "PerfectSquareTest#TestPerfectSquareifisNegativeNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PerfectSquare#isPerfectSquare",
                "FibonacciNumber#isPerfectSquare"
            ]
        },
        "AbsoluteMinTest#testGetMinValue": {
            "parameters": {},
            "name": "AbsoluteMinTest#testGetMinValue",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AbsoluteMin#getMinValue"
            ]
        },
        "Link#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Link#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkOperations#insertTail",
                "Map#delete",
                "LinkOperations#delete",
                "AVLTree#delete",
                "GenericTree#display",
                "LinkOperations#clearList",
                "DoublyLinkedList#displayBackwards",
                "ReverseString#reverse",
                "LinkedList#display",
                "LinkOperations#insertElementByIndex",
                "BSTRecursive#delete",
                "FibonacciHeap#delete",
                "AVLSimple#display",
                "LinkOperations#insertOrdered",
                "SinglyLinkedList#delete",
                "Rotation#reverse",
                "GenericHeap#display",
                "RedBlackBST#delete",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "SinglyLinkedList#insertHead",
                "ReverseStringRecursive#reverse",
                "KDTreeTest#delete",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "LinkOperations#deleteTail",
                "DoublyLinkedList#display",
                "LowestBasePalindrome#reverse",
                "LinkOperations#insertHead",
                "BSTRecursiveGeneric#delete",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "MyAtoiTest#testSix": {
            "parameters": {},
            "name": "MyAtoiTest#testSix",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MyAtoi#myAtoi"
            ]
        },
        "WiggleSort#mapIndex": {
            "parameters": {
                "index": "int",
                "n": "int"
            },
            "name": "WiggleSort#mapIndex",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "WiggleSort#triColorSort"
            ],
            "children": []
        },
        "ReverseStringRecursiveTest#shouldAcceptWhenStringIsPassed": {
            "parameters": {},
            "name": "ReverseStringRecursiveTest#shouldAcceptWhenStringIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ReverseString#reverse",
                "Rotation#reverse",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "ReverseStringRecursive#reverse",
                "LowestBasePalindrome#reverse"
            ]
        },
        "HorspoolSearch#getShiftValue": {
            "parameters": {
                "c": "char"
            },
            "name": "HorspoolSearch#getShiftValue",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "HorspoolSearch#firstOccurrence"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "Mode#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Mode#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapElement#equals",
                "Mode#mode"
            ]
        },
        "AutomorphicNumberTest#testAutomorphicNumber": {
            "parameters": {},
            "name": "AutomorphicNumberTest#testAutomorphicNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AutomorphicNumber#isAutomorphic3",
                "AutomorphicNumber#isAutomorphic2",
                "AutomorphicNumber#isAutomorphic"
            ]
        },
        "LinkOperations#reverse": {
            "parameters": {},
            "name": "LinkOperations#reverse",
            "recursive": "false",
            "inComing": 24,
            "outGoing": 0,
            "numberOfCalls": 24,
            "parents": [
                "DecimalToAnyBase#convertToAnyBase",
                "Link#main",
                "SkipList#toString",
                "FordFulkerson#networkFlow",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "KeithNumber#isKeith",
                "PalindromePrime#functioning",
                "CRC32#crc32",
                "LowestBasePalindrome#lowestBasePalindrome",
                "Palindrome#isPalindrome",
                "ReverseString#main",
                "ReverseString#reverse",
                "ReverseStringRecursive#reverse",
                "Rotation#rotation",
                "ReverseStringRecursiveTest#shouldAcceptWhenEmptyStringIsPassed",
                "ReverseStringRecursiveTest#shouldAcceptNotWhenWhenSingleCharacterIsPassed",
                "ReverseStringRecursiveTest#shouldAcceptWhenStringIsPassed",
                "ReverseStringTest#ReverseStringTest"
            ],
            "children": []
        },
        "MinHeap#insertElement": {
            "parameters": {
                "element": "HeapElement"
            },
            "name": "MinHeap#insertElement",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "null#null"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "MaxHeap#toggleUp",
                "Trie#add",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "DynamicArray#add",
                "MinHeap#toggleUp",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "NodeStack#size",
                "MatrixUtil#add",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "BinarySearch#find": {
            "parameters": {
                "array": "T[]",
                "key": "T"
            },
            "name": "BinarySearch#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "MyAtoiTest#testSeven": {
            "parameters": {},
            "name": "MyAtoiTest#testSeven",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MyAtoi#myAtoi"
            ]
        },
        "BinarySearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BinarySearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "PerfectBinarySearch#binarySearch",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "RomanNumeralUtil#generate",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BinarySearch2dArray#binarySearch",
                "BSTRecursive#find"
            ]
        },
        "Polybius#findLocationByCharacter": {
            "parameters": {
                "character": "char"
            },
            "name": "Polybius#findLocationByCharacter",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Polybius#encrypt"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide": {
            "parameters": {},
            "name": "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "Merge_K_SortedLinkedlist#mergeKList": {
            "parameters": {
                "a": "Node[]",
                "N": "int"
            },
            "name": "Merge_K_SortedLinkedlist#mergeKList",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "QueueWithStack#isEmpty",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "MatrixUtil#add",
                "CircularQueue#isEmpty",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "DynamicArray#isEmpty",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "SimpleNode#getNextNode": {
            "parameters": {},
            "name": "SimpleNode#getNextNode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "BinaryToDecimal#binaryToDecimal": {
            "parameters": {
                "binNum": "int"
            },
            "name": "BinaryToDecimal#binaryToDecimal",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "BinaryToDecimal#main",
                "BinaryToDecimalTest#testBinaryToDecimal"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "Queues#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Queues#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "AVLSimple#insert",
                "Queue#insert",
                "StackArray#isFull",
                "BSTRecursive#remove",
                "MedianOfRunningArray#insert",
                "PriorityQueue#isFull",
                "Deques#toString",
                "CircularQueue#isFull",
                "PriorityQueue#remove",
                "HashMapCuckooHashing#isFull",
                "Queue#peekRear",
                "QueueWithStack#peekFront",
                "HeapElement#toString",
                "CircleLinkedList#remove",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "RedBlackBST#insert",
                "DynamicArray#toString",
                "MinPriorityQueue#insert",
                "BSTIterative#remove",
                "Queue#remove",
                "LeftistHeap#insert",
                "CircleLinkedList#toString",
                "LinkedList#insert",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "SkipList#remove",
                "AVLTree#insert",
                "Queue#peekFront",
                "ListIterator#remove",
                "LinkedQueue#peekRear",
                "GenericHashMapUsingArray#remove",
                "MinPriorityQueue#isFull",
                "CircularBufferTest#isFull",
                "DynamicArray#remove",
                "LinkedQueue#peekFront",
                "DynamicArrayIterator#remove",
                "LFSR#toString",
                "SinglyLinkedList#insert",
                "GenericHashMapUsingArray#toString",
                "QueueWithStack#insert",
                "QueueWithStack#remove",
                "Queue#isFull",
                "BSTRecursive#insert",
                "Trieac#insert",
                "Queue#toString",
                "GenericHashMapUsingArrayList#remove",
                "PriorityQueue#insert",
                "CircularBuffer#isFull",
                "GenericHeap#remove",
                "LinkedQueue#toString"
            ]
        },
        "FirstFitCPUTest#testFitForSameInputDifferentQuery": {
            "parameters": {},
            "name": "FirstFitCPUTest#testFitForSameInputDifferentQuery",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "AliquotSum#getAliquotValue": {
            "parameters": {
                "number": "int"
            },
            "name": "AliquotSum#getAliquotValue",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "AliquotSumTest#testGetMaxValue"
            ],
            "children": []
        },
        "CombSortTest#combSortDoubleArray": {
            "parameters": {},
            "name": "CombSortTest#combSortDoubleArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "SinglyLinkedList#insertHead": {
            "parameters": {
                "x": "int"
            },
            "name": "SinglyLinkedList#insertHead",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "Link#main",
                "LinkOperations#insertElementByIndex",
                "LinkOperations#insertOrdered",
                "SinglyLinkedList#main",
                "PalindromeSinglyLinkedList#main"
            ],
            "children": [
                "SinglyLinkedList#insertNth"
            ]
        },
        "LevenshteinDistance#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LevenshteinDistance#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "LevenshteinDistance#calculateLevenshteinDistance",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "DynamicArray#remove": {
            "parameters": {
                "index": "int"
            },
            "name": "DynamicArray#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": [
                "MinHeap#getElement",
                "DynamicArray#newCapacity",
                "DynamicArray#getElement",
                "MaxHeap#getElement",
                "Heap#getElement",
                "DynamicArray#fastRemove"
            ]
        },
        "Rotate_by_90_degree#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Rotate_by_90_degree#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Rotate_by_90_degree#printMatrix",
                "Vector2#rotate",
                "BufferedReader#close",
                "Rotate#rotate"
            ]
        },
        "PigeonholeSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PigeonholeSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "RomanToInteger#romanToInt": {
            "parameters": {
                "A": "String"
            },
            "name": "RomanToInteger#romanToInt",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "RomanToInteger#main",
                "RomanToIntegerTest#testRomanToInteger"
            ],
            "children": [
                "UpperTest#toUpperCase",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "Upper#toUpperCase",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "CheckIfBinaryTreeBalanced#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CheckIfBinaryTreeBalanced#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CheckIfBinaryTreeBalanced#buildUnbalancedTree",
                "CheckIfBinaryTreeBalanced#isBalancedRecursive",
                "CheckIfBinaryTreeBalanced#buildBalancedTree",
                "CheckIfBinaryTreeBalanced#isBalancedIterative"
            ]
        },
        "BoyerMoore#findmajor": {
            "parameters": {
                "a": "int[]"
            },
            "name": "BoyerMoore#findmajor",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BoyerMoore#main"
            ],
            "children": []
        },
        "AmicableNumber#findAllInRange": {
            "parameters": {
                "startValue": "int",
                "stopValue": "int"
            },
            "name": "AmicableNumber#findAllInRange",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "AmicableNumber#main"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "Deques#toString",
                "HeapElement#toString",
                "RedBlackBST#insert",
                "DynamicArray#toString",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "CircleLinkedList#toString",
                "LinkedList#insert",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "AVLTree#insert",
                "CursorLinkedList#append",
                "LFSR#toString",
                "SinglyLinkedList#insert",
                "GenericHashMapUsingArray#toString",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "Queue#toString",
                "CircleLinkedList#append",
                "AmicableNumber#isAmicableNumber",
                "PriorityQueue#insert",
                "LinkedQueue#toString"
            ]
        },
        "SortUtilsRandomGenerator#generateDouble": {
            "parameters": {},
            "name": "SortUtilsRandomGenerator#generateDouble",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "SortUtilsRandomGenerator#generateArray",
                "SortUtilsRandomGeneratorTest#generateDouble"
            ],
            "children": []
        },
        "Sudoku#print": {
            "parameters": {
                "board": "int[][]",
                "N": "int"
            },
            "name": "Sudoku#print",
            "recursive": "false",
            "inComing": 209,
            "outGoing": 0,
            "numberOfCalls": 209,
            "parents": [
                "MazeRecursion#mazeRecursion",
                "ColumnarTranspositionCipher#showTable",
                "ProductCipher#main",
                "AnyBaseToAnyBase#main",
                "BinaryToDecimal#main",
                "DecimalToOctal#main",
                "HexToOct#main",
                "HexaDecimalToDecimal#main",
                "OctalToDecimal#main",
                "OctalToHexadecimal#main",
                "BellmanFord#printPath",
                "BellmanFord#go",
                "BellmanFord#show",
                "null#null",
                "Cycle#printAll",
                "dijkstras#dijkstra",
                "FloydWarshall#floydwarshall",
                "AdjacencyList#printGraph",
                "KahnsAlgorithm#main",
                "MinPriorityQueue#print",
                "MinPriorityQueue#main",
                "CreateAndDetectLoop#printList",
                "CreateAndDetectLoop#main",
                "Link#displayLink",
                "SinglyLinkedList#print",
                "SinglyLinkedList#main",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NodeStack#main",
                "ReverseStack#main",
                "AVLTree#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "BSTRecursive#preOrder",
                "BSTRecursive#postOrder",
                "BSTRecursive#inOrder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursiveGeneric#inOrder",
                "BinaryTree#inOrder",
                "BinaryTree#preOrder",
                "BinaryTree#postOrder",
                "BinaryTree#bfs",
                "GenericTree#display_1",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "LevelOrderTraversalHelper#printGivenLevel",
                "Tree#printTopView",
                "RedBlackBST#printTree",
                "RedBlackBST#printTreepre",
                "RedBlackBST#deleteDemo",
                "Node#printInOrder",
                "Node#printPreOrder",
                "Node#printPostOrder",
                "Node#printLevelOrder",
                "Main#main",
                "BoundaryFill#printImageArray",
                "CoinChange#printAmount",
                "LevenshteinDistance#main",
                "MatrixChainMultiplication#main",
                "MatrixChainMultiplication#printOptimalParens",
                "MatrixChainMultiplication#printArray",
                "MatrixChainMultiplication#input",
                "OptimalJobScheduling#showResults",
                "Sum_Of_Subset#main",
                "LeonardoNumber#main",
                "MagicSquare#main",
                "PrimeCheck#main",
                "TrinomialTriangle#printTrinomial",
                "InverseOfMatrix#main",
                "MedianOfRunningArray#main",
                "PalindromePrime#functioning",
                "Sort012D#sort012",
                "ThreeSumProblem#main",
                "TwoSumProblem#main",
                "matrixTranspose#main",
                "BankersAlgorithm#checkSafeSystem",
                "FloydTriangle#main",
                "HappyNumbersSeq#main",
                "Krishnamurthy#main",
                "LowestBasePalindrome#main",
                "PageRank#main",
                "PasswordGen#main",
                "PerlinNoise#main",
                "Rotate_by_90_degree#printMatrix",
                "SkylineProblem#run",
                "SkylineProblem#print",
                "Sudoku#print",
                "Sudoku#main",
                "TowerOfHanoi#main",
                "LinearSearchThread#main",
                "SquareRootBinarySearch#main",
                "BitonicSort#printArray",
                "BogoSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#main",
                "CycleSort#main",
                "DNFSort#printArray",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "MergeSortNoExtraSpace#main",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "RadixSort#print",
                "RadixSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "StoogeSort#main",
                "SwapSort#main",
                "TreeSort#main",
                "LongestPalindromicSubstring#main",
                "SkipListTest#add",
                "SkipListTest#get",
                "SkipListTest#contains",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "SkipListTest#checkSortedOnLowestLayer",
                "TestPrintMatrixInSpiralOrder#testOne",
                "TestPrintMatrixInSpiralOrder#testTwo"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "SinglyLinkedList#middle": {
            "parameters": {},
            "name": "SinglyLinkedList#middle",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "SinglyLinkedListTest#middle"
            ],
            "children": []
        },
        "Point#getX": {
            "parameters": {},
            "name": "Point#getX",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "Point#getY": {
            "parameters": {},
            "name": "Point#getY",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "BucketSort#max": {
            "parameters": {
                "arr": "int[]"
            },
            "name": "BucketSort#max",
            "recursive": "false",
            "inComing": 54,
            "outGoing": 0,
            "numberOfCalls": 54,
            "parents": [
                "RgbHsvConversion#rgbToHsv",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "AVLSimple#insert",
                "AVLSimple#rightRotate",
                "AVLSimple#leftRotate",
                "AVLTree#reheight",
                "CheckIfBinaryTreeBalanced#isBalancedRecursive",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#maxcall",
                "GenericTree#max",
                "LevelOrderTraversalHelper#height",
                "VerticalOrderTraversal#verticalTraversal",
                "BruteForceKnapsack#knapSack",
                "DyanamicProgrammingKnapsack#knapSack",
                "EggDropping#minTrials",
                "KadaneAlgorithm#max_Sum",
                "Knapsack#knapSack",
                "KnapsackMemoization#knapSackRec",
                "LongestAlternatingSubsequence#AlternatingLength",
                "LongestValidParentheses#getLongestValidParentheses",
                "RodCutting#cutRod",
                "ShortestSuperSequence#lcs",
                "WineProblem#WPRecursion",
                "WineProblem#WPTD",
                "WineProblem#WPBU",
                "CircularConvolutionFFT#fftCircularConvolution",
                "Convolution#convolution",
                "FindMax#main",
                "FindMaxRecursion#main",
                "FindMaxRecursion#max",
                "MaxValue#main",
                "Mode#mode",
                "MinimizingLateness#main",
                "MiniMaxAlgorithm#miniMax",
                "MonteCarloTreeSearch#getWinnerNode",
                "BeadSort#sort",
                "BucketSort#bucketSort",
                "MergeSortNoExtraSpace#call_merge_sort",
                "QuickSelectTest#quickSelectMaximumOfManyElements"
            ],
            "children": []
        },
        "LinkedQueue#peekFront": {
            "parameters": {},
            "name": "LinkedQueue#peekFront",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "LinkedQueue#main",
                "Queues#main",
                "QueueUsingTwoStacks#main"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "WineProblem#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "WineProblem#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WineProblem#WPRecursion",
                "WineProblem#WPBU",
                "WineProblem#WPTD"
            ]
        },
        "CombSortTest#combSortStringArray": {
            "parameters": {},
            "name": "CombSortTest#combSortStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "Heap#getElement": {
            "parameters": {},
            "name": "Heap#getElement",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "DynamicArray#get",
                "DynamicArray#remove",
                "DynamicArrayIterator#next",
                "DynamicArrayIterator#forEachRemaining",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement"
            ],
            "children": []
        },
        "EggDroppingTest#hasSingleEggSingleFloor": {
            "parameters": {},
            "name": "EggDroppingTest#hasSingleEggSingleFloor",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "EggDropping#minTrials"
            ]
        },
        "LinearProbingHashMap#contains": {
            "parameters": {
                "key": "Key"
            },
            "name": "LinearProbingHashMap#contains",
            "recursive": "false",
            "inComing": 31,
            "outGoing": 0,
            "numberOfCalls": 31,
            "parents": [
                "AnyBaseToAnyBase#validForBase",
                "Bag#main",
                "A_Star#aStar",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Kruskal#kruskal",
                "LinearProbingHashMap#delete",
                "Tree#printTopView",
                "KaprekarNumbers#isKaprekarNumber",
                "CRCAlgorithm#divideMessageWithP",
                "HappyNumbersSeq#isSad",
                "UnionFind#count",
                "CheckVowels#hasVowels",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "MapTest#containsTest",
                "SkipListTest#contains",
                "KaprekarNumbersTest#testForRangeOfNumber",
                "SquareFreeIntegerTest#testIsSquareFreeInteger",
                "HammingDistanceTest#mismatchDataBits"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "ColumnarTranspositionCipher#abecedariumBuilder": {
            "parameters": {
                "value": "int"
            },
            "name": "ColumnarTranspositionCipher#abecedariumBuilder",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ColumnarTranspositionCipher#encrpyter"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "SortingAlgorithmTest#getSortAlgorithm": {
            "parameters": {},
            "name": "SortingAlgorithmTest#getSortAlgorithm",
            "recursive": "false",
            "inComing": 16,
            "outGoing": 0,
            "numberOfCalls": 16,
            "parents": [
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
            ],
            "children": []
        },
        "SwapSort#getSmallerElementCount": {
            "parameters": {
                "array": "T[]",
                "index": "int"
            },
            "name": "SwapSort#getSmallerElementCount",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SwapSort#sort"
            ],
            "children": [
                "SortUtils#less",
                "HeapSort#less"
            ]
        },
        "SumWithoutArithmeticOperatorsTest#addOddtoEven": {
            "parameters": {},
            "name": "SumWithoutArithmeticOperatorsTest#addOddtoEven",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MinimumSumPartition#getSum",
                "SegmentTree#getSum",
                "SumWithoutArithmeticOperators#getSum"
            ]
        },
        "A_Star#aStar": {
            "parameters": {
                "heuristic": "int[]",
                "from": "int",
                "to": "int",
                "graph": "Graph"
            },
            "name": "A_Star#aStar",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "A_Star#main"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SinglyLinkedList#isEmpty",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "PathAndDistance#getEstimated",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Map#contains",
                "Bag#contains",
                "CircularBufferTest#get",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "PathAndDistance#getDistance",
                "GenericHeap#get",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "BloomFilter#contains",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "SkipListTest#contains",
                "Deques#size",
                "LinearProbingHashMap#contains",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "SkipList#contains",
                "MatrixUtil#add",
                "LRUCache#get",
                "CircularQueue#isEmpty",
                "LFUCache#get",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "PathAndDistance#getPath",
                "SkipListTest#add",
                "Bag#add",
                "Mandelbrot#getDistance",
                "DynamicArray#isEmpty",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "SubsetCount#getCountSO": {
            "parameters": {
                "arr": "int[]",
                "target": "int"
            },
            "name": "SubsetCount#getCountSO",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "SubsetCountTest#hasMultipleSubsetSO",
                "SubsetCountTest#singleSubsetSO"
            ],
            "children": []
        },
        "ValidBSTOrNotTest#testBinaryTreeWithDuplicatedNodesIsNotBST": {
            "parameters": {},
            "name": "ValidBSTOrNotTest#testBinaryTreeWithDuplicatedNodesIsNotBST",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "ValidBSTOrNot#isBST",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "CreateBSTFromSortedArray#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CreateBSTFromSortedArray#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "VectorCrossProduct#test",
                "CreateBinaryTreeFromInorderPreorder#test",
                "FactorialTest#test",
                "ColorContrastRatio#test",
                "CreateBSTFromSortedArray#test",
                "VampireNumber#test"
            ]
        },
        "BitonicSort#compAndSwap": {
            "parameters": {
                "a": "int[]",
                "i": "int",
                "j": "int",
                "dir": "int"
            },
            "name": "BitonicSort#compAndSwap",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BitonicSort#bitonicMerge"
            ],
            "children": []
        },
        "UniquePathsTests#testForOneElement": {
            "parameters": {},
            "name": "UniquePathsTests#testForOneElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "UniquePaths#uniquePaths"
            ]
        },
        "DynamicArrayIterator#remove": {
            "parameters": {},
            "name": "DynamicArrayIterator#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": [
                "BSTRecursive#remove",
                "PriorityQueue#remove",
                "CircleLinkedList#remove",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "QueueWithStack#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove"
            ]
        },
        "ValidBSTOrNotTest#testBinaryTreeIsBST": {
            "parameters": {},
            "name": "ValidBSTOrNotTest#testBinaryTreeIsBST",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "ValidBSTOrNot#isBST",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "BestFitCPUTest#testFitForNoEmptyBlockCell": {
            "parameters": {},
            "name": "BestFitCPUTest#testFitForNoEmptyBlockCell",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast": {
            "parameters": {},
            "name": "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "MatrixChainMultiplication#printArray": {
            "parameters": {
                "array": "int[][]"
            },
            "name": "MatrixChainMultiplication#printArray",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "MatrixChainMultiplication#main",
                "BitonicSort#main",
                "DNFSort#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "DecimalToAnyUsingStack#convert": {
            "parameters": {
                "radix": "int",
                "number": "int"
            },
            "name": "DecimalToAnyUsingStack#convert",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "HexaDecimalToBinary#main",
                "DecimalToAnyUsingStack#main",
                "HexaDecimalToBinaryTest#testHexaDecimalToBinary"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "SinglyLinkedList#toString",
                "LinkedListStack#push",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "LeftistHeap#isEmpty",
                "Deques#toString",
                "QueueWithStack#isEmpty",
                "HeapElement#toString",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "StackArrayList#push",
                "DynamicArray#toString",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "NodeStack#pop",
                "CircleLinkedList#toString",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "NodeStack#push",
                "LinkedListStack#pop",
                "CursorLinkedList#append",
                "LFSR#toString",
                "CircularQueue#isEmpty",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "DynamicArray#isEmpty",
                "LinkedQueue#toString",
                "PriorityQueue#isEmpty"
            ]
        },
        "KadaneAlogrithmTest#testForFiveElements": {
            "parameters": {},
            "name": "KadaneAlogrithmTest#testForFiveElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KadaneAlgorithm#max_Sum"
            ]
        },
        "SquareFreeIntegerTest#testIsSquareFreeIntegerMustThrowExceptionIfNumberIsNegative": {
            "parameters": {},
            "name": "SquareFreeIntegerTest#testIsSquareFreeIntegerMustThrowExceptionIfNumberIsNegative",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SquareFreeInteger#isSquareFreeInteger"
            ]
        },
        "LongestPalindromicSubsequence#recursiveLPS": {
            "parameters": {
                "original": "String",
                "reverse": "String"
            },
            "name": "LongestPalindromicSubsequence#recursiveLPS",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "LongestPalindromicSubsequence#LPS",
                "LongestPalindromicSubsequence#recursiveLPS"
            ],
            "children": [
                "LongestPalindromicSubsequence#recursiveLPS"
            ]
        },
        "NodeStack#size": {
            "parameters": {},
            "name": "NodeStack#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "PriorityQueue#getSize",
                "DynamicArray#getSize",
                "LinkedListStack#getSize",
                "CircleLinkedList#getSize",
                "NodeStack#getSize",
                "Queue#getSize"
            ]
        },
        "CaesarTest#caesarDecryptTest": {
            "parameters": {},
            "name": "CaesarTest#caesarDecryptTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Caesar#decode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#decode"
            ]
        },
        "WorstFitCPUTest#testFitForNoEmptyBlockCell": {
            "parameters": {},
            "name": "WorstFitCPUTest#testFitForNoEmptyBlockCell",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "FirstFitCPUTest#testFitForNoEmptyBlockCell": {
            "parameters": {},
            "name": "FirstFitCPUTest#testFitForNoEmptyBlockCell",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "CocktailShakerSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CocktailShakerSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "FastInverseSqrtTests#testForOneElement": {
            "parameters": {},
            "name": "FastInverseSqrtTests#testForOneElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FastInverseSqrt#inverseSqrt"
            ]
        },
        "GenericTree#height": {
            "parameters": {
                "node": "Node"
            },
            "name": "GenericTree#height",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "null#null",
                "AVLSimple#insert",
                "AVLSimple#bf",
                "AVLSimple#rightRotate",
                "AVLSimple#leftRotate",
                "AVLTree#rebalance",
                "AVLTree#setBalance",
                "AVLTree#reheight",
                "GenericTree#heightcall",
                "GenericTree#height",
                "LevelOrderTraversalHelper#printLevelOrder",
                "LevelOrderTraversalHelper#height"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "HeightStrategy#height",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "BernoulliHeightStrategy#height",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "AVLTree#height",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "GenericTree#height",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "AVLSimple#height",
                "LevelOrderTraversalHelper#height"
            ]
        },
        "CocktailShakerSort#sort": {
            "parameters": {
                "array": "T[]"
            },
            "name": "CocktailShakerSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "SortUtils#less",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "HeapSort#less",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "Graph#dijkstra": {
            "parameters": {
                "q": "NavigableSet\u003cVertex\u003e"
            },
            "name": "Graph#dijkstra",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Entry#getValue",
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SinglyLinkedList#isEmpty",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "QueueWithStack#isEmpty",
                "HeapElement#getKey",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "Deques#pollFirst",
                "GenericHashMapUsingArrayList#containsKey",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "SkipList#get",
                "dijkstras#dijkstra",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "GenericHeap#get",
                "SkipList#remove",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "BSTRecursive#add",
                "ListIterator#remove",
                "CircularBufferTest#isEmpty",
                "GenericHashMapUsingArray#remove",
                "HeapNode#getKey",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "CircularQueue#isEmpty",
                "LFUCache#get",
                "Complex#add",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "GenericHashMapUsingArray#containsKey",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "Entry#getKey",
                "GenericHashMapUsingArrayList#remove",
                "DynamicArray#isEmpty",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "TwoSumProblem#HashMap": {
            "parameters": {
                "nums": "int[]",
                "target": "int"
            },
            "name": "TwoSumProblem#HashMap",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "TwoSumProblem#main"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "Huffman#printCode": {
            "parameters": {
                "s": "String",
                "root": "HuffmanNode"
            },
            "name": "Huffman#printCode",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "Huffman#printCode",
                "Huffman#main"
            ],
            "children": [
                "Huffman#printCode"
            ]
        },
        "RedBlackBST#rotateRight": {
            "parameters": {
                "node": "Node"
            },
            "name": "RedBlackBST#rotateRight",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "AVLTree#rebalance",
                "AVLTree#rotateLeftThenRight",
                "AVLTree#rotateRightThenLeft",
                "RedBlackBST#fixTree",
                "RedBlackBST#deleteFixup"
            ],
            "children": []
        },
        "CombinationTest#testLengthOne": {
            "parameters": {},
            "name": "CombinationTest#testLengthOne",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "SkipListTest#get",
                "LinkedQueue#iterator",
                "SkipList#get",
                "ArrayCombination#combination",
                "Combination#combination",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "DynamicArray#iterator",
                "LFUCache#get",
                "Bag#iterator"
            ]
        },
        "CircularBufferTest#put": {
            "parameters": {},
            "name": "CircularBufferTest#put",
            "recursive": "false",
            "inComing": 156,
            "outGoing": 0,
            "numberOfCalls": 156,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "BinaryToHexadecimal#binToHex",
                "null#null",
                "LFUCache#put",
                "LRUCache#put",
                "MRUCache#put",
                "AdjacencyList#addEdge",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "GenericHashMapUsingArray#reHash",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#delete",
                "LinearProbingHashMap#resize",
                "GenericHeap#add",
                "GenericHeap#swap",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#test",
                "VerticalOrderTraversal#verticalTraversal",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#TwoPointer",
                "TwoSumProblem#HashMap",
                "Trie#add",
                "CountWords#getDictionary",
                "CountingSort#sort",
                "Graph#addEdge",
                "Anagrams#approach4",
                "CheckAnagrams#isAnagrams",
                "Isomorphic#checkStrings",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#isFull",
                "CircularBufferTest#get",
                "CircularBufferTest#put",
                "CircularBufferTest#concurrentTest",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#putTest",
                "MapTest#getTest",
                "MapTest#deleteTest",
                "MapTest#containsTest",
                "MapTest#sizeTest",
                "MapTest#keysTest",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArray#put",
                "CircularBufferTest#generateInt",
                "DynamicArray#put",
                "CircularBufferTest#put",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "SortUtilsRandomGenerator#generateInt",
                "LinearProbingHashMap#put"
            ]
        },
        "SimpleSortTest#simpleSortNonDuplicateIntegerArray": {
            "parameters": {},
            "name": "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "DecimalToAnyBase#convertToAnyBase": {
            "parameters": {
                "inp": "int",
                "base": "int"
            },
            "name": "DecimalToAnyBase#convertToAnyBase",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "DecimalToAnyBase#main"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "GenericHashMapUsingArray#size",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "Trie#add",
                "GenericHashMapUsingArrayList#toString",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "Deques#toString",
                "LinkedQueue#size",
                "DecimalToAnyBase#reVal",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "ReverseString#reverse",
                "GenericHeap#size",
                "HeapElement#toString",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "DynamicArray#toString",
                "Bag#size",
                "StackArrayList#size",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Rotation#reverse",
                "Vector2#toString",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "PalindromePrime#reverse",
                "CursorLinkedList#append",
                "LinkOperations#reverse",
                "NodeStack#size",
                "MatrixUtil#add",
                "LFSR#toString",
                "ReverseStringRecursive#reverse",
                "GenericHashMapUsingArray#toString",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "Queue#toString",
                "CircleLinkedList#append",
                "SkylineProblem#add",
                "LowestBasePalindrome#reverse",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "LinkedQueue#toString",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Matrix#row": {
            "parameters": {},
            "name": "Matrix#row",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MatrixChainMultiplication#main"
            ],
            "children": []
        },
        "CalculateMaxOfMinTest#testForThreeElements": {
            "parameters": {},
            "name": "CalculateMaxOfMinTest#testForThreeElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MaximumMinimumWindow#calculateMaxOfMin",
                "CalculateMaxOfMin#calculateMaxOfMin"
            ]
        },
        "Bag#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Bag#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "Trie#add",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "Map#contains",
                "Bag#contains",
                "SkipList#size",
                "DynamicArray#add",
                "BloomFilter#contains",
                "StackArray#size",
                "BSTRecursive#add",
                "SkipListTest#contains",
                "Deques#size",
                "LinearProbingHashMap#contains",
                "NodeStack#size",
                "SkipList#contains",
                "MatrixUtil#add",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "SkylineAlgorithm#produceSubSkyLines": {
            "parameters": {
                "list": "ArrayList\u003cPoint\u003e"
            },
            "name": "SkylineAlgorithm#produceSubSkyLines",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "SkylineAlgorithm#produceSubSkyLines"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#remove",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "SkylineAlgorithm#produceSubSkyLines",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "SkylineAlgorithm#produceFinalSkyLine",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "Complex#add",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "Point#dominates",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "HashMapCuckooHashingTest#avoidInfiniteLoops": {
            "parameters": {},
            "name": "HashMapCuckooHashingTest#avoidInfiniteLoops",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HashMapCuckooHashing#insertKey2HashTable",
                "HashMapCuckooHashing#checkTableContainsKey"
            ]
        },
        "AffineCipher#decryptCipher": {
            "parameters": {
                "cipher": "String"
            },
            "name": "AffineCipher#decryptCipher",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "AffineCipher#main"
            ],
            "children": []
        },
        "SinglyLinkedListTest#detectLoop": {
            "parameters": {},
            "name": "SinglyLinkedListTest#detectLoop",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "CreateAndDetectLoop#main",
                "SinglyLinkedListTest#detectLoop"
            ],
            "children": [
                "SinglyLinkedListTest#createSampleList",
                "SinglyLinkedList#detectLoop",
                "CreateAndDetectLoop#detectLoop",
                "SinglyLinkedListTest#detectLoop"
            ]
        },
        "SinglyLinkedList#print": {
            "parameters": {},
            "name": "SinglyLinkedList#print",
            "recursive": "false",
            "inComing": 209,
            "outGoing": 0,
            "numberOfCalls": 209,
            "parents": [
                "MazeRecursion#mazeRecursion",
                "ColumnarTranspositionCipher#showTable",
                "ProductCipher#main",
                "AnyBaseToAnyBase#main",
                "BinaryToDecimal#main",
                "DecimalToOctal#main",
                "HexToOct#main",
                "HexaDecimalToDecimal#main",
                "OctalToDecimal#main",
                "OctalToHexadecimal#main",
                "BellmanFord#printPath",
                "BellmanFord#go",
                "BellmanFord#show",
                "null#null",
                "Cycle#printAll",
                "dijkstras#dijkstra",
                "FloydWarshall#floydwarshall",
                "AdjacencyList#printGraph",
                "KahnsAlgorithm#main",
                "MinPriorityQueue#print",
                "MinPriorityQueue#main",
                "CreateAndDetectLoop#printList",
                "CreateAndDetectLoop#main",
                "Link#displayLink",
                "SinglyLinkedList#print",
                "SinglyLinkedList#main",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NodeStack#main",
                "ReverseStack#main",
                "AVLTree#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "BSTRecursive#preOrder",
                "BSTRecursive#postOrder",
                "BSTRecursive#inOrder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursiveGeneric#inOrder",
                "BinaryTree#inOrder",
                "BinaryTree#preOrder",
                "BinaryTree#postOrder",
                "BinaryTree#bfs",
                "GenericTree#display_1",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "LevelOrderTraversalHelper#printGivenLevel",
                "Tree#printTopView",
                "RedBlackBST#printTree",
                "RedBlackBST#printTreepre",
                "RedBlackBST#deleteDemo",
                "Node#printInOrder",
                "Node#printPreOrder",
                "Node#printPostOrder",
                "Node#printLevelOrder",
                "Main#main",
                "BoundaryFill#printImageArray",
                "CoinChange#printAmount",
                "LevenshteinDistance#main",
                "MatrixChainMultiplication#main",
                "MatrixChainMultiplication#printOptimalParens",
                "MatrixChainMultiplication#printArray",
                "MatrixChainMultiplication#input",
                "OptimalJobScheduling#showResults",
                "Sum_Of_Subset#main",
                "LeonardoNumber#main",
                "MagicSquare#main",
                "PrimeCheck#main",
                "TrinomialTriangle#printTrinomial",
                "InverseOfMatrix#main",
                "MedianOfRunningArray#main",
                "PalindromePrime#functioning",
                "Sort012D#sort012",
                "ThreeSumProblem#main",
                "TwoSumProblem#main",
                "matrixTranspose#main",
                "BankersAlgorithm#checkSafeSystem",
                "FloydTriangle#main",
                "HappyNumbersSeq#main",
                "Krishnamurthy#main",
                "LowestBasePalindrome#main",
                "PageRank#main",
                "PasswordGen#main",
                "PerlinNoise#main",
                "Rotate_by_90_degree#printMatrix",
                "SkylineProblem#run",
                "SkylineProblem#print",
                "Sudoku#print",
                "Sudoku#main",
                "TowerOfHanoi#main",
                "LinearSearchThread#main",
                "SquareRootBinarySearch#main",
                "BitonicSort#printArray",
                "BogoSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#main",
                "CycleSort#main",
                "DNFSort#printArray",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "MergeSortNoExtraSpace#main",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "RadixSort#print",
                "RadixSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "StoogeSort#main",
                "SwapSort#main",
                "TreeSort#main",
                "LongestPalindromicSubstring#main",
                "SkipListTest#add",
                "SkipListTest#get",
                "SkipListTest#contains",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "SkipListTest#checkSortedOnLowestLayer",
                "TestPrintMatrixInSpiralOrder#testOne",
                "TestPrintMatrixInSpiralOrder#testTwo"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "Task#task1": {
            "parameters": {
                "s": "int",
                "e": "int",
                "m": "int",
                "n": "int[]"
            },
            "name": "Task#task1",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Task#task",
                "Task2#task",
                "Task2#task1"
            ],
            "children": []
        },
        "MapTest#getTest": {
            "parameters": {},
            "name": "MapTest#getTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMapTest#getMap",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "MapTest#getMap",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "LinkedList#findKey": {
            "parameters": {
                "key": "int"
            },
            "name": "LinkedList#findKey",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "NodeStack#getNext",
                "LeftistHeap#isEmpty",
                "HeapNode#getNext",
                "QueueWithStack#isEmpty",
                "HeapElement#getKey",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "HeapNode#getKey",
                "CircularQueue#isEmpty",
                "Entry#getKey",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "LinearProbingHashMap#get": {
            "parameters": {
                "key": "Key"
            },
            "name": "LinearProbingHashMap#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "BucketSort#hash",
                "Map#hash",
                "LinearProbingHashMap#increment",
                "Utils#increment",
                "HeapElement#equals"
            ]
        },
        "AreaTest#testSurfaceAreaSquare": {
            "parameters": {},
            "name": "AreaTest#testSurfaceAreaSquare",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Area#surfaceAreaSquare"
            ]
        },
        "SkipList#contains": {
            "parameters": {
                "e": "E"
            },
            "name": "SkipList#contains",
            "recursive": "false",
            "inComing": 31,
            "outGoing": 0,
            "numberOfCalls": 31,
            "parents": [
                "AnyBaseToAnyBase#validForBase",
                "Bag#main",
                "A_Star#aStar",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Kruskal#kruskal",
                "LinearProbingHashMap#delete",
                "Tree#printTopView",
                "KaprekarNumbers#isKaprekarNumber",
                "CRCAlgorithm#divideMessageWithP",
                "HappyNumbersSeq#isSad",
                "UnionFind#count",
                "CheckVowels#hasVowels",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "MapTest#containsTest",
                "SkipListTest#contains",
                "KaprekarNumbersTest#testForRangeOfNumber",
                "SquareFreeIntegerTest#testIsSquareFreeInteger",
                "HammingDistanceTest#mismatchDataBits"
            ],
            "children": [
                "Entry#getValue",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "HeapElement#equals"
            ]
        },
        "KadaneAlgorithm#max_Sum": {
            "parameters": {
                "a": "int[]",
                "predicted_answer": "int"
            },
            "name": "KadaneAlgorithm#max_Sum",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "KadaneAlogrithmTest#testForOneElement",
                "KadaneAlogrithmTest#testForTwoElements",
                "KadaneAlogrithmTest#testForThreeElements",
                "KadaneAlogrithmTest#testForFourElements",
                "KadaneAlogrithmTest#testForFiveElements",
                "KadaneAlogrithmTest#testForSixElements",
                "KadaneAlogrithmTest#testForSevenElements",
                "KadaneAlogrithmTest#testForEightElements"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString": {
            "parameters": {},
            "name": "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "FibonacciHeap#size",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "ADTFractionTest#testReciprocal": {
            "parameters": {},
            "name": "ADTFractionTest#testReciprocal",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "AbsoluteValueTest#testGetAbsValue": {
            "parameters": {},
            "name": "AbsoluteValueTest#testGetAbsValue",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AbsoluteValue#getAbsValue",
                "FFTTest#abs",
                "RomanNumeralUtil#generate",
                "Complex#abs"
            ]
        },
        "FrizzyNumberTest#testFrizziesForBase69": {
            "parameters": {},
            "name": "FrizzyNumberTest#testFrizziesForBase69",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FrizzyNumber#getNthFrizzy"
            ]
        },
        "dijkstras#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "dijkstras#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "dijkstras#dijkstra"
            ]
        },
        "NodeStack#getHead": {
            "parameters": {},
            "name": "NodeStack#getHead",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "CountSinglyLinkedListRecursion#count",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#merge",
                "SearchSinglyLinkedListRecursion#search",
                "SinglyLinkedListTest#middle",
                "SinglyLinkedListTest#swap"
            ],
            "children": []
        },
        "NRKTree#insertKey": {
            "parameters": {
                "current": "NRKTree",
                "value": "int"
            },
            "name": "NRKTree#insertKey",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "Main#BuildTree",
                "NRKTree#insertKey"
            ],
            "children": [
                "HashMapCuckooHashingTest#insertKey",
                "NRKTree#insertKey"
            ]
        },
        "AdjacencyMatrixGraph#numberOfEdges": {
            "parameters": {},
            "name": "AdjacencyMatrixGraph#numberOfEdges",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AdjacencyMatrixGraph#addEdge",
                "AdjacencyMatrixGraph#removeEdge"
            ],
            "children": []
        },
        "FindMax#findMax": {
            "parameters": {
                "array": "int[]"
            },
            "name": "FindMax#findMax",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "FindMax#main",
                "FindMaxTest#testFindMaxValue"
            ],
            "children": []
        },
        "HeapNode#isMarked": {
            "parameters": {},
            "name": "HeapNode#isMarked",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FibonacciHeap#cascadingCuts"
            ],
            "children": []
        },
        "GrahamScanTest#testGrahamScan": {
            "parameters": {},
            "name": "GrahamScanTest#testGrahamScan",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "SubsetCount#getCount": {
            "parameters": {
                "arr": "int[]",
                "target": "int"
            },
            "name": "SubsetCount#getCount",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "CircularBufferTest#concurrentTest",
                "SubsetCountTest#hasMultipleSubset",
                "SubsetCountTest#singleElementSubset"
            ],
            "children": []
        },
        "KadaneAlogrithmTest#testForTwoElements": {
            "parameters": {},
            "name": "KadaneAlogrithmTest#testForTwoElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KadaneAlgorithm#max_Sum"
            ]
        },
        "BoundaryFill#boundaryFill": {
            "parameters": {
                "image": "int[][]",
                "new_color": "int",
                "x_co_ordinate": "int",
                "y_co_ordinate": "int",
                "boundary_color": "int"
            },
            "name": "BoundaryFill#boundaryFill",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "BoundaryFill#boundaryFill",
                "BoundaryFill#main"
            ],
            "children": [
                "BoundaryFill#getPixel",
                "BoundaryFill#putPixel",
                "FloodFill#putPixel",
                "FloodFill#getPixel",
                "BoundaryFill#boundaryFill"
            ]
        },
        "StoogeSort#sort": {
            "parameters": {
                "unsortedArray": "T[]",
                "start": "int",
                "end": "int"
            },
            "name": "StoogeSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "SortUtils#less",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "HeapSort#less",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "CircleLinkedList#getSize": {
            "parameters": {},
            "name": "CircleLinkedList#getSize",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "DynamicArray#main",
                "NodeStack#push",
                "NodeStack#pop",
                "NodeStack#isEmpty",
                "NodeStack#size",
                "StackOfLinkedList#main",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": []
        },
        "QuickSelectTest#quickSelectIndexOutOfRightBound": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectIndexOutOfRightBound",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "QuickSelect#select"
            ]
        },
        "DuplicateBrackets#check": {
            "parameters": {
                "str": "String"
            },
            "name": "DuplicateBrackets#check",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "DuplicateBrackets#main",
                "SameTreesCheckTest#testBothRootsAreNull",
                "SameTreesCheckTest#testOneRootIsNull",
                "SameTreesCheckTest#testSingleNodeTreesAreSame",
                "SameTreesCheckTest#testSameTreesIsSuccessful",
                "SameTreesCheckTest#testSameTreesFails",
                "SameTreesCheckTest#testTreesWithDifferentStructure"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "StackArrayList#peek",
                "StackArray#pop",
                "LinkedListStack#push",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "GenericHeap#size",
                "StackArray#push",
                "Map#size",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "GenericHashMapUsingArrayList#size",
                "StackArrayList#push",
                "Bag#size",
                "StackArrayList#size",
                "CircularQueue#peek",
                "NodeStack#pop",
                "PriorityQueue#peek",
                "SkipList#size",
                "StackArray#size",
                "StackArrayList#pop",
                "StackArray#peek",
                "NodeStack#push",
                "Deques#size",
                "LinkedListStack#pop",
                "NodeStack#size",
                "FibonacciHeap#size",
                "NodeStack#peek",
                "LinkedListStack#peek"
            ]
        },
        "MatrixUtil#add": {
            "parameters": {
                "matrix2": "BigDecimal[][]",
                "matrix1": "BigDecimal[][]"
            },
            "name": "MatrixUtil#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": [
                "MatrixUtil#operate"
            ]
        },
        "SumOfArithmeticSeries#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "SumOfArithmeticSeries#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MyComparator#compare",
                "LinkListSort#compare",
                "XComparator#compare",
                "SumOfArithmeticSeries#sumOfSeries"
            ]
        },
        "HeapSort#swap": {
            "parameters": {
                "array": "T[]",
                "idx": "int",
                "idy": "int"
            },
            "name": "HeapSort#swap",
            "recursive": "false",
            "inComing": 55,
            "outGoing": 0,
            "numberOfCalls": 55,
            "parents": [
                "Permutation#backtracking",
                "GenericHeap#upHeapify",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "FFT#fftBitReversal",
                "FindKthNumber#partition",
                "BFPRT#partition",
                "BFPRT#insertionSort",
                "QuickSelect#partition",
                "QuickSelect#pivot",
                "BogoSort#nextPermutation",
                "BubbleSort#sort",
                "BubbleSortRecursion#bubbleSort",
                "CircleSort#doSort",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "DualPivotQuickSort#partition",
                "DutchNationalFlagSort#dutch_national_flag_sort",
                "GnomeSort#sort",
                "HeapSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "IntrospectiveSort#partition",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify",
                "OddEvenSort#oddEvenSort",
                "QuickSort#randomPartition",
                "QuickSort#partition",
                "SortUtils#flip",
                "WiggleSort#triColorSort"
            ],
            "children": []
        },
        "FFTTest#subtractTest": {
            "parameters": {},
            "name": "FFTTest#subtractTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Complex#subtract",
                "Vector2#subtract",
                "MatrixUtil#subtract",
                "Complex#getReal"
            ]
        },
        "AdjacencyListGraph#removeEdge": {
            "parameters": {
                "from": "E",
                "to": "E"
            },
            "name": "AdjacencyListGraph#removeEdge",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "StackArrayList#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "StackArrayList#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LinkedListStack#push",
                "LeftistHeap#isEmpty",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "GenericHeap#size",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "GenericHashMapUsingArrayList#size",
                "StackArrayList#push",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "NodeStack#push",
                "Deques#size",
                "LinkedListStack#pop",
                "NodeStack#size",
                "CircularQueue#isEmpty",
                "FibonacciHeap#size",
                "NodeStack#peek",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "PriorityQueue#isEmpty"
            ]
        },
        "SkylineAlgorithm#produceFinalSkyLine": {
            "parameters": {
                "left": "ArrayList\u003cPoint\u003e",
                "right": "ArrayList\u003cPoint\u003e"
            },
            "name": "SkylineAlgorithm#produceFinalSkyLine",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SkylineAlgorithm#produceSubSkyLines"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "CircularBuffer#get",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#remove",
                "SkipList#size",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove"
            ]
        },
        "Average#average": {
            "parameters": {
                "numbers": "int[]"
            },
            "name": "Average#average",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "AverageTest#testAverage_double_12",
                "AverageTest#testAverage_double_20",
                "AverageTest#testAverage_double_4_5",
                "AverageTest#testAverage_int_5"
            ],
            "children": []
        },
        "LazySegmentTreeTest#update": {
            "parameters": {},
            "name": "LazySegmentTreeTest#update",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "GuassLegendre#pi"
            ],
            "children": [
                "Entry#getValue",
                "LazySegmentTree#updateRange",
                "LazySegmentTree#getRoot"
            ]
        },
        "ColumnarTranspositionCipher#encrpyter": {
            "parameters": {
                "keyword": "String",
                "word": "String",
                "abecedarium": "String"
            },
            "name": "ColumnarTranspositionCipher#encrpyter",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ColumnarTranspositionCipher#main"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "ColumnarTranspositionCipher#tableBuilder",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "ColumnarTranspositionCipher#sortTable",
                "Vector2#toString",
                "CursorLinkedList#append",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "PostfixToInfix#isOperator": {
            "parameters": {
                "token": "char"
            },
            "name": "PostfixToInfix#isOperator",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "PostfixToInfix#isValidPostfixExpression",
                "PostfixToInfix#getPostfixToInfix"
            ],
            "children": []
        },
        "LRUCache#checkCapacity": {
            "parameters": {
                "capacity": "int"
            },
            "name": "LRUCache#checkCapacity",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "LRUCache#setCapacity",
                "MRUCache#setCapacity"
            ],
            "children": []
        },
        "HeapSort#less": {
            "parameters": {
                "array": "T[]",
                "idx": "int",
                "idy": "int"
            },
            "name": "HeapSort#less",
            "recursive": "false",
            "inComing": 24,
            "outGoing": 0,
            "numberOfCalls": 24,
            "parents": [
                "BogoSort#isSorted",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "CycleSort#sort",
                "GnomeSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "MergeSort#merge",
                "PancakeSort#sort",
                "QuickSort#partition",
                "ShellSort#sort",
                "SimpleSort#sort",
                "SlowSort#sort",
                "SortUtils#isSorted",
                "StoogeSort#sort",
                "SwapSort#getSmallerElementCount",
                "TimSort#merge"
            ],
            "children": []
        },
        "UniquePathsTests#testForFourElements": {
            "parameters": {},
            "name": "UniquePathsTests#testForFourElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "UniquePaths#uniquePaths"
            ]
        },
        "FloydWarshall#main": {
            "parameters": {
                "arg": "String"
            },
            "name": "FloydWarshall#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FloydWarshall#floydwarshall",
                "BufferedReader#close"
            ]
        },
        "DP#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "DP#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DP#findWays"
            ]
        },
        "StoogeSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "StoogeSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "SkylineProblem#print",
                "BeadSort#sort",
                "PrintAMatrixInSpiralOrder#print",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "SkipListTest#print",
                "CircleSort#sort",
                "InsertionSort#sort",
                "dijkstras#print",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "MinPriorityQueue#print",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "Sudoku#print",
                "CocktailShakerSort#sort",
                "SinglyLinkedList#print",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print",
                "BitonicSort#sort"
            ]
        },
        "ValidParentheses#isValid": {
            "parameters": {
                "s": "String"
            },
            "name": "ValidParentheses#isValid",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "TrieImp#main",
                "MatrixUtil#hasEqualSizes",
                "MatrixUtil#canMultiply",
                "Solution#longestPalindrome",
                "ValidParenthesesTest#testOne",
                "ValidParenthesesTest#testTwo",
                "ValidParenthesesTest#testThree"
            ],
            "children": []
        },
        "PowerSum#powSum": {
            "parameters": {
                "X": "int",
                "N": "int"
            },
            "name": "PowerSum#powSum",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "PowerSumTest#testNumberZeroAndPowerZero",
                "PowerSumTest#testNumberHundredAndPowerTwo",
                "PowerSumTest#testNumberHundredAndPowerThree"
            ],
            "children": [
                "PowerSum#Sum"
            ]
        },
        "ADTFractionTest#testTimes": {
            "parameters": {},
            "name": "ADTFractionTest#testTimes",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "FCFSSchedulingTest#addProcessesForFCFS": {
            "parameters": {},
            "name": "FCFSSchedulingTest#addProcessesForFCFS",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FCFSSchedulingTest#testingProcesses"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "ValidBSTOrNot#isBSTUtil": {
            "parameters": {
                "node": "BinaryTree.Node",
                "min": "int",
                "max": "int"
            },
            "name": "ValidBSTOrNot#isBSTUtil",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "ValidBSTOrNot#isBST",
                "ValidBSTOrNot#isBSTUtil"
            ],
            "children": [
                "ValidBSTOrNot#isBSTUtil"
            ]
        },
        "QuickSelectTest#quickSelectEmptyList": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectEmptyList",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "QuickSelect#select"
            ]
        },
        "Entry#setPreEntry": {
            "parameters": {
                "preEntry": "Entry\u003cI,J\u003e"
            },
            "name": "Entry#setPreEntry",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "LRUCache#evict",
                "LRUCache#moveNodeToLast",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "MRUCache#moveEntryToLast"
            ],
            "children": []
        },
        "LongestPalindromicSubsequence#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LongestPalindromicSubsequence#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LongestPalindromicSubsequence#LPS"
            ]
        },
        "LowestBasePalindrome#base2base": {
            "parameters": {
                "b2": "int",
                "n": "String",
                "b1": "int"
            },
            "name": "LowestBasePalindrome#base2base",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AnyBaseToAnyBase#main",
                "LowestBasePalindrome#main"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass": {
            "parameters": {},
            "name": "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "LRUCache#get": {
            "parameters": {
                "key": "K"
            },
            "name": "LRUCache#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "Entry#getValue",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LRUCache#moveNodeToLast",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "GenericHashMapUsingArray#containsKey"
            ]
        },
        "TreeSort#doTreeSortArray": {
            "parameters": {
                "unsortedArray": "T[]"
            },
            "name": "TreeSort#doTreeSortArray",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "TreeSort#sort"
            ],
            "children": [
                "BSTRecursiveGeneric#inorderSort",
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "BogoSortTest#bogoSortDuplicateStringArray": {
            "parameters": {},
            "name": "BogoSortTest#bogoSortDuplicateStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "AdjacencyMatrixGraph#setNumberOfEdges": {
            "parameters": {
                "newNumberOfEdges": "int"
            },
            "name": "AdjacencyMatrixGraph#setNumberOfEdges",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "null#null",
                "AdjacencyMatrixGraph#addEdge",
                "AdjacencyMatrixGraph#removeEdge"
            ],
            "children": []
        },
        "QuickSelect#select": {
            "parameters": {
                "list": "List\u003cT\u003e",
                "n": "int"
            },
            "name": "QuickSelect#select",
            "recursive": "false",
            "inComing": 31,
            "outGoing": 0,
            "numberOfCalls": 31,
            "parents": [
                "WiggleSort#wiggleSort",
                "QuickSelectTest#quickSelectMinimumOfOneElement",
                "QuickSelectTest#quickSelectMinimumOfTwoElements",
                "QuickSelectTest#quickSelectMinimumOfThreeElements",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfOneElement",
                "QuickSelectTest#quickSelectMaximumOfTwoElements",
                "QuickSelectTest#quickSelectMaximumOfThreeElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfOneElement",
                "QuickSelectTest#quickSelectMedianOfThreeElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfThreeCharacters",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "QuickSelectTest#quickSelectNullList",
                "QuickSelectTest#quickSelectEmptyList",
                "QuickSelectTest#quickSelectIndexOutOfLeftBound",
                "QuickSelectTest#quickSelectIndexOutOfRightBound"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "QuickSelect#selectIndex",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "BalancedBrackets#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BalancedBrackets#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BalancedBrackets#isBalanced"
            ]
        },
        "LFSR#toString": {
            "parameters": {},
            "name": "LFSR#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "DynamicArray#iterator": {
            "parameters": {},
            "name": "DynamicArray#iterator",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "Bag#contains",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "SkylineProblem#print",
                "StrandSort#strandSort",
                "ArrayCombinationTest#testLengthOne",
                "CombinationTest#testLengthOne",
                "MapTest#keysTest"
            ],
            "children": []
        },
        "TwoSumProblem#BruteForce": {
            "parameters": {
                "nums": "int[]",
                "target": "int"
            },
            "name": "TwoSumProblem#BruteForce",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "ThreeSumProblem#main",
                "TwoSumProblem#main"
            ],
            "children": []
        },
        "Edge#getTo": {
            "parameters": {},
            "name": "Edge#getTo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "CeilTest#testCeil": {
            "parameters": {},
            "name": "CeilTest#testCeil",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Ceil#ceil"
            ]
        },
        "SJFSchedulingTest#initialisation0": {
            "parameters": {},
            "name": "SJFSchedulingTest#initialisation0",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#schedulingOf_TwoProcesses"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Isomorphic#checkStrings": {
            "parameters": {
                "s": "String",
                "t": "String"
            },
            "name": "Isomorphic#checkStrings",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "IsomorphicTest#main"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "Map#contains",
                "Bag#contains",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "DynamicArray#add",
                "BloomFilter#contains",
                "BSTRecursive#add",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "SkipList#contains",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Complex#add",
                "Map#put",
                "GenericHeap#add",
                "GenericHashMapUsingArray#containsKey",
                "SkylineProblem#add",
                "LRUCache#put",
                "SkipListTest#add",
                "Bag#add",
                "LinearProbingHashMap#put",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "SJFSchedulingTest#initialisation3": {
            "parameters": {},
            "name": "SJFSchedulingTest#initialisation3",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "MergeSortRecursiveTest#testMergeSortRecursiveCase1": {
            "parameters": {},
            "name": "MergeSortRecursiveTest#testMergeSortRecursiveCase1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MergeSortRecursive#mergeSort"
            ]
        },
        "MergeSortRecursiveTest#testMergeSortRecursiveCase2": {
            "parameters": {},
            "name": "MergeSortRecursiveTest#testMergeSortRecursiveCase2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MergeSortRecursive#mergeSort"
            ]
        },
        "Rotation#rotation": {
            "parameters": {
                "values": "char[]",
                "n": "int"
            },
            "name": "Rotation#rotation",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "Rotation#main",
                "RotationTest#testRotation"
            ],
            "children": [
                "ReverseString#reverse",
                "Rotation#reverse",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "ReverseStringRecursive#reverse",
                "LowestBasePalindrome#reverse"
            ]
        },
        "SJFSchedulingTest#initialisation1": {
            "parameters": {},
            "name": "SJFSchedulingTest#initialisation1",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Node#setData": {
            "parameters": {
                "data": "E"
            },
            "name": "Node#setData",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "FindKthNumber#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "FindKthNumber#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "SortUtilsRandomGeneratorTest#generateArray",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "FindKthNumber#generateArray",
                "PancakeSort#sort",
                "TreeSort#sort",
                "FindKthNumber#findKthMax",
                "HeapSort#sort",
                "SortUtilsRandomGenerator#generateArray",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "SJFSchedulingTest#initialisation2": {
            "parameters": {},
            "name": "SJFSchedulingTest#initialisation2",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "MatrixChainMultiplication#printOptimalParens": {
            "parameters": {
                "i": "int",
                "j": "int"
            },
            "name": "MatrixChainMultiplication#printOptimalParens",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "MatrixChainMultiplication#main",
                "MatrixChainMultiplication#printOptimalParens"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "MatrixChainMultiplication#printOptimalParens",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "CountFriendsPairingTest#testForSixElements": {
            "parameters": {},
            "name": "CountFriendsPairingTest#testForSixElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CountFriendsPairing#countFriendsPairing"
            ]
        },
        "CreateBSTFromSortedArray#createBst": {
            "parameters": {
                "array": "int[]",
                "start": "int",
                "end": "int"
            },
            "name": "CreateBSTFromSortedArray#createBst",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "CreateBSTFromSortedArray#test",
                "CreateBSTFromSortedArray#createBst"
            ],
            "children": [
                "CreateBSTFromSortedArray#createBst"
            ]
        },
        "ArrayLeftRotation#rotateLeft": {
            "parameters": {
                "arr": "int[]",
                "n": "int"
            },
            "name": "ArrayLeftRotation#rotateLeft",
            "recursive": "false",
            "inComing": 13,
            "outGoing": 0,
            "numberOfCalls": 13,
            "parents": [
                "AVLTree#rebalance",
                "AVLTree#rotateLeftThenRight",
                "AVLTree#rotateRightThenLeft",
                "RedBlackBST#fixTree",
                "RedBlackBST#deleteFixup",
                "ArrayLeftRotationTest#testForOneElement",
                "ArrayLeftRotationTest#testForZeroStep",
                "ArrayLeftRotationTest#testForEqualSizeStep",
                "ArrayLeftRotationTest#testForLowerSizeStep",
                "ArrayLeftRotationTest#testForHigherSizeStep"
            ],
            "children": []
        },
        "TreeNode#getParent": {
            "parameters": {},
            "name": "TreeNode#getParent",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "MapTest#sizeTest": {
            "parameters": {},
            "name": "MapTest#sizeTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "Map#delete",
                "GenericHashMapUsingArrayList#put",
                "LinkOperations#delete",
                "AVLTree#delete",
                "LinearProbingHashMapTest#getMap",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHashMapUsingArray#put",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "BSTRecursive#delete",
                "Bag#size",
                "MapTest#getMap",
                "StackArrayList#size",
                "DynamicArray#put",
                "FibonacciHeap#delete",
                "SinglyLinkedList#delete",
                "SkipList#size",
                "RedBlackBST#delete",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "CircularBufferTest#put",
                "KDTreeTest#delete",
                "MRUCache#put",
                "FibonacciHeap#size",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "Map#put",
                "LRUCache#put",
                "BSTRecursiveGeneric#delete",
                "LinearProbingHashMap#put",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "VerticalOrderTraversalTest#testSingleNodeTree": {
            "parameters": {},
            "name": "VerticalOrderTraversalTest#testSingleNodeTree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "VerticalOrderTraversal#verticalTraversal",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "GenericTree#size2": {
            "parameters": {
                "roott": "Node"
            },
            "name": "GenericTree#size2",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericTree#size2call",
                "GenericTree#size2"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "GenericTree#size2",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "GenericTree#maxcall": {
            "parameters": {},
            "name": "GenericTree#maxcall",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "CheckTreeIsSymmetric#isSymmetric": {
            "parameters": {
                "leftSubtreeRoot": "Node",
                "rightSubtreRoot": "Node"
            },
            "name": "CheckTreeIsSymmetric#isSymmetric",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "CheckTreeIsSymmetric#isSymmetric",
                "CheckTreeIsSymmetricTest#testRootNull",
                "CheckTreeIsSymmetricTest#testSingleNodeTree",
                "CheckTreeIsSymmetricTest#testSymmetricTree",
                "CheckTreeIsSymmetricTest#testNonSymmetricTree"
            ],
            "children": [
                "CheckTreeIsSymmetric#isSymmetric"
            ]
        },
        "PigeonholeSort#sort": {
            "parameters": {
                "array": "Integer[]"
            },
            "name": "PigeonholeSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "MatrixUtil#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MatrixUtil#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MatrixUtil#assertThat",
                "Trie#add",
                "Vector2#add",
                "Complex#subtract",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "Vector2#multiply",
                "Vector2#subtract",
                "Complex#multiply",
                "MatrixUtil#subtract",
                "FibonacciJavaStreams#assertThat",
                "DynamicArray#add",
                "DepthFirstSearch#assertThat",
                "MatrixUtil#multiply",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "StrassenMatrixMultiplication#multiply",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "BogoSortTest#bogoSortNonDuplicateIntegerArray": {
            "parameters": {},
            "name": "BogoSortTest#bogoSortNonDuplicateIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "StackArray#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "StackArray#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LinkedListStack#push",
                "LeftistHeap#isEmpty",
                "LinearProbingHashMap#size",
                "StackArray#isFull",
                "PriorityQueue#isFull",
                "LinkedQueue#size",
                "CircularQueue#isFull",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "HashMapCuckooHashing#isFull",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "GenericHeap#size",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "GenericHashMapUsingArrayList#size",
                "StackArrayList#push",
                "Bag#size",
                "StackArrayList#size",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "NodeStack#push",
                "MinPriorityQueue#isFull",
                "CircularBufferTest#isFull",
                "Deques#size",
                "LinkedListStack#pop",
                "NodeStack#size",
                "CircularQueue#isEmpty",
                "FibonacciHeap#size",
                "Queue#isFull",
                "NodeStack#peek",
                "DynamicArray#isEmpty",
                "CircularBuffer#isFull",
                "LinkedListStack#peek",
                "PriorityQueue#isEmpty"
            ]
        },
        "AdjacencyMatrixGraph#vertexDoesExist": {
            "parameters": {
                "aVertex": "int"
            },
            "name": "AdjacencyMatrixGraph#vertexDoesExist",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "AdjacencyMatrixGraph#edgeDoesExist",
                "AdjacencyMatrixGraph#addEdge",
                "AdjacencyMatrixGraph#removeEdge"
            ],
            "children": [
                "AdjacencyMatrixGraph#numberOfVertices"
            ]
        },
        "TestPrintMatrixInSpiralOrder#testTwo": {
            "parameters": {},
            "name": "TestPrintMatrixInSpiralOrder#testTwo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "SinglyLinkedList#insert": {
            "parameters": {
                "data": "int"
            },
            "name": "SinglyLinkedList#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "SinglyLinkedList#insertNth"
            ]
        },
        "SortUtils#greaterOrEqual": {
            "parameters": {
                "v": "T",
                "w": "T"
            },
            "name": "SortUtils#greaterOrEqual",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SlowSort#sort"
            ],
            "children": []
        },
        "LucasSeries#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LucasSeries#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LucasSeries#lucasSeriesIteration",
                "LucasSeries#lucasSeries"
            ]
        },
        "BitonicSort#bitonicMerge": {
            "parameters": {
                "a": "int[]",
                "low": "int",
                "cnt": "int",
                "dir": "int"
            },
            "name": "BitonicSort#bitonicMerge",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "BitonicSort#bitonicMerge",
                "BitonicSort#bitonicSort"
            ],
            "children": [
                "BitonicSort#compAndSwap",
                "BitonicSort#bitonicMerge"
            ]
        },
        "PriorityQueue#sink": {
            "parameters": {
                "pos": "int"
            },
            "name": "PriorityQueue#sink",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MinPriorityQueue#delete",
                "PriorityQueue#remove"
            ],
            "children": []
        },
        "DutchNationalFlagSort#dutch_national_flag_sort": {
            "parameters": {
                "arr": "T[]",
                "intendedMiddle": "T"
            },
            "name": "DutchNationalFlagSort#dutch_national_flag_sort",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "DutchNationalFlagSort#sort"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "AutomorphicNumber#isAutomorphic": {
            "parameters": {
                "n": "long"
            },
            "name": "AutomorphicNumber#isAutomorphic",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "AutomorphicNumberTest#testAutomorphicNumber"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "HeronsFormulaTest#test4": {
            "parameters": {},
            "name": "HeronsFormulaTest#test4",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeronsFormula#Herons"
            ]
        },
        "EulersFunction#getEuler": {
            "parameters": {
                "n": "int"
            },
            "name": "EulersFunction#getEuler",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "EulersFunction#main"
            ],
            "children": []
        },
        "LeonardoNumber#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LeonardoNumber#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "LeonardoNumber#leonardoNumber",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "HeronsFormulaTest#test1": {
            "parameters": {},
            "name": "HeronsFormulaTest#test1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeronsFormula#Herons"
            ]
        },
        "CircularQueue#isEmpty": {
            "parameters": {},
            "name": "CircularQueue#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "HeronsFormulaTest#test3": {
            "parameters": {},
            "name": "HeronsFormulaTest#test3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeronsFormula#Herons"
            ]
        },
        "ReverseStringRecursive#reverse": {
            "parameters": {
                "str": "String"
            },
            "name": "ReverseStringRecursive#reverse",
            "recursive": "false",
            "inComing": 24,
            "outGoing": 0,
            "numberOfCalls": 24,
            "parents": [
                "DecimalToAnyBase#convertToAnyBase",
                "Link#main",
                "SkipList#toString",
                "FordFulkerson#networkFlow",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "KeithNumber#isKeith",
                "PalindromePrime#functioning",
                "CRC32#crc32",
                "LowestBasePalindrome#lowestBasePalindrome",
                "Palindrome#isPalindrome",
                "ReverseString#main",
                "ReverseString#reverse",
                "ReverseStringRecursive#reverse",
                "Rotation#rotation",
                "ReverseStringRecursiveTest#shouldAcceptWhenEmptyStringIsPassed",
                "ReverseStringRecursiveTest#shouldAcceptNotWhenWhenSingleCharacterIsPassed",
                "ReverseStringRecursiveTest#shouldAcceptWhenStringIsPassed",
                "ReverseStringTest#ReverseStringTest"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "ReverseString#reverse",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "Rotation#reverse",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "CircularQueue#isEmpty",
                "ReverseStringRecursive#reverse",
                "LowestBasePalindrome#reverse",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "FFTTest#divideWithComplexTest": {
            "parameters": {},
            "name": "FFTTest#divideWithComplexTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Complex#getImaginary",
                "LongDivision#divide",
                "Complex#divide",
                "Complex#getReal"
            ]
        },
        "HeronsFormulaTest#test2": {
            "parameters": {},
            "name": "HeronsFormulaTest#test2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeronsFormula#Herons"
            ]
        },
        "GenericHashMapUsingArray#toString": {
            "parameters": {},
            "name": "GenericHashMapUsingArray#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "NumberOfDigits#numberOfDigitsFast": {
            "parameters": {
                "number": "int"
            },
            "name": "NumberOfDigits#numberOfDigitsFast",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "NumberOfDigits#main"
            ],
            "children": [
                "FFTTest#abs",
                "Floor#floor",
                "Complex#abs"
            ]
        },
        "LFSR#getClockBit": {
            "parameters": {},
            "name": "LFSR#getClockBit",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "CompositeLFSR#clock",
                "CompositeLFSR#getMajorityBit",
                "LFSRTest#getClockBit"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "LFUCache#get": {
            "parameters": {
                "key": "K"
            },
            "name": "LFUCache#get",
            "recursive": "false",
            "inComing": 412,
            "outGoing": 0,
            "numberOfCalls": 412,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "LFSR#clock",
                "LFSR#getClockBit",
                "LFSR#get",
                "LFSR#getLastBit",
                "LFSR#xorTappingBits",
                "LFSR#rightShift",
                "Utils#increment",
                "BinaryToHexadecimal#binToHex",
                "RomanToInteger#romanToInt",
                "BloomFilter#contains",
                "CircularBuffer#isEmpty",
                "CircularBuffer#isFull",
                "LFUCache#get",
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "Graph#getNeighbours",
                "Graph#addEdge",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "BipartiteGrapfDFS#bipartite",
                "BipartiteGrapfDFS#main",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "AdjacencyList#addEdge",
                "AdjacencyList#getAdjacents",
                "AdjacencyList#printGraph",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#dfs",
                "Kosaraju#dfs2",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#containsKey",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "GenericHashMapUsingArrayList#containsKey",
                "Intersection#intersection",
                "LinearProbingHashMap#contains",
                "Map#contains",
                "GenericHeap#upHeapify",
                "GenericHeap#downHeapify",
                "GenericHeap#get",
                "GenericHeap#swap",
                "GenericHeap#updatePriority",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#swap",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MaxHeap#extractMax",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#swap",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "MinHeap#extractMin",
                "CursorLinkedList#removeByIndex",
                "MergeSortedArrayList#merge",
                "RandomNode#getRandom",
                "SkipList#toString",
                "Node#next",
                "Node#previous",
                "GenericArrayListQueue#peek",
                "StackArrayList#peek",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LCA#main",
                "LCA#dfs",
                "TreeRandomNode#getRandom",
                "VerticalOrderTraversal#verticalTraversal",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#gaussian",
                "KeithNumber#isKeith",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "CRC32#crc32",
                "CRCAlgorithm#divideMessageWithP",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "KochSnowflake#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "SkylineProblem#mergeSkyline",
                "CountWords#getDictionary",
                "TopKWords#main",
                "HammingDistance#getHammingDistanceBetweenBits",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "MergeSortRecursive#sort",
                "SortUtils#isSorted",
                "TopologicalSort#sort",
                "CheckAnagrams#isAnagrams",
                "HorspoolSearch#getShiftValue",
                "Isomorphic#checkStrings",
                "ArrayCombinationTest#testLengthOne",
                "ArrayCombinationTest#testLengthTwo",
                "ArrayCombinationTest#testLengthFive",
                "CombinationTest#testLengthOne",
                "CombinationTest#testLengthTwo",
                "PermutationTest#testNoElement",
                "PermutationTest#testSingleElement",
                "PermutationTest#testMultipleElements",
                "CircularBufferTest#get",
                "CircularBufferTest#concurrentTest",
                "CircularBufferTest#getSortedListFrom",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#getTest",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#get",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "FFTTest#fft",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "ConwayTest#testGenerateWith1",
                "ConwayTest#testGenerateWith123456",
                "ConwayTest#testGenerateWith1A1Z3E1R1T3G1F1D2E1S1C",
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#constructor",
                "SJFSchedulingTest#sort",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyCharacters",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "LFUCache#addNodeWithUpdatedFrequency",
                "CircularBufferTest#get",
                "LFUCache#removeNode",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "TreeRandomNode#getRandom": {
            "parameters": {
                "val": "Node"
            },
            "name": "TreeRandomNode#getRandom",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "RandomNode#main"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#inOrder",
                "CircularBuffer#get",
                "GenericHeap#size",
                "BSTRecursive#inOrder",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "TreeRandomNode#inOrder"
            ]
        },
        "CountWords#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CountWords#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BufferedReader#close"
            ]
        },
        "HillCipher#determinant": {
            "parameters": {
                "a": "int[][]",
                "n": "int"
            },
            "name": "HillCipher#determinant",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "HillCipher#determinant",
                "HillCipher#validateDeterminant",
                "DeterminantOfMatrix#determinant",
                "DeterminantOfMatrix#main"
            ],
            "children": [
                "DeterminantOfMatrix#determinant",
                "HillCipher#determinant"
            ]
        },
        "CreateBinaryTreeFromInorderPreorder#createTreeOptimized": {
            "parameters": {
                "preStart": "int",
                "size": "int",
                "inStart": "int",
                "inorderMap": "Map\u003cInteger,Integer\u003e",
                "inorder": "Integer[]",
                "preorder": "Integer[]"
            },
            "name": "CreateBinaryTreeFromInorderPreorder#createTreeOptimized",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "CreateBinaryTreeFromInorderPreorder#test",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "CreateBinaryTreeFromInorderPreorder#createTreeOptimized"
            ]
        },
        "BinarySearch2dArrayTest#BinarySearch2dArrayTestEmptyArray": {
            "parameters": {},
            "name": "BinarySearch2dArrayTest#BinarySearch2dArrayTestEmptyArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BinarySearch2dArray#BinarySearch"
            ]
        },
        "LongestPalindromicSubstring#LPS": {
            "parameters": {
                "input": "String"
            },
            "name": "LongestPalindromicSubstring#LPS",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "LetterCombinationsOfPhoneNumberTest#letterCombinationsOfPhoneNumber": {
            "parameters": {},
            "name": "LetterCombinationsOfPhoneNumberTest#letterCombinationsOfPhoneNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapElement#equals",
                "LetterCombinationsOfPhoneNumber#generateNumberToCharMap",
                "LetterCombinationsOfPhoneNumber#printWords"
            ]
        },
        "SimpsonIntegration#simpsonsMethod": {
            "parameters": {
                "a": "double",
                "h": "double",
                "N": "int"
            },
            "name": "SimpsonIntegration#simpsonsMethod",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SimpsonIntegration#main"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "SimpsonIntegration#f",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "FibonacciHeap#size",
                "Map#put",
                "Blowfish#f",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "VerticalOrderTraversalTest#testRootNull": {
            "parameters": {},
            "name": "VerticalOrderTraversalTest#testRootNull",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "VerticalOrderTraversal#verticalTraversal"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "PollardRho#g": {
            "parameters": {
                "modulus": "int",
                "base": "int"
            },
            "name": "PollardRho#g",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "PollardRho#pollardRho"
            ],
            "children": []
        },
        "PiNilakantha#calculatePi": {
            "parameters": {
                "iterations": "int"
            },
            "name": "PiNilakantha#calculatePi",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "PiNilakantha#main"
            ],
            "children": []
        },
        "EggDropping#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "EggDropping#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "EggDropping#minTrials"
            ]
        },
        "Sudoku#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Sudoku#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#solveSudoku",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "QueueWithStack#insert": {
            "parameters": {
                "x": "Object"
            },
            "name": "QueueWithStack#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "LinkedListStack#push",
                "StackArray#push",
                "StackArrayList#push",
                "NodeStack#push"
            ]
        },
        "ProcessDetails#getArrivalTime": {
            "parameters": {},
            "name": "ProcessDetails#getArrivalTime",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses"
            ],
            "children": []
        },
        "DistanceFormula#manhattanDistance": {
            "parameters": {
                "y1": "double",
                "x1": "double",
                "y2": "double",
                "x2": "double"
            },
            "name": "DistanceFormula#manhattanDistance",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "DistanceFormulaTest#manhattantest1",
                "DistanceFormulaTest#manhattantest2",
                "DistanceFormulaTest#manhattanTest3"
            ],
            "children": [
                "FFTTest#abs",
                "Complex#abs"
            ]
        },
        "A_Star#initializeGraph": {
            "parameters": {
                "data": "ArrayList\u003cInteger\u003e",
                "graph": "Graph"
            },
            "name": "A_Star#initializeGraph",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "A_Star#main"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "BellmanFord#addEdge",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "AdjacencyList#addEdge",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "AdjacencyMatrixGraph#addEdge",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "AllPathsFromSourceToTarget#addEdge",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "AdjacencyListGraph#addEdge",
                "Kruskal#addEdge",
                "Graph#addEdge"
            ]
        },
        "FibonacciJavaStreams#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "FibonacciJavaStreams#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "MatrixUtil#assertThat",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "HamiltonianCycle#isPresent",
                "Bag#isEmpty",
                "FibonacciJavaStreams#assertThat",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "FibonacciJavaStreams#calculate",
                "DepthFirstSearch#assertThat",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "SortUtilsRandomGeneratorTest#generateArray",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "FindKthNumber#generateArray",
                "PancakeSort#sort",
                "TreeSort#sort",
                "CircularBufferTest#generateInt",
                "LinkListSort#isSorted",
                "QuickSortTest#getSortAlgorithm",
                "SortUtils#isSorted",
                "HeapSort#sort",
                "SortUtilsRandomGenerator#generateArray",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "BogoSort#isSorted",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "SortUtilsRandomGenerator#generateInt",
                "BitonicSort#sort"
            ]
        },
        "KDTreeTest#delete": {
            "parameters": {},
            "name": "KDTreeTest#delete",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "HashMap#deleteHash",
                "LinkedList#delete",
                "MinPriorityQueue#heapSort",
                "Link#main",
                "LinkOperations#removeDuplicates",
                "SinglyLinkedList#main",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "BSTRecursive#remove",
                "BSTRecursiveGeneric#delete",
                "BSTRecursiveGeneric#remove",
                "RedBlackBST#deleteDemo",
                "TrieImp#main",
                "MapTest#deleteTest",
                "MapTest#sizeTest",
                "KDTreeTest#delete"
            ],
            "children": [
                "Map#delete",
                "LinkOperations#delete",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "FibonacciHeap#delete",
                "SinglyLinkedList#delete",
                "KDTreeTest#pointOf",
                "RedBlackBST#delete",
                "KDTreeTest#delete",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "LazySegmentTree#getRoot",
                "BSTRecursiveGeneric#delete",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "HeapNode#setNext": {
            "parameters": {
                "newNext": "HeapNode"
            },
            "name": "HeapNode#setNext",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "LinkedList#insert",
                "LinkedList#delete",
                "FibonacciHeap#insert",
                "FibonacciHeap#deleteMin",
                "FibonacciHeap#meld",
                "FibonacciHeap#cut",
                "FibonacciHeap#fromBuckets",
                "FibonacciHeap#link",
                "SkipList#add",
                "SkipList#remove",
                "NodeStack#push",
                "NodeStack#pop"
            ],
            "children": []
        },
        "CollatzConjectureTest#nextNumberFromEvenNumber": {
            "parameters": {},
            "name": "CollatzConjectureTest#nextNumberFromEvenNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinearCongruentialGenerator#nextNumber",
                "CollatzConjecture#nextNumber"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "LFSR#xorTappingBits": {
            "parameters": {},
            "name": "LFSR#xorTappingBits",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "LFSR#clock"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "countSetBits#countsetBits": {
            "parameters": {
                "num": "long"
            },
            "name": "countSetBits#countsetBits",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "countSetBitsTest#testSetBits"
            ],
            "children": []
        },
        "SkylineProblem#run": {
            "parameters": {},
            "name": "SkylineProblem#run",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "SkylineProblem#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "Trie#add",
                "Vector2#add",
                "StrassenMatrixMultiplication#split",
                "SkipListTest#print",
                "SkylineProblem#findSkyline",
                "dijkstras#print",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "MinPriorityQueue#print",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "BufferedReader#close",
                "DynamicArray#add",
                "ParseInteger#parseInt",
                "BSTRecursive#add",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "MatrixUtil#add",
                "NodeStack#print",
                "Complex#add",
                "SortUtils#print",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "RadixSort#print",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "DynamicArrayIterator#hasNext": {
            "parameters": {},
            "name": "DynamicArrayIterator#hasNext",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "Bag#contains",
                "ListIterator#next",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "SkylineProblem#print",
                "StackPostfixNotation#postfixEvaluate",
                "StrandSort#strandSort",
                "MapTest#keysTest"
            ],
            "children": []
        },
        "IIRFilter#process": {
            "parameters": {
                "sample": "double"
            },
            "name": "IIRFilter#process",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest4x4": {
            "parameters": {},
            "name": "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest4x4",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Vector2#multiply",
                "Complex#multiply",
                "MatrixUtil#multiply",
                "StrassenMatrixMultiplication#multiply"
            ]
        },
        "BSTRecursive#postOrder": {
            "parameters": {
                "node": "Node"
            },
            "name": "BSTRecursive#postOrder",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "BSTRecursive#postOrder",
                "BSTRecursive#postorder",
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursiveGeneric#postorder",
                "BinaryTree#postOrder",
                "CreateBSTFromSortedArray#test",
                "CreateBinaryTreeFromInorderPreorder#test",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BSTRecursiveGeneric#postOrder",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "BSTRecursive#postOrder",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "MergeSortTest#getSortAlgorithm": {
            "parameters": {},
            "name": "MergeSortTest#getSortAlgorithm",
            "recursive": "false",
            "inComing": 16,
            "outGoing": 0,
            "numberOfCalls": 16,
            "parents": [
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
            ],
            "children": []
        },
        "RgbHsvConversion#convertToInt": {
            "parameters": {
                "input": "double"
            },
            "name": "RgbHsvConversion#convertToInt",
            "recursive": "false",
            "inComing": 18,
            "outGoing": 0,
            "numberOfCalls": 18,
            "parents": [
                "RgbHsvConversion#getRgbBySection"
            ],
            "children": [
                "Blowfish#round"
            ]
        },
        "VampireNumber#isVampireNumber": {
            "parameters": {
                "a": "int",
                "b": "int",
                "noPseudoVamireNumbers": "boolean"
            },
            "name": "VampireNumber#isVampireNumber",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "VampireNumber#test"
            ],
            "children": [
                "VampireNumber#splitIntoDigits",
                "HeapElement#equals"
            ]
        },
        "ReverseStringTest#ReverseStringTest": {
            "parameters": {},
            "name": "ReverseStringTest#ReverseStringTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ReverseString#reverse",
                "ReverseString#reverse2",
                "Rotation#reverse",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "ReverseStringRecursive#reverse",
                "LowestBasePalindrome#reverse"
            ]
        },
        "SumWithoutArithmeticOperators#getSum": {
            "parameters": {
                "a": "int",
                "b": "int"
            },
            "name": "SumWithoutArithmeticOperators#getSum",
            "recursive": "false",
            "inComing": 13,
            "outGoing": 0,
            "numberOfCalls": 13,
            "parents": [
                "MinimumSumPartition#subSet",
                "SumWithoutArithmeticOperators#getSum",
                "SumWithoutArithmeticOperatorsTest#addZerotoZero",
                "SumWithoutArithmeticOperatorsTest#addZerotoNumber",
                "SumWithoutArithmeticOperatorsTest#addOddtoEven",
                "SumWithoutArithmeticOperatorsTest#addEventoOdd",
                "SumWithoutArithmeticOperatorsTest#addRandoms"
            ],
            "children": [
                "MinimumSumPartition#getSum",
                "SegmentTree#getSum",
                "SumWithoutArithmeticOperators#getSum"
            ]
        },
        "MinPriorityQueue#heapSort": {
            "parameters": {},
            "name": "MinPriorityQueue#heapSort",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MinPriorityQueue#main",
                "IntrospectiveSort#introSort"
            ],
            "children": [
                "Map#delete",
                "LinkOperations#delete",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "FibonacciHeap#delete",
                "SinglyLinkedList#delete",
                "RedBlackBST#delete",
                "KDTreeTest#delete",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "BSTRecursiveGeneric#delete",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "InsertionSortTest#testWithNegativeValues": {
            "parameters": {
                "sortAlgorithm": "Function\u003cInteger[],Integer[]\u003e"
            },
            "name": "InsertionSortTest#testWithNegativeValues",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "InsertionSortTest#insertionSortClassicalForArrayWithNegativeValuesShouldPass"
            ],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "MiniMaxAlgorithm#getRandomScores": {
            "parameters": {
                "size": "int",
                "maxScore": "int"
            },
            "name": "MiniMaxAlgorithm#getRandomScores",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "null#null"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "StrassenMatrixMultiplication#multiply": {
            "parameters": {
                "A": "int[][]",
                "B": "int[][]"
            },
            "name": "StrassenMatrixMultiplication#multiply",
            "recursive": "false",
            "inComing": 28,
            "outGoing": 0,
            "numberOfCalls": 28,
            "parents": [
                "RSA#generateKeys",
                "StrassenMatrixMultiplication#multiply",
                "AutomorphicNumber#isAutomorphic3",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#convolutionFFT",
                "FFT#fft",
                "FFTBluestein#fftBluestein",
                "KaprekarNumbers#isKaprekarNumber",
                "MatrixUtil#multiply",
                "MatrixUtil#main",
                "KochSnowflake#IterationStep",
                "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest2x2",
                "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTest4x4",
                "StrassenMatrixMultiplicationTest#StrassenMatrixMultiplicationTestNegetiveNumber4x4",
                "FFTTest#multiplyWithComplexTest",
                "FFTTest#multiplyWithScalarTest"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "StrassenMatrixMultiplication#split",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "Vector2#multiply",
                "Complex#multiply",
                "DynamicArray#add",
                "StrassenMatrixMultiplication#sub",
                "MatrixUtil#multiply",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "StrassenMatrixMultiplication#multiply",
                "Complex#add",
                "StrassenMatrixMultiplication#join",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "SameTreesCheckTest#testSameTreesIsSuccessful": {
            "parameters": {},
            "name": "SameTreesCheckTest#testSameTreesIsSuccessful",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "SameTreesCheck#check",
                "DuplicateBrackets#check",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "MyAtoiTest#testOne": {
            "parameters": {},
            "name": "MyAtoiTest#testOne",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MyAtoi#myAtoi"
            ]
        },
        "Floor#floor": {
            "parameters": {
                "number": "double"
            },
            "name": "Floor#floor",
            "recursive": "false",
            "inComing": 19,
            "outGoing": 0,
            "numberOfCalls": 19,
            "parents": [
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "MaxHeap#toggleUp",
                "MaxHeap#deleteElement",
                "MinHeap#toggleUp",
                "MinHeap#deleteElement",
                "Floor#main",
                "JugglerSequence#jugglerSequence",
                "NumberOfDigits#numberOfDigitsFast",
                "PrimeCheck#fermatPrimeChecking",
                "Mandelbrot#colorCodedColorMap",
                "WiggleSort#wiggleSort"
            ],
            "children": []
        },
        "dijkstras#minDist": {
            "parameters": {
                "Set": "Boolean[]",
                "dist": "int[]"
            },
            "name": "dijkstras#minDist",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "dijkstras#dijkstra"
            ],
            "children": []
        },
        "PronicNumberTest#testForNonPronicNumber": {
            "parameters": {},
            "name": "PronicNumberTest#testForNonPronicNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PronicNumber#isPronic"
            ]
        },
        "Fibonacci#fibBinet": {
            "parameters": {
                "n": "int"
            },
            "name": "Fibonacci#fibBinet",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "BankersAlgorithm#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BankersAlgorithm#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BankersAlgorithm#checkSafeSystem",
                "BufferedReader#close"
            ]
        },
        "Damm#toIntArray": {
            "parameters": {
                "string": "String"
            },
            "name": "Damm#toIntArray",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Damm#dammCheck",
                "Damm#addDammChecksum",
                "Verhoeff#verhoeffCheck",
                "Verhoeff#addVerhoeffChecksum"
            ],
            "children": []
        },
        "FirstFitCPUTest#testFitForMoreBlocksNoFit": {
            "parameters": {},
            "name": "FirstFitCPUTest#testFitForMoreBlocksNoFit",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "VectorCrossProduct#displayVector": {
            "parameters": {},
            "name": "VectorCrossProduct#displayVector",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "VectorCrossProduct#test"
            ],
            "children": []
        },
        "DNFSort#sort012": {
            "parameters": {
                "a": "int[]",
                "arr_size": "int"
            },
            "name": "DNFSort#sort012",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Sort012D#main",
                "DNFSort#main"
            ],
            "children": []
        },
        "BaseLFSR#clock": {
            "parameters": {},
            "name": "BaseLFSR#clock",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "A5KeyStreamGenerator#getNextKeyStream",
                "CompositeLFSR#clock",
                "LFSR#initialize",
                "LFSRTest#clock"
            ],
            "children": []
        },
        "MyAtoiTest#testFour": {
            "parameters": {},
            "name": "MyAtoiTest#testFour",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MyAtoi#myAtoi"
            ]
        },
        "RSA#encrypt": {
            "parameters": {
                "message": "BigInteger"
            },
            "name": "RSA#encrypt",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HillCipher#hillCipher",
                "BlowfishTest#testEncrypt",
                "PolybiusTest#testEncrypt",
                "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption",
                "RSATest#testRSA",
                "VigenereTest#vigenereEncryptTest"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "PrimeCheck#modPow",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "MRUCache#put": {
            "parameters": {
                "value": "V",
                "key": "K"
            },
            "name": "MRUCache#put",
            "recursive": "false",
            "inComing": 156,
            "outGoing": 0,
            "numberOfCalls": 156,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "BinaryToHexadecimal#binToHex",
                "null#null",
                "LFUCache#put",
                "LRUCache#put",
                "MRUCache#put",
                "AdjacencyList#addEdge",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "GenericHashMapUsingArray#reHash",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#delete",
                "LinearProbingHashMap#resize",
                "GenericHeap#add",
                "GenericHeap#swap",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#test",
                "VerticalOrderTraversal#verticalTraversal",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#TwoPointer",
                "TwoSumProblem#HashMap",
                "Trie#add",
                "CountWords#getDictionary",
                "CountingSort#sort",
                "Graph#addEdge",
                "Anagrams#approach4",
                "CheckAnagrams#isAnagrams",
                "Isomorphic#checkStrings",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#isFull",
                "CircularBufferTest#get",
                "CircularBufferTest#put",
                "CircularBufferTest#concurrentTest",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#putTest",
                "MapTest#getTest",
                "MapTest#deleteTest",
                "MapTest#containsTest",
                "MapTest#sizeTest",
                "MapTest#keysTest",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "MRUCache#addNewEntry",
                "GenericHashMapUsingArrayList#put",
                "LRUCache#addNewEntry",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "HeapElement#getKey",
                "PriorityQueue#remove",
                "Entry#setValue",
                "GenericHashMapUsingArray#put",
                "Entry#setKey",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#containsKey",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "LRUCache#evict",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "MRUCache#moveEntryToLast",
                "GenericHeap#get",
                "SkipList#remove",
                "SkipList#size",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "MRUCache#evict",
                "Deques#size",
                "HeapNode#getKey",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "Entry#getKey",
                "GenericHashMapUsingArrayList#remove",
                "LinearProbingHashMap#put",
                "GenericHeap#remove"
            ]
        },
        "Bag#iterator": {
            "parameters": {},
            "name": "Bag#iterator",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "Bag#contains",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "SkylineProblem#print",
                "StrandSort#strandSort",
                "ArrayCombinationTest#testLengthOne",
                "CombinationTest#testLengthOne",
                "MapTest#keysTest"
            ],
            "children": []
        },
        "GenericHeap#upHeapify": {
            "parameters": {
                "ci": "int"
            },
            "name": "GenericHeap#upHeapify",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "GenericHeap#add",
                "GenericHeap#upHeapify",
                "GenericHeap#updatePriority"
            ],
            "children": [
                "GenericHeap#isLarger",
                "FindKthNumber#swap",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "OddEvenSort#swap",
                "LazySegmentTreeTest#get",
                "Map#get",
                "MinHeap#swap",
                "DynamicArray#get",
                "SinglyLinkedListTest#swap",
                "CircularBuffer#get",
                "GenericHeap#swap",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "SkipList#get",
                "CircularBufferTest#get",
                "IntrospectiveSort#swap",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "HeapSort#swap",
                "LRUCache#get",
                "LFUCache#get",
                "GenericHeap#upHeapify",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption": {
            "parameters": {},
            "name": "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RSA#decrypt",
                "Blowfish#encrypt",
                "HillCipher#decrypt",
                "Vigenere#decrypt",
                "Vigenere#encrypt",
                "A5Cipher#encrypt",
                "HillCipher#encrypt",
                "Blowfish#decrypt",
                "Polybius#decrypt",
                "RSA#encrypt",
                "Polybius#encrypt"
            ]
        },
        "KMPSearch#KMPSearch": {
            "parameters": {
                "txt": "String",
                "pat": "String"
            },
            "name": "KMPSearch#KMPSearch",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "KMPSearchTest#KMPSearchTestLast",
                "KMPSearchTest#KMPSearchTestFront",
                "KMPSearchTest#KMPSearchTestMiddle",
                "KMPSearchTest#KMPSearchTestNotFound",
                "KMPSearchTest#KMPSearchTest4"
            ],
            "children": [
                "KMPSearch#computeLPSArray"
            ]
        },
        "RowColumnWiseSorted2dArrayBinarySearch#find": {
            "parameters": {
                "matrix": "T[][]",
                "key": "T"
            },
            "name": "RowColumnWiseSorted2dArrayBinarySearch#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "MyAtoiTest#testThree": {
            "parameters": {},
            "name": "MyAtoiTest#testThree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MyAtoi#myAtoi"
            ]
        },
        "NodeStack#print": {
            "parameters": {},
            "name": "NodeStack#print",
            "recursive": "false",
            "inComing": 209,
            "outGoing": 0,
            "numberOfCalls": 209,
            "parents": [
                "MazeRecursion#mazeRecursion",
                "ColumnarTranspositionCipher#showTable",
                "ProductCipher#main",
                "AnyBaseToAnyBase#main",
                "BinaryToDecimal#main",
                "DecimalToOctal#main",
                "HexToOct#main",
                "HexaDecimalToDecimal#main",
                "OctalToDecimal#main",
                "OctalToHexadecimal#main",
                "BellmanFord#printPath",
                "BellmanFord#go",
                "BellmanFord#show",
                "null#null",
                "Cycle#printAll",
                "dijkstras#dijkstra",
                "FloydWarshall#floydwarshall",
                "AdjacencyList#printGraph",
                "KahnsAlgorithm#main",
                "MinPriorityQueue#print",
                "MinPriorityQueue#main",
                "CreateAndDetectLoop#printList",
                "CreateAndDetectLoop#main",
                "Link#displayLink",
                "SinglyLinkedList#print",
                "SinglyLinkedList#main",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NodeStack#main",
                "ReverseStack#main",
                "AVLTree#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "BSTRecursive#preOrder",
                "BSTRecursive#postOrder",
                "BSTRecursive#inOrder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursiveGeneric#inOrder",
                "BinaryTree#inOrder",
                "BinaryTree#preOrder",
                "BinaryTree#postOrder",
                "BinaryTree#bfs",
                "GenericTree#display_1",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "LevelOrderTraversalHelper#printGivenLevel",
                "Tree#printTopView",
                "RedBlackBST#printTree",
                "RedBlackBST#printTreepre",
                "RedBlackBST#deleteDemo",
                "Node#printInOrder",
                "Node#printPreOrder",
                "Node#printPostOrder",
                "Node#printLevelOrder",
                "Main#main",
                "BoundaryFill#printImageArray",
                "CoinChange#printAmount",
                "LevenshteinDistance#main",
                "MatrixChainMultiplication#main",
                "MatrixChainMultiplication#printOptimalParens",
                "MatrixChainMultiplication#printArray",
                "MatrixChainMultiplication#input",
                "OptimalJobScheduling#showResults",
                "Sum_Of_Subset#main",
                "LeonardoNumber#main",
                "MagicSquare#main",
                "PrimeCheck#main",
                "TrinomialTriangle#printTrinomial",
                "InverseOfMatrix#main",
                "MedianOfRunningArray#main",
                "PalindromePrime#functioning",
                "Sort012D#sort012",
                "ThreeSumProblem#main",
                "TwoSumProblem#main",
                "matrixTranspose#main",
                "BankersAlgorithm#checkSafeSystem",
                "FloydTriangle#main",
                "HappyNumbersSeq#main",
                "Krishnamurthy#main",
                "LowestBasePalindrome#main",
                "PageRank#main",
                "PasswordGen#main",
                "PerlinNoise#main",
                "Rotate_by_90_degree#printMatrix",
                "SkylineProblem#run",
                "SkylineProblem#print",
                "Sudoku#print",
                "Sudoku#main",
                "TowerOfHanoi#main",
                "LinearSearchThread#main",
                "SquareRootBinarySearch#main",
                "BitonicSort#printArray",
                "BogoSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#main",
                "CycleSort#main",
                "DNFSort#printArray",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "MergeSortNoExtraSpace#main",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "RadixSort#print",
                "RadixSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "StoogeSort#main",
                "SwapSort#main",
                "TreeSort#main",
                "LongestPalindromicSubstring#main",
                "SkipListTest#add",
                "SkipListTest#get",
                "SkipListTest#contains",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "SkipListTest#checkSortedOnLowestLayer",
                "TestPrintMatrixInSpiralOrder#testOne",
                "TestPrintMatrixInSpiralOrder#testTwo"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "NodeStack#getData",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "CocktailShakerSortTest#cocktailShakerSortEmptyArray": {
            "parameters": {},
            "name": "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "Entry#getNextEntry": {
            "parameters": {},
            "name": "Entry#getNextEntry",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "LRUCache#evict",
                "LRUCache#moveNodeToLast",
                "MRUCache#moveEntryToLast"
            ],
            "children": []
        },
        "FibonacciHeap#size": {
            "parameters": {},
            "name": "FibonacciHeap#size",
            "recursive": "false",
            "inComing": 213,
            "outGoing": 0,
            "numberOfCalls": 213,
            "parents": [
                "Combination#backtracking",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "BloomFilter#insert",
                "BloomFilter#contains",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "A_Star#initializeGraph",
                "A_Star#aStar",
                "Cycle#dfs",
                "Cycle#printAll",
                "Vertex#removeAdjacentVertex",
                "Kruskal#kruskal",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "FibonacciHeap#countersRep",
                "FibonacciHeap#toBuckets",
                "GenericHeap#add",
                "GenericHeap#size",
                "GenericHeap#isEmpty",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "null#null",
                "MaxHeap#getElement",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleDown",
                "MaxHeap#insertElement",
                "MaxHeap#deleteElement",
                "MinHeap#getElement",
                "MinHeap#getElementKey",
                "MinHeap#toggleDown",
                "MinHeap#insertElement",
                "MinHeap#deleteElement",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "SinglyLinkedList#main",
                "Deques#main",
                "LinkedQueue#main",
                "DuplicateBrackets#check",
                "StackArray#main",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#peek",
                "StackArrayList#size",
                "GenericTree#display_1",
                "GenericTree#size2",
                "GenericTree#max",
                "GenericTree#height",
                "GenericTree#find",
                "GenericTree#depth",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "GenericTree#removeleaves",
                "LevelOrderTraversal#traverse",
                "TreeRandomNode#getRandom",
                "Node#printLevelOrder",
                "ZigzagTraversal#traverse",
                "LargeTreeNode#isLeafNode",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#main",
                "FFT#fft",
                "FFT#inverseFFT",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "LiouvilleLambdaFunction#liouvilleLambda",
                "SimpsonIntegration#simpsonsMethod",
                "SquareFreeInteger#isSquareFreeInteger",
                "MedianOfRunningArray#insert",
                "MedianOfRunningArray#median",
                "PalindromeSinglyLinkedList#isPalindrome",
                "CRCAlgorithm#divideMessageWithP",
                "Huffman#main",
                "KochSnowflake#IterationStep",
                "KochSnowflake#GetImage",
                "PasswordGen#generatePassword",
                "QueueWithStack#isInStackEmpty",
                "QueueWithStack#isOutStackEmpty",
                "TopKWords#main",
                "FCFSScheduling#evaluateWaitingTime",
                "FCFSScheduling#evaluateTurnAroundTime",
                "SJFScheduling#sortByArrivalTime",
                "SJFScheduling#scheduleProcesses",
                "SJFScheduling#findShortestJob",
                "MonteCarloTreeSearch#monteCarloTreeSearch",
                "MonteCarloTreeSearch#getPromisingNode",
                "MonteCarloTreeSearch#printScores",
                "QuickSelect#select",
                "QuickSelect#selectIndex",
                "UnionFind#count",
                "CountingSort#sort",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "SortAlgorithm#sort",
                "SortUtils#isSorted",
                "StrandSort#strandSort",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#sizeTest",
                "SinglyLinkedListTest#clear",
                "SkipListTest#add",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PrimeFactorizationTest#testpFactorsMustReturnNonEmptyList",
                "FCFSSchedulingTest#testingProcesses",
                "StrandSortTest#StrandSortNonDuplicateTest",
                "StrandSortTest#StrandSortDuplicateTest"
            ],
            "children": []
        },
        "OctalToDecimal#convertOctalToDecimal": {
            "parameters": {
                "inputOctal": "String"
            },
            "name": "OctalToDecimal#convertOctalToDecimal",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "OctalToDecimal#main",
                "OctalToDecimalTest#testOctalToDecimal"
            ],
            "children": [
                "ParseInteger#parseInt"
            ]
        },
        "Verhoeff#toIntArray": {
            "parameters": {
                "string": "String"
            },
            "name": "Verhoeff#toIntArray",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Damm#dammCheck",
                "Damm#addDammChecksum",
                "Verhoeff#verhoeffCheck",
                "Verhoeff#addVerhoeffChecksum"
            ],
            "children": []
        },
        "IntrospectiveSort#introSort": {
            "parameters": {
                "a": "T[]",
                "high": "int",
                "depth": "int",
                "low": "int"
            },
            "name": "IntrospectiveSort#introSort",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "IntrospectiveSort#sort",
                "IntrospectiveSort#introSort"
            ],
            "children": [
                "QuickSelect#partition",
                "IntrospectiveSort#heapSort",
                "DualPivotQuickSort#partition",
                "IntrospectiveSort#partition",
                "FindKthNumber#partition",
                "QuickSort#partition",
                "BFPRT#partition",
                "MinPriorityQueue#heapSort",
                "IntrospectiveSort#introSort",
                "BFPRT#insertionSort",
                "IntrospectiveSort#insertionSort"
            ]
        },
        "PascalTriangleTest#testForTwo": {
            "parameters": {},
            "name": "PascalTriangleTest#testForTwo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PascalTriangle#pascal"
            ]
        },
        "QuickSelectTest#quickSelectMedianOfManyCharacters": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectMedianOfManyCharacters",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "QuickSelectTest#getSortedCopyOfList",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "QuickSelectTest#generateRandomCharacters",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "QuickSelect#select",
                "LFUCache#get"
            ]
        },
        "InsertionSortTest#insertionSortClassicalWithStringArrayShouldPass": {
            "parameters": {},
            "name": "InsertionSortTest#insertionSortClassicalWithStringArrayShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "InsertionSortTest#testWithStringArray"
            ]
        },
        "TimSort#merge": {
            "parameters": {
                "a": "T[]",
                "hi": "int",
                "lo": "int",
                "mid": "int"
            },
            "name": "TimSort#merge",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "LeftistHeap#merge",
                "LeftistHeap#insert",
                "LeftistHeap#extract_min",
                "MergeSortedArrayList#main",
                "MergeSortedSinglyLinkedList#main",
                "LazySegmentTree#buildTree",
                "LazySegmentTree#updateRange",
                "LazySegmentTree#getRange",
                "MergeSort#doSort",
                "MergeSortRecursive#mergeSort",
                "MergeSortRecursive#merge",
                "StrandSort#strandSort",
                "TimSort#sort"
            ],
            "children": [
                "SortUtils#less",
                "HeapSort#less"
            ]
        },
        "Volume#volumeCone": {
            "parameters": {
                "radius": "double",
                "height": "double"
            },
            "name": "Volume#volumeCone",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "VolumeTest#volume"
            ],
            "children": []
        },
        "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustThrowExceptionIfNumberIsZero": {
            "parameters": {},
            "name": "LiouvilleLambdaFunctionTest#testLiouvilleLambdaMustThrowExceptionIfNumberIsZero",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LiouvilleLambdaFunction#liouvilleLambda"
            ]
        },
        "DynamicArray#fastRemove": {
            "parameters": {
                "elements": "Object[]",
                "index": "int"
            },
            "name": "DynamicArray#fastRemove",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "DynamicArray#remove"
            ],
            "children": []
        },
        "MergeSortedArrayList#merge": {
            "parameters": {
                "listA": "List\u003cInteger\u003e",
                "listC": "List\u003cInteger\u003e",
                "listB": "List\u003cInteger\u003e"
            },
            "name": "MergeSortedArrayList#merge",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "LeftistHeap#merge",
                "LeftistHeap#insert",
                "LeftistHeap#extract_min",
                "MergeSortedArrayList#main",
                "MergeSortedSinglyLinkedList#main",
                "LazySegmentTree#buildTree",
                "LazySegmentTree#updateRange",
                "LazySegmentTree#getRange",
                "MergeSort#doSort",
                "MergeSortRecursive#mergeSort",
                "MergeSortRecursive#merge",
                "StrandSort#strandSort",
                "TimSort#sort"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Vertex#printPath": {
            "parameters": {},
            "name": "Vertex#printPath",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BellmanFord#printPath"
            ]
        },
        "FibonacciHeap#link": {
            "parameters": {
                "c1": "HeapNode",
                "c2": "HeapNode"
            },
            "name": "FibonacciHeap#link",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FibonacciHeap#toBuckets"
            ],
            "children": [
                "NodeStack#setNext",
                "HeapElement#getKey",
                "HeapNode#getKey",
                "HeapNode#setNext",
                "Entry#getKey"
            ]
        },
        "InsertionSortTest#testSingleValue": {
            "parameters": {
                "sortAlgorithm": "Function\u003cInteger[],Integer[]\u003e"
            },
            "name": "InsertionSortTest#testSingleValue",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "InsertionSortTest#insertionSortClassicalSortSingleValueArrayShouldPass"
            ],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "WordBoggle#getNeighbors": {
            "parameters": {
                "i": "int",
                "j": "int",
                "board": "char[][]"
            },
            "name": "WordBoggle#getNeighbors",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "WordBoggle#explore"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "CountCharTest#testCountCharacters": {
            "parameters": {},
            "name": "CountCharTest#testCountCharacters",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CountChar#CountCharacters"
            ]
        },
        "Blowfish#keyGenerate": {
            "parameters": {
                "key": "String"
            },
            "name": "Blowfish#keyGenerate",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Blowfish#encrypt",
                "Blowfish#decrypt"
            ],
            "children": [
                "Blowfish#xor"
            ]
        },
        "BufferedReader#read": {
            "parameters": {},
            "name": "BufferedReader#read",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "BufferedReader#justRefill",
                "CountWords#getDictionary",
                "BufferedReaderTest#testPeeks",
                "BufferedReaderTest#testMixes",
                "BufferedReaderTest#testBlockPractical",
                "BufferedReaderTest#randomTest"
            ],
            "children": [
                "BufferedReader#refill",
                "BufferedReader#needsRefill"
            ]
        },
        "ShellSortTest#ShellSortNonDuplicateStringArray": {
            "parameters": {},
            "name": "ShellSortTest#ShellSortNonDuplicateStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "MatrixChainMultiplication#input": {
            "parameters": {
                "string": "String"
            },
            "name": "MatrixChainMultiplication#input",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MatrixChainMultiplication#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "StrassenMatrixMultiplication#split",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "MonteCarloTreeSearch#simulateRandomPlay": {
            "parameters": {
                "promisingNode": "Node"
            },
            "name": "MonteCarloTreeSearch#simulateRandomPlay",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MonteCarloTreeSearch#monteCarloTreeSearch"
            ],
            "children": []
        },
        "Complex#add": {
            "parameters": {
                "z": "Complex"
            },
            "name": "Complex#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": []
        },
        "Node#getKey": {
            "parameters": {},
            "name": "Node#getKey",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "FibonacciHeap#cut": {
            "parameters": {
                "curr": "HeapNode"
            },
            "name": "FibonacciHeap#cut",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "FibonacciHeap#decreaseKey",
                "FibonacciHeap#cascadingCuts"
            ],
            "children": [
                "FibonacciHeap#updateMin",
                "NodeStack#setNext",
                "HeapNode#setNext"
            ]
        },
        "BFPRT#insertionSort": {
            "parameters": {
                "arr": "int[]",
                "end": "int",
                "begin": "int"
            },
            "name": "BFPRT#insertionSort",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "BFPRT#getMedian",
                "IntrospectiveSort#introSort"
            ],
            "children": [
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "SinglyLinkedListTest#swap",
                "GenericHeap#swap",
                "MaxHeap#swap",
                "Permutation#swap",
                "SortUtils#swap",
                "IntrospectiveSort#swap",
                "HeapSort#swap",
                "BFPRT#swap",
                "DualPivotQuickSort#swap"
            ]
        },
        "QuickSelectTest#generateRandomIntegers": {
            "parameters": {
                "n": "int"
            },
            "name": "QuickSelectTest#generateRandomIntegers",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "QuickSelectTest#quickSelectMinimumOfManyElements",
                "QuickSelectTest#quickSelectMaximumOfManyElements",
                "QuickSelectTest#quickSelectMedianOfManyElements",
                "QuickSelectTest#quickSelect30thPercentileOf10Elements",
                "QuickSelectTest#quickSelect30thPercentileOfManyElements",
                "QuickSelectTest#quickSelect70thPercentileOf10Elements",
                "QuickSelectTest#quickSelect70thPercentileOfManyElements"
            ],
            "children": []
        },
        "SubsetCountTest#singleElementSubset": {
            "parameters": {},
            "name": "SubsetCountTest#singleElementSubset",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SubsetCount#getCount"
            ]
        },
        "JumpSearch#find": {
            "parameters": {
                "array": "T[]",
                "key": "T"
            },
            "name": "JumpSearch#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": [
                "FindMinRecursion#min",
                "MinValue#min",
                "BucketSort#min"
            ]
        },
        "PrintTopViewofTree#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PrintTopViewofTree#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Tree#printTopView"
            ]
        },
        "TwinPrimeTest#shouldReturnNegative1": {
            "parameters": {},
            "name": "TwinPrimeTest#shouldReturnNegative1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TwinPrime#getTwinPrime"
            ]
        },
        "AverageTest#testAverage_double_4_5": {
            "parameters": {},
            "name": "AverageTest#testAverage_double_4_5",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Average#average"
            ]
        },
        "ConwayTest#testGenerateWith1": {
            "parameters": {},
            "name": "ConwayTest#testGenerateWith1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Conway#generateList",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "HashMapCuckooHashingTest#hashFunctionsAreDifferent": {
            "parameters": {},
            "name": "HashMapCuckooHashingTest#hashFunctionsAreDifferent",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HashMapCuckooHashing#hashFunction1",
                "HashMapCuckooHashing#hashFunction2",
                "HashMapCuckooHashing#insertKey2HashTable"
            ]
        },
        "Tree#printTopView": {
            "parameters": {},
            "name": "Tree#printTopView",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PrintTopViewofTree#main"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "SkipListTest#print",
                "BSTRecursive#remove",
                "dijkstras#print",
                "QueueWithStack#isEmpty",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "MinPriorityQueue#print",
                "CircleLinkedList#remove",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Map#contains",
                "BSTIterative#remove",
                "Queue#remove",
                "Bag#contains",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "SkipList#remove",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "BloomFilter#contains",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "BSTRecursive#add",
                "ListIterator#remove",
                "CircularBufferTest#isEmpty",
                "SkipListTest#contains",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "Sudoku#print",
                "LinearProbingHashMap#contains",
                "DynamicArrayIterator#remove",
                "SinglyLinkedList#print",
                "SkipList#contains",
                "MatrixUtil#add",
                "CircularQueue#isEmpty",
                "NodeStack#print",
                "Complex#add",
                "QueueWithStack#remove",
                "SortUtils#print",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "RadixSort#print",
                "GenericHashMapUsingArrayList#remove",
                "DynamicArray#isEmpty",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "JumpSearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "JumpSearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "DistanceFormulaTest#minkowskiTest1": {
            "parameters": {},
            "name": "DistanceFormulaTest#minkowskiTest1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DistanceFormula#minkowskiDistance"
            ]
        },
        "LinkedList#delete": {
            "parameters": {
                "n": "Node",
                "key": "int"
            },
            "name": "LinkedList#delete",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "HashMap#deleteHash",
                "LinkedList#delete",
                "MinPriorityQueue#heapSort",
                "Link#main",
                "LinkOperations#removeDuplicates",
                "SinglyLinkedList#main",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "BSTRecursive#remove",
                "BSTRecursiveGeneric#delete",
                "BSTRecursiveGeneric#remove",
                "RedBlackBST#deleteDemo",
                "TrieImp#main",
                "MapTest#deleteTest",
                "MapTest#sizeTest",
                "KDTreeTest#delete"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "Map#delete",
                "SinglyLinkedList#isEmpty",
                "NodeStack#getNext",
                "LinkOperations#delete",
                "LeftistHeap#isEmpty",
                "AVLTree#delete",
                "NodeStack#setNext",
                "HeapNode#getNext",
                "QueueWithStack#isEmpty",
                "HeapElement#getKey",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "BSTRecursive#delete",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "FibonacciHeap#delete",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "SinglyLinkedList#delete",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "RedBlackBST#delete",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "HeapNode#getKey",
                "CircularQueue#isEmpty",
                "KDTreeTest#delete",
                "HeapNode#setNext",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "Entry#getKey",
                "BSTRecursiveGeneric#delete",
                "DynamicArray#isEmpty",
                "LinearProbingHashMap#delete",
                "TrieImp#delete",
                "PriorityQueue#isEmpty"
            ]
        },
        "BogoSortTest#bogoSortEmptyArray": {
            "parameters": {},
            "name": "BogoSortTest#bogoSortEmptyArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "AVLTree#rotateLeft": {
            "parameters": {
                "a": "Node"
            },
            "name": "AVLTree#rotateLeft",
            "recursive": "false",
            "inComing": 13,
            "outGoing": 0,
            "numberOfCalls": 13,
            "parents": [
                "AVLTree#rebalance",
                "AVLTree#rotateLeftThenRight",
                "AVLTree#rotateRightThenLeft",
                "RedBlackBST#fixTree",
                "RedBlackBST#deleteFixup",
                "ArrayLeftRotationTest#testForOneElement",
                "ArrayLeftRotationTest#testForZeroStep",
                "ArrayLeftRotationTest#testForEqualSizeStep",
                "ArrayLeftRotationTest#testForLowerSizeStep",
                "ArrayLeftRotationTest#testForHigherSizeStep"
            ],
            "children": [
                "AVLTree#setBalance"
            ]
        },
        "LevelOrderTraversalHelper#printGivenLevel": {
            "parameters": {
                "level": "int",
                "root": "BinaryTree.Node"
            },
            "name": "LevelOrderTraversalHelper#printGivenLevel",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "LevelOrderTraversalHelper#printLevelOrder",
                "LevelOrderTraversalHelper#printGivenLevel"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "LevelOrderTraversalHelper#printGivenLevel",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "BSTRecursiveGeneric#inorder": {
            "parameters": {},
            "name": "BSTRecursiveGeneric#inorder",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main"
            ],
            "children": [
                "BSTRecursiveGeneric#inOrder",
                "BSTRecursive#inOrder",
                "TreeRandomNode#inOrder"
            ]
        },
        "Deques#addLast": {
            "parameters": {
                "val": "T"
            },
            "name": "Deques#addLast",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Deques#main",
                "GenericTree#levelorder",
                "StrandSort#strandSort"
            ],
            "children": []
        },
        "DistanceFormulaTest#minkowskiTest3": {
            "parameters": {},
            "name": "DistanceFormulaTest#minkowskiTest3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DistanceFormula#minkowskiDistance"
            ]
        },
        "CompositeLFSR#clock": {
            "parameters": {},
            "name": "CompositeLFSR#clock",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "A5KeyStreamGenerator#getNextKeyStream",
                "CompositeLFSR#clock",
                "LFSR#initialize",
                "LFSRTest#clock"
            ],
            "children": [
                "LFSR#clock",
                "LFSRTest#getClockBit",
                "LFSRTest#clock",
                "LFSR#getClockBit",
                "BaseLFSR#clock",
                "CompositeLFSR#clock",
                "LFSR#getLastBit",
                "CompositeLFSR#getMajorityBit"
            ]
        },
        "TrieImp#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "TrieImp#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "Map#delete",
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "TrieImp#isValid",
                "LinkOperations#delete",
                "SinglyLinkedList#search",
                "AVLSimple#insert",
                "Queue#insert",
                "AVLTree#delete",
                "BreadthFirstSearch#search",
                "MedianOfRunningArray#insert",
                "MatrixUtil#isValid",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "TrieImp#search",
                "LowerBound#search",
                "RedBlackBST#insert",
                "BSTRecursive#delete",
                "BSTRecursiveGeneric#search",
                "MinPriorityQueue#insert",
                "TrieImp#sop",
                "FibonacciHeap#delete",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "SinglyLinkedList#delete",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "AVLTree#insert",
                "RabinKarpAlgorithm#search",
                "RedBlackBST#delete",
                "Solution#isValid",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "ValidParentheses#isValid",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "KDTreeTest#delete",
                "LinkedList#delete",
                "BSTRecursive#search",
                "MinPriorityQueue#delete",
                "SearchInARowAndColWiseSortedMatrix#search",
                "BSTRecursive#insert",
                "SinglyLinkedListTest#search",
                "Trieac#insert",
                "BinarySearch#search",
                "PriorityQueue#insert",
                "BSTRecursiveGeneric#delete",
                "UpperBound#search",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "MaxValue#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MaxValue#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max"
            ]
        },
        "DistanceFormulaTest#minkowskiTest2": {
            "parameters": {},
            "name": "DistanceFormulaTest#minkowskiTest2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DistanceFormula#minkowskiDistance"
            ]
        },
        "StrassenMatrixMultiplication#join": {
            "parameters": {
                "P": "int[][]",
                "C": "int[][]",
                "jB": "int",
                "iB": "int"
            },
            "name": "StrassenMatrixMultiplication#join",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "StrassenMatrixMultiplication#multiply",
                "JugglerSequence#jugglerSequence",
                "LinearSearchThread#main"
            ],
            "children": []
        },
        "ReturnSubsequence#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ReturnSubsequence#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "BufferedReader#close",
                "ReturnSubsequence#returnSubsequence"
            ]
        },
        "BSTRecursive#search": {
            "parameters": {
                "node": "Node",
                "data": "int"
            },
            "name": "BSTRecursive#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "BinarySearch2dArray#binarySearch": {
            "parameters": {
                "arr": "int[][]",
                "colEnd": "int",
                "colStart": "int",
                "row": "int",
                "target": "int"
            },
            "name": "BinarySearch2dArray#binarySearch",
            "recursive": "false",
            "inComing": 14,
            "outGoing": 0,
            "numberOfCalls": 14,
            "parents": [
                "BinarySearch#main",
                "BinarySearch2dArray#BinarySearch",
                "ExponentialSearch#main",
                "ExponentialSearch#find",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "PerfectBinarySearch#main",
                "TernarySearch#main"
            ],
            "children": []
        },
        "MergeSortedSinglyLinkedList#merge": {
            "parameters": {
                "listA": "SinglyLinkedList",
                "listB": "SinglyLinkedList"
            },
            "name": "MergeSortedSinglyLinkedList#merge",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "LeftistHeap#merge",
                "LeftistHeap#insert",
                "LeftistHeap#extract_min",
                "MergeSortedArrayList#main",
                "MergeSortedSinglyLinkedList#main",
                "LazySegmentTree#buildTree",
                "LazySegmentTree#updateRange",
                "LazySegmentTree#getRange",
                "MergeSort#doSort",
                "MergeSortRecursive#mergeSort",
                "MergeSortRecursive#merge",
                "StrandSort#strandSort",
                "TimSort#sort"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "SinglyLinkedList#getHead",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "NodeStack#getHead",
                "FibonacciHeap#size"
            ]
        },
        "FibonacciHeap#totalLinks": {
            "parameters": {},
            "name": "FibonacciHeap#totalLinks",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "HeapNode#isRoot": {
            "parameters": {},
            "name": "HeapNode#isRoot",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "FibonacciHeap#decreaseKey",
                "FibonacciHeap#cascadingCuts",
                "HeapNode#mark"
            ],
            "children": []
        },
        "UnionFind#union": {
            "parameters": {
                "x": "int",
                "y": "int"
            },
            "name": "UnionFind#union",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "UnionFind#main"
            ],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "PrimeCheckTest#test3": {
            "parameters": {},
            "name": "PrimeCheckTest#test3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PrimeCheck#isPrime"
            ]
        },
        "PrimeCheckTest#test2": {
            "parameters": {},
            "name": "PrimeCheckTest#test2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PrimeCheck#isPrime"
            ]
        },
        "MinPriorityQueue#delete": {
            "parameters": {},
            "name": "MinPriorityQueue#delete",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "HashMap#deleteHash",
                "LinkedList#delete",
                "MinPriorityQueue#heapSort",
                "Link#main",
                "LinkOperations#removeDuplicates",
                "SinglyLinkedList#main",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "BSTRecursive#remove",
                "BSTRecursiveGeneric#delete",
                "BSTRecursiveGeneric#remove",
                "RedBlackBST#deleteDemo",
                "TrieImp#main",
                "MapTest#deleteTest",
                "MapTest#sizeTest",
                "KDTreeTest#delete"
            ],
            "children": [
                "MinPriorityQueue#sink",
                "PriorityQueue#sink"
            ]
        },
        "CircleLinkedList#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CircleLinkedList#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BSTRecursive#remove",
                "PriorityQueue#remove",
                "CircleLinkedList#remove",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "CursorLinkedList#append",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "QueueWithStack#remove",
                "CircleLinkedList#append",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove"
            ]
        },
        "PrimeCheckTest#test5": {
            "parameters": {},
            "name": "PrimeCheckTest#test5",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PrimeCheck#isPrime"
            ]
        },
        "Trieac#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Trieac#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "Trieac#getNode",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#printAutoSuggestions",
                "Trieac#insert",
                "PriorityQueue#insert"
            ]
        },
        "PrimeCheckTest#test4": {
            "parameters": {},
            "name": "PrimeCheckTest#test4",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PrimeCheck#isPrime"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "MinimumPathSum#testLessColumns": {
            "parameters": {},
            "name": "MinimumPathSum#testLessColumns",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MinimumPathSum#minimumPathSum"
            ]
        },
        "PrimeCheckTest#test7": {
            "parameters": {},
            "name": "PrimeCheckTest#test7",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PrimeCheck#isPrime"
            ]
        },
        "PrimeCheckTest#test6": {
            "parameters": {},
            "name": "PrimeCheckTest#test6",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PrimeCheck#isPrime"
            ]
        },
        "AdjacencyListGraph#addEdge": {
            "parameters": {
                "from": "E",
                "to": "E"
            },
            "name": "AdjacencyListGraph#addEdge",
            "recursive": "false",
            "inComing": 73,
            "outGoing": 0,
            "numberOfCalls": 73,
            "parents": [
                "AllPathsFromSourceToTarget#allPathsFromSourceToTarget",
                "A_Star#initializeGraph",
                "ConnectedComponent#main",
                "Graphs#main",
                "KahnsAlgorithm#main",
                "Kruskal#main",
                "Kruskal#kruskal",
                "MatrixGraphs#main",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "FindMax#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "FindMax#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DynamicArray#stream",
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max",
                "FindMax#findMax"
            ]
        },
        "SinglyLinkedList#count": {
            "parameters": {},
            "name": "SinglyLinkedList#count",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "CountSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "MatrixChainMultiplication#main",
                "SieveOfEratosthenes#findPrimesTill",
                "UnionFind#main",
                "Task#sortByMergeSort",
                "Task1#sortByInsertionSort",
                "Task2#sortByHeapSort"
            ],
            "children": []
        },
        "KaprekarNumbersTest#testFor98": {
            "parameters": {},
            "name": "KaprekarNumbersTest#testFor98",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KaprekarNumbers#isKaprekarNumber"
            ]
        },
        "PrimeCheckTest#test1": {
            "parameters": {},
            "name": "PrimeCheckTest#test1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PrimeCheck#isPrime"
            ]
        },
        "LinkListSortTest#testForOneElement": {
            "parameters": {},
            "name": "LinkListSortTest#testForOneElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "AreaTest#testSurfaceAreaSphere": {
            "parameters": {},
            "name": "AreaTest#testSurfaceAreaSphere",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Area#surfaceAreaSphere"
            ]
        },
        "StrandSortTest#StrandSortNonDuplicateTest": {
            "parameters": {},
            "name": "StrandSortTest#StrandSortNonDuplicateTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "StrandSort#strandSort",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "BSTRecursive#find": {
            "parameters": {
                "data": "int"
            },
            "name": "BSTRecursive#find",
            "recursive": "false",
            "inComing": 51,
            "outGoing": 0,
            "numberOfCalls": 51,
            "parents": [
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#put",
                "BinaryTree#remove",
                "GenericTree#findcall",
                "GenericTree#find",
                "BinarySearch#main",
                "ExponentialSearch#main",
                "FibonacciSearch#main",
                "InterpolationSearch#main",
                "IterativeBinarySearch#main",
                "IterativeTernarySearch#main",
                "JumpSearch#main",
                "LinearSearch#main",
                "LowerBound#main",
                "SaddlebackSearch#find",
                "SaddlebackSearch#main",
                "TernarySearch#main",
                "UnionFind#find",
                "UnionFind#union",
                "UnionFind#count",
                "UnionFind#main",
                "UpperBound#main",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test4",
                "sortOrderAgnosticBinarySearchTest#testAscending",
                "sortOrderAgnosticBinarySearchTest#testDescending"
            ],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "NodeStack#getData": {
            "parameters": {},
            "name": "NodeStack#getData",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "NodeStack#pop",
                "NodeStack#peek",
                "NodeStack#print"
            ],
            "children": []
        },
        "AdjacencyMatrixGraph#removeEdge": {
            "parameters": {
                "from": "int",
                "to": "int"
            },
            "name": "AdjacencyMatrixGraph#removeEdge",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AdjacencyMatrixGraph#adjacencyOfEdgeDoesExist",
                "AdjacencyMatrixGraph#adjacency",
                "AdjacencyMatrixGraph#numberOfEdges",
                "AdjacencyMatrixGraph#setNumberOfEdges",
                "AdjacencyMatrixGraph#vertexDoesExist"
            ]
        },
        "JosephusProblem#winner": {
            "parameters": {
                "k": "int",
                "n": "int"
            },
            "name": "JosephusProblem#winner",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "JosephusProblem#findTheWinner",
                "JosephusProblem#winner"
            ],
            "children": [
                "JosephusProblem#winner"
            ]
        },
        "SameTreesCheckTest#testSingleNodeTreesAreSame": {
            "parameters": {},
            "name": "SameTreesCheckTest#testSingleNodeTreesAreSame",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "SameTreesCheck#check",
                "DuplicateBrackets#check",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "CombinationsTest#testCombinationOptimised": {
            "parameters": {},
            "name": "CombinationsTest#testCombinationOptimised",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Combinations#combinationsOptimized"
            ]
        },
        "SearchInARowAndColWiseSortedMatrix#search": {
            "parameters": {
                "matrix": "int[][]",
                "value": "int"
            },
            "name": "SearchInARowAndColWiseSortedMatrix#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": []
        },
        "BinomialCoefficient#binomialCoefficient": {
            "parameters": {
                "numberOfObjects": "int",
                "totalObjects": "int"
            },
            "name": "BinomialCoefficient#binomialCoefficient",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "BinomialCoefficient#binomialCoefficient",
                "BinomialCoefficientTest#testBinomialCoefficient"
            ],
            "children": [
                "BinomialCoefficient#binomialCoefficient"
            ]
        },
        "KDTreeTest#findMin": {
            "parameters": {},
            "name": "KDTreeTest#findMin",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "OptimalJobScheduling#runningCost",
                "FindMin#main",
                "FibonacciHeapTest#testHeap",
                "KDTreeTest#findMin",
                "FindMinTest#testFindMinValue",
                "FindMinTest#test1",
                "FindMinTest#test2"
            ],
            "children": [
                "FindMin#findMin",
                "KDTreeTest#findMin",
                "FibonacciHeap#findMin",
                "OptimalJobScheduling#findMin"
            ]
        },
        "KadaneAlogrithmTest#testForFourElements": {
            "parameters": {},
            "name": "KadaneAlogrithmTest#testForFourElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KadaneAlgorithm#max_Sum"
            ]
        },
        "KDTreeTest#findNearest": {
            "parameters": {},
            "name": "KDTreeTest#findNearest",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "KDTreeTest#findNearest"
            ],
            "children": [
                "KDTreeTest#pointOf",
                "KDTreeTest#findNearest"
            ]
        },
        "TreeNode#isRootNode": {
            "parameters": {},
            "name": "TreeNode#isRootNode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "MatrixChainRecursiveTopDownMemoisation#Lookup_Chain": {
            "parameters": {
                "p": "int[]",
                "i": "int",
                "j": "int",
                "m": "int[][]"
            },
            "name": "MatrixChainRecursiveTopDownMemoisation#Lookup_Chain",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "MatrixChainRecursiveTopDownMemoisation#Memoized_Matrix_Chain",
                "MatrixChainRecursiveTopDownMemoisation#Lookup_Chain"
            ],
            "children": [
                "MatrixChainRecursiveTopDownMemoisation#Lookup_Chain"
            ]
        },
        "LinkOperations#deleteTail": {
            "parameters": {},
            "name": "LinkOperations#deleteTail",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "Link#main",
                "LinkOperations#delete",
                "LinkOperations#deleteNode"
            ],
            "children": []
        },
        "IntrospectiveSortTest#StrandSortNonDuplicateTest": {
            "parameters": {},
            "name": "IntrospectiveSortTest#StrandSortNonDuplicateTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "BFPRT#swap": {
            "parameters": {
                "arr": "int[]",
                "i": "int",
                "j": "int"
            },
            "name": "BFPRT#swap",
            "recursive": "false",
            "inComing": 55,
            "outGoing": 0,
            "numberOfCalls": 55,
            "parents": [
                "Permutation#backtracking",
                "GenericHeap#upHeapify",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "FFT#fftBitReversal",
                "FindKthNumber#partition",
                "BFPRT#partition",
                "BFPRT#insertionSort",
                "QuickSelect#partition",
                "QuickSelect#pivot",
                "BogoSort#nextPermutation",
                "BubbleSort#sort",
                "BubbleSortRecursion#bubbleSort",
                "CircleSort#doSort",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "DualPivotQuickSort#partition",
                "DutchNationalFlagSort#dutch_national_flag_sort",
                "GnomeSort#sort",
                "HeapSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "IntrospectiveSort#partition",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify",
                "OddEvenSort#oddEvenSort",
                "QuickSort#randomPartition",
                "QuickSort#partition",
                "SortUtils#flip",
                "WiggleSort#triColorSort"
            ],
            "children": []
        },
        "KMPSearchTest#KMPSearchTestNotFound": {
            "parameters": {},
            "name": "KMPSearchTest#KMPSearchTestNotFound",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KMPSearch#KMPSearch"
            ]
        },
        "VampireNumber#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "VampireNumber#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "VectorCrossProduct#test",
                "CreateBinaryTreeFromInorderPreorder#test",
                "FactorialTest#test",
                "ColorContrastRatio#test",
                "CreateBSTFromSortedArray#test",
                "VampireNumber#test"
            ]
        },
        "DoublyLinkedList#display": {
            "parameters": {},
            "name": "DoublyLinkedList#display",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "HashMap#displayHashtable",
                "LinkedList#display",
                "Link#main",
                "AVLSimple#display"
            ],
            "children": [
                "Link#displayLink"
            ]
        },
        "Node#getValue": {
            "parameters": {},
            "name": "Node#getValue",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "BSTRecursive#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BSTRecursive#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "BSTRecursive#remove",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "IterativeBinarySearch#find",
                "CircleLinkedList#remove",
                "BSTRecursive#inorder",
                "BSTIterative#inorder",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "BSTIterative#remove",
                "Queue#remove",
                "FibonacciSearch#find",
                "SkipList#remove",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "DynamicArray#add",
                "SaddlebackSearch#find",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "LowerBound#find",
                "BinarySearch#find",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "MatrixUtil#add",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "Complex#add",
                "JumpSearch#find",
                "BSTRecursiveGeneric#inorder",
                "BSTRecursive#find",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "NewManShanksPrimeTest#testFour": {
            "parameters": {},
            "name": "NewManShanksPrimeTest#testFour",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "NewManShanksPrime#nthManShanksPrime"
            ]
        },
        "Combination#backtracking": {
            "parameters": {
                "arr": "T[]",
                "result": "List\u003cTreeSet\u003cT\u003e\u003e",
                "index": "int",
                "currSet": "TreeSet\u003cT\u003e"
            },
            "name": "Combination#backtracking",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Combination#combination",
                "Combination#backtracking",
                "Permutation#permutation",
                "Permutation#backtracking"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Permutation#backtracking",
                "Trie#add",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "Map#size",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "MatrixUtil#add",
                "FibonacciHeap#size",
                "Complex#add",
                "Combination#backtracking",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "BucketSort#bucketSort": {
            "parameters": {
                "arr": "int[]"
            },
            "name": "BucketSort#bucketSort",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "BucketSort#main",
                "BucketSortTest#bucketSortSingleIntegerArray",
                "BucketSortTest#bucketSortNonDuplicateIntegerArray",
                "BucketSortTest#bucketSortDuplicateIntegerArray",
                "BucketSortTest#bucketSortNonDuplicateIntegerArrayWithNegativeNum",
                "BucketSortTest#bucketSortDuplicateIntegerArrayWithNegativeNum"
            ],
            "children": [
                "DutchNationalFlagSort#sort",
                "DyanamicProgrammingKnapsack#max",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "TopologicalSort#sort",
                "MRUCache#get",
                "LFSR#get",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "Trie#add",
                "GnomeSort#sort",
                "BucketSort#hash",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DynamicArray#get",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "BSTRecursiveGeneric#add",
                "SlowSort#sort",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "CombSort#sort",
                "Map#hash",
                "IntrospectiveSort#sort",
                "GenericHashMapUsingArrayList#get",
                "PancakeSort#sort",
                "SkipListTest#get",
                "TreeSort#sort",
                "SkipList#get",
                "FindMaxRecursion#max",
                "FindMinRecursion#min",
                "CircularBufferTest#get",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "GenericHeap#get",
                "TimSort#sort",
                "MaxValue#max",
                "QuickSort#sort",
                "MinValue#min",
                "DynamicArray#add",
                "BruteForceKnapsack#max",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "BSTRecursive#add",
                "MergeSortRecursive#sort",
                "GenericTree#max",
                "BucketSort#max",
                "CocktailShakerSort#sort",
                "LinearProbingHashMap#get",
                "StoogeSort#sort",
                "MatrixUtil#add",
                "LRUCache#get",
                "PigeonholeSort#sort",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "BucketSort#min",
                "BitonicSort#sort",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "LinkListSortTest#testForThreeElements": {
            "parameters": {},
            "name": "LinkListSortTest#testForThreeElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "PasswordGenTest#failGenerationWithSameMinMaxLengthTest": {
            "parameters": {},
            "name": "PasswordGenTest#failGenerationWithSameMinMaxLengthTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PasswordGen#generatePassword"
            ]
        },
        "IntrospectiveSort#insertionSort": {
            "parameters": {
                "a": "T[]",
                "high": "int",
                "low": "int"
            },
            "name": "IntrospectiveSort#insertionSort",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "BFPRT#getMedian",
                "IntrospectiveSort#introSort"
            ],
            "children": []
        },
        "KadaneAlogrithmTest#testForThreeElements": {
            "parameters": {},
            "name": "KadaneAlogrithmTest#testForThreeElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KadaneAlgorithm#max_Sum"
            ]
        },
        "FFTBluestein#fftBluestein": {
            "parameters": {
                "inverse": "boolean",
                "x": "ArrayList\u003cFFT.Complex\u003e"
            },
            "name": "FFTBluestein#fftBluestein",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "CircularConvolutionFFT#fftCircularConvolution"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Vector2#multiply",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "LongDivision#divide",
                "StackArrayList#size",
                "Complex#multiply",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "DynamicArray#add",
                "Complex#divide",
                "MatrixUtil#multiply",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "StrassenMatrixMultiplication#multiply",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "ConvolutionFFT#convolutionFFT",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "MaxHeap#insertElement": {
            "parameters": {
                "element": "HeapElement"
            },
            "name": "MaxHeap#insertElement",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "null#null"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "MaxHeap#toggleUp",
                "Trie#add",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "DynamicArray#add",
                "MinHeap#toggleUp",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "NodeStack#size",
                "MatrixUtil#add",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "ShellSortTest#ShellSortDuplicateStringArray": {
            "parameters": {},
            "name": "ShellSortTest#ShellSortDuplicateStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "CeilInBinarySearchTreeTest#testKeyAbsentCeilIsNull": {
            "parameters": {},
            "name": "CeilInBinarySearchTreeTest#testKeyAbsentCeilIsNull",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "CeilInBinarySearchTree#getCeil",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "QueueWithStack#remove": {
            "parameters": {},
            "name": "QueueWithStack#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LinkedListStack#push",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "StackArrayList#push",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "NodeStack#push",
                "LinkedListStack#pop",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "MatrixChainMultiplication#matrixChainOrder": {
            "parameters": {},
            "name": "MatrixChainMultiplication#matrixChainOrder",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MatrixChainMultiplication#main"
            ],
            "children": []
        },
        "Area#surfaceAreaTriangleRectangle": {
            "parameters": {
                "base": "double",
                "height": "double"
            },
            "name": "Area#surfaceAreaTriangleRectangle",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AreaTest#testSurfaceAreaTriangleRectangle",
                "AreaTest#testAllIllegalInput"
            ],
            "children": []
        },
        "SquareRootBinarySearch#squareRoot": {
            "parameters": {
                "num": "long"
            },
            "name": "SquareRootBinarySearch#squareRoot",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "RootPrecision#main",
                "SquareRootBinarySearch#main",
                "SquareRootWithNewtonRaphsonTestMethod#testfor1",
                "SquareRootWithNewtonRaphsonTestMethod#testfor2",
                "SquareRootWithNewtonRaphsonTestMethod#testfor625"
            ],
            "children": []
        },
        "PalindromePrime#prime": {
            "parameters": {
                "num": "int"
            },
            "name": "PalindromePrime#prime",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PalindromePrime#functioning"
            ],
            "children": []
        },
        "AnagramsTest#isAlphabetical": {
            "parameters": {},
            "name": "AnagramsTest#isAlphabetical",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "Alphabetical#main",
                "AlphabeticalTest#isAlphabetical"
            ],
            "children": [
                "Anagrams#approach2",
                "Anagrams#approach1",
                "Anagrams#approach4",
                "Anagrams#approach3"
            ]
        },
        "LFSR#rightShift": {
            "parameters": {},
            "name": "LFSR#rightShift",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LFSR#pushBit"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "OctalToHexadecimal#decimalToHex": {
            "parameters": {
                "d": "int"
            },
            "name": "OctalToHexadecimal#decimalToHex",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "OctalToHexadecimal#main",
                "OctalToHexadecimalTest#testOctalToHexadecimal"
            ],
            "children": []
        },
        "RedBlackBST#findNode": {
            "parameters": {
                "node": "Node",
                "findNode": "Node"
            },
            "name": "RedBlackBST#findNode",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "RedBlackBST#findNode",
                "RedBlackBST#delete"
            ],
            "children": [
                "RedBlackBST#findNode"
            ]
        },
        "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass": {
            "parameters": {},
            "name": "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "ColumnarTranspositionCipher#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ColumnarTranspositionCipher#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#showTable",
                "ColumnarTranspositionCipher#encrpyter"
            ]
        },
        "AVLTree#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "AVLTree#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FibonacciHeap#insert",
                "SkylineProblem#print",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "PrintAMatrixInSpiralOrder#print",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "SkipListTest#print",
                "MedianOfRunningArray#insert",
                "AVLTree#printBalance",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "NodeStack#print",
                "BSTRecursive#insert",
                "SortUtils#print",
                "Trieac#insert",
                "RadixSort#print",
                "PriorityQueue#insert"
            ]
        },
        "Queue#isFull": {
            "parameters": {},
            "name": "Queue#isFull",
            "recursive": "false",
            "inComing": 18,
            "outGoing": 0,
            "numberOfCalls": 18,
            "parents": [
                "CircularBuffer#put",
                "HashMapCuckooHashing#insertKey2HashTable",
                "MinPriorityQueue#insert",
                "CircularQueue#enQueue",
                "CircularQueue#main",
                "PriorityQueue#insert",
                "Queue#insert",
                "Queues#main",
                "StackArray#main",
                "StackArray#push",
                "CircularBufferTest#isFull",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": []
        },
        "VectorCrossProduct#magnitude": {
            "parameters": {},
            "name": "VectorCrossProduct#magnitude",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "ReverseStackUsingRecursion#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "ReverseStackUsingRecursion#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LinkedListStack#push",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "StackArrayList#push",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "NodeStack#push",
                "LinkedListStack#pop",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "CoinChange#printAmount": {
            "parameters": {
                "arr": "int[]"
            },
            "name": "CoinChange#printAmount",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "BSTRecursive#insert": {
            "parameters": {
                "node": "Node",
                "data": "int"
            },
            "name": "BSTRecursive#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "MedianOfRunningArray#insert",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "AVLTree#insert",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "BSTRecursive#insert",
                "Trieac#insert",
                "PriorityQueue#insert"
            ]
        },
        "PriorityQueuesTest#testPQDeletion": {
            "parameters": {},
            "name": "PriorityQueuesTest#testPQDeletion",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StackArrayList#peek",
                "FibonacciHeap#insert",
                "BSTRecursiveGeneric#insert",
                "TrieImp#insert",
                "BloomFilter#insert",
                "AVLSimple#insert",
                "Queue#insert",
                "BSTRecursive#remove",
                "MedianOfRunningArray#insert",
                "PriorityQueue#remove",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "CircleLinkedList#remove",
                "MinPriorityQueue#peek",
                "BSTRecursiveGeneric#remove",
                "BufferedReader#peek",
                "CursorLinkedList#remove",
                "RedBlackBST#insert",
                "MinPriorityQueue#insert",
                "CircularQueue#peek",
                "BSTIterative#remove",
                "Queue#remove",
                "LeftistHeap#insert",
                "LinkedList#insert",
                "PriorityQueue#peek",
                "SkipList#remove",
                "AVLTree#insert",
                "ListIterator#remove",
                "StackArray#peek",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "SinglyLinkedList#insert",
                "QueueWithStack#insert",
                "QueueWithStack#remove",
                "BSTRecursive#insert",
                "Trieac#insert",
                "NodeStack#peek",
                "GenericHashMapUsingArrayList#remove",
                "PriorityQueue#insert",
                "LinkedListStack#peek",
                "GenericHeap#remove"
            ]
        },
        "Map#put": {
            "parameters": {
                "value": "Value",
                "key": "Key"
            },
            "name": "Map#put",
            "recursive": "false",
            "inComing": 156,
            "outGoing": 0,
            "numberOfCalls": 156,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "BinaryToHexadecimal#binToHex",
                "null#null",
                "LFUCache#put",
                "LRUCache#put",
                "MRUCache#put",
                "AdjacencyList#addEdge",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "GenericHashMapUsingArray#reHash",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#delete",
                "LinearProbingHashMap#resize",
                "GenericHeap#add",
                "GenericHeap#swap",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#test",
                "VerticalOrderTraversal#verticalTraversal",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#TwoPointer",
                "TwoSumProblem#HashMap",
                "Trie#add",
                "CountWords#getDictionary",
                "CountingSort#sort",
                "Graph#addEdge",
                "Anagrams#approach4",
                "CheckAnagrams#isAnagrams",
                "Isomorphic#checkStrings",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#isFull",
                "CircularBufferTest#get",
                "CircularBufferTest#put",
                "CircularBufferTest#concurrentTest",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#putTest",
                "MapTest#getTest",
                "MapTest#deleteTest",
                "MapTest#containsTest",
                "MapTest#sizeTest",
                "MapTest#keysTest",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4"
            ],
            "children": []
        },
        "ReverseStringRecursiveTest#shouldAcceptWhenEmptyStringIsPassed": {
            "parameters": {},
            "name": "ReverseStringRecursiveTest#shouldAcceptWhenEmptyStringIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "ReverseString#reverse",
                "Rotation#reverse",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "ReverseStringRecursive#reverse",
                "LowestBasePalindrome#reverse"
            ]
        },
        "SortUtils#print": {
            "parameters": {
                "toPrint": "Object[]"
            },
            "name": "SortUtils#print",
            "recursive": "false",
            "inComing": 209,
            "outGoing": 0,
            "numberOfCalls": 209,
            "parents": [
                "MazeRecursion#mazeRecursion",
                "ColumnarTranspositionCipher#showTable",
                "ProductCipher#main",
                "AnyBaseToAnyBase#main",
                "BinaryToDecimal#main",
                "DecimalToOctal#main",
                "HexToOct#main",
                "HexaDecimalToDecimal#main",
                "OctalToDecimal#main",
                "OctalToHexadecimal#main",
                "BellmanFord#printPath",
                "BellmanFord#go",
                "BellmanFord#show",
                "null#null",
                "Cycle#printAll",
                "dijkstras#dijkstra",
                "FloydWarshall#floydwarshall",
                "AdjacencyList#printGraph",
                "KahnsAlgorithm#main",
                "MinPriorityQueue#print",
                "MinPriorityQueue#main",
                "CreateAndDetectLoop#printList",
                "CreateAndDetectLoop#main",
                "Link#displayLink",
                "SinglyLinkedList#print",
                "SinglyLinkedList#main",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NodeStack#main",
                "ReverseStack#main",
                "AVLTree#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "BSTRecursive#preOrder",
                "BSTRecursive#postOrder",
                "BSTRecursive#inOrder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursiveGeneric#inOrder",
                "BinaryTree#inOrder",
                "BinaryTree#preOrder",
                "BinaryTree#postOrder",
                "BinaryTree#bfs",
                "GenericTree#display_1",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "LevelOrderTraversalHelper#printGivenLevel",
                "Tree#printTopView",
                "RedBlackBST#printTree",
                "RedBlackBST#printTreepre",
                "RedBlackBST#deleteDemo",
                "Node#printInOrder",
                "Node#printPreOrder",
                "Node#printPostOrder",
                "Node#printLevelOrder",
                "Main#main",
                "BoundaryFill#printImageArray",
                "CoinChange#printAmount",
                "LevenshteinDistance#main",
                "MatrixChainMultiplication#main",
                "MatrixChainMultiplication#printOptimalParens",
                "MatrixChainMultiplication#printArray",
                "MatrixChainMultiplication#input",
                "OptimalJobScheduling#showResults",
                "Sum_Of_Subset#main",
                "LeonardoNumber#main",
                "MagicSquare#main",
                "PrimeCheck#main",
                "TrinomialTriangle#printTrinomial",
                "InverseOfMatrix#main",
                "MedianOfRunningArray#main",
                "PalindromePrime#functioning",
                "Sort012D#sort012",
                "ThreeSumProblem#main",
                "TwoSumProblem#main",
                "matrixTranspose#main",
                "BankersAlgorithm#checkSafeSystem",
                "FloydTriangle#main",
                "HappyNumbersSeq#main",
                "Krishnamurthy#main",
                "LowestBasePalindrome#main",
                "PageRank#main",
                "PasswordGen#main",
                "PerlinNoise#main",
                "Rotate_by_90_degree#printMatrix",
                "SkylineProblem#run",
                "SkylineProblem#print",
                "Sudoku#print",
                "Sudoku#main",
                "TowerOfHanoi#main",
                "LinearSearchThread#main",
                "SquareRootBinarySearch#main",
                "BitonicSort#printArray",
                "BogoSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#main",
                "CycleSort#main",
                "DNFSort#printArray",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "MergeSortNoExtraSpace#main",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "RadixSort#print",
                "RadixSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "StoogeSort#main",
                "SwapSort#main",
                "TreeSort#main",
                "LongestPalindromicSubstring#main",
                "SkipListTest#add",
                "SkipListTest#get",
                "SkipListTest#contains",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "SkipListTest#checkSortedOnLowestLayer",
                "TestPrintMatrixInSpiralOrder#testOne",
                "TestPrintMatrixInSpiralOrder#testTwo"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "DynamicArray#stream",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString"
            ]
        },
        "Trieac#printAutoSuggestions": {
            "parameters": {
                "root": "TrieNode",
                "query": "String"
            },
            "name": "Trieac#printAutoSuggestions",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Trieac#main"
            ],
            "children": [
                "Trieac#isLastNode",
                "Trieac#suggestionsRec"
            ]
        },
        "RomanToIntegerTest#testRomanToInteger": {
            "parameters": {},
            "name": "RomanToIntegerTest#testRomanToInteger",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RomanToInteger#romanToInt"
            ]
        },
        "NodeStack#getSize": {
            "parameters": {},
            "name": "NodeStack#getSize",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "DynamicArray#main",
                "NodeStack#push",
                "NodeStack#pop",
                "NodeStack#isEmpty",
                "NodeStack#size",
                "StackOfLinkedList#main",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": []
        },
        "CeilInBinarySearchTreeTest#testKeyPresentRootIsCeil": {
            "parameters": {},
            "name": "CeilInBinarySearchTreeTest#testKeyPresentRootIsCeil",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "CeilInBinarySearchTree#getCeil",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "OrderAgnosticBinarySearchTest#ElementNotFound": {
            "parameters": {},
            "name": "OrderAgnosticBinarySearchTest#ElementNotFound",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OrderAgnosticBinarySearch#BinSearchAlgo"
            ]
        },
        "Node#merge": {
            "parameters": {
                "left": "Node",
                "right": "Node"
            },
            "name": "Node#merge",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "KochSnowflake#IterationStep": {
            "parameters": {
                "vectors": "ArrayList\u003cVector2\u003e"
            },
            "name": "KochSnowflake#IterationStep",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "KochSnowflake#Iterate"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "Complex#subtract",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Vector2#multiply",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "Vector2#subtract",
                "StackArrayList#size",
                "Complex#multiply",
                "MatrixUtil#subtract",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "Vector2#rotate",
                "SkipList#size",
                "DynamicArray#add",
                "MatrixUtil#multiply",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "StrassenMatrixMultiplication#multiply",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "Rotate#rotate",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "CollatzConjectureTest#nextNumberFromOddNumber": {
            "parameters": {},
            "name": "CollatzConjectureTest#nextNumberFromOddNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinearCongruentialGenerator#nextNumber",
                "CollatzConjecture#nextNumber"
            ]
        },
        "FibonacciHeap#findMin": {
            "parameters": {},
            "name": "FibonacciHeap#findMin",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "OptimalJobScheduling#runningCost",
                "FindMin#main",
                "FibonacciHeapTest#testHeap",
                "KDTreeTest#findMin",
                "FindMinTest#testFindMinValue",
                "FindMinTest#test1",
                "FindMinTest#test2"
            ],
            "children": []
        },
        "SinglyLinkedListTest#search": {
            "parameters": {},
            "name": "SinglyLinkedListTest#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedListTest#createSampleList",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "SumOfDigits#sumOfDigitsFast": {
            "parameters": {
                "number": "int"
            },
            "name": "SumOfDigits#sumOfDigitsFast",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "SumOfDigits#main",
                "SumOfDigitsTest#testZero",
                "SumOfDigitsTest#testPositive",
                "SumOfDigitsTest#testNegative"
            ],
            "children": []
        },
        "Kruskal#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Kruskal#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BellmanFord#addEdge",
                "Kruskal#kruskal",
                "AdjacencyList#addEdge",
                "AdjacencyMatrixGraph#addEdge",
                "AllPathsFromSourceToTarget#addEdge",
                "AdjacencyListGraph#addEdge",
                "Kruskal#addEdge",
                "Graph#addEdge"
            ]
        },
        "IntegerToRomanTest#testIntegerToRoman": {
            "parameters": {},
            "name": "IntegerToRomanTest#testIntegerToRoman",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "IntegerToRoman#integerToRoman"
            ]
        },
        "RSATest#testRSA": {
            "parameters": {},
            "name": "RSATest#testRSA",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RSA#decrypt",
                "Blowfish#encrypt",
                "HillCipher#decrypt",
                "Vigenere#decrypt",
                "Vigenere#encrypt",
                "A5Cipher#encrypt",
                "HillCipher#encrypt",
                "Blowfish#decrypt",
                "Polybius#decrypt",
                "RSA#encrypt",
                "Polybius#encrypt"
            ]
        },
        "AffineCipher#encryptMessage": {
            "parameters": {
                "msg": "char[]"
            },
            "name": "AffineCipher#encryptMessage",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "AffineCipher#main"
            ],
            "children": []
        },
        "MiniMaxAlgorithm#getScores": {
            "parameters": {},
            "name": "MiniMaxAlgorithm#getScores",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MiniMaxAlgorithm#main"
            ],
            "children": []
        },
        "RandomNode#getRandom": {
            "parameters": {},
            "name": "RandomNode#getRandom",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "RandomNode#main"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "MergeSortNoExtraSpace#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "MergeSortNoExtraSpace#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "MergeSortNoExtraSpace#call_merge_sort",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "Sparcity#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Sparcity#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Sparcity#sparcity"
            ]
        },
        "CheckTreeIsSymmetricTest#testSymmetricTree": {
            "parameters": {},
            "name": "CheckTreeIsSymmetricTest#testSymmetricTree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "CheckTreeIsSymmetric#isSymmetric",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "Pangram#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Pangram#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Pangram#isPangram"
            ]
        },
        "TreeSortTest#treeSortSingleStringElement": {
            "parameters": {},
            "name": "TreeSortTest#treeSortSingleStringElement",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "BFPRT#getMinKNumsByBFPRT": {
            "parameters": {
                "arr": "int[]",
                "k": "int"
            },
            "name": "BFPRT#getMinKNumsByBFPRT",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BFPRT#main"
            ],
            "children": [
                "BFPRT#getMinKthByBFPRT"
            ]
        },
        "GenericHeap#add": {
            "parameters": {
                "item": "T"
            },
            "name": "GenericHeap#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "Trie#add",
                "Vector2#add",
                "LinearProbingHashMap#size",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "GenericHashMapUsingArray#put",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "NodeStack#size",
                "CircularBufferTest#put",
                "MatrixUtil#add",
                "MRUCache#put",
                "GenericHeap#upHeapify",
                "FibonacciHeap#size",
                "Complex#add",
                "Map#put",
                "GenericHeap#add",
                "SkylineProblem#add",
                "LRUCache#put",
                "SkipListTest#add",
                "Bag#add",
                "LinearProbingHashMap#put",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "OddEvenSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "OddEvenSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OddEvenSort#oddEvenSort"
            ]
        },
        "ReverseStack#insertAtBottom": {
            "parameters": {
                "stack": "Stack\u003cInteger\u003e",
                "element": "int"
            },
            "name": "ReverseStack#insertAtBottom",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LinkedListStack#push",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "GenericArrayListQueue#peek",
                "LinkedQueue#peek",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "StackArrayList#push",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "NodeStack#push",
                "LinkedListStack#pop",
                "CircularQueue#isEmpty",
                "ReverseStack#insertAtBottom",
                "NodeStack#peek",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "PriorityQueue#isEmpty"
            ]
        },
        "FastInverseSqrtTests#testForFifth": {
            "parameters": {},
            "name": "FastInverseSqrtTests#testForFifth",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FastInverseSqrt#inverseSqrt"
            ]
        },
        "Complex#abs": {
            "parameters": {},
            "name": "Complex#abs",
            "recursive": "false",
            "inComing": 35,
            "outGoing": 0,
            "numberOfCalls": 35,
            "parents": [
                "NQueens#isPlacedCorrectly",
                "RgbHsvConversion#hsvToRgb",
                "RgbHsvConversion#approximatelyEqualHsv",
                "GenericHashMapUsingArray#hashFunction",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#get",
                "GenericHashMapUsingArrayList#remove",
                "CheckIfBinaryTreeBalanced#isBalancedRecursive",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "ClosestPair#closestPair",
                "AbsoluteMax#getMaxValue",
                "AbsoluteMin#getMinValue",
                "DistanceFormula#manhattanDistance",
                "DistanceFormula#hammingDistance",
                "DistanceFormula#minkowskiDistance",
                "Complex#divide",
                "GCD#gcd",
                "GCDRecursion#gcd",
                "NumberOfDigits#numberOfDigitsFast",
                "PerfectCube#isPerfectCube",
                "PollardRho#pollardRho",
                "SquareRootWithNewtonRaphsonMethod#squareRoot",
                "InverseOfMatrix#gaussian",
                "AbsoluteValueTest#testGetAbsValue",
                "FFTTest#abs"
            ],
            "children": []
        },
        "TwinPrimeTest#shouldReturn19": {
            "parameters": {},
            "name": "TwinPrimeTest#shouldReturn19",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TwinPrime#getTwinPrime"
            ]
        },
        "LinkedQueue#dequeue": {
            "parameters": {},
            "name": "LinkedQueue#dequeue",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "LinkedQueue#clear",
                "LinkedQueue#main"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "FloodFillTest#testForSingleElementImage": {
            "parameters": {},
            "name": "FloodFillTest#testForSingleElementImage",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FloodFill#floodFill"
            ]
        },
        "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates": {
            "parameters": {},
            "name": "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "Deques#toString",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "HeapElement#toString",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "AdjacencyListGraph#toString",
                "TimSort#sort",
                "Vector2#toString",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "LFSR#toString",
                "PigeonholeSort#sort",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "BitonicSort#sort",
                "LinkedQueue#toString"
            ]
        },
        "HorspoolSearch#firstOccurrence": {
            "parameters": {
                "caseSensitive": "boolean",
                "pattern": "String",
                "text": "String"
            },
            "name": "HorspoolSearch#firstOccurrence",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "HorspoolSearch#findFirst",
                "HorspoolSearch#findFirstInsensitive"
            ],
            "children": [
                "HorspoolSearch#calcShiftValues",
                "HorspoolSearch#charEquals",
                "HorspoolSearch#getShiftValue"
            ]
        },
        "KochSnowflake#Iterate": {
            "parameters": {
                "initialVectors": "ArrayList\u003cVector2\u003e",
                "steps": "int"
            },
            "name": "KochSnowflake#Iterate",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake"
            ],
            "children": [
                "KochSnowflake#IterationStep"
            ]
        },
        "PowerSumTest#testNumberHundredAndPowerThree": {
            "parameters": {},
            "name": "PowerSumTest#testNumberHundredAndPowerThree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PowerSum#powSum"
            ]
        },
        "HammingDistanceTest#checkForLongDataBitsSame": {
            "parameters": {},
            "name": "HammingDistanceTest#checkForLongDataBitsSame",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MatrixUtil#assertThat",
                "FibonacciJavaStreams#assertThat",
                "DepthFirstSearch#assertThat"
            ]
        },
        "Trieac#insert": {
            "parameters": {
                "root": "TrieNode",
                "key": "String"
            },
            "name": "Trieac#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "Trieac#getNode"
            ]
        },
        "LucasSeries#lucasSeries": {
            "parameters": {
                "n": "int"
            },
            "name": "LucasSeries#lucasSeries",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "LucasSeries#main",
                "LucasSeries#lucasSeries"
            ],
            "children": [
                "LucasSeries#lucasSeries"
            ]
        },
        "Volume#volumePrism": {
            "parameters": {
                "baseArea": "double",
                "height": "double"
            },
            "name": "Volume#volumePrism",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "VolumeTest#volume"
            ],
            "children": []
        },
        "Matrix#count": {
            "parameters": {},
            "name": "Matrix#count",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "CountSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "MatrixChainMultiplication#main",
                "SieveOfEratosthenes#findPrimesTill",
                "UnionFind#main",
                "Task#sortByMergeSort",
                "Task1#sortByInsertionSort",
                "Task2#sortByHeapSort"
            ],
            "children": []
        },
        "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven": {
            "parameters": {},
            "name": "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "OctalToHexadecimal#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "OctalToHexadecimal#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "OctalToHexadecimal#octToDec",
                "BufferedReader#close",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "OctalToHexadecimal#decimalToHex",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "BufferedReader#readBlock": {
            "parameters": {},
            "name": "BufferedReader#readBlock",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "BufferedReaderTest#testBlockPractical",
                "BufferedReaderTest#randomTest"
            ],
            "children": [
                "BufferedReader#refill",
                "BufferedReader#pushRefreshData"
            ]
        },
        "Mandelbrot#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Mandelbrot#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Mandelbrot#getImage"
            ]
        },
        "CRCAlgorithm#changeMess": {
            "parameters": {},
            "name": "CRCAlgorithm#changeMess",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "CRCAlgorithmTest#test1",
                "CRCAlgorithmTest#test2"
            ],
            "children": [
                "CursorLinkedList#indexOf"
            ]
        },
        "PerfectNumber#isPerfectNumber2": {
            "parameters": {
                "n": "int"
            },
            "name": "PerfectNumber#isPerfectNumber2",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "PerfectNumberTest#perfectNumber"
            ],
            "children": []
        },
        "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide": {
            "parameters": {},
            "name": "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "LinkedQueue#toString",
                "BinarySearch2dArray#BinarySearch"
            ]
        },
        "Kruskal#addEdge": {
            "parameters": {
                "weight": "int",
                "from": "int",
                "to": "int",
                "graph": "HashSet\u003cEdge\u003e[]"
            },
            "name": "Kruskal#addEdge",
            "recursive": "false",
            "inComing": 73,
            "outGoing": 0,
            "numberOfCalls": 73,
            "parents": [
                "AllPathsFromSourceToTarget#allPathsFromSourceToTarget",
                "A_Star#initializeGraph",
                "ConnectedComponent#main",
                "Graphs#main",
                "KahnsAlgorithm#main",
                "Kruskal#main",
                "Kruskal#kruskal",
                "MatrixGraphs#main",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "AESEncryption#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "AESEncryption#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AESEncryption#bytesToHex",
                "AESEncryption#getSecretEncryptionKey",
                "AESEncryption#decryptText",
                "AESEncryption#encryptText"
            ]
        },
        "CRCAlgorithm#refactor": {
            "parameters": {},
            "name": "CRCAlgorithm#refactor",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "TreeRandomNode#inOrder": {
            "parameters": {
                "node": "Node"
            },
            "name": "TreeRandomNode#inOrder",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "BSTRecursive#inOrder",
                "BSTRecursive#inorder",
                "BSTRecursiveGeneric#inOrder",
                "BSTRecursiveGeneric#inorder",
                "BinaryTree#inOrder",
                "CreateBSTFromSortedArray#test",
                "CreateBinaryTreeFromInorderPreorder#test",
                "TreeRandomNode#inOrder",
                "TreeRandomNode#getRandom",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#inOrder",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "BSTRecursive#inOrder",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "TreeRandomNode#inOrder",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "BogoSortTest#bogoSortNonDuplicateStringArray": {
            "parameters": {},
            "name": "BogoSortTest#bogoSortNonDuplicateStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "GenericHashMapUsingArray#containsKey": {
            "parameters": {
                "key": "K"
            },
            "name": "GenericHashMapUsingArray#containsKey",
            "recursive": "false",
            "inComing": 28,
            "outGoing": 0,
            "numberOfCalls": 28,
            "parents": [
                "LFUCache#put",
                "LRUCache#get",
                "LRUCache#put",
                "MRUCache#get",
                "MRUCache#put",
                "AdjacencyList#addEdge",
                "TopologicalSort#calculateInDegree",
                "Intersection#intersection",
                "VerticalOrderTraversal#verticalTraversal",
                "Fibonacci#fibMemo",
                "Mode#mode",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#HashMap",
                "WordBoggle#explore",
                "Trie#add",
                "null#null",
                "Graph#dijkstra",
                "Graph#printPath",
                "CountWords#getDictionary",
                "CheckAnagrams#isAnagrams",
                "Isomorphic#checkStrings",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "LazySegmentTree#buildTree": {
            "parameters": {
                "array": "int[]",
                "start": "int",
                "end": "int"
            },
            "name": "LazySegmentTree#buildTree",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "null#null",
                "LazySegmentTree#buildTree"
            ],
            "children": [
                "MergeSort#merge",
                "StrandSort#merge",
                "MergeSortRecursive#merge",
                "TimSort#merge",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "LazySegmentTree#buildTree",
                "LeftistHeap#merge"
            ]
        },
        "LevelOrderTraversalTest#testLevelOrderTraversalDifferentHeight": {
            "parameters": {},
            "name": "LevelOrderTraversalTest#testLevelOrderTraversalDifferentHeight",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "LevelOrderTraversal#traverse",
                "ZigzagTraversal#traverse",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "BinarySearch#search": {
            "parameters": {
                "array": "T[]",
                "left": "int",
                "right": "int",
                "key": "T"
            },
            "name": "BinarySearch#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "FloodFillTest#testForImageThree": {
            "parameters": {},
            "name": "FloodFillTest#testForImageThree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FloodFill#floodFill"
            ]
        },
        "MinHeap#deleteElement": {
            "parameters": {
                "elementIndex": "int"
            },
            "name": "MinHeap#deleteElement",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MaxHeap#extractMax",
                "MinHeap#extractMin"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "Queue#isEmpty",
                "MaxHeap#toggleUp",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "MinHeap#getElementKey",
                "LeftistHeap#isEmpty",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "LinkedQueue#size",
                "QueueWithStack#isEmpty",
                "SinglyLinkedList#size",
                "MaxHeap#getElementKey",
                "PriorityQueue#remove",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Map#size",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "MinHeap#getElement",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "BSTIterative#remove",
                "Queue#remove",
                "DynamicArray#getElement",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "SkipList#remove",
                "LinkedList#isEmpty",
                "SkipList#size",
                "HashMapCuckooHashing#isEmpty",
                "MaxHeap#getElement",
                "MinHeap#toggleUp",
                "GenericHeap#isEmpty",
                "MinHeap#toggleDown",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArray#size",
                "ListIterator#remove",
                "CircularBufferTest#isEmpty",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "Heap#getElement",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "CircularQueue#isEmpty",
                "Floor#floor",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "GenericHashMapUsingArrayList#remove",
                "DynamicArray#isEmpty",
                "MaxHeap#toggleDown",
                "GenericHeap#remove",
                "PriorityQueue#isEmpty"
            ]
        },
        "SumWithoutArithmeticOperatorsTest#addZerotoNumber": {
            "parameters": {},
            "name": "SumWithoutArithmeticOperatorsTest#addZerotoNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MinimumSumPartition#getSum",
                "SegmentTree#getSum",
                "SumWithoutArithmeticOperators#getSum"
            ]
        },
        "LFSR#getLastBit": {
            "parameters": {},
            "name": "LFSR#getLastBit",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CompositeLFSR#clock"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "PerlinNoise#generatePerlinNoiseLayer": {
            "parameters": {
                "octave": "int",
                "width": "int",
                "base": "float[][]",
                "height": "int"
            },
            "name": "PerlinNoise#generatePerlinNoiseLayer",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PerlinNoise#generatePerlinNoise"
            ],
            "children": [
                "PerlinNoise#interpolate"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "Queue#toString": {
            "parameters": {},
            "name": "Queue#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "CycleSort#replace",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "OrderAgnosticBinarySearchTest#ElementInMiddle": {
            "parameters": {},
            "name": "OrderAgnosticBinarySearchTest#ElementInMiddle",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OrderAgnosticBinarySearch#BinSearchAlgo"
            ]
        },
        "DecimalToAnyBase#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "DecimalToAnyBase#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BufferedReader#close",
                "ParseInteger#parseInt",
                "DecimalToAnyBase#convertToAnyBase"
            ]
        },
        "Perimeter#perimeterRegularPolygon": {
            "parameters": {
                "side": "float",
                "n": "int"
            },
            "name": "Perimeter#perimeterRegularPolygon",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "PerimeterTest#testcase1",
                "PerimeterTest#testcase2"
            ],
            "children": []
        },
        "HashMapCuckooHashingTest#reHashTableIncreasesTableSize": {
            "parameters": {},
            "name": "HashMapCuckooHashingTest#reHashTableIncreasesTableSize",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "HashMapCuckooHashing#insertKey2HashTable",
                "HashMapCuckooHashing#checkLoadFactor",
                "MainCuckooHashing#main",
                "HashMapCuckooHashingTest#reHashTableIncreasesTableSize"
            ],
            "children": [
                "HashMapCuckooHashing#getNumberOfKeysInTable",
                "HashMapCuckooHashing#reHashTableIncreasesTableSize",
                "HashMapCuckooHashingTest#reHashTableIncreasesTableSize"
            ]
        },
        "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger": {
            "parameters": {},
            "name": "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#containsKey",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#remove",
                "SkipList#size",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "GenericHashMapUsingArrayList#remove",
                "LinearProbingHashMap#put",
                "GenericHeap#remove"
            ]
        },
        "CheckAnagrams#isAnagrams": {
            "parameters": {
                "s1": "String",
                "s2": "String"
            },
            "name": "CheckAnagrams#isAnagrams",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "CheckAnagrams#main",
                "CheckAnagramsTest#CheckAnagrams",
                "CheckAnagramsTest#CheckFalseAnagrams",
                "CheckAnagramsTest#CheckSameWordAnagrams",
                "CheckAnagramsTest#CheckDifferentCasesAnagram"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "Lower#toLowerCase",
                "GenericHeap#get",
                "LowerTest#toLowerCase",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "FloodFillTest#testForImageOne": {
            "parameters": {},
            "name": "FloodFillTest#testForImageOne",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "FloodFill#floodFill"
            ]
        },
        "TreeSortTest#treeSortDoubleArray": {
            "parameters": {},
            "name": "TreeSortTest#treeSortDoubleArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "GenericHeap#updatePriority": {
            "parameters": {
                "item": "T"
            },
            "name": "GenericHeap#updatePriority",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "GenericHeap#upHeapify"
            ]
        },
        "Blowfish#addBin": {
            "parameters": {
                "a": "String",
                "b": "String"
            },
            "name": "Blowfish#addBin",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Blowfish#f"
            ],
            "children": []
        },
        "QuickSelectTest#quickSelect30thPercentileOf10Elements": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelect30thPercentileOf10Elements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "QuickSelectTest#getSortedCopyOfList",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "QuickSelect#select",
                "LFUCache#get",
                "QuickSelectTest#generateRandomIntegers"
            ]
        },
        "EditDistance#minDistance": {
            "parameters": {
                "word1": "String",
                "word2": "String"
            },
            "name": "EditDistance#minDistance",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "EditDistance#main"
            ],
            "children": []
        },
        "LazySegmentTree#getRoot": {
            "parameters": {},
            "name": "LazySegmentTree#getRoot",
            "recursive": "false",
            "inComing": 23,
            "outGoing": 0,
            "numberOfCalls": 23,
            "parents": [
                "CreateBSTFromSortedArray#test",
                "CreateBinaryTreeFromInorderPreorder#test",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test4",
                "KDTreeTest#delete",
                "LazySegmentTreeTest#build",
                "LazySegmentTreeTest#update"
            ],
            "children": []
        },
        "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle": {
            "parameters": {},
            "name": "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "CircleLinkedList#append": {
            "parameters": {
                "value": "E"
            },
            "name": "CircleLinkedList#append",
            "recursive": "false",
            "inComing": 91,
            "outGoing": 0,
            "numberOfCalls": 91,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "DecimalToAnyBase#convertToAnyBase",
                "IntegerToRoman#integerToRoman",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "CircleLinkedList#main",
                "SkipList#toString",
                "Queue#toString",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "FordFulkerson#networkFlow",
                "LongestCommonSubsequence#lcsString",
                "AmicableNumber#findAllInRange",
                "LongDivision#divide",
                "VampireNumber#test",
                "VampireNumber#splitIntoDigits",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate"
            ],
            "children": []
        },
        "QuickSelectTest#quickSelectMinimumOfThreeElements": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectMinimumOfThreeElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "QuickSelect#select"
            ]
        },
        "SkylineProblem#add": {
            "parameters": {
                "left": "int",
                "right": "int",
                "height": "int"
            },
            "name": "SkylineProblem#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": []
        },
        "BubbleSortTest#bubbleSortStringArray": {
            "parameters": {},
            "name": "BubbleSortTest#bubbleSortStringArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "Heap#deleteElement": {
            "parameters": {
                "elementIndex": "int"
            },
            "name": "Heap#deleteElement",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MaxHeap#extractMax",
                "MinHeap#extractMin"
            ],
            "children": []
        },
        "DecimalToOctal#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "DecimalToOctal#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "Pow#pow",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "BufferedReader#close",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "PowRecursion#pow",
                "RadixSort#print"
            ]
        },
        "Blowfish#f": {
            "parameters": {
                "plainText": "String"
            },
            "name": "Blowfish#f",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Blowfish#round",
                "SimpsonIntegration#simpsonsMethod"
            ],
            "children": [
                "Blowfish#xor",
                "Blowfish#hexToBin",
                "Blowfish#addBin"
            ]
        },
        "Complex#getReal": {
            "parameters": {},
            "name": "Complex#getReal",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "FFTTest#getRealtest",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#subtractTest",
                "FFTTest#multiplyWithComplexTest",
                "FFTTest#multiplyWithScalarTest",
                "FFTTest#conjugateTest",
                "FFTTest#divideWithComplexTest",
                "FFTTest#divideWithScalarTest",
                "FFTTest#fft"
            ],
            "children": []
        },
        "LowestBasePalindrome#reverse": {
            "parameters": {
                "str": "String"
            },
            "name": "LowestBasePalindrome#reverse",
            "recursive": "false",
            "inComing": 24,
            "outGoing": 0,
            "numberOfCalls": 24,
            "parents": [
                "DecimalToAnyBase#convertToAnyBase",
                "Link#main",
                "SkipList#toString",
                "FordFulkerson#networkFlow",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "KeithNumber#isKeith",
                "PalindromePrime#functioning",
                "CRC32#crc32",
                "LowestBasePalindrome#lowestBasePalindrome",
                "Palindrome#isPalindrome",
                "ReverseString#main",
                "ReverseString#reverse",
                "ReverseStringRecursive#reverse",
                "Rotation#rotation",
                "ReverseStringRecursiveTest#shouldAcceptWhenEmptyStringIsPassed",
                "ReverseStringRecursiveTest#shouldAcceptNotWhenWhenSingleCharacterIsPassed",
                "ReverseStringRecursiveTest#shouldAcceptWhenStringIsPassed",
                "ReverseStringTest#ReverseStringTest"
            ],
            "children": []
        },
        "AmicableNumber#isAmicableNumber": {
            "parameters": {
                "numberTwo": "int",
                "numberOne": "int"
            },
            "name": "AmicableNumber#isAmicableNumber",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "AmicableNumber#findAllInRange",
                "AmicableNumberTest#testAmicableNumber"
            ],
            "children": [
                "AmicableNumber#recursiveCalcOfDividerSum"
            ]
        },
        "BinaryTree#bfs": {
            "parameters": {
                "localRoot": "Node"
            },
            "name": "BinaryTree#bfs",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "SkipListTest#print",
                "BSTRecursive#remove",
                "dijkstras#print",
                "QueueWithStack#isEmpty",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "MinPriorityQueue#print",
                "CircleLinkedList#remove",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "BSTIterative#remove",
                "Queue#remove",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "SkipList#remove",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "BSTRecursive#add",
                "ListIterator#remove",
                "CircularBufferTest#isEmpty",
                "GenericHashMapUsingArray#remove",
                "DynamicArray#remove",
                "Sudoku#print",
                "DynamicArrayIterator#remove",
                "SinglyLinkedList#print",
                "MatrixUtil#add",
                "CircularQueue#isEmpty",
                "NodeStack#print",
                "Complex#add",
                "QueueWithStack#remove",
                "SortUtils#print",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "RadixSort#print",
                "GenericHashMapUsingArrayList#remove",
                "DynamicArray#isEmpty",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "Node#applyUpdate": {
            "parameters": {
                "diff": "int"
            },
            "name": "Node#applyUpdate",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "AllPathsFromSourceToTargetTest#testForFirstCase": {
            "parameters": {},
            "name": "AllPathsFromSourceToTargetTest#testForFirstCase",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "AllPathsFromSourceToTarget#allPathsFromSourceToTarget"
            ]
        },
        "ClosestPair#createLocation": {
            "parameters": {
                "numberValues": "int"
            },
            "name": "ClosestPair#createLocation",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "KadaneAlogrithmTest#testForSevenElements": {
            "parameters": {},
            "name": "KadaneAlogrithmTest#testForSevenElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "KadaneAlgorithm#max_Sum"
            ]
        },
        "LinkOperations#insertHead": {
            "parameters": {
                "x": "int",
                "doublyLinkedList": "DoublyLinkedList"
            },
            "name": "LinkOperations#insertHead",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "Link#main",
                "LinkOperations#insertElementByIndex",
                "LinkOperations#insertOrdered",
                "SinglyLinkedList#main",
                "PalindromeSinglyLinkedList#main"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "PowerSumTest#testNumberHundredAndPowerTwo": {
            "parameters": {},
            "name": "PowerSumTest#testNumberHundredAndPowerTwo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PowerSum#powSum"
            ]
        },
        "AmicableNumber#recursiveCalcOfDividerSum": {
            "parameters": {
                "div": "int",
                "number": "int"
            },
            "name": "AmicableNumber#recursiveCalcOfDividerSum",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "AmicableNumber#isAmicableNumber",
                "AmicableNumber#recursiveCalcOfDividerSum"
            ],
            "children": [
                "AmicableNumber#recursiveCalcOfDividerSum"
            ]
        },
        "LinearProbingHashMap#resize": {
            "parameters": {
                "newSize": "int"
            },
            "name": "LinearProbingHashMap#resize",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "LinearProbingHashMap#put",
                "LinearProbingHashMap#delete",
                "StackArray#push",
                "StackArray#pop"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArray#put",
                "DynamicArray#put",
                "CircularBufferTest#put",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "NodeStack#peek": {
            "parameters": {},
            "name": "NodeStack#peek",
            "recursive": "false",
            "inComing": 76,
            "outGoing": 0,
            "numberOfCalls": 76,
            "parents": [
                "CircularQueue#main",
                "GenericArrayListQueue#main",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#postorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "VerticalOrderTraversal#verticalTraversal",
                "FordFulkerson#networkFlow",
                "BufferedReader#peek",
                "MedianOfRunningArray#median",
                "Huffman#main",
                "QueueWithStack#peekFront",
                "QueueWithStack#peekBack",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StrandSort#merge",
                "LinkedQueueTest#testQue",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BufferedReaderTest#testPeeks",
                "BufferedReaderTest#testMixes",
                "BufferedReaderTest#testBlockPractical"
            ],
            "children": [
                "NodeStack#getData"
            ]
        },
        "SumOfDigits#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "SumOfDigits#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SumOfDigits#sumOfDigits",
                "SumOfDigits#sumOfDigitsRecursion",
                "SumOfDigits#sumOfDigitsFast"
            ]
        },
        "QuickSelectTest#quickSelectIndexOutOfLeftBound": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectIndexOutOfLeftBound",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "QuickSelect#select"
            ]
        },
        "PalindromePrime#functioning": {
            "parameters": {
                "y": "int"
            },
            "name": "PalindromePrime#functioning",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "PalindromePrime#main"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "ReverseString#reverse",
                "Rotation#reverse",
                "PalindromePrime#reverse",
                "LinkOperations#reverse",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "ReverseStringRecursive#reverse",
                "NodeStack#print",
                "PalindromePrime#prime",
                "SortUtils#print",
                "LowestBasePalindrome#reverse",
                "RadixSort#print"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "SortUtilsRandomGeneratorTest#generateArray",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "FindKthNumber#generateArray",
                "PancakeSort#sort",
                "TreeSort#sort",
                "CircularBufferTest#generateInt",
                "LinkListSort#isSorted",
                "QuickSortTest#getSortAlgorithm",
                "SortUtils#isSorted",
                "HeapSort#sort",
                "SortUtilsRandomGenerator#generateArray",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "BogoSort#isSorted",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "SortUtilsRandomGenerator#generateInt",
                "BitonicSort#sort"
            ]
        },
        "SquareRootBinarySearch#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "SquareRootBinarySearch#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RootPrecision#squareRoot",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SquareRootBinarySearch#squareRoot",
                "SortUtils#print",
                "RadixSort#print",
                "SquareRootWithNewtonRaphsonMethod#squareRoot"
            ]
        },
        "WineProblem#WPTD": {
            "parameters": {
                "arr": "int[]",
                "strg": "int[][]",
                "ei": "int",
                "si": "int"
            },
            "name": "WineProblem#WPTD",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "WineProblem#WPTD",
                "WineProblem#main"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max",
                "WineProblem#WPTD"
            ]
        },
        "NextFitCPUTest#testFitForUseOfOneBlock": {
            "parameters": {},
            "name": "NextFitCPUTest#testFitForUseOfOneBlock",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "WiggleSortTest#WiggleTestStrings": {
            "parameters": {},
            "name": "WiggleSortTest#WiggleTestStrings",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "RangeInSortedArray#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "RangeInSortedArray#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RangeInSortedArray#sortedRange",
                "HeapElement#equals"
            ]
        },
        "ColumnarTranspositionCipher#numberOfRows": {
            "parameters": {
                "word": "String"
            },
            "name": "ColumnarTranspositionCipher#numberOfRows",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ColumnarTranspositionCipher#tableBuilder"
            ],
            "children": []
        },
        "SJFSchedulingTest#scheduling": {
            "parameters": {},
            "name": "SJFSchedulingTest#scheduling",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "FCFSScheduling#scheduleProcesses",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "SJFSchedulingTest#initialisation1",
                "LFUCache#get",
                "SJFScheduling#scheduleProcesses"
            ]
        },
        "CollatzConjectureTest#setUp": {
            "parameters": {},
            "name": "CollatzConjectureTest#setUp",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "PathAndDistance#getPath": {
            "parameters": {},
            "name": "PathAndDistance#getPath",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "A_Star#aStar"
            ],
            "children": []
        },
        "DutchNationalFlagSortTest#DNFSTestEvenMidGiven": {
            "parameters": {},
            "name": "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "CompositeLFSR#getMajorityBit": {
            "parameters": {},
            "name": "CompositeLFSR#getMajorityBit",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "CompositeLFSR#clock"
            ],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "LFSRTest#getClockBit",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFSR#getClockBit",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "DyanamicProgrammingKnapsack#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "DyanamicProgrammingKnapsack#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DyanamicProgrammingKnapsack#knapSack",
                "KnapsackMemoization#knapSack",
                "Knapsack#knapSack",
                "BruteForceKnapsack#knapSack"
            ]
        },
        "Blowfish#round": {
            "parameters": {
                "plainText": "String",
                "time": "int"
            },
            "name": "Blowfish#round",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "Blowfish#encrypt",
                "Blowfish#decrypt",
                "RgbHsvConversion#convertToInt",
                "BernoulliHeightStrategy#height",
                "DudeneyNumber#isDudeney",
                "Complex#divide"
            ],
            "children": [
                "SimpsonIntegration#f",
                "Blowfish#xor",
                "Blowfish#f"
            ]
        },
        "ZigzagTraversalTest#testZigzagTraversalCompleteTree": {
            "parameters": {},
            "name": "ZigzagTraversalTest#testZigzagTraversalCompleteTree",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TreeTestUtils#createTree",
                "LevelOrderTraversal#traverse",
                "ZigzagTraversal#traverse",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "SlowSortTest#slowSortEmptyArray": {
            "parameters": {},
            "name": "SlowSortTest#slowSortEmptyArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "Graph#addEdge": {
            "parameters": {
                "next": "String",
                "label": "String"
            },
            "name": "Graph#addEdge",
            "recursive": "false",
            "inComing": 73,
            "outGoing": 0,
            "numberOfCalls": 73,
            "parents": [
                "AllPathsFromSourceToTarget#allPathsFromSourceToTarget",
                "A_Star#initializeGraph",
                "ConnectedComponent#main",
                "Graphs#main",
                "KahnsAlgorithm#main",
                "Kruskal#main",
                "Kruskal#kruskal",
                "MatrixGraphs#main",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SinglyLinkedList#isEmpty",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "QueueWithStack#isEmpty",
                "GenericHashMapUsingArray#put",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "SkipListTest#get",
                "SkipList#get",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "GenericHeap#get",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "CircularQueue#isEmpty",
                "LFUCache#get",
                "MRUCache#put",
                "Complex#add",
                "Map#put",
                "GenericHeap#add",
                "SkylineProblem#add",
                "LRUCache#put",
                "SkipListTest#add",
                "Bag#add",
                "DynamicArray#isEmpty",
                "LinearProbingHashMap#put",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "LinkListSortTest#testForEightElements": {
            "parameters": {},
            "name": "LinkListSortTest#testForEightElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "InsertionSortTest#testWithStringArray": {
            "parameters": {
                "sortAlgorithm": "Function\u003cString[],String[]\u003e"
            },
            "name": "InsertionSortTest#testWithStringArray",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "InsertionSortTest#insertionSortClassicalWithStringArrayShouldPass"
            ],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "LRUCache#put": {
            "parameters": {
                "value": "V",
                "key": "K"
            },
            "name": "LRUCache#put",
            "recursive": "false",
            "inComing": 156,
            "outGoing": 0,
            "numberOfCalls": 156,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "BinaryToHexadecimal#binToHex",
                "null#null",
                "LFUCache#put",
                "LRUCache#put",
                "MRUCache#put",
                "AdjacencyList#addEdge",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "GenericHashMapUsingArray#reHash",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#delete",
                "LinearProbingHashMap#resize",
                "GenericHeap#add",
                "GenericHeap#swap",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#test",
                "VerticalOrderTraversal#verticalTraversal",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#TwoPointer",
                "TwoSumProblem#HashMap",
                "Trie#add",
                "CountWords#getDictionary",
                "CountingSort#sort",
                "Graph#addEdge",
                "Anagrams#approach4",
                "CheckAnagrams#isAnagrams",
                "Isomorphic#checkStrings",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#isFull",
                "CircularBufferTest#get",
                "CircularBufferTest#put",
                "CircularBufferTest#concurrentTest",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#putTest",
                "MapTest#getTest",
                "MapTest#deleteTest",
                "MapTest#containsTest",
                "MapTest#sizeTest",
                "MapTest#keysTest",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "MRUCache#addNewEntry",
                "GenericHashMapUsingArrayList#put",
                "LRUCache#addNewEntry",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "LRUCache#moveNodeToLast",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "HeapElement#getKey",
                "PriorityQueue#remove",
                "Entry#setValue",
                "GenericHashMapUsingArray#put",
                "Entry#setKey",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#containsKey",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "DynamicArray#put",
                "LRUCache#evict",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#remove",
                "SkipList#size",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "MRUCache#evict",
                "Deques#size",
                "HeapNode#getKey",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "Map#put",
                "GenericHashMapUsingArray#containsKey",
                "LRUCache#put",
                "Entry#getKey",
                "GenericHashMapUsingArrayList#remove",
                "LinearProbingHashMap#put",
                "GenericHeap#remove"
            ]
        },
        "BinaryInsertionSort#binaryInsertSort": {
            "parameters": {
                "array": "int[]"
            },
            "name": "BinaryInsertionSort#binaryInsertSort",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "BinaryInsertionSortTest#BinaryInsertionSortTestNonDuplicate",
                "BinaryInsertionSortTest#BinaryInsertionSortTestDuplicate"
            ],
            "children": []
        },
        "LRUCacheTest#putAndGetStringValues": {
            "parameters": {},
            "name": "LRUCacheTest#putAndGetStringValues",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "Node#printPreOrder": {
            "parameters": {},
            "name": "Node#printPreOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "SimpleSortTest#simpleSortDuplicateIntegerArray": {
            "parameters": {},
            "name": "SimpleSortTest#simpleSortDuplicateIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "BestFitCPUTest#testFitForMoreBlocksNoFit": {
            "parameters": {},
            "name": "BestFitCPUTest#testFitForMoreBlocksNoFit",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "SortUtilsRandomGeneratorTest#generateDouble": {
            "parameters": {},
            "name": "SortUtilsRandomGeneratorTest#generateDouble",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "SortUtilsRandomGenerator#generateArray",
                "SortUtilsRandomGeneratorTest#generateDouble"
            ],
            "children": [
                "MatrixUtil#assertThat",
                "FibonacciJavaStreams#assertThat",
                "DepthFirstSearch#assertThat",
                "SortUtilsRandomGenerator#generateDouble",
                "SortUtilsRandomGeneratorTest#generateDouble"
            ]
        },
        "CreateBSTFromSortedArray#test": {
            "parameters": {
                "array": "int[]"
            },
            "name": "CreateBSTFromSortedArray#test",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "CreateBSTFromSortedArray#main",
                "CreateBinaryTreeFromInorderPreorder#main",
                "VampireNumber#main",
                "VectorCrossProduct#main",
                "ColorContrastRatio#main"
            ],
            "children": [
                "BSTRecursiveGeneric#inOrder",
                "BSTRecursive#inOrder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursive#preOrder",
                "CreateBSTFromSortedArray#createBst",
                "BSTRecursive#postOrder",
                "TreeRandomNode#inOrder",
                "LazySegmentTree#getRoot"
            ]
        },
        "SkipListTest#add": {
            "parameters": {},
            "name": "SkipListTest#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "Trie#add",
                "Vector2#add",
                "SkipListTest#print",
                "LinearProbingHashMap#size",
                "dijkstras#print",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "MinPriorityQueue#print",
                "GenericHeap#size",
                "Map#size",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "Sudoku#print",
                "NodeStack#size",
                "SinglyLinkedList#print",
                "MatrixUtil#add",
                "NodeStack#print",
                "FibonacciHeap#size",
                "Complex#add",
                "SortUtils#print",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "RadixSort#print",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "TestArmstrong#testArmstrong": {
            "parameters": {},
            "name": "TestArmstrong#testArmstrong",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MatrixUtil#assertThat",
                "Armstrong#isArmstrong",
                "FibonacciJavaStreams#assertThat",
                "DepthFirstSearch#assertThat"
            ]
        },
        "RgbHsvConversion#getRgbBySection": {
            "parameters": {
                "hueSection": "double",
                "secondLargestComponent": "double",
                "chroma": "double",
                "matchValue": "double"
            },
            "name": "RgbHsvConversion#getRgbBySection",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "RgbHsvConversion#hsvToRgb"
            ],
            "children": [
                "RgbHsvConversion#convertToInt"
            ]
        },
        "Node#getRight": {
            "parameters": {},
            "name": "Node#getRight",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "TestPrintMatrixInSpiralOrder#testOne": {
            "parameters": {},
            "name": "TestPrintMatrixInSpiralOrder#testOne",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "RgbHsvConversion#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "RgbHsvConversion#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "RgbHsvConversion#hsvToRgb",
                "RgbHsvConversion#approximatelyEqualHsv",
                "RgbHsvConversion#rgbToHsv",
                "HeapElement#equals"
            ]
        },
        "Bag#add": {
            "parameters": {
                "element": "Element"
            },
            "name": "Bag#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": []
        },
        "LeastCommonMultiple#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LeastCommonMultiple#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LeastCommonMultiple#lcm"
            ]
        },
        "Kosaraju#kosaraju": {
            "parameters": {
                "v": "int",
                "list": "List\u003cList\u003cInteger\u003e\u003e"
            },
            "name": "Kosaraju#kosaraju",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes"
            ],
            "children": [
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#sortEdgesByLowestFinishTime"
            ]
        },
        "HashMap#deleteHash": {
            "parameters": {
                "key": "int"
            },
            "name": "HashMap#deleteHash",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "Main#main"
            ],
            "children": [
                "Map#delete",
                "LinkOperations#delete",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "FibonacciHeap#delete",
                "SinglyLinkedList#delete",
                "RedBlackBST#delete",
                "HashMap#hashing",
                "KDTreeTest#delete",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "BSTRecursiveGeneric#delete",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "BestFitCPUTest#testFitForSameInputDifferentQuery": {
            "parameters": {},
            "name": "BestFitCPUTest#testFitForSameInputDifferentQuery",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "OptimalJobScheduling#calculateCost": {
            "parameters": {},
            "name": "OptimalJobScheduling#calculateCost",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "OptimalJobScheduling#execute"
            ],
            "children": [
                "OptimalJobScheduling#runningCost"
            ]
        },
        "PowRecursion#pow": {
            "parameters": {
                "a": "int",
                "b": "int"
            },
            "name": "PowRecursion#pow",
            "recursive": "false",
            "inComing": 54,
            "outGoing": 0,
            "numberOfCalls": 54,
            "parents": [
                "PowerSum#power",
                "BinaryToDecimal#binaryToDecimal",
                "BinaryToHexadecimal#binToHex",
                "DecimalToBinary#conventionalConversion",
                "DecimalToBinary#bitwiseConversion",
                "DecimalToOctal#main",
                "HexToOct#decimal2octal",
                "null#null",
                "ClosestPair#closestPair",
                "ClosestPair#bruteForce",
                "Fibonacci#fibBinet",
                "Area#surfaceAreaCone",
                "Armstrong#isArmstrong",
                "AutomorphicNumber#isAutomorphic",
                "DistanceFormula#euclideanDistance",
                "DistanceFormula#minkowskiDistance",
                "DudeneyNumber#isDudeney",
                "FrizzyNumber#getNthFrizzy",
                "PerfectCube#isPerfectCube",
                "Pow#main",
                "PowRecursion#main",
                "PowRecursion#pow",
                "SimpsonIntegration#f",
                "StandardDeviation#stdDev",
                "ColorContrastRatio#getColor",
                "GuassLegendre#pi",
                "GuassLegendre#update",
                "LinearCongruentialGenerator#main",
                "MiniMaxAlgorithm#getRandomScores",
                "RabinKarp#searchPat",
                "RootPrecision#squareRoot"
            ],
            "children": [
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "StackArray#makeEmpty": {
            "parameters": {},
            "name": "StackArray#makeEmpty",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "MatrixUtil#hasEqualSizes": {
            "parameters": {
                "matrix2": "BigDecimal[][]",
                "matrix1": "BigDecimal[][]"
            },
            "name": "MatrixUtil#hasEqualSizes",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MatrixUtil#operate"
            ],
            "children": [
                "TrieImp#isValid",
                "MatrixUtil#isValid",
                "Solution#isValid",
                "ValidParentheses#isValid"
            ]
        },
        "CalculateMaxOfMinTest#testForSevenElements": {
            "parameters": {},
            "name": "CalculateMaxOfMinTest#testForSevenElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MaximumMinimumWindow#calculateMaxOfMin",
                "CalculateMaxOfMin#calculateMaxOfMin"
            ]
        },
        "Entry#getKey": {
            "parameters": {},
            "name": "Entry#getKey",
            "recursive": "false",
            "inComing": 30,
            "outGoing": 0,
            "numberOfCalls": 30,
            "parents": [
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "LinkedList#findKey",
                "LinkedList#delete",
                "LinkedList#display",
                "FibonacciHeap#delete",
                "FibonacciHeap#decreaseKey",
                "FibonacciHeap#updateMin",
                "FibonacciHeap#fromBuckets",
                "FibonacciHeap#link",
                "MaxHeap#getElementKey",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#getElementKey",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "Graph#dijkstra",
                "CountingSort#sort",
                "CountingSort#streamSort",
                "FibonacciHeapTest#testHeap"
            ],
            "children": []
        },
        "DudeneyNumber#isDudeney": {
            "parameters": {
                "n": "int"
            },
            "name": "DudeneyNumber#isDudeney",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "DudeneyNumberTest#isDudeney"
            ],
            "children": [
                "Pow#pow",
                "Blowfish#round",
                "PowRecursion#pow"
            ]
        },
        "LargeTreeNode#setChildNodes": {
            "parameters": {
                "childNodes": "Collection\u003cLargeTreeNode\u003cE\u003e\u003e"
            },
            "name": "LargeTreeNode#setChildNodes",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "BucketSort#min": {
            "parameters": {
                "arr": "int[]"
            },
            "name": "BucketSort#min",
            "recursive": "false",
            "inComing": 39,
            "outGoing": 0,
            "numberOfCalls": 39,
            "parents": [
                "RgbHsvConversion#rgbToHsv",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "MaxHeap#toggleDown",
                "MinHeap#toggleDown",
                "VerticalOrderTraversal#verticalTraversal",
                "ClosestPair#closestPair",
                "EditDistance#editDistance",
                "FordFulkerson#networkFlow",
                "MinimumPathSum#minimumPathSum",
                "MinimumSumPartition#getMin",
                "FindMin#main",
                "FindMinRecursion#main",
                "FindMinRecursion#min",
                "MinValue#main",
                "NthUglyNumber#getNthUglyNo",
                "BFPRT#medianOfMedians",
                "MiniMaxAlgorithm#miniMax",
                "ExponentialSearch#find",
                "FibonacciSearch#find",
                "JumpSearch#find",
                "QuickSelect#partition",
                "BucketSort#bucketSort",
                "TimSort#sort",
                "QuickSelectTest#quickSelectMinimumOfManyElements"
            ],
            "children": []
        },
        "HashMapCuckooHashing#checkTableContainsKey": {
            "parameters": {
                "key": "int"
            },
            "name": "HashMapCuckooHashing#checkTableContainsKey",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "HashMapCuckooHashing#insertKey2HashTable",
                "HashMapCuckooHashingTest#containsKey",
                "HashMapCuckooHashingTest#avoidInfiniteLoops"
            ],
            "children": [
                "HashMapCuckooHashing#hashFunction1",
                "HashMapCuckooHashing#hashFunction2",
                "HeapElement#equals"
            ]
        },
        "RadixSort#print": {
            "parameters": {
                "arr": "int[]",
                "n": "int"
            },
            "name": "RadixSort#print",
            "recursive": "false",
            "inComing": 209,
            "outGoing": 0,
            "numberOfCalls": 209,
            "parents": [
                "MazeRecursion#mazeRecursion",
                "ColumnarTranspositionCipher#showTable",
                "ProductCipher#main",
                "AnyBaseToAnyBase#main",
                "BinaryToDecimal#main",
                "DecimalToOctal#main",
                "HexToOct#main",
                "HexaDecimalToDecimal#main",
                "OctalToDecimal#main",
                "OctalToHexadecimal#main",
                "BellmanFord#printPath",
                "BellmanFord#go",
                "BellmanFord#show",
                "null#null",
                "Cycle#printAll",
                "dijkstras#dijkstra",
                "FloydWarshall#floydwarshall",
                "AdjacencyList#printGraph",
                "KahnsAlgorithm#main",
                "MinPriorityQueue#print",
                "MinPriorityQueue#main",
                "CreateAndDetectLoop#printList",
                "CreateAndDetectLoop#main",
                "Link#displayLink",
                "SinglyLinkedList#print",
                "SinglyLinkedList#main",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NodeStack#main",
                "ReverseStack#main",
                "AVLTree#main",
                "BSTIterative#inorder",
                "BSTIterative#postorder",
                "BSTIterative#preorder",
                "BSTRecursive#preOrder",
                "BSTRecursive#postOrder",
                "BSTRecursive#inOrder",
                "BSTRecursiveGeneric#preOrder",
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursiveGeneric#inOrder",
                "BinaryTree#inOrder",
                "BinaryTree#preOrder",
                "BinaryTree#postOrder",
                "BinaryTree#bfs",
                "GenericTree#display_1",
                "GenericTree#preorder",
                "GenericTree#postorder",
                "GenericTree#levelorder",
                "LevelOrderTraversalHelper#printGivenLevel",
                "Tree#printTopView",
                "RedBlackBST#printTree",
                "RedBlackBST#printTreepre",
                "RedBlackBST#deleteDemo",
                "Node#printInOrder",
                "Node#printPreOrder",
                "Node#printPostOrder",
                "Node#printLevelOrder",
                "Main#main",
                "BoundaryFill#printImageArray",
                "CoinChange#printAmount",
                "LevenshteinDistance#main",
                "MatrixChainMultiplication#main",
                "MatrixChainMultiplication#printOptimalParens",
                "MatrixChainMultiplication#printArray",
                "MatrixChainMultiplication#input",
                "OptimalJobScheduling#showResults",
                "Sum_Of_Subset#main",
                "LeonardoNumber#main",
                "MagicSquare#main",
                "PrimeCheck#main",
                "TrinomialTriangle#printTrinomial",
                "InverseOfMatrix#main",
                "MedianOfRunningArray#main",
                "PalindromePrime#functioning",
                "Sort012D#sort012",
                "ThreeSumProblem#main",
                "TwoSumProblem#main",
                "matrixTranspose#main",
                "BankersAlgorithm#checkSafeSystem",
                "FloydTriangle#main",
                "HappyNumbersSeq#main",
                "Krishnamurthy#main",
                "LowestBasePalindrome#main",
                "PageRank#main",
                "PasswordGen#main",
                "PerlinNoise#main",
                "Rotate_by_90_degree#printMatrix",
                "SkylineProblem#run",
                "SkylineProblem#print",
                "Sudoku#print",
                "Sudoku#main",
                "TowerOfHanoi#main",
                "LinearSearchThread#main",
                "SquareRootBinarySearch#main",
                "BitonicSort#printArray",
                "BogoSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#main",
                "CycleSort#main",
                "DNFSort#printArray",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "MergeSortNoExtraSpace#main",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "RadixSort#print",
                "RadixSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "StoogeSort#main",
                "SwapSort#main",
                "TreeSort#main",
                "LongestPalindromicSubstring#main",
                "SkipListTest#add",
                "SkipListTest#get",
                "SkipListTest#contains",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "SkipListTest#checkSortedOnLowestLayer",
                "TestPrintMatrixInSpiralOrder#testOne",
                "TestPrintMatrixInSpiralOrder#testTwo"
            ],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "BeadSortTest#bogoSortNonDuplicateIntegerArray": {
            "parameters": {},
            "name": "BeadSortTest#bogoSortNonDuplicateIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "DutchNationalFlagSortTest#DNFSTestOdd": {
            "parameters": {},
            "name": "DutchNationalFlagSortTest#DNFSTestOdd",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "ConvolutionFFT#convolutionFFT": {
            "parameters": {
                "a": "ArrayList\u003cFFT.Complex\u003e",
                "b": "ArrayList\u003cFFT.Complex\u003e"
            },
            "name": "ConvolutionFFT#convolutionFFT",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FFTBluestein#fftBluestein"
            ],
            "children": [
                "SinglyLinkedList#clear",
                "GenericHashMapUsingArray#size",
                "CircularConvolutionFFT#padding",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "SinglyLinkedListTest#clear",
                "GenericHashMapUsingArrayList#get",
                "LinkedQueue#clear",
                "Vector2#multiply",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "Complex#multiply",
                "FFTTest#fft",
                "CircularBufferTest#get",
                "ConvolutionFFT#padding",
                "GenericHeap#get",
                "SkipList#size",
                "FFT#fft",
                "LeftistHeap#clear",
                "DynamicArray#add",
                "MatrixUtil#multiply",
                "StackArray#size",
                "BSTRecursive#add",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "StrassenMatrixMultiplication#multiply",
                "FibonacciHeap#size",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "GenericHashMapUsingArrayList#remove": {
            "parameters": {
                "key": "K"
            },
            "name": "GenericHashMapUsingArrayList#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "HeapElement#hashCode",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "CircularBuffer#get",
                "GenericHeap#size",
                "FFTTest#abs",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#remove",
                "SkipList#size",
                "HeapElement#equals",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "QueueWithStack#remove",
                "Complex#abs",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove"
            ]
        },
        "DigitalRoot#single": {
            "parameters": {
                "n": "int"
            },
            "name": "DigitalRoot#single",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "DigitalRoot#digitalRoot",
                "DigitalRoot#single"
            ],
            "children": [
                "DigitalRoot#single"
            ]
        },
        "DutchNationalFlagSortTest#DNFSTestOddStrings": {
            "parameters": {},
            "name": "DutchNationalFlagSortTest#DNFSTestOddStrings",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "PriorityQueue#insert": {
            "parameters": {
                "value": "int"
            },
            "name": "PriorityQueue#insert",
            "recursive": "false",
            "inComing": 84,
            "outGoing": 0,
            "numberOfCalls": 84,
            "parents": [
                "HashMap#insertHash",
                "MinPriorityQueue#main",
                "CountSinglyLinkedListRecursion#main",
                "CreateAndDetectLoop#main",
                "MergeSortedSinglyLinkedList#main",
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "Queues#main",
                "AVLSimple#insert",
                "AVLTree#main",
                "BSTRecursive#insert",
                "BSTRecursive#add",
                "BSTRecursiveGeneric#insert",
                "BSTRecursiveGeneric#add",
                "RedBlackBST#insertDemo",
                "TreeTraversal#main",
                "Node#insert",
                "TrieImp#main",
                "AmicableNumber#findAllInRange",
                "MedianOfRunningArray#main",
                "Trieac#main",
                "QueueUsingTwoStacks#main",
                "BloomFilterTest#test1",
                "BloomFilterTest#test2",
                "FibonacciHeapTest#testHeap",
                "LeftistHeapTest#testLeftistHeap",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "StackArray#isFull",
                "PriorityQueue#isFull",
                "CircularQueue#isFull",
                "HashMapCuckooHashing#isFull",
                "PriorityQueue#swim",
                "MinPriorityQueue#isFull",
                "CircularBufferTest#isFull",
                "Queue#isFull",
                "CircularBuffer#isFull"
            ]
        },
        "OrderAgnosticBinarySearchTest#LeftHalfDescOrder": {
            "parameters": {},
            "name": "OrderAgnosticBinarySearchTest#LeftHalfDescOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "OrderAgnosticBinarySearch#BinSearchAlgo"
            ]
        },
        "Mandelbrot#getDistance": {
            "parameters": {
                "figureX": "double",
                "figureY": "double",
                "maxStep": "int"
            },
            "name": "Mandelbrot#getDistance",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "A_Star#aStar",
                "Mandelbrot#getImage"
            ],
            "children": []
        },
        "VampireNumber#test": {
            "parameters": {
                "startValue": "int",
                "stopValue": "int"
            },
            "name": "VampireNumber#test",
            "recursive": "false",
            "inComing": 12,
            "outGoing": 0,
            "numberOfCalls": 12,
            "parents": [
                "CreateBSTFromSortedArray#main",
                "CreateBinaryTreeFromInorderPreorder#main",
                "VampireNumber#main",
                "VectorCrossProduct#main",
                "ColorContrastRatio#main"
            ],
            "children": [
                "CursorLinkedList#append",
                "VampireNumber#isVampireNumber",
                "CircleLinkedList#append"
            ]
        },
        "CRC32#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "CRC32#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "CRC32#crc32"
            ]
        },
        "Deques#addFirst": {
            "parameters": {
                "val": "T"
            },
            "name": "Deques#addFirst",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Deques#main",
                "PostOrderTraversal#iterativePostOrder",
                "TopologicalSort#sort"
            ],
            "children": []
        },
        "SJFScheduling#scheduleProcesses": {
            "parameters": {},
            "name": "SJFScheduling#scheduleProcesses",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "FCFSSchedulingTest#testingProcesses",
                "SJFSchedulingTest#scheduling",
                "SJFSchedulingTest#schedulingOf_TwoProcesses",
                "SJFSchedulingTest#schedulingOfA_ShortestJobArrivingLast",
                "SJFSchedulingTest#scheduling_WithProcessesNotComingBackToBack",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "SJFScheduling#findShortestJob",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "Queue#remove",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#remove",
                "SkipList#size",
                "DynamicArray#add",
                "ProcessDetails#getBurstTime",
                "StackArray#size",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "ProcessDetails#getProcessId",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "ProcessDetails#getArrivalTime",
                "FibonacciHeap#size",
                "Complex#add",
                "QueueWithStack#remove",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "Task#task": {
            "parameters": {
                "i": "int",
                "j": "int",
                "n": "int[]"
            },
            "name": "Task#task",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "Task#sortByMergeSort",
                "Task#task",
                "Task2#sortByHeapSort"
            ],
            "children": [
                "Task2#task",
                "Task2#task1",
                "Task#task1",
                "Task#task"
            ]
        },
        "BSTRecursiveGeneric#delete": {
            "parameters": {
                "node": "Node\u003cT\u003e",
                "data": "T"
            },
            "name": "BSTRecursiveGeneric#delete",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "HashMap#deleteHash",
                "LinkedList#delete",
                "MinPriorityQueue#heapSort",
                "Link#main",
                "LinkOperations#removeDuplicates",
                "SinglyLinkedList#main",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "BSTRecursive#remove",
                "BSTRecursiveGeneric#delete",
                "BSTRecursiveGeneric#remove",
                "RedBlackBST#deleteDemo",
                "TrieImp#main",
                "MapTest#deleteTest",
                "MapTest#sizeTest",
                "KDTreeTest#delete"
            ],
            "children": [
                "Map#delete",
                "LinkOperations#delete",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "FibonacciHeap#delete",
                "SinglyLinkedList#delete",
                "RedBlackBST#delete",
                "KDTreeTest#delete",
                "LinkedList#delete",
                "MinPriorityQueue#delete",
                "BSTRecursiveGeneric#delete",
                "LinearProbingHashMap#delete",
                "TrieImp#delete"
            ]
        },
        "HammingDistanceTest#checkForDifferentBits": {
            "parameters": {},
            "name": "HammingDistanceTest#checkForDifferentBits",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MatrixUtil#assertThat",
                "FibonacciJavaStreams#assertThat",
                "DepthFirstSearch#assertThat"
            ]
        },
        "PythagoreanTriple#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PythagoreanTriple#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PythagoreanTriple#isPythagTriple"
            ]
        },
        "UniquePathsTests#testForTwoElements": {
            "parameters": {},
            "name": "UniquePathsTests#testForTwoElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "UniquePaths#uniquePaths"
            ]
        },
        "BFPRT#copyArray": {
            "parameters": {
                "arr": "int[]"
            },
            "name": "BFPRT#copyArray",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "BFPRT#getMinKthByBFPRT"
            ],
            "children": []
        },
        "AnyBaseToAnyBase#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "AnyBaseToAnyBase#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "AnyBaseToAnyBase#base2base",
                "AnyBaseToAnyBase#validForBase",
                "BufferedReader#close",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "LowestBasePalindrome#base2base",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "LinkListSortTest#testForSevenElements": {
            "parameters": {},
            "name": "LinkListSortTest#testForSevenElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "AVLTree#setBalance": {
            "parameters": {
                "nodes": "Node"
            },
            "name": "AVLTree#setBalance",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "AVLTree#rebalance",
                "AVLTree#rotateLeft",
                "AVLTree#rotateRight"
            ],
            "children": [
                "HeightStrategy#height",
                "BernoulliHeightStrategy#height",
                "AVLTree#height",
                "AVLTree#reheight",
                "GenericTree#height",
                "AVLSimple#height",
                "LevelOrderTraversalHelper#height"
            ]
        },
        "SJFSchedulingTest#constructor": {
            "parameters": {},
            "name": "SJFSchedulingTest#constructor",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "ProcessDetails#getBurstTime",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "SJFSchedulingTest#initialisation0",
                "LFUCache#get"
            ]
        },
        "Queue#getSize": {
            "parameters": {},
            "name": "Queue#getSize",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "DynamicArray#main",
                "NodeStack#push",
                "NodeStack#pop",
                "NodeStack#isEmpty",
                "NodeStack#size",
                "StackOfLinkedList#main",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": []
        },
        "CircularBufferTest#shutDownExecutorSafely": {
            "parameters": {
                "executorService": "ExecutorService"
            },
            "name": "CircularBufferTest#shutDownExecutorSafely",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "CircularBufferTest#concurrentTest"
            ],
            "children": []
        },
        "BSTRecursive#postorder": {
            "parameters": {},
            "name": "BSTRecursive#postorder",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericTree#postordercall",
                "GenericTree#postorder"
            ],
            "children": [
                "BSTRecursiveGeneric#postOrder",
                "BSTRecursive#postOrder"
            ]
        },
        "PalindromeTest#palindrome": {
            "parameters": {},
            "name": "PalindromeTest#palindrome",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Palindrome#isPalindromeTwoPointer",
                "Palindrome#isPalindromeRecursion",
                "PalindromeSinglyLinkedList#isPalindrome",
                "Palindrome#isPalindrome",
                "PalindromeNumber#isPalindrome"
            ]
        },
        "CalculateMaxOfMinTest#testForTwoElements": {
            "parameters": {},
            "name": "CalculateMaxOfMinTest#testForTwoElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MaximumMinimumWindow#calculateMaxOfMin",
                "CalculateMaxOfMin#calculateMaxOfMin"
            ]
        },
        "Volume#volumeCuboid": {
            "parameters": {
                "width": "double",
                "length": "double",
                "height": "double"
            },
            "name": "Volume#volumeCuboid",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "VolumeTest#volume"
            ],
            "children": []
        },
        "StandardDeviationTest#test3": {
            "parameters": {},
            "name": "StandardDeviationTest#test3",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StandardDeviation#stdDev"
            ]
        },
        "StandardDeviationTest#test4": {
            "parameters": {},
            "name": "StandardDeviationTest#test4",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StandardDeviation#stdDev"
            ]
        },
        "CircularConvolutionFFT#fftCircularConvolution": {
            "parameters": {
                "a": "ArrayList\u003cFFT.Complex\u003e",
                "b": "ArrayList\u003cFFT.Complex\u003e"
            },
            "name": "CircularConvolutionFFT#fftCircularConvolution",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "CircularConvolutionFFT#padding",
                "DyanamicProgrammingKnapsack#max",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Vector2#multiply",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "Complex#multiply",
                "FindMaxRecursion#max",
                "CircularBufferTest#get",
                "ConvolutionFFT#padding",
                "GenericHeap#get",
                "SkipList#size",
                "MaxValue#max",
                "DynamicArray#add",
                "BruteForceKnapsack#max",
                "MatrixUtil#multiply",
                "StackArray#size",
                "BSTRecursive#add",
                "GenericTree#max",
                "Deques#size",
                "BucketSort#max",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "StrassenMatrixMultiplication#multiply",
                "FibonacciHeap#size",
                "Complex#add",
                "FFTBluestein#fftBluestein",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "StandardDeviationTest#test1": {
            "parameters": {},
            "name": "StandardDeviationTest#test1",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StandardDeviation#stdDev"
            ]
        },
        "StandardDeviationTest#test2": {
            "parameters": {},
            "name": "StandardDeviationTest#test2",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StandardDeviation#stdDev"
            ]
        },
        "Task1#sortByInsertionSort": {
            "parameters": {
                "head": "Node"
            },
            "name": "Task1#sortByInsertionSort",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LinkListSort#isSorted"
            ],
            "children": [
                "CountSinglyLinkedListRecursion#count",
                "Task2#count",
                "Task#count",
                "UnionFind#count",
                "Task1#count",
                "SinglyLinkedList#count",
                "Matrix#count"
            ]
        },
        "MonteCarloTreeSearch#getPromisingNode": {
            "parameters": {
                "rootNode": "Node"
            },
            "name": "MonteCarloTreeSearch#getPromisingNode",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "MonteCarloTreeSearch#monteCarloTreeSearch"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "Point#dominates": {
            "parameters": {
                "p1": "Point"
            },
            "name": "Point#dominates",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "SkylineAlgorithm#produceSubSkyLines"
            ],
            "children": []
        },
        "DynamicArray#isEmpty": {
            "parameters": {},
            "name": "DynamicArray#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "NodeStack#setSize": {
            "parameters": {
                "size": "int"
            },
            "name": "NodeStack#setSize",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "NodeStack#push",
                "NodeStack#pop"
            ],
            "children": []
        },
        "BufferedReaderTest#randomTest": {
            "parameters": {},
            "name": "BufferedReaderTest#randomTest",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "BufferedReader#read",
                "BufferedReader#readBlock"
            ]
        },
        "AVLSimple#height": {
            "parameters": {
                "node": "Node"
            },
            "name": "AVLSimple#height",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "null#null",
                "AVLSimple#insert",
                "AVLSimple#bf",
                "AVLSimple#rightRotate",
                "AVLSimple#leftRotate",
                "AVLTree#rebalance",
                "AVLTree#setBalance",
                "AVLTree#reheight",
                "GenericTree#heightcall",
                "GenericTree#height",
                "LevelOrderTraversalHelper#printLevelOrder",
                "LevelOrderTraversalHelper#height"
            ],
            "children": []
        },
        "PalindromeNumber#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "PalindromeNumber#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PalindromeSinglyLinkedList#isPalindrome",
                "Palindrome#isPalindrome",
                "PalindromeNumber#isPalindrome"
            ]
        },
        "SquareRootWithNewtonRaphsonMethod#squareRoot": {
            "parameters": {
                "n": "int"
            },
            "name": "SquareRootWithNewtonRaphsonMethod#squareRoot",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "RootPrecision#main",
                "SquareRootBinarySearch#main",
                "SquareRootWithNewtonRaphsonTestMethod#testfor1",
                "SquareRootWithNewtonRaphsonTestMethod#testfor2",
                "SquareRootWithNewtonRaphsonTestMethod#testfor625"
            ],
            "children": [
                "FFTTest#abs",
                "Complex#abs"
            ]
        },
        "CircularBuffer#isFull": {
            "parameters": {},
            "name": "CircularBuffer#isFull",
            "recursive": "false",
            "inComing": 18,
            "outGoing": 0,
            "numberOfCalls": 18,
            "parents": [
                "CircularBuffer#put",
                "HashMapCuckooHashing#insertKey2HashTable",
                "MinPriorityQueue#insert",
                "CircularQueue#enQueue",
                "CircularQueue#main",
                "PriorityQueue#insert",
                "Queue#insert",
                "Queues#main",
                "StackArray#main",
                "StackArray#push",
                "CircularBufferTest#isFull",
                "PriorityQueuesTest#testPQExtra"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "ValidParenthesesTest#testOne": {
            "parameters": {},
            "name": "ValidParenthesesTest#testOne",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "TrieImp#isValid",
                "MatrixUtil#isValid",
                "Solution#isValid",
                "ValidParentheses#isValid"
            ]
        },
        "PreOrderTraversal#iterativePreOrder": {
            "parameters": {
                "root": "BinaryTree.Node"
            },
            "name": "PreOrderTraversal#iterativePreOrder",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "PreOrderTraversalTest#testNullRoot",
                "PreOrderTraversalTest#testRecursivePreOrder",
                "PreOrderTraversalTest#testRecursivePreOrderNonBalanced"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "StackArray#pop",
                "LinkedListStack#push",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "QueueWithStack#isEmpty",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "StackArray#push",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "StackArrayList#push",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "NodeStack#pop",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "StackArrayList#pop",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "NodeStack#push",
                "LinkedListStack#pop",
                "MatrixUtil#add",
                "CircularQueue#isEmpty",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "DynamicArray#isEmpty",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "HammingDistanceTest#checkForDifferentBitsLength": {
            "parameters": {},
            "name": "HammingDistanceTest#checkForDifferentBitsLength",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "MatrixUtil#assertThat",
                "FibonacciJavaStreams#assertThat",
                "DepthFirstSearch#assertThat"
            ]
        },
        "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed": {
            "parameters": {},
            "name": "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "HeapSortTest#getSortAlgorithm",
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "TimSortTest#getSortAlgorithm",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "QuickSortTest#getSortAlgorithm",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "SortingAlgorithmTest#getSortAlgorithm",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "MergeSortTest#getSortAlgorithm",
                "BitonicSort#sort"
            ]
        },
        "UpperBound#search": {
            "parameters": {
                "array": "T[]",
                "left": "int",
                "right": "int",
                "key": "T"
            },
            "name": "UpperBound#search",
            "recursive": "false",
            "inComing": 49,
            "outGoing": 0,
            "numberOfCalls": 49,
            "parents": [
                "SearchSinglyLinkedListRecursion#main",
                "SinglyLinkedList#main",
                "BSTRecursive#search",
                "BSTRecursive#find",
                "BSTRecursiveGeneric#search",
                "BSTRecursiveGeneric#find",
                "TrieImp#main",
                "BinarySearch#find",
                "BinarySearch#search",
                "DepthFirstSearch#search",
                "DepthFirstSearch#main",
                "LowerBound#find",
                "LowerBound#search",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "UpperBound#find",
                "UpperBound#search",
                "SinglyLinkedListTest#search",
                "SinglyLinkedListTest#deleteNth",
                "BreadthFirstSearchTest#searchI",
                "BreadthFirstSearchTest#searchG",
                "BreadthFirstSearchTest#searchE",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestFront",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestMiddle",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestLast",
                "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestNotFound",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestMiddle",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArrayBinarySearchTestSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpper",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestUpperSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLower",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestLowerSide",
                "RowColumnWiseSorted2dArrayBinarySearchTest#rowColumnSorted2dArray_BinarySearchTestNotFound",
                "TestSearchInARowAndColWiseSortedMatrix#searchItem",
                "TestSearchInARowAndColWiseSortedMatrix#notFound"
            ],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "SortUtilsRandomGenerator#generateInt": {
            "parameters": {
                "n": "int"
            },
            "name": "SortUtilsRandomGenerator#generateInt",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#isFull",
                "CircularBufferTest#put",
                "InsertionSortTest#testWithRandomArray",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed"
            ],
            "children": []
        },
        "BubbleSortTest#bubbleSortSingleIntegerElementArray": {
            "parameters": {},
            "name": "BubbleSortTest#bubbleSortSingleIntegerElementArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "MaxHeap#toggleDown": {
            "parameters": {
                "elementIndex": "int"
            },
            "name": "MaxHeap#toggleDown",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "FindKthNumber#swap",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "MinHeap#getElementKey",
                "OddEvenSort#swap",
                "LazySegmentTreeTest#get",
                "Map#get",
                "MinHeap#swap",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedListTest#swap",
                "SinglyLinkedList#size",
                "MaxHeap#getElementKey",
                "HeapElement#getKey",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHeap#swap",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "MaxHeap#swap",
                "GenericHashMapUsingArrayList#size",
                "Permutation#swap",
                "SortUtils#swap",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "FindMinRecursion#min",
                "CircularBufferTest#get",
                "IntrospectiveSort#swap",
                "GenericHeap#get",
                "SkipList#size",
                "MinValue#min",
                "StackArray#size",
                "Deques#size",
                "HeapNode#getKey",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "HeapSort#swap",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size",
                "BFPRT#swap",
                "Entry#getKey",
                "BucketSort#min",
                "DualPivotQuickSort#swap"
            ]
        },
        "Node#printLevelOrder": {
            "parameters": {},
            "name": "Node#printLevelOrder",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "Trie#add",
                "Vector2#add",
                "SkipListTest#print",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "dijkstras#print",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "MinPriorityQueue#print",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "Map#size",
                "BSTRecursiveGeneric#remove",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "Queue#remove",
                "SkipList#remove",
                "SkipList#size",
                "DynamicArray#add",
                "StackArray#size",
                "BSTRecursive#add",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "Deques#size",
                "DynamicArray#remove",
                "Sudoku#print",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "SinglyLinkedList#print",
                "MatrixUtil#add",
                "NodeStack#print",
                "FibonacciHeap#size",
                "Complex#add",
                "QueueWithStack#remove",
                "SortUtils#print",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "RadixSort#print",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "FFT#inverseFFT": {
            "parameters": {
                "inverse": "boolean",
                "x": "ArrayList\u003cComplex\u003e",
                "N": "int"
            },
            "name": "FFT#inverseFFT",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FFT#fft"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "LongDivision#divide",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "Complex#divide",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "LinkedListStack#peek": {
            "parameters": {},
            "name": "LinkedListStack#peek",
            "recursive": "false",
            "inComing": 76,
            "outGoing": 0,
            "numberOfCalls": 76,
            "parents": [
                "CircularQueue#main",
                "GenericArrayListQueue#main",
                "DuplicateBrackets#check",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "MaximumMinimumWindow#calculateMaxOfMin",
                "NextGraterElement#findNextGreaterElements",
                "NextSmallerElement#findNextSmallerElements",
                "NodeStack#main",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArrayList#main",
                "StackOfLinkedList#main",
                "BSTIterative#postorder",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "VerticalOrderTraversal#verticalTraversal",
                "FordFulkerson#networkFlow",
                "BufferedReader#peek",
                "MedianOfRunningArray#median",
                "Huffman#main",
                "QueueWithStack#peekFront",
                "QueueWithStack#peekBack",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "StrandSort#merge",
                "LinkedQueueTest#testQue",
                "PriorityQueuesTest#testPQInsertion",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BufferedReaderTest#testPeeks",
                "BufferedReaderTest#testMixes",
                "BufferedReaderTest#testBlockPractical"
            ],
            "children": []
        },
        "LinkListSortTest#testForSixElements": {
            "parameters": {},
            "name": "LinkListSortTest#testForSixElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinkListSort#isSorted",
                "SortUtils#isSorted",
                "BogoSort#isSorted"
            ]
        },
        "ColorContrastRatio#getColor": {
            "parameters": {
                "color8Bit": "int"
            },
            "name": "ColorContrastRatio#getColor",
            "recursive": "false",
            "inComing": 3,
            "outGoing": 0,
            "numberOfCalls": 3,
            "parents": [
                "ColorContrastRatio#getRelativeLuminance"
            ],
            "children": [
                "Pow#pow",
                "ColorContrastRatio#getColorSRgb",
                "PowRecursion#pow"
            ]
        },
        "HashMap#displayHashtable": {
            "parameters": {},
            "name": "HashMap#displayHashtable",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "Main#main",
                "MainCuckooHashing#main"
            ],
            "children": [
                "GenericTree#display",
                "LinkedList#display",
                "AVLSimple#display",
                "GenericHeap#display",
                "DoublyLinkedList#display"
            ]
        },
        "InsertionSortTest#insertionSortClassicalWithRandomArrayPass": {
            "parameters": {},
            "name": "InsertionSortTest#insertionSortClassicalWithRandomArrayPass",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "InsertionSortTest#testWithRandomArray"
            ]
        },
        "OptimalJobScheduling#findMin": {
            "parameters": {
                "cost": "int[]"
            },
            "name": "OptimalJobScheduling#findMin",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "OptimalJobScheduling#runningCost",
                "FindMin#main",
                "FibonacciHeapTest#testHeap",
                "KDTreeTest#findMin",
                "FindMinTest#testFindMinValue",
                "FindMinTest#test1",
                "FindMinTest#test2"
            ],
            "children": []
        },
        "Combinations#combinationsOptimized": {
            "parameters": {
                "k": "int",
                "n": "int"
            },
            "name": "Combinations#combinationsOptimized",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "CombinationsTest#testCombinationOptimised"
            ],
            "children": []
        },
        "LinearProbingHashMap#put": {
            "parameters": {
                "value": "Value",
                "key": "Key"
            },
            "name": "LinearProbingHashMap#put",
            "recursive": "false",
            "inComing": 156,
            "outGoing": 0,
            "numberOfCalls": 156,
            "parents": [
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "CompositeLFSR#getMajorityBit",
                "BinaryToHexadecimal#binToHex",
                "null#null",
                "LFUCache#put",
                "LRUCache#put",
                "MRUCache#put",
                "AdjacencyList#addEdge",
                "TopologicalSort#calculateInDegree",
                "TopologicalSort#topSortOrder",
                "GenericHashMapUsingArray#reHash",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#delete",
                "LinearProbingHashMap#resize",
                "GenericHeap#add",
                "GenericHeap#swap",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "CreateBinaryTreeFromInorderPreorder#test",
                "VerticalOrderTraversal#verticalTraversal",
                "Fibonacci#fibMemo",
                "Fibonacci#fibBotUp",
                "Mode#mode",
                "SimpsonIntegration#simpsonsMethod",
                "ThreeSumProblem#Hashmap",
                "TwoSumProblem#TwoPointer",
                "TwoSumProblem#HashMap",
                "Trie#add",
                "CountWords#getDictionary",
                "CountingSort#sort",
                "Graph#addEdge",
                "Anagrams#approach4",
                "CheckAnagrams#isAnagrams",
                "Isomorphic#checkStrings",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "CircularBufferTest#isEmpty",
                "CircularBufferTest#isFull",
                "CircularBufferTest#get",
                "CircularBufferTest#put",
                "CircularBufferTest#concurrentTest",
                "LFUCacheTest#testLFUCacheWithIntegerValueShouldPass",
                "LFUCacheTest#testLFUCacheWithStringValueShouldPass",
                "LFUCacheTest#testAddNodeWithUpdatedFrequency",
                "LRUCacheTest#putAndGetIntegerValues",
                "LRUCacheTest#putAndGetStringValues",
                "LRUCacheTest#nullKeysAndValues",
                "LRUCacheTest#overCapacity",
                "MRUCacheTest#putAndGetIntegerValues",
                "MRUCacheTest#putAndGetStringValues",
                "MRUCacheTest#nullKeysAndValues",
                "MRUCacheTest#overCapacity",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndBothKeyAndValueAreStrings",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsIntegerValueIsString",
                "MapTest#putTest",
                "MapTest#getTest",
                "MapTest#deleteTest",
                "MapTest#containsTest",
                "MapTest#sizeTest",
                "MapTest#keysTest",
                "BinaryTreeTest#test1",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4"
            ],
            "children": [
                "StackArray#resize",
                "BucketSort#hash",
                "Map#hash",
                "LinearProbingHashMap#increment",
                "Utils#increment",
                "HeapElement#equals",
                "LinearProbingHashMap#resize"
            ]
        },
        "MemoryManagementAlgorithms#fitProcess": {
            "parameters": {
                "sizeOfProcesses": "int[]",
                "sizeOfBlocks": "int[]"
            },
            "name": "MemoryManagementAlgorithms#fitProcess",
            "recursive": "false",
            "inComing": 21,
            "outGoing": 0,
            "numberOfCalls": 21,
            "parents": [
                "BestFitCPUTest#testFitForUseOfOneBlock",
                "BestFitCPUTest#testFitForEqualProcecesses",
                "BestFitCPUTest#testFitForNoEmptyBlockCell",
                "BestFitCPUTest#testFitForSameInputDifferentQuery",
                "BestFitCPUTest#testFitForMoreBlocksNoFit",
                "FirstFitCPUTest#testFitForUseOfOneBlock",
                "FirstFitCPUTest#testFitForEqualProcecesses",
                "FirstFitCPUTest#testFitForNoEmptyBlockCell",
                "FirstFitCPUTest#testFitForSameInputDifferentQuery",
                "FirstFitCPUTest#testFitForMoreBlocksNoFit",
                "NextFitCPUTest#testFitForUseOfOneBlock",
                "NextFitCPUTest#testFitForEqualProcecesses",
                "NextFitCPUTest#testFitForNoEmptyBlockCell",
                "NextFitCPUTest#testFitForSameInputDifferentQuery",
                "NextFitCPUTest#testFitForMoreBlocksNoFit",
                "WorstFitCPUTest#testFitForUseOfOneBlock",
                "WorstFitCPUTest#testFitForEqualProcecesses",
                "WorstFitCPUTest#testFitForNoEmptyBlockCell",
                "WorstFitCPUTest#testFitForSameInputDifferentQuery",
                "WorstFitCPUTest#testFitForMoreBlocksNoFit",
                "WorstFitCPUTest#testFitBadCase"
            ],
            "children": []
        },
        "TwoSumProblem#TwoPointer": {
            "parameters": {
                "nums": "int[]",
                "target": "int"
            },
            "name": "TwoSumProblem#TwoPointer",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "ThreeSumProblem#main",
                "TwoSumProblem#main"
            ],
            "children": [
                "Entry#getValue",
                "DynamicArray#stream",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArray#put",
                "DynamicArray#put",
                "CircularBufferTest#put",
                "MRUCache#put",
                "Map#put",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample": {
            "parameters": {},
            "name": "RabinKarpAlgorithmTest#RabinKarpAlgorithmTestExample",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DepthFirstSearch#search",
                "Trieac#search",
                "SinglyLinkedList#search",
                "BreadthFirstSearch#search",
                "TrieImp#search",
                "LowerBound#search",
                "BSTRecursiveGeneric#search",
                "AVLTree#search",
                "SearchSinglyLinkedListRecursion#search",
                "RabinKarpAlgorithm#search",
                "RowColumnWiseSorted2dArrayBinarySearch#search",
                "BSTRecursive#search",
                "SearchInARowAndColWiseSortedMatrix#search",
                "SinglyLinkedListTest#search",
                "BinarySearch#search",
                "UpperBound#search"
            ]
        },
        "Sort012D#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Sort012D#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Sort012D#sort012",
                "DNFSort#sort012"
            ]
        },
        "DualPivotQuickSort#swap": {
            "parameters": {
                "array": "T[]",
                "left": "int",
                "right": "int"
            },
            "name": "DualPivotQuickSort#swap",
            "recursive": "false",
            "inComing": 55,
            "outGoing": 0,
            "numberOfCalls": 55,
            "parents": [
                "Permutation#backtracking",
                "GenericHeap#upHeapify",
                "GenericHeap#remove",
                "GenericHeap#downHeapify",
                "MaxHeap#toggleUp",
                "MaxHeap#toggleDown",
                "MinHeap#toggleUp",
                "MinHeap#toggleDown",
                "FFT#fftBitReversal",
                "FindKthNumber#partition",
                "BFPRT#partition",
                "BFPRT#insertionSort",
                "QuickSelect#partition",
                "QuickSelect#pivot",
                "BogoSort#nextPermutation",
                "BubbleSort#sort",
                "BubbleSortRecursion#bubbleSort",
                "CircleSort#doSort",
                "CocktailShakerSort#sort",
                "CombSort#sort",
                "DualPivotQuickSort#partition",
                "DutchNationalFlagSort#dutch_national_flag_sort",
                "GnomeSort#sort",
                "HeapSort#sort",
                "HeapSort#siftDown",
                "InsertionSort#sort",
                "InsertionSort#sentinelSort",
                "IntrospectiveSort#partition",
                "IntrospectiveSort#heapSort",
                "IntrospectiveSort#heapify",
                "OddEvenSort#oddEvenSort",
                "QuickSort#randomPartition",
                "QuickSort#partition",
                "SortUtils#flip",
                "WiggleSort#triColorSort"
            ],
            "children": []
        },
        "LinearProbingHashMap#delete": {
            "parameters": {
                "key": "Key"
            },
            "name": "LinearProbingHashMap#delete",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "HashMap#deleteHash",
                "LinkedList#delete",
                "MinPriorityQueue#heapSort",
                "Link#main",
                "LinkOperations#removeDuplicates",
                "SinglyLinkedList#main",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "BSTRecursive#remove",
                "BSTRecursiveGeneric#delete",
                "BSTRecursiveGeneric#remove",
                "RedBlackBST#deleteDemo",
                "TrieImp#main",
                "MapTest#deleteTest",
                "MapTest#sizeTest",
                "KDTreeTest#delete"
            ],
            "children": [
                "StackArray#resize",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArrayList#put",
                "BucketSort#hash",
                "GenericHashMapUsingArray#put",
                "Map#hash",
                "LinearProbingHashMap#increment",
                "DynamicArray#put",
                "Map#contains",
                "Bag#contains",
                "Utils#increment",
                "BloomFilter#contains",
                "HeapElement#equals",
                "SkipListTest#contains",
                "LinearProbingHashMap#contains",
                "CircularBufferTest#put",
                "SkipList#contains",
                "MRUCache#put",
                "Map#put",
                "LinearProbingHashMap#resize",
                "LRUCache#put",
                "LinearProbingHashMap#put"
            ]
        },
        "ClosestPair#xPartition": {
            "parameters": {
                "a": "Location[]",
                "last": "int",
                "first": "int"
            },
            "name": "ClosestPair#xPartition",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "ClosestPair#xQuickSort"
            ],
            "children": []
        },
        "Polybius#encrypt": {
            "parameters": {
                "plaintext": "String"
            },
            "name": "Polybius#encrypt",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "HillCipher#hillCipher",
                "BlowfishTest#testEncrypt",
                "PolybiusTest#testEncrypt",
                "PolybiusTest#testIsTextTheSameAfterEncryptionAndDecryption",
                "RSATest#testRSA",
                "VigenereTest#vigenereEncryptTest"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "UpperTest#toUpperCase",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "GenericHashMapUsingArrayList#toString",
                "Deques#toString",
                "HeapElement#toString",
                "Upper#toUpperCase",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "CursorLinkedList#append",
                "Polybius#findLocationByCharacter",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Queue#toString",
                "CircleLinkedList#append",
                "LinkedQueue#toString"
            ]
        },
        "SlowSortTest#slowSortDuplicateIntegerArray": {
            "parameters": {},
            "name": "SlowSortTest#slowSortDuplicateIntegerArray",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "BitonicSort#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "BitonicSort#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "BitonicSort#printArray",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "DNFSort#printArray",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "MatrixChainMultiplication#printArray",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "Sum_Of_Subset#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Sum_Of_Subset#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SkylineProblem#print",
                "PrintAMatrixInSpiralOrder#print",
                "Sum_Of_Subset#subsetSum",
                "SkipListTest#print",
                "dijkstras#print",
                "MinPriorityQueue#print",
                "SubsetSum#subsetSum",
                "Sudoku#print",
                "SinglyLinkedList#print",
                "NodeStack#print",
                "SortUtils#print",
                "RadixSort#print"
            ]
        },
        "FordFulkerson#networkFlow": {
            "parameters": {
                "sink": "int",
                "source": "int"
            },
            "name": "FordFulkerson#networkFlow",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "FordFulkerson#main"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArrayList#peek",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "SinglyLinkedList#isEmpty",
                "MRUCache#get",
                "LFSR#get",
                "Trie#add",
                "LeftistHeap#isEmpty",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "QueueWithStack#isEmpty",
                "GenericArrayListQueue#peek",
                "BSTRecursiveGeneric#add",
                "LinkedQueue#peek",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "ReverseString#reverse",
                "GenericHashMapUsingArrayList#get",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "MinPriorityQueue#peek",
                "SkipListTest#get",
                "BufferedReader#peek",
                "SkipList#get",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "CircularQueue#peek",
                "FindMinRecursion#min",
                "CircularBufferTest#get",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "GenericHeap#get",
                "Rotation#reverse",
                "PriorityQueue#peek",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "MinValue#min",
                "DynamicArray#add",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "BSTRecursive#add",
                "CircularBufferTest#isEmpty",
                "StackArray#peek",
                "PalindromePrime#reverse",
                "CursorLinkedList#append",
                "LinkOperations#reverse",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "CircularQueue#isEmpty",
                "ReverseStringRecursive#reverse",
                "LFUCache#get",
                "Complex#add",
                "GenericHeap#add",
                "CircleLinkedList#append",
                "SkylineProblem#add",
                "LowestBasePalindrome#reverse",
                "NodeStack#peek",
                "SkipListTest#add",
                "Bag#add",
                "BucketSort#min",
                "DynamicArray#isEmpty",
                "LinkedListStack#peek",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add",
                "PriorityQueue#isEmpty"
            ]
        },
        "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven": {
            "parameters": {},
            "name": "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "DutchNationalFlagSort#sort",
                "TopologicalSort#sort",
                "ShellSort#sort",
                "SimpleSort#sort",
                "BubbleSortRecursion#sort",
                "BeadSort#sort",
                "GnomeSort#sort",
                "SortAlgorithm#sort",
                "MergeSort#sort",
                "CircleSort#sort",
                "InsertionSort#sort",
                "DualPivotQuickSort#sort",
                "BubbleSort#sort",
                "SlowSort#sort",
                "CombSort#sort",
                "IntrospectiveSort#sort",
                "PancakeSort#sort",
                "TreeSort#sort",
                "HeapSort#sort",
                "CycleSort#sort",
                "SJFSchedulingTest#sort",
                "SelectionSort#sort",
                "WiggleSort#sort",
                "TimSort#sort",
                "QuickSort#sort",
                "CountingSort#sort",
                "BogoSort#sort",
                "SwapSort#sort",
                "MergeSortRecursive#sort",
                "CocktailShakerSort#sort",
                "StoogeSort#sort",
                "PigeonholeSort#sort",
                "BitonicSort#sort"
            ]
        },
        "GenericHeap#remove": {
            "parameters": {},
            "name": "GenericHeap#remove",
            "recursive": "false",
            "inComing": 78,
            "outGoing": 0,
            "numberOfCalls": 78,
            "parents": [
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "LFUCache#put",
                "LRUCache#setCapacity",
                "LRUCache#put",
                "MRUCache#setCapacity",
                "MRUCache#put",
                "DynamicArrayIterator#remove",
                "DynamicArray#main",
                "Cycle#dfs",
                "Vertex#removeAdjacentVertex",
                "GenericHashMapUsingArray#remove",
                "GenericHashMapUsingArrayList#remove",
                "GenericHeap#remove",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "CircleLinkedList#main",
                "CursorLinkedList#removeByIndex",
                "GenericArrayListQueue#pull",
                "Queues#main",
                "StackArrayList#pop",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BinaryTree#bfs",
                "GenericTree#removeleaves",
                "Tree#printTopView",
                "Node#printLevelOrder",
                "SkylineAlgorithm#produceSubSkyLines",
                "SkylineAlgorithm#produceFinalSkyLine",
                "MedianOfRunningArray#insert",
                "CRCAlgorithm#divideMessageWithP",
                "Graph#dijkstra",
                "QueueUsingTwoStacks#main",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#scheduleProcesses",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "WordLadder#ladderLength",
                "longestNonRepeativeSubstring#lengthOfLongestSubstring",
                "GenericHashMapUsingArrayListTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "GenericHashMapUsingArrayTest#testGenericHashmapWhichUsesArrayAndKeyIsStringValueIsInteger",
                "SkipListTest#removeFromHead",
                "SkipListTest#removeFromTail",
                "PriorityQueuesTest#testPQDeletion",
                "PriorityQueuesTest#testPQExtra",
                "BinaryTreeTest#test2",
                "BinaryTreeTest#test3",
                "BinaryTreeTest#test4",
                "TreeTestUtils#createTree"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "FindKthNumber#swap",
                "OddEvenSort#swap",
                "MinHeap#swap",
                "LinearProbingHashMap#size",
                "BSTRecursive#remove",
                "LinkedQueue#size",
                "SinglyLinkedListTest#swap",
                "SinglyLinkedList#size",
                "PriorityQueue#remove",
                "GenericHeap#size",
                "CircleLinkedList#remove",
                "GenericHeap#swap",
                "Map#size",
                "BSTRecursiveGeneric#remove",
                "MaxHeap#swap",
                "CursorLinkedList#remove",
                "GenericHashMapUsingArrayList#size",
                "Permutation#swap",
                "SortUtils#swap",
                "Bag#size",
                "StackArrayList#size",
                "BSTIterative#remove",
                "Queue#remove",
                "IntrospectiveSort#swap",
                "SkipList#remove",
                "SkipList#size",
                "StackArray#size",
                "ListIterator#remove",
                "GenericHashMapUsingArray#remove",
                "GenericHeap#downHeapify",
                "Deques#size",
                "DynamicArray#remove",
                "DynamicArrayIterator#remove",
                "NodeStack#size",
                "HeapSort#swap",
                "FibonacciHeap#size",
                "BFPRT#swap",
                "QueueWithStack#remove",
                "GenericHashMapUsingArrayList#remove",
                "DualPivotQuickSort#swap",
                "GenericHeap#remove"
            ]
        },
        "NumberOfDigits#numberOfDigitsFaster": {
            "parameters": {
                "number": "int"
            },
            "name": "NumberOfDigits#numberOfDigitsFaster",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "NumberOfDigits#main"
            ],
            "children": []
        },
        "NextFitCPUTest#testFitForSameInputDifferentQuery": {
            "parameters": {},
            "name": "NextFitCPUTest#testFitForSameInputDifferentQuery",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "WorstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "FirstFitCPU#fitProcess",
                "BestFitCPU#fitProcess",
                "MemoryManagementAlgorithms#fitProcess"
            ]
        },
        "DecimalToBinary#conventionalConversion": {
            "parameters": {},
            "name": "DecimalToBinary#conventionalConversion",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "DecimalToBinary#main"
            ],
            "children": [
                "Pow#pow",
                "BufferedReader#close",
                "PowRecursion#pow"
            ]
        },
        "PronicNumber#isPronic": {
            "parameters": {
                "input_number": "int"
            },
            "name": "PronicNumber#isPronic",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "PronicNumberTest#testForPronicNumber",
                "PronicNumberTest#testForNonPronicNumber"
            ],
            "children": []
        },
        "LongDivisionTest#testDivisionByZero": {
            "parameters": {},
            "name": "LongDivisionTest#testDivisionByZero",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LongDivision#divide",
                "Complex#divide"
            ]
        },
        "BinaryTree#remove": {
            "parameters": {
                "value": "int"
            },
            "name": "BinaryTree#remove",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericTree#find",
                "SearchAlgorithm#find",
                "ExponentialSearch#find",
                "BSTRecursiveGeneric#find",
                "BSTIterative#find",
                "LinearSearch#find",
                "IterativeTernarySearch#find",
                "IterativeBinarySearch#find",
                "UpperBound#find",
                "UnionFind#find",
                "MatrixSearchAlgorithm#find",
                "FibonacciSearch#find",
                "sortOrderAgnosticBinarySearch#find",
                "InterpolationSearch#find",
                "TernarySearch#find",
                "SaddlebackSearch#find",
                "LowerBound#find",
                "BinarySearch#find",
                "RowColumnWiseSorted2dArrayBinarySearch#find",
                "JumpSearch#find",
                "BSTRecursive#find"
            ]
        },
        "TrieImp#delete": {
            "parameters": {
                "word": "String"
            },
            "name": "TrieImp#delete",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "HashMap#deleteHash",
                "LinkedList#delete",
                "MinPriorityQueue#heapSort",
                "Link#main",
                "LinkOperations#removeDuplicates",
                "SinglyLinkedList#main",
                "AVLTree#delete",
                "BSTRecursive#delete",
                "BSTRecursive#remove",
                "BSTRecursiveGeneric#delete",
                "BSTRecursiveGeneric#remove",
                "RedBlackBST#deleteDemo",
                "TrieImp#main",
                "MapTest#deleteTest",
                "MapTest#sizeTest",
                "KDTreeTest#delete"
            ],
            "children": []
        },
        "Deques#peekFirst": {
            "parameters": {},
            "name": "Deques#peekFirst",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "CombinationTest#testLengthTwo": {
            "parameters": {},
            "name": "CombinationTest#testLengthTwo",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "ArrayCombination#combination",
                "Combination#combination",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "GenericRoot#genericRoot": {
            "parameters": {
                "n": "int"
            },
            "name": "GenericRoot#genericRoot",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericRoot#main"
            ],
            "children": []
        },
        "LongestIncreasingSubsequence#LIS": {
            "parameters": {
                "array": "int[]"
            },
            "name": "LongestIncreasingSubsequence#LIS",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "LongestIncreasingSubsequence#main"
            ],
            "children": [
                "LongestIncreasingSubsequence#upperBound"
            ]
        },
        "BitonicSort#sort": {
            "parameters": {
                "a": "int[]",
                "up": "int",
                "N": "int"
            },
            "name": "BitonicSort#sort",
            "recursive": "false",
            "inComing": 170,
            "outGoing": 0,
            "numberOfCalls": 170,
            "parents": [
                "Combination#combination",
                "KnightsTour#solve",
                "LinearProbingHashMap#keys",
                "CalculateMaxOfMin#calculateMaxOfMin",
                "FindKthNumber#main",
                "Median#median",
                "VampireNumber#splitIntoDigits",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "ThreeSum#main",
                "TopKWords#main",
                "TwoPointers#isPairedSum",
                "QuickSelect#partition5",
                "BitonicSort#main",
                "BogoSort#main",
                "BubbleSortRecursion#main",
                "BucketSort#bucketSort",
                "CircleSort#main",
                "CocktailShakerSort#main",
                "CombSort#main",
                "CountingSort#sort",
                "CountingSort#main",
                "CycleSort#main",
                "DualPivotQuickSort#main",
                "GnomeSort#main",
                "InsertionSort#sort",
                "LinkListSort#isSorted",
                "MergeSortRecursive#merge",
                "MergeSortRecursive#sort",
                "PancakeSort#main",
                "PigeonholeSort#main",
                "SelectionSort#main",
                "ShellSort#main",
                "SimpleSort#main",
                "SlowSort#sort",
                "SortAlgorithm#sort",
                "StoogeSort#sort",
                "StoogeSort#main",
                "SwapSort#main",
                "TimSort#sort",
                "TopologicalSort#sort",
                "TreeSort#main",
                "Anagrams#approach1",
                "CircularBufferTest#getSortedListFrom",
                "BeadSortTest#beadSortEmptyArray",
                "BeadSortTest#beadSortSingleIntegerArray",
                "BeadSortTest#bogoSortNonDuplicateIntegerArray",
                "BeadSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortEmptyArray",
                "BogoSortTest#bogoSortSingleIntegerArray",
                "BogoSortTest#bogoSortSingleStringArray",
                "BogoSortTest#bogoSortNonDuplicateIntegerArray",
                "BogoSortTest#bogoSortDuplicateIntegerArray",
                "BogoSortTest#bogoSortNonDuplicateStringArray",
                "BogoSortTest#bogoSortDuplicateStringArray",
                "BubbleSortTest#bubbleSortEmptyArray",
                "BubbleSortTest#bubbleSortSingleIntegerElementArray",
                "BubbleSortTest#bubbleSortSingleStringElementArray",
                "BubbleSortTest#bubbleSortIntegerArray",
                "BubbleSortTest#bubbleSortStringArray",
                "CocktailShakerSortTest#cocktailShakerSortEmptyArray",
                "CocktailShakerSortTest#cocktailShakerSortSingleStringElementArray",
                "CocktailShakerSortTest#cocktailShakerSortIntegerArray",
                "CocktailShakerSortTest#cocktailShakerSortStringArray",
                "CombSortTest#combSortEmptyArray",
                "CombSortTest#combSortSingleStringElement",
                "CombSortTest#combSortStringArray",
                "CombSortTest#combSortIntegerArray",
                "CombSortTest#combSortDoubleArray",
                "DualPivotQuickSortTest#quickSortEmptyArrayShouldPass",
                "DualPivotQuickSortTest#quickSortSingleValueArrayShouldPass",
                "DualPivotQuickSortTest#quickSortWithIntegerArrayShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithNegativeValuesShouldPass",
                "DualPivotQuickSortTest#quickSortForArrayWithDuplicateValuesShouldPass",
                "DualPivotQuickSortTest#quickSortWithStringArrayShouldPass",
                "DutchNationalFlagSortTest#DNFSTestOdd",
                "DutchNationalFlagSortTest#DNFSTestEven",
                "DutchNationalFlagSortTest#DNFSTestEvenStrings",
                "DutchNationalFlagSortTest#DNFSTestOddStrings",
                "DutchNationalFlagSortTest#DNFSTestOddMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenMidGiven",
                "DutchNationalFlagSortTest#DNFSTestEvenStringsMidGiven",
                "DutchNationalFlagSortTest#DNFSTestOddStringsMidGiven",
                "IntrospectiveSortTest#StrandSortNonDuplicateTest",
                "IntrospectiveSortTest#StrandSortDuplicateTest",
                "IntrospectiveSortTest#StrandSortEmptyTest",
                "IntrospectiveSortTest#StrandSortNullTest",
                "IntrospectiveSortTest#StrandSortNegativeTest",
                "IntrospectiveSortTest#StrandSortNegativeAndPositiveTest",
                "IntrospectiveSortTest#allSameTest",
                "SelectionSortTest#IntegerArrTest",
                "SelectionSortTest#StringArrTest",
                "SelectionSortTest#emptyArrTest",
                "ShellSortTest#ShellSortEmptyArray",
                "ShellSortTest#ShellSortSingleIntegerArray",
                "ShellSortTest#ShellSortSingleStringArray",
                "ShellSortTest#ShellSortNonDuplicateIntegerArray",
                "ShellSortTest#ShellSortDuplicateIntegerArray",
                "ShellSortTest#ShellSortNonDuplicateStringArray",
                "ShellSortTest#ShellSortDuplicateStringArray",
                "SimpleSortTest#simpleSortEmptyArray",
                "SimpleSortTest#simpleSortSingleIntegerArray",
                "SimpleSortTest#simpleSortSingleStringArray",
                "SimpleSortTest#simpleSortNonDuplicateIntegerArray",
                "SimpleSortTest#simpleSortDuplicateIntegerArray",
                "SimpleSortTest#simpleSortNonDuplicateStringArray",
                "SimpleSortTest#simpleSortDuplicateStringArray",
                "SlowSortTest#slowSortEmptyArray",
                "SlowSortTest#slowSortSingleIntegerElementArray",
                "SlowSortTest#slowSortSingleStringElementArray",
                "SlowSortTest#slowSortIntegerArray",
                "SlowSortTest#slowSortDuplicateIntegerArray",
                "SlowSortTest#slowSortStringArray",
                "SlowSortTest#slowSortDuplicateStringArray",
                "SlowSortTest#slowSortStringSymbolArray",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenEmptyListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenSingleValuedListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllPositiveValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithAllNegativeValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithRealNumberValuesIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenArrayWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenListWithDuplicateValueIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenStringValueListIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomArrayIsPassed",
                "SortingAlgorithmTest#shouldAcceptWhenRandomListIsPassed",
                "TopologicalSortTest#successTest",
                "TopologicalSortTest#failureTest",
                "TreeSortTest#treeSortEmptyArray",
                "TreeSortTest#treeSortSingleStringElement",
                "TreeSortTest#treeSortStringArray",
                "TreeSortTest#treeSortIntegerArray",
                "TreeSortTest#treeSortDoubleArray",
                "WiggleSortTest#WiggleTestNumbersEven",
                "WiggleSortTest#WiggleTestNumbersOdd",
                "WiggleSortTest#WiggleTestNumbersOddDuplicates",
                "WiggleSortTest#WiggleTestNumbersOddMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates",
                "WiggleSortTest#WiggleTestNumbersEvenDuplicates",
                "WiggleSortTest#WiggleTestStrings"
            ],
            "children": [
                "BitonicSort#bitonicSort"
            ]
        },
        "QuickSelectTest#quickSelectMedianOfThreeElements": {
            "parameters": {},
            "name": "QuickSelectTest#quickSelectMedianOfThreeElements",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "QuickSelect#select"
            ]
        },
        "Rotate#rotate": {
            "parameters": {
                "a": "int[][]"
            },
            "name": "Rotate#rotate",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "KochSnowflake#IterationStep",
                "Rotate_by_90_degree#main"
            ],
            "children": []
        },
        "A_Star#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "A_Star#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PathAndDistance#printSolution",
                "A_Star#aStar",
                "A_Star#initializeGraph"
            ]
        },
        "SkipList#add": {
            "parameters": {
                "e": "E"
            },
            "name": "SkipList#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": [
                "Entry#getValue",
                "NodeStack#setNext",
                "BernoulliHeightStrategy#nodeHeight",
                "DynamicArrayIterator#next",
                "ListIterator#next",
                "NodeStack#setPrevious",
                "HeightStrategy#nodeHeight",
                "HeapNode#setNext"
            ]
        },
        "LinkedQueue#toString": {
            "parameters": {},
            "name": "LinkedQueue#toString",
            "recursive": "false",
            "inComing": 109,
            "outGoing": 0,
            "numberOfCalls": 109,
            "parents": [
                "NQueens#getSolution",
                "Caesar#encode",
                "Caesar#decode",
                "ColumnarTranspositionCipher#encrpyter",
                "ColumnarTranspositionCipher#decrypter",
                "ColumnarTranspositionCipher#abecedariumBuilder",
                "Polybius#findLocationByCharacter",
                "Polybius#encrypt",
                "Polybius#decrypt",
                "ProductCipher#main",
                "RSA#encrypt",
                "SimpleSubCipher#encode",
                "SimpleSubCipher#decode",
                "SimpleSubstitutionCipher#encode",
                "SimpleSubstitutionCipher#decode",
                "Vigenere#encrypt",
                "Vigenere#decrypt",
                "LFSR#toString",
                "AnyBaseToAnyBase#base2base",
                "DecimalToAnyBase#convertToAnyBase",
                "DecimalToHexaDecimal#decToHex",
                "IntegerToRoman#integerToRoman",
                "DynamicArray#toString",
                "AdjacencyListGraph#toString",
                "GenericHashMapUsingArray#toString",
                "GenericHashMapUsingArrayList#toString",
                "HashMapCuckooHashing#displayHashtable",
                "HeapElement#toString",
                "CursorLinkedList#printList",
                "MergeSortedSinglyLinkedList#main",
                "SinglyLinkedList#toString",
                "SinglyLinkedList#main",
                "SkipList#toString",
                "LinkedQueue#toString",
                "Queue#toString",
                "Queues#main",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#main",
                "NextSmallerElement#main",
                "NodeStack#print",
                "PostfixToInfix#getPostfixToInfix",
                "LinkedListStack#toString",
                "LongestCommonSubsequence#lcsString",
                "LongestPalindromicSubsequence#LPS",
                "AmicableNumber#findAllInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "LongDivision#divide",
                "VampireNumber#splitIntoDigits",
                "TwoSumProblem#main",
                "BFPRT#main",
                "Conway#generateNextElement",
                "CountWords#secondaryWordCount",
                "LowestBasePalindrome#main",
                "LowestBasePalindrome#base2base",
                "MiniMaxAlgorithm#main",
                "PasswordGen#generatePassword",
                "RemoveDuplicateFromString#removeDuplicate",
                "SieveOfEratosthenes#main",
                "UnionFind#toString",
                "SortUtils#print",
                "LetterCombinationsOfPhoneNumber#printWords",
                "Palindrome#isPalindrome",
                "ReverseString#reverse",
                "LFSRTest#initialize",
                "LFSRTest#clock",
                "LeftistHeapTest#testLeftistHeap",
                "GrahamScanTest#testGrahamScan",
                "ADTFractionTest#testToString",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "WiggleSortTest#WiggleTestNumbersEvenMultipleDuplicates"
            ],
            "children": [
                "SkipList#toString",
                "AdjacencyMatrixGraph#toString",
                "UnionFind#toString",
                "SinglyLinkedList#toString",
                "LinkedListStack#toString",
                "Trie#add",
                "GenericHashMapUsingArrayList#toString",
                "Vector2#add",
                "Deques#toString",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "HeapElement#toString",
                "DynamicArray#toString",
                "CircleLinkedList#toString",
                "AdjacencyListGraph#toString",
                "Vector2#toString",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "LFSR#toString",
                "GenericHashMapUsingArray#toString",
                "Complex#add",
                "GenericHeap#add",
                "Queue#toString",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "LinkedQueue#toString",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "NodeStack#setData": {
            "parameters": {
                "item": "Item"
            },
            "name": "NodeStack#setData",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "EditDistance#editDistance": {
            "parameters": {
                "storage": "int[][]",
                "s1": "String",
                "s2": "String"
            },
            "name": "EditDistance#editDistance",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "EditDistance#editDistance"
            ],
            "children": [
                "FindMinRecursion#min",
                "MinValue#min",
                "BucketSort#min",
                "EditDistance#editDistance"
            ]
        },
        "Mode#mode": {
            "parameters": {
                "numbers": "int[]"
            },
            "name": "Mode#mode",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "Mode#main"
            ],
            "children": [
                "DynamicArray#stream",
                "DyanamicProgrammingKnapsack#max",
                "CircularBuffer#put",
                "LFUCache#put",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "GenericHashMapUsingArrayList#put",
                "Trie#add",
                "Vector2#add",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "GenericHashMapUsingArray#put",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#containsKey",
                "GenericHashMapUsingArrayList#get",
                "HashMapCuckooHashingTest#containsKey",
                "SkipListTest#get",
                "SkipList#get",
                "DynamicArray#put",
                "FindMaxRecursion#max",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "MaxValue#max",
                "DynamicArray#add",
                "BruteForceKnapsack#max",
                "BSTRecursive#add",
                "GenericTree#max",
                "BucketSort#max",
                "CircularBufferTest#put",
                "LinearProbingHashMap#get",
                "MatrixUtil#add",
                "LRUCache#get",
                "LFUCache#get",
                "MRUCache#put",
                "Complex#add",
                "Map#put",
                "GenericHeap#add",
                "GenericHashMapUsingArray#containsKey",
                "SkylineProblem#add",
                "LRUCache#put",
                "SkipListTest#add",
                "Bag#add",
                "LinearProbingHashMap#put",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "KnightsTour#neighbors": {
            "parameters": {
                "column": "int",
                "row": "int"
            },
            "name": "KnightsTour#neighbors",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "KnightsTour#solve",
                "KnightsTour#orphanDetected"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "KnightsTour#countNeighbors",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "SinglyLinkedList#insertNth": {
            "parameters": {
                "data": "int",
                "position": "int"
            },
            "name": "SinglyLinkedList#insertNth",
            "recursive": "false",
            "inComing": 7,
            "outGoing": 0,
            "numberOfCalls": 7,
            "parents": [
                "SinglyLinkedList#insertHead",
                "SinglyLinkedList#insert",
                "SinglyLinkedList#main",
                "PalindromeSinglyLinkedList#main"
            ],
            "children": [
                "SinglyLinkedList#checkBounds"
            ]
        },
        "SimpleNode#setNextNode": {
            "parameters": {
                "nextNode": "SimpleNode\u003cE\u003e"
            },
            "name": "SimpleNode#setNextNode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "UniquePaths#uniquePaths2": {
            "parameters": {
                "ans": "int",
                "m": "int",
                "n": "int"
            },
            "name": "UniquePaths#uniquePaths2",
            "recursive": "false",
            "inComing": 4,
            "outGoing": 0,
            "numberOfCalls": 4,
            "parents": [
                "UniquePathsTests#testForFiveElements",
                "UniquePathsTests#testForSixElements",
                "UniquePathsTests#testForSevenElements",
                "UniquePathsTests#testForEightElements"
            ],
            "children": []
        },
        "CountSinglyLinkedListRecursion#countRecursion": {
            "parameters": {
                "head": "Node"
            },
            "name": "CountSinglyLinkedListRecursion#countRecursion",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "CountSinglyLinkedListRecursion#countRecursion",
                "CountSinglyLinkedListRecursion#count"
            ],
            "children": [
                "CountSinglyLinkedListRecursion#countRecursion"
            ]
        },
        "LongDivisionTest#testOne": {
            "parameters": {},
            "name": "LongDivisionTest#testOne",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LongDivision#divide",
                "Complex#divide"
            ]
        },
        "LinearCongruentialGenerator#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LinearCongruentialGenerator#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LinearCongruentialGenerator#nextNumber",
                "CollatzConjecture#nextNumber",
                "Pow#pow",
                "PowRecursion#pow"
            ]
        },
        "TowerOfHanoi#shift": {
            "parameters": {
                "endPole": "String",
                "startPole": "String",
                "intermediatePole": "String",
                "n": "int"
            },
            "name": "TowerOfHanoi#shift",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "LazySegmentTree#updateRange",
                "LazySegmentTree#getRange",
                "TowerOfHanoi#shift",
                "TowerOfHanoi#main"
            ],
            "children": [
                "TowerOfHanoi#shift"
            ]
        },
        "HarshadNumber#isHarshad": {
            "parameters": {
                "s": "String"
            },
            "name": "HarshadNumber#isHarshad",
            "recursive": "false",
            "inComing": 10,
            "outGoing": 0,
            "numberOfCalls": 10,
            "parents": [
                "HarshadNumberTest#harshadNumber"
            ],
            "children": []
        },
        "SJFScheduling#sortByArrivalTime": {
            "parameters": {},
            "name": "SJFScheduling#sortByArrivalTime",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "null#null",
                "SJFSchedulingTest#sort"
            ],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "ProcessDetails#getArrivalTime",
                "FibonacciHeap#size"
            ]
        },
        "BSTIterative#add": {
            "parameters": {
                "data": "int"
            },
            "name": "BSTIterative#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": []
        },
        "Damm#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "Damm#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "Damm#checkAndPrint",
                "Verhoeff#checkAndPrint",
                "Damm#generateAndPrint",
                "Verhoeff#generateAndPrint"
            ]
        },
        "GenericArrayListQueue#hasElements": {
            "parameters": {},
            "name": "GenericArrayListQueue#hasElements",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "GenericArrayListQueue#peek",
                "GenericArrayListQueue#pull"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "PalindromeNumber#isPalindrome": {
            "parameters": {
                "number": "int"
            },
            "name": "PalindromeNumber#isPalindrome",
            "recursive": "false",
            "inComing": 6,
            "outGoing": 0,
            "numberOfCalls": 6,
            "parents": [
                "PalindromeNumber#main",
                "PalindromeSinglyLinkedList#main",
                "PalindromeTest#palindrome"
            ],
            "children": []
        },
        "BinarySearch2dArray#BinarySearch": {
            "parameters": {
                "arr": "int[][]",
                "target": "int"
            },
            "name": "BinarySearch2dArray#BinarySearch",
            "recursive": "false",
            "inComing": 11,
            "outGoing": 0,
            "numberOfCalls": 11,
            "parents": [
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestMiddleSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpper",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestUpperSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLower",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestLowerSide",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestNotFound",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestOneRow",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetInMiddle",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestTargetAboveMiddleRowInMiddleColumn",
                "BinarySearch2dArrayTest#BinarySearch2dArrayTestEmptyArray"
            ],
            "children": [
                "PerfectBinarySearch#binarySearch",
                "BinarySearch2dArray#binarySearch"
            ]
        },
        "EulerMethod#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "EulerMethod#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "GenericHashMapUsingArray#size",
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "LinearProbingHashMap#size",
                "DynamicArray#get",
                "LinkedQueue#size",
                "SinglyLinkedList#size",
                "CircularBuffer#get",
                "GenericHeap#size",
                "GenericHashMapUsingArrayList#get",
                "Map#size",
                "SkipListTest#get",
                "GenericHashMapUsingArrayList#size",
                "EulerMethod#eulerFull",
                "SkipList#get",
                "Bag#size",
                "StackArrayList#size",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "SkipList#size",
                "StackArray#size",
                "Deques#size",
                "NodeStack#size",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get",
                "FibonacciHeap#size"
            ]
        },
        "LinkedQueueTest#testQue": {
            "parameters": {},
            "name": "LinkedQueueTest#testQue",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "StackArrayList#peek",
                "GenericArrayListQueue#peek",
                "Queue#peekRear",
                "LinkedQueue#peek",
                "MinPriorityQueue#peek",
                "BufferedReader#peek",
                "CircularQueue#peek",
                "PriorityQueue#peek",
                "LinkedQueue#enqueue",
                "LinkedQueue#peekRear",
                "StackArray#peek",
                "NodeStack#peek",
                "LinkedListStack#peek"
            ]
        },
        "SubsetCountTest#hasMultipleSubset": {
            "parameters": {},
            "name": "SubsetCountTest#hasMultipleSubset",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "SubsetCount#getCount"
            ]
        },
        "GenericArrayListQueue#add": {
            "parameters": {
                "element": "T"
            },
            "name": "GenericArrayListQueue#add",
            "recursive": "false",
            "inComing": 364,
            "outGoing": 0,
            "numberOfCalls": 364,
            "parents": [
                "AllPathsFromSourceToTarget#addEdge",
                "AllPathsFromSourceToTarget#storeAllPaths",
                "AllPathsFromSourceToTarget#storeAllPathsUtil",
                "Combination#backtracking",
                "KnightsTour#neighbors",
                "NQueens#getSolution",
                "Permutation#backtracking",
                "RSA#generateKeys",
                "A5KeyStreamGenerator#initialize",
                "AnyBaseToAnyBase#validForBase",
                "DecimalToAnyBase#convertToAnyBase",
                "Bag#main",
                "DynamicArray#main",
                "null#null",
                "Graph#addEdge",
                "A_Star#aStar",
                "BipartiteGrapfDFS#main",
                "Graph#countGraphs",
                "Graph#depthFirstSearch",
                "Cycle#dfs",
                "Vertex#addAdjacentVertex",
                "AdjacencyListGraph#addEdge",
                "AdjacencyList#addEdge",
                "TopologicalSort#topSortOrder",
                "Kosaraju#createTransposeMatrix",
                "Kosaraju#findStronglyConnectedComponents",
                "Kosaraju#dfs2",
                "Kruskal#addEdge",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#depthFirstOrder",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "TarjansAlgorithm#stronglyConnCompsUtil",
                "GenericHashMapUsingArray#put",
                "GenericHashMapUsingArrayList#put",
                "GenericHashMapUsingArrayList#reHash",
                "Intersection#intersection",
                "LinearProbingHashMap#keys",
                "GenericHeap#add",
                "LeftistHeap#in_order_aux",
                "MaxHeap#insertElement",
                "MinHeap#insertElement",
                "MergeSortedArrayList#main",
                "MergeSortedArrayList#merge",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#toString",
                "SkipList#toString",
                "GenericArrayListQueue#add",
                "GenericArrayListQueue#main",
                "LinkedQueue#toString",
                "StackArrayList#push",
                "BSTIterative#main",
                "BSTRecursive#main",
                "BSTRecursiveGeneric#main",
                "BSTRecursiveGeneric#inOrderSort",
                "BinaryTree#bfs",
                "GenericTree#create_treeG",
                "GenericTree#removeleaves",
                "InorderTraversal#iterativeInorder",
                "InorderTraversal#recursiveInorder",
                "LCA#main",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#recursivePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "PreOrderTraversal#recursivePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "TreeRandomNode#inOrder",
                "Node#printLevelOrder",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "SkylineAlgorithm#produceSubSkyLines",
                "StrassenMatrixMultiplication#multiply",
                "FordFulkerson#networkFlow",
                "MatrixChainMultiplication#main",
                "CircularConvolutionFFT#padding",
                "CircularConvolutionFFT#fftCircularConvolution",
                "CollatzConjecture#collatzConjecture",
                "ConvolutionFFT#padding",
                "ConvolutionFFT#convolutionFFT",
                "EulerMethod#eulerFull",
                "FFT#fft",
                "FFT#paddingPowerOfTwo",
                "FFTBluestein#fftBluestein",
                "FibonacciJavaStreams#calculate",
                "Gaussian#valueOfGaussian",
                "JugglerSequence#jugglerSequence",
                "KaprekarNumbers#kaprekarNumberInRange",
                "KaprekarNumbers#isKaprekarNumber",
                "KeithNumber#isKeith",
                "MatrixUtil#main",
                "Mode#mode",
                "PrimeFactorization#pfactors",
                "VampireNumber#splitIntoDigits",
                "MedianOfRunningArray#insert",
                "ThreeSumProblem#BruteForce",
                "ThreeSumProblem#TwoPointer",
                "ThreeSumProblem#Hashmap",
                "WordBoggle#boggleBoard",
                "WordBoggle#explore",
                "WordBoggle#getNeighbors",
                "CRCAlgorithm#generateRandomMess",
                "CRCAlgorithm#divideMessageWithP",
                "Conway#generateList",
                "Graph#dijkstra",
                "Huffman#main",
                "KochSnowflake#main",
                "KochSnowflake#GetKochSnowflake",
                "KochSnowflake#IterationStep",
                "BestFitCPU#fitProcess",
                "WorstFitCPU#fitProcess",
                "FirstFitCPU#fitProcess",
                "NextFit#fitProcess",
                "PasswordGen#generatePassword",
                "PrintAMatrixInSpiralOrder#print",
                "SkylineProblem#run",
                "SkylineProblem#findSkyline",
                "SkylineProblem#mergeSkyline",
                "HammingDistance#getHammingDistanceBetweenBits",
                "SJFScheduling#scheduleProcesses",
                "MonteCarloTreeSearch#addChildNodes",
                "UnionFind#count",
                "BucketSort#bucketSort",
                "CountingSort#sort",
                "MergeSortRecursive#sort",
                "PigeonholeSort#sort",
                "StrandSort#strandSort",
                "StrandSort#merge",
                "TreeSort#doTreeSortArray",
                "TreeSort#doTreeSortList",
                "Isomorphic#checkStrings",
                "WordLadder#ladderLength",
                "CircularBufferTest#getSortedListFrom",
                "KosarajuTest#findStronglyConnectedComps",
                "KosarajuTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "TarjansAlgorithmTest#findStronglyConnectedComps",
                "TarjansAlgorithmTest#findStronglyConnectedCompsShouldGetSingleNodes",
                "SinglyLinkedListTest#createSampleList",
                "SkipListTest#add",
                "SkipListTest#get",
                "TreeTestUtils#createTree",
                "FFTTest#addTest",
                "FFTTest#addFalseTest",
                "FFTTest#fft",
                "GaussianTest#passTest1",
                "FCFSSchedulingTest#addProcessesForFCFS",
                "SJFSchedulingTest#initialisation0",
                "SJFSchedulingTest#initialisation1",
                "SJFSchedulingTest#initialisation2",
                "SJFSchedulingTest#initialisation3",
                "TopologicalSortTest#successTest"
            ],
            "children": [
                "Trie#add",
                "Vector2#add",
                "BSTRecursiveGeneric#add",
                "StrassenMatrixMultiplication#add",
                "DynamicArray#add",
                "BSTRecursive#add",
                "MatrixUtil#add",
                "Complex#add",
                "GenericHeap#add",
                "SkylineProblem#add",
                "SkipListTest#add",
                "Bag#add",
                "SkipList#add",
                "BSTIterative#add",
                "GenericArrayListQueue#add"
            ]
        },
        "LeftistHeap#merge": {
            "parameters": {
                "a": "Node",
                "b": "Node"
            },
            "name": "LeftistHeap#merge",
            "recursive": "false",
            "inComing": 15,
            "outGoing": 0,
            "numberOfCalls": 15,
            "parents": [
                "LeftistHeap#merge",
                "LeftistHeap#insert",
                "LeftistHeap#extract_min",
                "MergeSortedArrayList#main",
                "MergeSortedSinglyLinkedList#main",
                "LazySegmentTree#buildTree",
                "LazySegmentTree#updateRange",
                "LazySegmentTree#getRange",
                "MergeSort#doSort",
                "MergeSortRecursive#mergeSort",
                "MergeSortRecursive#merge",
                "StrandSort#strandSort",
                "TimSort#sort"
            ],
            "children": [
                "MergeSort#merge",
                "StrandSort#merge",
                "MergeSortRecursive#merge",
                "TimSort#merge",
                "MergeSortedArrayList#merge",
                "MergeSortedSinglyLinkedList#merge",
                "LeftistHeap#merge"
            ]
        },
        "LargestRectangle#main": {
            "parameters": {
                "args": "String[]"
            },
            "name": "LargestRectangle#main",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "LargestRectangle#largestRectanglehistogram",
                "HeapElement#equals"
            ]
        },
        "CircularQueue#deQueue": {
            "parameters": {},
            "name": "CircularQueue#deQueue",
            "recursive": "false",
            "inComing": 5,
            "outGoing": 0,
            "numberOfCalls": 5,
            "parents": [
                "CircularQueue#main"
            ],
            "children": [
                "Queue#isEmpty",
                "StackArray#isEmpty",
                "DoublyLinkedList#isEmpty",
                "SinglyLinkedList#isEmpty",
                "LeftistHeap#isEmpty",
                "QueueWithStack#isEmpty",
                "LinkedQueue#isEmpty",
                "LinkedListStack#isEmpty",
                "Deques#isEmpty",
                "NodeStack#isEmpty",
                "Bag#isEmpty",
                "MinPriorityQueue#isEmpty",
                "LinkedList#isEmpty",
                "HashMapCuckooHashing#isEmpty",
                "GenericHeap#isEmpty",
                "StackArrayList#isEmpty",
                "CircularBuffer#isEmpty",
                "CircularBufferTest#isEmpty",
                "CircularQueue#isEmpty",
                "DynamicArray#isEmpty",
                "PriorityQueue#isEmpty"
            ]
        },
        "CreateBinaryTreeFromInorderPreorder#createTree": {
            "parameters": {
                "preStart": "int",
                "size": "int",
                "inStart": "int",
                "inorder": "Integer[]",
                "preorder": "Integer[]"
            },
            "name": "CreateBinaryTreeFromInorderPreorder#createTree",
            "recursive": "false",
            "inComing": 40,
            "outGoing": 0,
            "numberOfCalls": 40,
            "parents": [
                "CreateBinaryTreeFromInorderPreorder#test",
                "CreateBinaryTreeFromInorderPreorder#createTree",
                "CeilInBinarySearchTreeTest#testKeyPresentRootIsCeil",
                "CeilInBinarySearchTreeTest#testKeyPresentLeafIsCeil",
                "CeilInBinarySearchTreeTest#testKeyAbsentRootIsCeil",
                "CeilInBinarySearchTreeTest#testKeyAbsentLeafIsCeil",
                "CeilInBinarySearchTreeTest#testKeyAbsentLeftMostNodeIsCeil",
                "CeilInBinarySearchTreeTest#testKeyAbsentCeilIsNull",
                "CheckTreeIsSymmetricTest#testSingleNodeTree",
                "CheckTreeIsSymmetricTest#testSymmetricTree",
                "CheckTreeIsSymmetricTest#testNonSymmetricTree",
                "InorderTraversalTest#testRecursiveInorder",
                "InorderTraversalTest#testRecursiveInorderNonBalanced",
                "LevelOrderTraversalTest#testSingleNodeTree",
                "LevelOrderTraversalTest#testLevelOrderTraversalCompleteTree",
                "LevelOrderTraversalTest#testLevelOrderTraversalDifferentHeight",
                "PostOrderTraversalTest#testPostOrder",
                "PostOrderTraversalTest#testPostOrderNonBalanced",
                "PreOrderTraversalTest#testRecursivePreOrder",
                "PreOrderTraversalTest#testRecursivePreOrderNonBalanced",
                "SameTreesCheckTest#testOneRootIsNull",
                "SameTreesCheckTest#testSingleNodeTreesAreSame",
                "SameTreesCheckTest#testSameTreesIsSuccessful",
                "SameTreesCheckTest#testSameTreesFails",
                "SameTreesCheckTest#testTreesWithDifferentStructure",
                "ValidBSTOrNotTest#testOneNode",
                "ValidBSTOrNotTest#testBinaryTreeIsBST",
                "ValidBSTOrNotTest#testBinaryTreeWithDuplicatedNodesIsNotBST",
                "ValidBSTOrNotTest#testBinaryTreeIsNotBST",
                "VerticalOrderTraversalTest#testSingleNodeTree",
                "VerticalOrderTraversalTest#testVerticalTraversalCompleteTree",
                "VerticalOrderTraversalTest#testVerticalTraversalDifferentHeight",
                "ZigzagTraversalTest#testSingleNodeTree",
                "ZigzagTraversalTest#testZigzagTraversalCompleteTree",
                "ZigzagTraversalTest#testZigzagTraversalDifferentHeight"
            ],
            "children": [
                "TreeTestUtils#createTree",
                "CreateBinaryTreeFromInorderPreorder#createTree"
            ]
        },
        "PriorityQueue#isEmpty": {
            "parameters": {},
            "name": "PriorityQueue#isEmpty",
            "recursive": "false",
            "inComing": 117,
            "outGoing": 0,
            "numberOfCalls": 117,
            "parents": [
                "KnightsTour#solve",
                "NQueens#placeQueens",
                "CircularBuffer#get",
                "LRUCache#addNewEntry",
                "MRUCache#addNewEntry",
                "A_Star#aStar",
                "TopologicalSort#topSortOrder",
                "Kosaraju#findStronglyConnectedComponents",
                "Kruskal#kruskal",
                "AdjacencyMatrixGraph#breadthFirstOrder",
                "LinkedList#insert",
                "LinkedList#findKey",
                "LinkedList#delete",
                "HashMapCuckooHashing#deleteKeyFromHashTable",
                "HashMapCuckooHashing#findKeyInTable",
                "LeftistHeap#extract_min",
                "MaxHeap#deleteElement",
                "MinHeap#deleteElement",
                "LinkOperations#insertHead",
                "LinkOperations#insertTail",
                "Merge_K_SortedLinkedlist#mergeKList",
                "SinglyLinkedList#main",
                "CircularQueue#enQueue",
                "CircularQueue#deQueue",
                "CircularQueue#peek",
                "CircularQueue#main",
                "GenericArrayListQueue#hasElements",
                "LinkedQueue#dequeue",
                "LinkedQueue#peekFront",
                "LinkedQueue#peekRear",
                "LinkedQueue#main",
                "PriorityQueue#remove",
                "Queue#remove",
                "BalancedBrackets#isBalanced",
                "DecimalToAnyUsingStack#convert",
                "InfixToPostfix#infix2PostFix",
                "LargestRectangle#largestRectanglehistogram",
                "NextGraterElement#findNextGreaterElements",
                "NodeStack#push",
                "PostfixToInfix#getPostfixToInfix",
                "ReverseStack#main",
                "ReverseStack#reverseStack",
                "ReverseStack#insertAtBottom",
                "StackArray#main",
                "StackArray#pop",
                "StackArray#peek",
                "StackArrayList#main",
                "StackArrayList#pop",
                "StackArrayList#isEmpty",
                "StackArrayList#peek",
                "BinaryTree#bfs",
                "CheckIfBinaryTreeBalanced#isBalancedIterative",
                "GenericTree#levelorder",
                "InorderTraversal#iterativeInorder",
                "LevelOrderTraversal#traverse",
                "PostOrderTraversal#iterativePostOrder",
                "PreOrderTraversal#iterativePreOrder",
                "Tree#printTopView",
                "SameTreesCheck#check",
                "VerticalOrderTraversal#verticalTraversal",
                "ZigzagTraversal#traverse",
                "FordFulkerson#networkFlow",
                "FibonacciJavaStreams#calculate",
                "FibonacciJavaStreams#main",
                "MinimizingLateness#main",
                "CRCAlgorithm#divideMessageWithP",
                "CountWords#wordCount",
                "CountWords#secondaryWordCount",
                "Graph#dijkstra",
                "QueueWithStack#remove",
                "QueueWithStack#peekFront",
                "QueueWithStack#isEmpty",
                "QueueUsingTwoStacks#main",
                "RemoveDuplicateFromString#removeDuplicate",
                "ReverseStackUsingRecursion#main",
                "ReverseStackUsingRecursion#reverseUsingRecursion",
                "ReverseStackUsingRecursion#insertAtEnd",
                "SkylineProblem#mergeSkyline",
                "SJFScheduling#findShortestJob",
                "BreadthFirstSearch#search",
                "StrandSort#merge",
                "Graph#addEdge",
                "ReverseString#reverse2",
                "ReverseStringRecursive#reverse",
                "WordLadder#ladderLength",
                "CircularBufferTest#isEmpty",
                "LeftistHeapTest#testLeftistHeap",
                "SinglyLinkedListTest#clear",
                "PriorityQueuesTest#testPQExtra",
                "PrimeFactorizationTest#testpFactorsMustReturnEmptyList",
                "SJFSchedulingTest#schedulingOf_nothing"
            ],
            "children": []
        },
        "LevelOrderTraversalHelper#height": {
            "parameters": {
                "root": "BinaryTree.Node"
            },
            "name": "LevelOrderTraversalHelper#height",
            "recursive": "false",
            "inComing": 26,
            "outGoing": 0,
            "numberOfCalls": 26,
            "parents": [
                "null#null",
                "AVLSimple#insert",
                "AVLSimple#bf",
                "AVLSimple#rightRotate",
                "AVLSimple#leftRotate",
                "AVLTree#rebalance",
                "AVLTree#setBalance",
                "AVLTree#reheight",
                "GenericTree#heightcall",
                "GenericTree#height",
                "LevelOrderTraversalHelper#printLevelOrder",
                "LevelOrderTraversalHelper#height"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "HeightStrategy#height",
                "BernoulliHeightStrategy#height",
                "FindMaxRecursion#max",
                "AVLTree#height",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "GenericTree#max",
                "BucketSort#max",
                "GenericTree#height",
                "AVLSimple#height",
                "LevelOrderTraversalHelper#height"
            ]
        },
        "SimpleTreeNode#setLeftNode": {
            "parameters": {
                "leftNode": "SimpleTreeNode\u003cE\u003e"
            },
            "name": "SimpleTreeNode#setLeftNode",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": []
        },
        "Gaussian#gaussian": {
            "parameters": {
                "matrix": "ArrayList\u003cDouble\u003e",
                "mat_size": "int"
            },
            "name": "Gaussian#gaussian",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "InverseOfMatrix#invert",
                "GaussianTest#passTest1"
            ],
            "children": [
                "GenericHashMapUsingArray#get",
                "CursorLinkedList#get",
                "MRUCache#get",
                "LFSR#get",
                "LazySegmentTreeTest#get",
                "Map#get",
                "DynamicArray#get",
                "CircularBuffer#get",
                "GenericHashMapUsingArrayList#get",
                "SkipListTest#get",
                "SkipList#get",
                "Gaussian#valueOfGaussian",
                "CircularBufferTest#get",
                "GenericHeap#get",
                "Gaussian#gaussianElimination",
                "LinearProbingHashMap#get",
                "LRUCache#get",
                "LFUCache#get"
            ]
        },
        "StringCompression#compress": {
            "parameters": {
                "input": "String"
            },
            "name": "StringCompression#compress",
            "recursive": "false",
            "inComing": 1,
            "outGoing": 0,
            "numberOfCalls": 1,
            "parents": [
                "StringCompressionTest#stringCompressionTest"
            ],
            "children": [
                "StringCompression#appendCount"
            ]
        },
        "BruteForceKnapsack#knapSack": {
            "parameters": {
                "val": "int[]",
                "W": "int",
                "wt": "int[]",
                "n": "int"
            },
            "name": "BruteForceKnapsack#knapSack",
            "recursive": "false",
            "inComing": 9,
            "outGoing": 0,
            "numberOfCalls": 9,
            "parents": [
                "BruteForceKnapsack#knapSack",
                "BruteForceKnapsack#main",
                "DyanamicProgrammingKnapsack#main",
                "Knapsack#main",
                "KnapsackMemoizationTest#Test1",
                "KnapsackMemoizationTest#Test2",
                "KnapsackMemoizationTest#Test3"
            ],
            "children": [
                "DyanamicProgrammingKnapsack#max",
                "DyanamicProgrammingKnapsack#knapSack",
                "FindMaxRecursion#max",
                "MaxValue#max",
                "BruteForceKnapsack#max",
                "KnapsackMemoization#knapSack",
                "Knapsack#knapSack",
                "GenericTree#max",
                "BucketSort#max",
                "BruteForceKnapsack#knapSack"
            ]
        },
        "PronicNumberTest#testForPronicNumber": {
            "parameters": {},
            "name": "PronicNumberTest#testForPronicNumber",
            "recursive": "false",
            "inComing": 0,
            "outGoing": 0,
            "numberOfCalls": 0,
            "parents": [],
            "children": [
                "PronicNumber#isPronic"
            ]
        },
        "CountFriendsPairing#countFriendsPairing": {
            "parameters": {
                "a": "int[]",
                "n": "int"
            },
            "name": "CountFriendsPairing#countFriendsPairing",
            "recursive": "false",
            "inComing": 8,
            "outGoing": 0,
            "numberOfCalls": 8,
            "parents": [
                "CountFriendsPairingTest#testForOneElement",
                "CountFriendsPairingTest#testForTwoElements",
                "CountFriendsPairingTest#testForThreeElements",
                "CountFriendsPairingTest#testForFourElements",
                "CountFriendsPairingTest#testForFiveElements",
                "CountFriendsPairingTest#testForSixElements",
                "CountFriendsPairingTest#testForSevenElements",
                "CountFriendsPairingTest#testForEightElements"
            ],
            "children": []
        },
        "TreeNode#getDepth": {
            "parameters": {},
            "name": "TreeNode#getDepth",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "null#null",
                "TreeNode#setParent"
            ],
            "children": []
        },
        "Perimeter#perimeterIrregularPolygon": {
            "parameters": {
                "side3": "float",
                "sides": "float",
                "side2": "float",
                "side1": "float"
            },
            "name": "Perimeter#perimeterIrregularPolygon",
            "recursive": "false",
            "inComing": 2,
            "outGoing": 0,
            "numberOfCalls": 2,
            "parents": [
                "PerimeterTest#testcase7",
                "PerimeterTest#testcase8"
            ],
            "children": []
        }
    }
}